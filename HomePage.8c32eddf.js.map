{"mappings":"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","sources":["<anon>","src/pages/HomePage.jsx","src/components/Board/ScrumBoard.jsx","src/components/Tasks/TaskCard.jsx","src/components/UI/Button.jsx","src/components/UI/Modal.jsx","src/utils/dateUtils.jsx","src/components/Tasks/AddTaskForm.jsx","src/utils/filterUtils.jsx","src/components/Tasks/TaskList.jsx","src/utils/sortUtils.jsx","src/components/Members/MemberList.jsx","src/components/Members/AddMemberForm.jsx","src/components/UI/Notification.jsx","src/components/Admin/DatabaseSeeder.jsx","src/firebase/seedDatabase.jsx","src/components/UI/Icons.jsx","src/hooks/useMembers.jsx","src/hooks/useOptimizedTasks.jsx"],"sourcesContent":["\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequiredb09\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"kMUbH\", function(module, exports) {\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"default\", () => $dfbd1ebef92afc74$export$2e2bcd8739ae039);\n// src/pages/HomePage.jsx\n/**\n * Huvudsidan för Scrum Board 🏠\n *\n * Styr hela appen:\n * - Firebase-kommunikation via hooks\n * - Uppgifts- och medlemshantering\n * - Navigation mellan Board, Uppgifter och Team\n * - Notifikationer för användarfeedback\n */ \nvar $9HU4Y = parcelRequire(\"9HU4Y\");\n\nvar $k4OSS = parcelRequire(\"k4OSS\");\n\nvar $1SOoW = parcelRequire(\"1SOoW\");\n\nvar $8ecrP = parcelRequire(\"8ecrP\");\n\nvar $ly2Lu = parcelRequire(\"ly2Lu\");\n\nvar $iDNSZ = parcelRequire(\"iDNSZ\");\n\nvar $5DAyF = parcelRequire(\"5DAyF\");\n\nvar $kDidi = parcelRequire(\"kDidi\");\n\nvar $52Ey0 = parcelRequire(\"52Ey0\");\n\nvar $2YcLf = parcelRequire(\"2YcLf\");\n\nvar $1NlQQ = parcelRequire(\"1NlQQ\");\n\nvar $aHNTv = parcelRequire(\"aHNTv\");\n\nvar $7TlIR = parcelRequire(\"7TlIR\");\n\n\nconst $dfbd1ebef92afc74$var$HomePage = ()=>{\n    // Håller koll på vilken flik som är aktiv och vad som händer\n    const [activeTab, setActiveTab] = (0, $k4OSS.useState)(\"board\"); // Vilken vy ser vi just nu?\n    const [notification, setNotification] = (0, $k4OSS.useState)(null); // Meddelanden till användaren\n    // Mina autentiseringsverktyg - vem är inloggad och hur loggar vi ut?\n    const { currentUser: currentUser, logout: logout, deleteCurrentUser: deleteCurrentUser } = (0, $7TlIR.useAuth)();\n    const navigate = (0, $1SOoW.useNavigate)();\n    /**\n   * Mina tre favoritområden inom webbutveckling 💻\n   *\n   * Som en utvecklare ser jag webbutveckling i tre delar:\n   * - Frontend: Det vackra som användarna ser och klickar på\n   * - Backend: Den smarta logiken som gör att allt fungerar\n   * - UX: Konsten att göra allt intuitivt och användarvänligt\n   */ const myTeamSkillAreas = [\n        \"frontend\",\n        \"backend\",\n        \"ux\"\n    ];\n    /**\n   * Hook för teamhantering\n   *\n   * Hanterar all data och funktionalitet relaterad till teammedlemmar:\n   * - Medlemslista\n   * - Laddningsstatus\n   * - Felhantering\n   * - CRUD-operationer för medlemmar\n   */ const { members: members, loading: membersLoading, error: membersError, addMember: addMember, deleteMember: deleteMember } = (0, $1NlQQ.default)();\n    /**\n   * Optimerad uppgiftshantering\n   *\n   * Förbättringar: memoization, query-optimering, caching.\n   */ const { tasks: tasks, loading: tasksLoading, error: tasksError, addTask: addTask, deleteTask: deleteTask, updateTaskStatus: updateTaskStatus, assignTask: assignTask } = (0, $aHNTv.default)({\n        realtime: true,\n        limit: 100\n    });\n    /**\n   * Min personliga notifikationsassistent\n   *\n   * Som en vänlig kollega som tipsar om vad som händer i appen.\n   * Dyker upp, säger sitt, och försvinner diskret efter 5 sekunder.\n   *\n   * @param {string} message - Vad som ska sägas till användaren\n   * @param {string} type - Känslan i meddelandet (info, success, error)\n   */ const tellUserWhatHappened = (message, type = \"info\")=>{\n        // Visa meddelandet för användaren\n        setNotification({\n            message: message,\n            type: type\n        });\n        // Försvinn automatiskt så användaren slipper stänga manuellt\n        setTimeout(()=>{\n            setNotification(null);\n        }, 5000);\n    };\n    /**\n   * Hanterar tillägg av teammedlem\n   *\n   * Lägger till en ny medlem och visar feedback om resultatet.\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   *\n   * @param {Object} memberData - Medlemsdata från formuläret\n   */ const welcomeNewTeammate = (0, $k4OSS.useCallback)(async (memberData)=>{\n        // Lägg till den nya personen i teamet\n        const result = await addMember(memberData);\n        // Berätta för användaren hur det gick\n        if (result.success) tellUserWhatHappened(`V\\xe4lkommen ${memberData.name} till teamet! \\u{1F389}`, \"success\");\n        else tellUserWhatHappened(`Kunde inte l\\xe4gga till ${memberData.name}: ${result.error}`, \"error\");\n    }, [\n        addMember\n    ]);\n    /**\n   * Hanterar borttagning av teammedlem\n   *\n   * Tar bort en medlem och visar feedback om resultatet.\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   *\n   * @param {string} memberId - ID för medlemmen som ska tas bort\n   */ const sayGoodbyeToTeammate = (0, $k4OSS.useCallback)(async (memberId)=>{\n        // Ta bort personen från teamet\n        const result = await deleteMember(memberId);\n        // Meddela användaren vad som hände\n        if (result.success) tellUserWhatHappened(\"Teammedlem har l\\xe4mnat projektet.\", \"success\");\n        else tellUserWhatHappened(`Kunde inte ta bort teammedlem: ${result.error}`, \"error\");\n    }, [\n        deleteMember\n    ]);\n    /**\n   * Hanterar tillägg av uppgift\n   *\n   * Lägger till en ny uppgift och visar feedback om resultatet.\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   *\n   * @param {Object} taskData - Uppgiftsdata från formuläret\n   */ const createNewWorkItem = (0, $k4OSS.useCallback)(async (taskData)=>{\n        // Skapa en ny uppgift i systemet\n        const result = await addTask(taskData);\n        // Berätta för användaren vad som hände\n        if (result.success) tellUserWhatHappened(`Ny uppgift \"${taskData.title}\" \\xe4r redo att tacklas! \\u{1F4AA}`, \"success\");\n        else tellUserWhatHappened(`Kunde inte skapa uppgift: ${result.error}`, \"error\");\n    }, [\n        addTask\n    ]);\n    /**\n   * Hanterar statusändring för uppgift\n   *\n   * Uppdaterar en uppgifts status och visar feedback om resultatet.\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   *\n   * @param {string} taskId - Uppgiftens ID\n   * @param {string} newStatus - Ny status (Nytt/Pågående/Klar)\n   */ const moveTaskToNewColumn = (0, $k4OSS.useCallback)(async (taskId, newStatus)=>{\n        // Flytta uppgiften till rätt kolumn på tavlan\n        const result = await updateTaskStatus(taskId, newStatus);\n        // Låt användaren veta vad som hände\n        if (result.success) tellUserWhatHappened(`Uppgift flyttad till \"${newStatus}\" - bra jobbat! \\u{1F3AF}`, \"success\");\n        else tellUserWhatHappened(`Kunde inte flytta uppgift: ${result.error}`, \"error\");\n    }, [\n        updateTaskStatus\n    ]);\n    /**\n   * Hanterar tilldelning av uppgift\n   *\n   * Tilldelar en uppgift till en teammedlem eller tar bort tilldelning.\n   * Visar feedback om resultatet.\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   *\n   * @param {string} taskId - Uppgiftens ID\n   * @param {string|null} memberId - Medlemmens ID eller null\n   * @param {string|null} memberName - Medlemmens namn för visning\n   */ const assignWorkToTeammate = (0, $k4OSS.useCallback)(async (taskId, memberId, memberName)=>{\n        // Ge uppgiften till rätt person i teamet\n        const result = await assignTask(taskId, memberId, memberName);\n        // Berätta vad som hände\n        if (result.success) {\n            if (memberId) tellUserWhatHappened(`${memberName} tar nu hand om uppgiften! \\u{1F44D}`, \"success\");\n            else tellUserWhatHappened(\"Uppgiften \\xe4r nu ledig f\\xf6r vem som helst.\", \"info\");\n        } else tellUserWhatHappened(`Kunde inte tilldela uppgift: ${result.error}`, \"error\");\n    }, [\n        assignTask\n    ]);\n    /**\n   * Hanterar borttagning av uppgift\n   *\n   * Tar bort en uppgift permanent från databasen och\n   * visar feedback om resultatet.\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   *\n   * @param {string} taskId - Uppgiftens ID\n   */ const removeTaskCompletely = (0, $k4OSS.useCallback)(async (taskId)=>{\n        // Ta bort uppgiften helt från systemet\n        const result = await deleteTask(taskId);\n        // Meddela användaren resultatet\n        if (result.success) tellUserWhatHappened(\"Uppgift borttagen - som om den aldrig funnits! \\u2728\", \"success\");\n        else tellUserWhatHappened(`Kunde inte ta bort uppgift: ${result.error}`, \"error\");\n    }, [\n        deleteTask\n    ]);\n    /**\n   * Hanterar utloggning\n   *\n   * Städar upp efter anonyma användare och skickar alla tillbaka till login.\n   */ const handleLogout = async ()=>{\n        try {\n            // För anonyma användare: ta bort dem från Firebase först\n            if (currentUser?.isAnonymous) {\n                console.log(\"St\\xe4dar upp anonym anv\\xe4ndare:\", currentUser.uid);\n                try {\n                    const deleteResult = await deleteCurrentUser();\n                    if (deleteResult.success) {\n                        console.log(\"Anv\\xe4ndare borttagen! \\uD83E\\uDDF9\");\n                        navigate(\"/login\");\n                        return;\n                    } else // Om borttagning misslyckades, fortsätt med vanlig utloggning\n                    console.warn(\"Kunde inte ta bort anv\\xe4ndaren:\", deleteResult.error);\n                } catch (error) {\n                    console.error(\"Fel vid st\\xe4dning:\", error);\n                }\n            }\n            // Vanlig utloggning\n            const result = await logout();\n            if (result.success) navigate(\"/login\");\n            else tellUserWhatHappened(\"Kunde inte logga ut. F\\xf6rs\\xf6k igen.\", \"error\");\n        } catch (error) {\n            tellUserWhatHappened(\"Ett fel uppstod vid utloggning.\", \"error\");\n        }\n    };\n    /**\n   * Visar felmeddelanden vid datahämtningsfel\n   *\n   * Övervakar felstatus och visar notifikationer när\n   * fel uppstår vid hämtning av data.\n   */ (0, $k4OSS.useEffect)(()=>{\n        // Berätta för användaren om något gick fel med teamdata\n        if (membersError) tellUserWhatHappened(`Problem med att h\\xe4mta teammedlemmar: ${membersError}`, \"error\");\n        // Berätta för användaren om något gick fel med uppgiftsdata\n        if (tasksError) tellUserWhatHappened(`Problem med att h\\xe4mta uppgifter: ${tasksError}`, \"error\");\n    }, [\n        membersError,\n        tasksError\n    ]); // Körs när fel uppstår\n    /**\n   * Renderar applikationens huvudgränssnitt\n   *\n   * Bygger upp UI med header, navigation, innehåll och notifikationer\n   */ return /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n        className: \"home-page\",\n        children: [\n            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"header\", {\n                className: \"app-header\",\n                children: [\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"h1\", {\n                        children: \"Scrum Board\"\n                    }),\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                        className: \"user-controls\",\n                        children: currentUser?.isAnonymous ? /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                            className: \"user-profile\",\n                            children: [\n                                /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                                    className: \"user-avatar\",\n                                    children: /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $2YcLf.UserIcon), {\n                                        size: 18,\n                                        color: \"#3b82f6\"\n                                    })\n                                }),\n                                /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                                    className: \"user-info\",\n                                    children: [\n                                        /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                            className: \"user-name\",\n                                            children: \"Anonym anv\\xe4ndare\"\n                                        }),\n                                        /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                            className: \"user-status\",\n                                            children: \"Tempor\\xe4r session\"\n                                        })\n                                    ]\n                                }),\n                                /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $52Ey0.default), {\n                                    onClick: handleLogout,\n                                    variant: \"outline\",\n                                    size: \"small\",\n                                    className: \"logout-button\",\n                                    iconRight: /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $2YcLf.LogoutIcon), {\n                                        size: 16\n                                    }),\n                                    \"aria-label\": \"Logga ut\",\n                                    children: \"Avsluta\"\n                                })\n                            ]\n                        }) : /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                            className: \"user-profile\",\n                            children: [\n                                /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                                    className: \"user-avatar\",\n                                    children: /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $2YcLf.UserIcon), {\n                                        size: 18,\n                                        color: \"#3b82f6\"\n                                    })\n                                }),\n                                /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                                    className: \"user-info\",\n                                    children: [\n                                        /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                            className: \"user-name\",\n                                            children: currentUser?.email\n                                        }),\n                                        /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                            className: \"user-status\",\n                                            children: \"Inloggad\"\n                                        })\n                                    ]\n                                }),\n                                /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $52Ey0.default), {\n                                    onClick: handleLogout,\n                                    variant: \"outline\",\n                                    size: \"small\",\n                                    className: \"logout-button\",\n                                    iconRight: /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $2YcLf.LogoutIcon), {\n                                        size: 16\n                                    }),\n                                    \"aria-label\": \"Logga ut\",\n                                    children: \"Logga ut\"\n                                })\n                            ]\n                        })\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"nav\", {\n                className: \"app-tabs\",\n                \"aria-label\": \"Application Navigation\",\n                children: [\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"button\", {\n                        className: `tab-button ${activeTab === \"board\" ? \"active\" : \"\"}`,\n                        onClick: ()=>setActiveTab(\"board\"),\n                        \"aria-selected\": activeTab === \"board\",\n                        role: \"tab\",\n                        children: \"Board\"\n                    }),\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"button\", {\n                        className: `tab-button ${activeTab === \"tasks\" ? \"active\" : \"\"}`,\n                        onClick: ()=>setActiveTab(\"tasks\"),\n                        \"aria-selected\": activeTab === \"tasks\",\n                        role: \"tab\",\n                        children: \"Uppgifter\"\n                    }),\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"button\", {\n                        className: `tab-button ${activeTab === \"members\" ? \"active\" : \"\"}`,\n                        onClick: ()=>setActiveTab(\"members\"),\n                        \"aria-selected\": activeTab === \"members\",\n                        role: \"tab\",\n                        children: \"Team\"\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"main\", {\n                className: \"app-content\",\n                role: \"tabpanel\",\n                \"aria-live\": \"polite\",\n                children: [\n                    activeTab === \"board\" && /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $8ecrP.default), {\n                        tasks: tasks,\n                        members: members,\n                        onAddTask: createNewWorkItem,\n                        onUpdateTaskStatus: moveTaskToNewColumn,\n                        onAssignTask: assignWorkToTeammate,\n                        onDeleteTask: removeTaskCompletely,\n                        categories: myTeamSkillAreas,\n                        isLoading: tasksLoading || membersLoading\n                    }),\n                    activeTab === \"tasks\" && /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $ly2Lu.default), {\n                        tasks: tasks,\n                        members: members,\n                        onAddTask: createNewWorkItem,\n                        onUpdateTaskStatus: moveTaskToNewColumn,\n                        onAssignTask: assignWorkToTeammate,\n                        onDeleteTask: removeTaskCompletely,\n                        categories: myTeamSkillAreas,\n                        isLoading: tasksLoading || membersLoading\n                    }),\n                    activeTab === \"members\" && /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $iDNSZ.default), {\n                        members: members,\n                        onAddMember: welcomeNewTeammate,\n                        onDeleteMember: sayGoodbyeToTeammate,\n                        roles: myTeamSkillAreas,\n                        isLoading: membersLoading\n                    })\n                ]\n            }),\n            notification && /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $5DAyF.default), {\n                message: notification.message,\n                type: notification.type,\n                onClose: ()=>setNotification(null)\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $kDidi.default), {\n                onSuccess: tellUserWhatHappened\n            })\n        ]\n    });\n};\nvar $dfbd1ebef92afc74$export$2e2bcd8739ae039 = $dfbd1ebef92afc74$var$HomePage;\n\n});\nparcelRegister(\"8ecrP\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $cf0d2c193af39db5$export$2e2bcd8739ae039);\n// src/components/Board/ScrumBoard.jsx\n/**\n * Min digitala kanban-tavla - hjärtat i hela appen!\n *\n * Som en fysisk whiteboard fast bättre - här ser du alla uppgifter\n * sorterade i tre kolumner som visar exakt var allt befinner sig.\n * Uppdateras live så alla i teamet ser samma sak samtidigt.\n *\n * Varför jag älskar den här tavlan:\n * - Ser direkt vad som händer i projektet (inga överraskningar!)\n * - Upptäcker flaskhalsar innan de blir problem\n * - Perfekt för morgonmöten - \"vad gör vi idag?\"\n * - Alla förstår läget utan långa förklaringar\n */ \nvar $9HU4Y = parcelRequire(\"9HU4Y\");\n\nvar $k4OSS = parcelRequire(\"k4OSS\");\n\nvar $OgeLm = parcelRequire(\"OgeLm\");\n\nvar $52Ey0 = parcelRequire(\"52Ey0\");\n\nvar $g8dWu = parcelRequire(\"g8dWu\");\n\nvar $fs6dk = parcelRequire(\"fs6dk\");\n\nvar $lonA3 = parcelRequire(\"lonA3\");\n\nconst $cf0d2c193af39db5$var$ScrumBoard = ({ tasks: tasks, members: members, onAddTask: onAddTask, onUpdateTaskStatus: onUpdateTaskStatus, onAssignTask: onAssignTask, onDeleteTask: onDeleteTask, categories: categories = [\n    \"frontend\",\n    \"backend\",\n    \"ux\"\n], isLoading: isLoading = false })=>{\n    const [showingAddTaskForm, setShowingAddTaskForm] = (0, $k4OSS.useState)(false);\n    /**\n   * Sorterar uppgifter i kolumner\n   *\n   * OPTIMERING: Memoizerad för bättre prestanda\n   */ const { freshTasks: freshTasks, ongoingWork: ongoingWork, finishedStuff: finishedStuff } = (0, $k4OSS.useMemo)(()=>{\n        // Ta bort arkiverade uppgifter\n        const activeWorkItems = (0, $lonA3.filterOutArchived)(tasks);\n        // Sortera i tre kolumner\n        return {\n            freshTasks: (0, $lonA3.filterByStatus)(activeWorkItems, \"Nytt\"),\n            ongoingWork: (0, $lonA3.filterByStatus)(activeWorkItems, \"P\\xe5g\\xe5ende\"),\n            finishedStuff: (0, $lonA3.filterByStatus)(activeWorkItems, \"Klar\")\n        };\n    }, [\n        tasks\n    ]);\n    // När någon skapar en ny uppgift\n    // OPTIMERING: Memoizerad callback för bättre prestanda\n    const createTaskAndCloseForm = (0, $k4OSS.useCallback)((taskData)=>{\n        onAddTask(taskData); // Skicka upp till huvudappen\n        setShowingAddTaskForm(false); // Stäng formuläret\n    }, [\n        onAddTask\n    ]);\n    return /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n        className: \"scrum-board-container\",\n        children: [\n            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                className: \"board-header\",\n                children: [\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"h2\", {\n                        children: \"Scrum Board\"\n                    }),\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $52Ey0.default), {\n                        onClick: ()=>setShowingAddTaskForm(true),\n                        variant: \"primary\",\n                        children: \"L\\xe4gg till uppgift\"\n                    })\n                ]\n            }),\n            isLoading ? /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                className: \"loading-indicator\",\n                children: /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                    children: \"Laddar uppgifter\"\n                })\n            }) : /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                className: \"board-columns\",\n                children: [\n                    /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                        className: \"board-column\",\n                        children: [\n                            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                                className: \"column-header\",\n                                children: [\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"h3\", {\n                                        children: \"Nya uppgifter\"\n                                    }),\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                        className: \"task-count\",\n                                        children: freshTasks.length\n                                    })\n                                ]\n                            }),\n                            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                                className: \"column-content\",\n                                children: freshTasks.length === 0 ? /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                                    className: \"empty-column\",\n                                    children: [\n                                        /*#__PURE__*/ (0, $9HU4Y.jsx)(\"p\", {\n                                            children: \"Inga nya uppgifter\"\n                                        }),\n                                        /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $52Ey0.default), {\n                                            onClick: ()=>setShowingAddTaskForm(true),\n                                            variant: \"secondary\",\n                                            size: \"small\",\n                                            children: \"L\\xe4gg till uppgift\"\n                                        })\n                                    ]\n                                }) : freshTasks.map((task)=>/*#__PURE__*/ (0, $9HU4Y.jsx)((0, $OgeLm.default), {\n                                        task: task,\n                                        members: members,\n                                        onUpdateStatus: onUpdateTaskStatus,\n                                        onAssignTask: onAssignTask,\n                                        onDeleteTask: onDeleteTask\n                                    }, task.id))\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                        className: \"board-column\",\n                        children: [\n                            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                                className: \"column-header\",\n                                children: [\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"h3\", {\n                                        children: \"P\\xe5g\\xe5ende\"\n                                    }),\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                        className: \"task-count\",\n                                        children: ongoingWork.length\n                                    })\n                                ]\n                            }),\n                            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                                className: \"column-content\",\n                                children: ongoingWork.length === 0 ? /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                                    className: \"empty-column\",\n                                    children: /*#__PURE__*/ (0, $9HU4Y.jsx)(\"p\", {\n                                        children: \"Inga p\\xe5g\\xe5ende uppgifter\"\n                                    })\n                                }) : ongoingWork.map((task)=>/*#__PURE__*/ (0, $9HU4Y.jsx)((0, $OgeLm.default), {\n                                        task: task,\n                                        members: members,\n                                        onUpdateStatus: onUpdateTaskStatus,\n                                        onAssignTask: onAssignTask,\n                                        onDeleteTask: onDeleteTask\n                                    }, task.id))\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                        className: \"board-column\",\n                        children: [\n                            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                                className: \"column-header\",\n                                children: [\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"h3\", {\n                                        children: \"Klara\"\n                                    }),\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                        className: \"task-count\",\n                                        children: finishedStuff.length\n                                    })\n                                ]\n                            }),\n                            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                                className: \"column-content\",\n                                children: finishedStuff.length === 0 ? /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                                    className: \"empty-column\",\n                                    children: /*#__PURE__*/ (0, $9HU4Y.jsx)(\"p\", {\n                                        children: \"Inga klara uppgifter\"\n                                    })\n                                }) : finishedStuff.map((task)=>/*#__PURE__*/ (0, $9HU4Y.jsx)((0, $OgeLm.default), {\n                                        task: task,\n                                        members: members,\n                                        onUpdateStatus: onUpdateTaskStatus,\n                                        onAssignTask: onAssignTask,\n                                        onDeleteTask: onDeleteTask\n                                    }, task.id))\n                            })\n                        ]\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $g8dWu.default), {\n                isOpen: showingAddTaskForm,\n                onClose: ()=>setShowingAddTaskForm(false),\n                title: \"L\\xe4gg till uppgift\",\n                children: /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $fs6dk.default), {\n                    onAddTask: createTaskAndCloseForm,\n                    categories: categories\n                })\n            })\n        ]\n    });\n};\nvar // OPTIMERING: Memoizerad komponent för att undvika onödiga re-renders\n$cf0d2c193af39db5$export$2e2bcd8739ae039 = /*#__PURE__*/ (0, $k4OSS.memo)($cf0d2c193af39db5$var$ScrumBoard);\n\n});\nparcelRegister(\"OgeLm\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $896c849eaad832f5$export$2e2bcd8739ae039);\n// src/components/Tasks/TaskCard.jsx\n\nvar $9HU4Y = parcelRequire(\"9HU4Y\");\n\nvar $k4OSS = parcelRequire(\"k4OSS\");\n\nvar $52Ey0 = parcelRequire(\"52Ey0\");\n\nvar $g8dWu = parcelRequire(\"g8dWu\");\n\nvar $hGPrg = parcelRequire(\"hGPrg\");\n\n/**\n * Uppgiftskort - visuell representation av en uppgift\n *\n * Visar en uppgift som ett interaktivt kort med all relevant information.\n * Fungerar som en digital post-it med möjlighet att:\n * - Visa uppgiftens status, kategori och tilldelning\n * - Öppna detaljvy med fullständig information\n * - Ändra status (flytta mellan kolumner)\n * - Tilldela uppgiften till rätt teammedlem\n * - Ta bort uppgiften från systemet\n *\n * @param {Object} task - Uppgiftsdata att visa\n * @param {Array} members - Tillgängliga teammedlemmar\n * @param {Function} onUpdateStatus - Callback för statusändring\n * @param {Function} onAssignTask - Callback för tilldelning\n * @param {Function} onDeleteTask - Callback för borttagning\n */ const $896c849eaad832f5$var$TaskCard = ({ task: task, members: members, onUpdateStatus: onUpdateStatus, onAssignTask: onAssignTask, onDeleteTask: onDeleteTask })=>{\n    // States för modal och tilldelning\n    const [showingTaskDetails, setShowingTaskDetails] = (0, $k4OSS.useState)(false);\n    const [askingForDeleteConfirmation, setAskingForDeleteConfirmation] = (0, $k4OSS.useState)(false);\n    const [chosenTeammateId, setChosenTeammateId] = (0, $k4OSS.useState)(\"\");\n    /**\n   * Hittar personer med rätt kompetens\n   *\n   * OPTIMERING: Memoizerad för bättre prestanda\n   */ const qualifiedTeammates = (0, $k4OSS.useMemo)(()=>members.filter((teammate)=>teammate.role === task.category), [\n        members,\n        task.category\n    ]);\n    /**\n   * Min färgkodning för var uppgiften befinner sig\n   *\n   * Som trafikljus för arbetsflödet - blått för \"vänta\",\n   * orange för \"kör\", grönt för \"klart\". Enkelt att förstå!\n   */ const getWorkflowColor = (status)=>{\n        switch(status.toLowerCase()){\n            case \"nytt\":\n                return \"status-new\";\n            case \"p\\xe5g\\xe5ende\":\n                return \"status-in-progress\";\n            case \"klar\":\n                return \"status-completed\";\n            default:\n                return \"\";\n        }\n    };\n    /**\n   * Min färgkodning för olika typer av arbete\n   *\n   * Varje kompetensområde får sin egen färg så man snabbt\n   * ser vad som är vad på tavlan. Som att sortera LEGO!\n   */ const getSkillAreaColor = (category)=>{\n        switch(category.toLowerCase()){\n            case \"frontend\":\n                return \"category-frontend\";\n            case \"backend\":\n                return \"category-backend\";\n            case \"ux\":\n                return \"category-ux\";\n            default:\n                return \"category-default\";\n        }\n    };\n    /**\n   * Flyttar uppgiften framåt i arbetsflödet\n   *\n   * Som att trycka på \"nästa\"-knappen i en process.\n   * Stänger också detaljvyn så man ser resultatet direkt.\n   *\n   * OPTIMERING: Memoizerad callback för att undvika onödiga re-renders\n   */ const moveTaskForward = (0, $k4OSS.useCallback)((newStatus)=>{\n        onUpdateStatus(task.id, newStatus);\n        setShowingTaskDetails(false);\n    }, [\n        onUpdateStatus,\n        task.id\n    ]);\n    /**\n   * Ger jobbet till rätt person\n   *\n   * Hittar den valda personen och säger \"det här är ditt nu!\".\n   * Stänger sedan detaljvyn så man ser förändringen.\n   *\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   */ const giveTaskToChosen = (0, $k4OSS.useCallback)(()=>{\n        if (!chosenTeammateId) return;\n        const chosenPerson = members.find((m)=>m.id === chosenTeammateId);\n        if (chosenPerson) {\n            onAssignTask(task.id, chosenPerson.id, chosenPerson.name);\n            setShowingTaskDetails(false);\n        }\n    }, [\n        chosenTeammateId,\n        members,\n        onAssignTask,\n        task.id\n    ]);\n    /**\n   * Raderar uppgiften för alltid\n   *\n   * Som att kasta något i papperskorgen och tömma den.\n   * Stänger alla öppna fönster efteråt.\n   *\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   */ const eraseTaskForever = (0, $k4OSS.useCallback)(()=>{\n        onDeleteTask(task.id);\n        setAskingForDeleteConfirmation(false);\n        setShowingTaskDetails(false);\n    }, [\n        onDeleteTask,\n        task.id\n    ]);\n    /**\n   * Renderar uppgiftskortet med alla dess komponenter\n   *\n   * Består av tre huvuddelar:\n   * - Kompakt kort för visning på tavlan\n   * - Detaljmodal med fullständig information\n   * - Bekräftelsemodal för borttagning\n   */ return /*#__PURE__*/ (0, $9HU4Y.jsxs)((0, $9HU4Y.Fragment), {\n        children: [\n            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                className: \"task-card\",\n                onClick: ()=>setShowingTaskDetails(true),\n                children: [\n                    /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                        className: \"task-header\",\n                        children: [\n                            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                className: `task-status ${getWorkflowColor(task.status)}`,\n                                children: task.status\n                            }),\n                            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                className: `task-category ${getSkillAreaColor(task.category)}`,\n                                children: task.category\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"h3\", {\n                        className: \"task-title\",\n                        children: task.title\n                    }),\n                    task.description && /*#__PURE__*/ (0, $9HU4Y.jsx)(\"p\", {\n                        className: \"task-description\",\n                        children: task.description.length > 100 ? `${task.description.substring(0, 100)}...` : task.description\n                    }),\n                    /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                        className: \"task-meta\",\n                        children: [\n                            task.assignedToMemberName ? /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                                className: \"task-assigned\",\n                                children: [\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                        className: \"meta-label\",\n                                        children: \"Tilldelad:\"\n                                    }),\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                        className: \"meta-value\",\n                                        children: task.assignedToMemberName\n                                    })\n                                ]\n                            }) : /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                                className: \"task-assigned\",\n                                children: [\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                        className: \"meta-label\",\n                                        children: \"Tilldelad:\"\n                                    }),\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                        className: \"meta-value not-assigned\",\n                                        children: \"Ej tilldelad\"\n                                    })\n                                ]\n                            }),\n                            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                                className: \"task-created\",\n                                children: [\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                        className: \"meta-label\",\n                                        children: \"Skapad:\"\n                                    }),\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                        className: \"meta-value\",\n                                        title: (0, $hGPrg.formatDate)(task.creationTimestamp),\n                                        children: (0, $hGPrg.formatRelativeTime)(task.creationTimestamp)\n                                    })\n                                ]\n                            })\n                        ]\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $g8dWu.default), {\n                isOpen: showingTaskDetails,\n                onClose: ()=>setShowingTaskDetails(false),\n                title: task.title,\n                size: \"medium\",\n                footer: /*#__PURE__*/ (0, $9HU4Y.jsxs)((0, $9HU4Y.Fragment), {\n                    children: [\n                        /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $52Ey0.default), {\n                            onClick: ()=>setAskingForDeleteConfirmation(true),\n                            variant: \"danger\",\n                            children: \"Ta bort\"\n                        }),\n                        /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                            style: {\n                                flex: 1\n                            }\n                        }),\n                        task.status !== \"Klar\" && /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $52Ey0.default), {\n                            onClick: ()=>moveTaskForward(\"Klar\"),\n                            variant: \"success\",\n                            children: \"Markera som klar\"\n                        }),\n                        task.status === \"Nytt\" && /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $52Ey0.default), {\n                            onClick: ()=>moveTaskForward(\"P\\xe5g\\xe5ende\"),\n                            variant: \"primary\",\n                            children: \"Starta uppgift\"\n                        })\n                    ]\n                }),\n                children: /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                    className: \"task-details\",\n                    children: [\n                        /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                            className: \"task-detail-row\",\n                            children: [\n                                /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                    className: \"detail-label\",\n                                    children: \"Status:\"\n                                }),\n                                /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                    className: `detail-value task-status ${getWorkflowColor(task.status)}`,\n                                    children: task.status\n                                })\n                            ]\n                        }),\n                        /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                            className: \"task-detail-row\",\n                            children: [\n                                /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                    className: \"detail-label\",\n                                    children: \"Kategori:\"\n                                }),\n                                /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                    className: `detail-value task-category ${getSkillAreaColor(task.category)}`,\n                                    children: task.category\n                                })\n                            ]\n                        }),\n                        /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                            className: \"task-detail-row\",\n                            children: [\n                                /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                    className: \"detail-label\",\n                                    children: \"Skapad:\"\n                                }),\n                                /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                    className: \"detail-value\",\n                                    children: (0, $hGPrg.formatDate)(task.creationTimestamp)\n                                })\n                            ]\n                        }),\n                        task.description && /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                            className: \"task-detail-description\",\n                            children: [\n                                /*#__PURE__*/ (0, $9HU4Y.jsx)(\"h4\", {\n                                    children: \"Beskrivning\"\n                                }),\n                                /*#__PURE__*/ (0, $9HU4Y.jsx)(\"p\", {\n                                    children: task.description\n                                })\n                            ]\n                        }),\n                        /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                            className: \"task-assignment\",\n                            children: [\n                                /*#__PURE__*/ (0, $9HU4Y.jsx)(\"h4\", {\n                                    children: \"Tilldelning\"\n                                }),\n                                task.assignedToMemberName ? /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                                    className: \"current-assignment\",\n                                    children: [\n                                        /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"p\", {\n                                            children: [\n                                                \"Denna uppgift \\xe4r tilldelad till:\",\n                                                \" \",\n                                                /*#__PURE__*/ (0, $9HU4Y.jsx)(\"strong\", {\n                                                    children: task.assignedToMemberName\n                                                })\n                                            ]\n                                        }),\n                                        /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $52Ey0.default), {\n                                            onClick: ()=>onAssignTask(task.id, null, null),\n                                            variant: \"secondary\",\n                                            size: \"small\",\n                                            children: \"Ta bort tilldelning\"\n                                        })\n                                    ]\n                                }) : /* Inte tilldelad? Visa formulär för att välja person */ /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                                    className: \"assignment-form\",\n                                    children: qualifiedTeammates.length > 0 ? /*#__PURE__*/ (0, $9HU4Y.jsxs)((0, $9HU4Y.Fragment), {\n                                        children: [\n                                            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"p\", {\n                                                children: [\n                                                    \"Tilldela denna \",\n                                                    task.category,\n                                                    \"-uppgift till en teammedlem med matchande roll:\"\n                                                ]\n                                            }),\n                                            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                                                className: \"assignment-controls\",\n                                                children: [\n                                                    /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"select\", {\n                                                        value: chosenTeammateId,\n                                                        onChange: (e)=>setChosenTeammateId(e.target.value),\n                                                        children: [\n                                                            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"option\", {\n                                                                value: \"\",\n                                                                children: \"V\\xe4lj teammedlem\"\n                                                            }),\n                                                            qualifiedTeammates.map((teammate)=>/*#__PURE__*/ (0, $9HU4Y.jsx)(\"option\", {\n                                                                    value: teammate.id,\n                                                                    children: teammate.name\n                                                                }, teammate.id))\n                                                        ]\n                                                    }),\n                                                    /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $52Ey0.default), {\n                                                        onClick: giveTaskToChosen,\n                                                        variant: \"primary\",\n                                                        disabled: !chosenTeammateId,\n                                                        children: \"Tilldela\"\n                                                    })\n                                                ]\n                                            })\n                                        ]\n                                    }) : /* Inga personer med rätt kompetens? Visa ett meddelande */ /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"p\", {\n                                        className: \"no-eligible-members\",\n                                        children: [\n                                            \"Det finns inga teammedlemmar med rollen \",\n                                            task.category,\n                                            \" som kan tilldelas denna uppgift.\"\n                                        ]\n                                    })\n                                })\n                            ]\n                        })\n                    ]\n                })\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $g8dWu.default), {\n                isOpen: askingForDeleteConfirmation,\n                onClose: ()=>setAskingForDeleteConfirmation(false),\n                title: \"Bekr\\xe4fta borttagning\",\n                footer: /*#__PURE__*/ (0, $9HU4Y.jsxs)((0, $9HU4Y.Fragment), {\n                    children: [\n                        /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $52Ey0.default), {\n                            onClick: ()=>setAskingForDeleteConfirmation(false),\n                            variant: \"secondary\",\n                            children: \"Avbryt\"\n                        }),\n                        /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $52Ey0.default), {\n                            onClick: eraseTaskForever,\n                            variant: \"danger\",\n                            children: \"Ta bort\"\n                        })\n                    ]\n                }),\n                children: /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"p\", {\n                    children: [\n                        '\\xc4r du s\\xe4ker p\\xe5 att du vill ta bort uppgiften \"',\n                        task.title,\n                        '\"? Uppgiften kommer att tas bort permanent fr\\xe5n databasen och kan inte \\xe5terst\\xe4llas.'\n                    ]\n                })\n            })\n        ]\n    });\n};\nvar // OPTIMERING: Memoizerad komponent för att undvika onödiga re-renders\n// Komponenten renderas bara om när props faktiskt ändras\n$896c849eaad832f5$export$2e2bcd8739ae039 = /*#__PURE__*/ (0, $k4OSS.memo)($896c849eaad832f5$var$TaskCard);\n\n});\nparcelRegister(\"52Ey0\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $63f819534f9704b6$export$2e2bcd8739ae039);\n// src/components/UI/Button.jsx\n\nvar $9HU4Y = parcelRequire(\"9HU4Y\");\nparcelRequire(\"k4OSS\");\n\n/**\n * Universell knappkomponent 🔘\n *\n * Flexibel knapp med olika stilar och storlekar.\n * Stöder ikoner och fullbredd.\n *\n * @param {ReactNode} children - Knapptext\n * @param {Function} onClick - Klick-hanterare\n * @param {string} type - HTML-typ\n * @param {string} variant - Stil (primary/secondary/danger)\n * @param {string} size - Storlek (small/medium/large)\n * @param {boolean} disabled - Inaktiverad\n * @param {boolean} fullWidth - Full bredd\n * @param {ReactNode} iconLeft - Vänster ikon\n * @param {ReactNode} iconRight - Höger ikon\n * @param {string} className - Extra CSS-klasser\n */ const $63f819534f9704b6$var$Button = ({ children: children, onClick: onClick, type: type = \"button\", variant: variant = \"primary\", size: size = \"medium\", disabled: disabled = false, fullWidth: fullWidth = false, iconLeft: iconLeft = null, iconRight: iconRight = null, className: className = \"\" })=>{\n    // Kontrollerar om ikoner finns\n    const hasIcon = iconLeft || iconRight;\n    // Bygger CSS-klasser\n    const buttonClasses = `\n    button\n    button-${variant}\n    button-${size}\n    ${fullWidth ? \"button-full-width\" : \"\"}\n    ${hasIcon ? \"button-with-icon\" : \"\"}\n    ${className}\n  `.trim().replace(/\\s+/g, \" \");\n    return /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"button\", {\n        type: type,\n        className: buttonClasses,\n        onClick: onClick,\n        disabled: disabled,\n        \"aria-disabled\": disabled,\n        children: [\n            iconLeft && /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                className: \"button-icon-left\",\n                children: iconLeft\n            }),\n            children,\n            iconRight && /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                className: \"button-icon-right\",\n                children: iconRight\n            })\n        ]\n    });\n};\nvar $63f819534f9704b6$export$2e2bcd8739ae039 = $63f819534f9704b6$var$Button;\n\n});\n\nparcelRegister(\"g8dWu\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $f7837b03e032f203$export$2e2bcd8739ae039);\n// src/components/UI/Modal.jsx\n/**\n * Återanvändbar modalkomponent\n *\n * Flexibel dialog med React Portal.\n * Stöder olika storlekar, Escape-stängning,\n * förhindrar bakgrundsscrollning.\n */ \nvar $9HU4Y = parcelRequire(\"9HU4Y\");\n\nvar $k4OSS = parcelRequire(\"k4OSS\");\n\nvar $8QtTq = parcelRequire(\"8QtTq\");\n\nparcelRequire(\"52Ey0\");\nconst $f7837b03e032f203$var$Modal = ({ isOpen: isOpen, onClose: onClose, title: title, children: children, footer: footer, size: size = \"medium\" })=>{\n    /**\n   * Hanterar Escape-tangent och scrollning\n   */ (0, $k4OSS.useEffect)(()=>{\n        // Stäng med Escape\n        const handleEscape = (e)=>{\n            if (e.key === \"Escape\" && isOpen) onClose();\n        };\n        // Registrera event-lyssnare\n        window.addEventListener(\"keydown\", handleEscape);\n        // Förhindra bakgrundsscrollning\n        if (isOpen) document.body.style.overflow = \"hidden\";\n        // Städa upp vid avmontering\n        return ()=>{\n            window.removeEventListener(\"keydown\", handleEscape);\n            document.body.style.overflow = \"auto\";\n        };\n    }, [\n        isOpen,\n        onClose\n    ]);\n    if (!isOpen) return null;\n    /**\n   * Förhindrar bubbling av klickhändelser\n   */ const handleModalClick = (e)=>{\n        e.stopPropagation();\n    };\n    // React Portal för korrekt rendering\n    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($8QtTq))).createPortal(/*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n        className: \"modal-overlay\",\n        onClick: onClose,\n        children: /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n            className: `modal modal-${size}`,\n            onClick: handleModalClick,\n            children: [\n                /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                    className: \"modal-header\",\n                    children: [\n                        /*#__PURE__*/ (0, $9HU4Y.jsx)(\"h2\", {\n                            className: \"modal-title\",\n                            children: title\n                        }),\n                        /*#__PURE__*/ (0, $9HU4Y.jsx)(\"button\", {\n                            className: \"modal-close\",\n                            onClick: onClose,\n                            \"aria-label\": \"St\\xe4ng\",\n                            children: \"\\xd7\"\n                        })\n                    ]\n                }),\n                /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                    className: \"modal-content\",\n                    children: children\n                }),\n                footer && /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                    className: \"modal-footer\",\n                    children: footer\n                })\n            ]\n        })\n    }), document.body // Renderar i body för korrekt z-index\n    );\n};\nvar $f7837b03e032f203$export$2e2bcd8739ae039 = $f7837b03e032f203$var$Modal;\n\n});\n\nparcelRegister(\"hGPrg\", function(module, exports) {\n\n$parcel$export(module.exports, \"formatDate\", () => $c3a99e7f3145213d$export$3ae94a2503e890a1);\n$parcel$export(module.exports, \"formatRelativeTime\", () => $c3a99e7f3145213d$export$b4ea3b48dcf921f6);\n// src/utils/dateUtils.jsx\n// Använder en enklare approach för att undvika Parcel-problem med date-fns\n/**\n * Tidsfunktioner för användarvänliga datum\n *\n * Gör tidsstämplar begripliga med snygga format\n * och relativa texter som \"2 timmar sedan\".\n */ /**\n * Formaterar tidsstämpel till läsbart datum\n *\n * @param {number} timestamp - Tidsstämpel\n * @returns {string} Format: \"2025-05-15 14:30\"\n */ const $c3a99e7f3145213d$export$3ae94a2503e890a1 = (timestamp)=>{\n    // Ingen tidsstämpel? Returnera tom sträng\n    if (!timestamp) return \"\";\n    // Skapa Date-objekt och formatera\n    const date = new Date(timestamp);\n    // Formatera med svenska format\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\n    const day = String(date.getDate()).padStart(2, \"0\");\n    const hours = String(date.getHours()).padStart(2, \"0\");\n    const minutes = String(date.getMinutes()).padStart(2, \"0\");\n    return `${year}-${month}-${day} ${hours}:${minutes}`;\n};\nconst $c3a99e7f3145213d$export$b4ea3b48dcf921f6 = (timestamp)=>{\n    // Ingen tidsstämpel? Returnera tom sträng\n    if (!timestamp) return \"\";\n    // Beräkna tidsskillnad\n    const now = Date.now();\n    const diff = now - timestamp;\n    // Konvertera till läsbara enheter\n    const minutes = Math.floor(diff / 60000);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n    // Välj lämplig text\n    if (days > 0) // Singular/plural för dagar\n    return `${days} ${days === 1 ? \"dag\" : \"dagar\"} sedan`;\n    else if (hours > 0) // Singular/plural för timmar\n    return `${hours} ${hours === 1 ? \"timme\" : \"timmar\"} sedan`;\n    else if (minutes > 0) // Singular/plural för minuter\n    return `${minutes} ${minutes === 1 ? \"minut\" : \"minuter\"} sedan`;\n    else // Mycket nyligen\n    return \"Just nu\";\n};\n\n});\n\n\nparcelRegister(\"fs6dk\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $8b94a26e7295b927$export$2e2bcd8739ae039);\n// src/components/Tasks/AddTaskForm.jsx\n/**\n * Formulär för att skapa nya uppgifter\n *\n * Hanterar inmatning och validering av uppgiftsdata med:\n * - Obligatorisk titel för att identifiera uppgiften\n * - Val av kategori (frontend, backend, UX) för korrekt tilldelning\n * - Valfri beskrivning för ytterligare detaljer\n *\n * Validerar att nödvändiga fält är ifyllda innan uppgiften skapas\n * och skickas till Firebase via callback-funktionen.\n */ \nvar $9HU4Y = parcelRequire(\"9HU4Y\");\n\nvar $k4OSS = parcelRequire(\"k4OSS\");\n\nvar $52Ey0 = parcelRequire(\"52Ey0\");\n\nconst $8b94a26e7295b927$var$AddTaskForm = ({ onAddTask: onAddTask, categories: categories = [\n    \"frontend\",\n    \"backend\",\n    \"ux\"\n] })=>{\n    const [title, setTitle] = (0, $k4OSS.useState)(\"\");\n    const [category, setCategory] = (0, $k4OSS.useState)(categories[0]);\n    const [description, setDescription] = (0, $k4OSS.useState)(\"\");\n    const [error, setError] = (0, $k4OSS.useState)(\"\");\n    /**\n   * Hanterar formulärinlämning\n   *\n   * Processen vid inlämning:\n   * 1. Validerar obligatoriska fält (titel och kategori)\n   * 2. Skapar ett nytt uppgiftsobjekt med inmatad data\n   * 3. Skickar uppgiften till föräldrakomponenten och återställer formuläret\n   *\n   * @param {Event} e - Formulärets submit-event\n   */ const handleSubmit = (e)=>{\n        // Stoppar webbläsaren från att ladda om sidan\n        e.preventDefault();\n        // Validera titel (obligatorisk)\n        if (!title.trim()) {\n            setError(\"Du m\\xe5ste ge uppgiften en titel!\");\n            return;\n        }\n        // Validera kategori (obligatorisk)\n        if (!category) {\n            setError(\"Du m\\xe5ste v\\xe4lja en kategori!\");\n            return;\n        }\n        // Skapa uppgiftsobjekt\n        const newTask = {\n            title: title.trim(),\n            category: category,\n            description: description.trim() || null,\n            assignedToMemberId: null,\n            assignedToMemberName: null\n        };\n        // Skicka till föräldrakomponent\n        onAddTask(newTask);\n        // Återställ formuläret\n        setTitle(\"\");\n        setCategory(categories[0]);\n        setDescription(\"\");\n        setError(\"\");\n    };\n    return /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"form\", {\n        className: \"add-task-form\",\n        onSubmit: handleSubmit,\n        children: [\n            error && /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                className: \"form-error\",\n                children: error\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                className: \"form-group\",\n                children: [\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"label\", {\n                        htmlFor: \"title\",\n                        children: \"Titel *\"\n                    }),\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"input\", {\n                        type: \"text\",\n                        id: \"title\",\n                        value: title,\n                        onChange: (e)=>setTitle(e.target.value),\n                        placeholder: \"Ange uppgiftens titel\",\n                        required: true\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                className: \"form-group\",\n                children: [\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"label\", {\n                        htmlFor: \"category\",\n                        children: \"Kategori *\"\n                    }),\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"select\", {\n                        id: \"category\",\n                        value: category,\n                        onChange: (e)=>setCategory(e.target.value),\n                        required: true,\n                        children: categories.map((categoryOption)=>/*#__PURE__*/ (0, $9HU4Y.jsx)(\"option\", {\n                                value: categoryOption,\n                                children: categoryOption.charAt(0).toUpperCase() + categoryOption.slice(1)\n                            }, categoryOption))\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                className: \"form-group\",\n                children: [\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"label\", {\n                        htmlFor: \"description\",\n                        children: \"Beskrivning (valfritt)\"\n                    }),\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"textarea\", {\n                        id: \"description\",\n                        value: description,\n                        onChange: (e)=>setDescription(e.target.value),\n                        placeholder: \"Beskriv uppgiften mer detaljerat\",\n                        rows: 4\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                className: \"form-actions\",\n                children: /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $52Ey0.default), {\n                    type: \"submit\",\n                    variant: \"primary\",\n                    children: \"L\\xe4gg till\"\n                })\n            })\n        ]\n    });\n};\nvar $8b94a26e7295b927$export$2e2bcd8739ae039 = $8b94a26e7295b927$var$AddTaskForm;\n\n});\n\nparcelRegister(\"lonA3\", function(module, exports) {\n\n$parcel$export(module.exports, \"filterByStatus\", () => $23fa13738d680a70$export$1caf81d27b0e4d0e);\n$parcel$export(module.exports, \"filterOutArchived\", () => $23fa13738d680a70$export$e0c098024fade003);\n// src/utils/filterUtils.jsx\n/**\n * Filtreringsverktyg för uppgifter 🔍\n *\n * Hjälper dig hitta rätt uppgifter snabbt.\n * Filtrera på person, kategori eller status.\n */ /**\n * Visar bara en persons uppgifter 👤\n *\n * @param {Array} tasks - Alla uppgifter\n * @param {string} memberId - Vilken person\n * @returns {Array} Personens uppgifter\n */ const $23fa13738d680a70$export$45830ad1d19224ad = (tasks, memberId)=>{\n    // Ingen person vald? Visa allt\n    if (!memberId || !Array.isArray(tasks) || tasks.length === 0) return tasks;\n    // Bara den personens uppgifter\n    return tasks.filter((task)=>task?.assignedToMemberId === memberId);\n};\nconst $23fa13738d680a70$export$6d1731a321e8bdf4 = (tasks, category)=>{\n    // Ingen kategori vald? Visa allt\n    if (!category || !Array.isArray(tasks) || tasks.length === 0) return tasks;\n    // Bara den kategorin\n    return tasks.filter((task)=>task?.category === category);\n};\nconst $23fa13738d680a70$export$1caf81d27b0e4d0e = (tasks, status)=>{\n    // Ingen status vald? Visa allt\n    if (!status || !Array.isArray(tasks) || tasks.length === 0) return tasks;\n    // Bara den statusen\n    return tasks.filter((task)=>task?.status === status);\n};\nconst $23fa13738d680a70$export$e0c098024fade003 = (tasks)=>{\n    // Inget att filtrera? Returnera som det är\n    if (!Array.isArray(tasks) || tasks.length === 0) return tasks;\n    // Bara aktiva uppgifter\n    return tasks.filter((task)=>!task?.isArchived);\n};\n\n});\n\n\nparcelRegister(\"ly2Lu\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $8a3e344e427bfa3a$export$2e2bcd8739ae039);\n// src/components/Tasks/TaskList.jsx\n/**\n * Smart uppgiftslista med filtrering 🔍\n *\n * Filtrera på person, kategori eller status.\n * Sortera som du vill. Lägg till nya uppgifter.\n */ \nvar $9HU4Y = parcelRequire(\"9HU4Y\");\n\nvar $k4OSS = parcelRequire(\"k4OSS\");\n\nvar $52Ey0 = parcelRequire(\"52Ey0\");\n\nvar $g8dWu = parcelRequire(\"g8dWu\");\n\nvar $OgeLm = parcelRequire(\"OgeLm\");\n\nvar $fs6dk = parcelRequire(\"fs6dk\");\n\nvar $lonA3 = parcelRequire(\"lonA3\");\n\nvar $5YstW = parcelRequire(\"5YstW\");\n\nconst $8a3e344e427bfa3a$var$TaskList = ({ tasks: tasks, members: members, onAddTask: onAddTask, onUpdateTaskStatus: onUpdateTaskStatus, onAssignTask: onAssignTask, onDeleteTask: onDeleteTask, categories: categories = [\n    \"frontend\",\n    \"backend\",\n    \"ux\"\n], isLoading: isLoading = false })=>{\n    const [isAddModalOpen, setIsAddModalOpen] = (0, $k4OSS.useState)(false);\n    const [filterMember, setFilterMember] = (0, $k4OSS.useState)(\"\");\n    const [filterCategory, setFilterCategory] = (0, $k4OSS.useState)(\"\");\n    const [filterStatus, setFilterStatus] = (0, $k4OSS.useState)(\"\");\n    const [sortOption, setSortOption] = (0, $k4OSS.useState)(\"newest\");\n    // SMART SORTERING: Bara räknar om när något faktiskt ändras (sparar prestanda)\n    const sortedTasks = (0, $k4OSS.useMemo)(()=>{\n        // Först filtrerar vi bort det vi inte vill se\n        const filteredTasks = (0, $lonA3.filterOutArchived)(tasks) // Städar bort gamla arkiverade\n        .filter((task)=>!filterMember || task.assignedToMemberId === filterMember) // Bara en persons uppgifter?\n        .filter((task)=>!filterCategory || task.category === filterCategory) // Bara en typ av uppgifter?\n        .filter((task)=>!filterStatus || task.status === filterStatus); // Bara en status?\n        // Sen sorterar vi som användaren vill ha det\n        switch(sortOption){\n            case \"newest\":\n                return (0, $5YstW.sortByNewest)(filteredTasks); // Nyast först (som Instagram)\n            case \"oldest\":\n                return (0, $5YstW.sortByOldest)(filteredTasks); // Äldst först (rättvist)\n            case \"titleAsc\":\n                return (0, $5YstW.sortByTitleAsc)(filteredTasks); // A-Ö (som telefonbok)\n            case \"titleDesc\":\n                return (0, $5YstW.sortByTitleDesc)(filteredTasks); // Ö-A (baklänges)\n            default:\n                return (0, $5YstW.sortByNewest)(filteredTasks); // Standard = nyast först\n        }\n    }, [\n        tasks,\n        filterMember,\n        filterCategory,\n        filterStatus,\n        sortOption\n    ]);\n    /**\n   * Lägger till uppgift och stänger formuläret 📝\n   */ const handleAddTask = (0, $k4OSS.useCallback)((taskData)=>{\n        onAddTask(taskData);\n        setIsAddModalOpen(false);\n    }, [\n        onAddTask\n    ]);\n    /**\n   * Nollställer alla filter 🔄\n   */ const resetFilters = (0, $k4OSS.useCallback)(()=>{\n        setFilterMember(\"\");\n        setFilterCategory(\"\");\n        setFilterStatus(\"\");\n        setSortOption(\"newest\");\n    }, []);\n    return /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n        className: \"task-list-container\",\n        children: [\n            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                className: \"task-list-header\",\n                children: [\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"h2\", {\n                        children: \"Uppgifter\"\n                    }),\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $52Ey0.default), {\n                        onClick: ()=>setIsAddModalOpen(true),\n                        variant: \"primary\",\n                        children: \"L\\xe4gg till uppgift\"\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                className: \"task-filters\",\n                children: [\n                    /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                        className: \"filter-group\",\n                        children: [\n                            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"label\", {\n                                htmlFor: \"filterMember\",\n                                children: \"Filtrera efter medlem:\"\n                            }),\n                            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"select\", {\n                                id: \"filterMember\",\n                                value: filterMember,\n                                onChange: (e)=>setFilterMember(e.target.value),\n                                children: [\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"option\", {\n                                        value: \"\",\n                                        children: \"Alla medlemmar\"\n                                    }),\n                                    members.map((member)=>/*#__PURE__*/ (0, $9HU4Y.jsx)(\"option\", {\n                                            value: member.id,\n                                            children: member.name\n                                        }, member.id))\n                                ]\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                        className: \"filter-group\",\n                        children: [\n                            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"label\", {\n                                htmlFor: \"filterCategory\",\n                                children: \"Filtrera efter kategori:\"\n                            }),\n                            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"select\", {\n                                id: \"filterCategory\",\n                                value: filterCategory,\n                                onChange: (e)=>setFilterCategory(e.target.value),\n                                children: [\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"option\", {\n                                        value: \"\",\n                                        children: \"Alla kategorier\"\n                                    }),\n                                    categories.map((category)=>/*#__PURE__*/ (0, $9HU4Y.jsx)(\"option\", {\n                                            value: category,\n                                            children: category.charAt(0).toUpperCase() + category.slice(1)\n                                        }, category))\n                                ]\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                        className: \"filter-group\",\n                        children: [\n                            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"label\", {\n                                htmlFor: \"filterStatus\",\n                                children: \"Filtrera efter status:\"\n                            }),\n                            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"select\", {\n                                id: \"filterStatus\",\n                                value: filterStatus,\n                                onChange: (e)=>setFilterStatus(e.target.value),\n                                children: [\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"option\", {\n                                        value: \"\",\n                                        children: \"Alla statusar\"\n                                    }),\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"option\", {\n                                        value: \"Nytt\",\n                                        children: \"Nytt\"\n                                    }),\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"option\", {\n                                        value: \"P\\xe5g\\xe5ende\",\n                                        children: \"P\\xe5g\\xe5ende\"\n                                    }),\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"option\", {\n                                        value: \"Klar\",\n                                        children: \"Klar\"\n                                    })\n                                ]\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                        className: \"filter-group\",\n                        children: [\n                            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"label\", {\n                                htmlFor: \"sortOption\",\n                                children: \"Sortera efter:\"\n                            }),\n                            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"select\", {\n                                id: \"sortOption\",\n                                value: sortOption,\n                                onChange: (e)=>setSortOption(e.target.value),\n                                children: [\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"option\", {\n                                        value: \"newest\",\n                                        children: \"Nyast f\\xf6rst\"\n                                    }),\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"option\", {\n                                        value: \"oldest\",\n                                        children: \"\\xc4ldst f\\xf6rst\"\n                                    }),\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"option\", {\n                                        value: \"titleAsc\",\n                                        children: \"Titel (A-\\xd6)\"\n                                    }),\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"option\", {\n                                        value: \"titleDesc\",\n                                        children: \"Titel (\\xd6-A)\"\n                                    })\n                                ]\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $52Ey0.default), {\n                        onClick: resetFilters,\n                        variant: \"secondary\",\n                        size: \"small\",\n                        children: \"\\xc5terst\\xe4ll filter\"\n                    })\n                ]\n            }),\n            isLoading ? /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                className: \"loading-indicator\",\n                children: /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                    children: \"Laddar uppgifter\"\n                })\n            }) : sortedTasks.length === 0 ? /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                className: \"empty-state\",\n                children: [\n                    /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"p\", {\n                        children: [\n                            \"Inga uppgifter hittades\",\n                            filterMember || filterCategory || filterStatus ? \" med valda filter\" : \"\",\n                            \".\"\n                        ]\n                    }),\n                    filterMember || filterCategory || filterStatus ? /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $52Ey0.default), {\n                        onClick: resetFilters,\n                        variant: \"secondary\",\n                        children: \"\\xc5terst\\xe4ll filter\"\n                    }) : /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $52Ey0.default), {\n                        onClick: ()=>setIsAddModalOpen(true),\n                        variant: \"secondary\",\n                        children: \"L\\xe4gg till din f\\xf6rsta uppgift\"\n                    })\n                ]\n            }) : /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                className: \"task-grid\",\n                children: sortedTasks.map((task)=>/*#__PURE__*/ (0, $9HU4Y.jsx)((0, $OgeLm.default), {\n                        task: task,\n                        members: members,\n                        onUpdateStatus: onUpdateTaskStatus,\n                        onAssignTask: onAssignTask,\n                        onDeleteTask: onDeleteTask\n                    }, task.id))\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $g8dWu.default), {\n                isOpen: isAddModalOpen,\n                onClose: ()=>setIsAddModalOpen(false),\n                title: \"L\\xe4gg till uppgift\",\n                children: /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $fs6dk.default), {\n                    onAddTask: handleAddTask,\n                    categories: categories\n                })\n            })\n        ]\n    });\n};\nvar // SMART KOMPONENT: Renderas bara om när något faktiskt ändrats (sparar prestanda)\n$8a3e344e427bfa3a$export$2e2bcd8739ae039 = /*#__PURE__*/ (0, $k4OSS.memo)($8a3e344e427bfa3a$var$TaskList);\n\n});\nparcelRegister(\"5YstW\", function(module, exports) {\n\n$parcel$export(module.exports, \"sortByNewest\", () => $901ca83876f297c9$export$7924ec03a8eaf79);\n$parcel$export(module.exports, \"sortByOldest\", () => $901ca83876f297c9$export$2f657cf9c6f37762);\n$parcel$export(module.exports, \"sortByTitleAsc\", () => $901ca83876f297c9$export$f91e6e7592d656f9);\n$parcel$export(module.exports, \"sortByTitleDesc\", () => $901ca83876f297c9$export$21d8e734d0fd6a1c);\n// src/utils/sortUtils.jsx\n/**\n * Sorteringsfunktioner för uppgifter 🔄\n *\n * Olika sätt att ordna uppgifter.\n * Alla funktioner skapar nya listor utan att ändra originalet.\n */ /**\n * Sorterar nyast först 🆕\n *\n * @param {Array} tasks - Uppgifter att sortera\n * @returns {Array} Sorterad lista\n */ const $901ca83876f297c9$export$7924ec03a8eaf79 = (tasks)=>{\n    // Kopia och sortering\n    return [\n        ...tasks\n    ].sort((a, b)=>b.creationTimestamp - a.creationTimestamp);\n};\nconst $901ca83876f297c9$export$2f657cf9c6f37762 = (tasks)=>{\n    // Gör en kopia först (säkert är säkert)\n    // Sen sorterar så det äldsta kommer först\n    return [\n        ...tasks\n    ].sort((a, b)=>a.creationTimestamp - b.creationTimestamp);\n};\nconst $901ca83876f297c9$export$f91e6e7592d656f9 = (tasks)=>{\n    // Gör en kopia först (som alltid)\n    // Sen sorterar alfabetiskt (localeCompare fixar å, ä, ö)\n    return [\n        ...tasks\n    ].sort((a, b)=>a.title.localeCompare(b.title));\n};\nconst $901ca83876f297c9$export$21d8e734d0fd6a1c = (tasks)=>{\n    // Gör en kopia först (som en god vana)\n    // Sen sorterar baklänges, från Ö till A\n    return [\n        ...tasks\n    ].sort((a, b)=>b.title.localeCompare(a.title));\n};\n\n});\n\n\nparcelRegister(\"iDNSZ\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $fe73407966fc0198$export$2e2bcd8739ae039);\n// src/components/Members/MemberList.jsx\n/**\n * Teamöversikt med medlemshantering\n *\n * Visar medlemmar med profilbild, namn och roll.\n * Lägg till och ta bort medlemmar med bekräftelse.\n */ \nvar $9HU4Y = parcelRequire(\"9HU4Y\");\n\nvar $k4OSS = parcelRequire(\"k4OSS\");\n\nvar $52Ey0 = parcelRequire(\"52Ey0\");\n\nvar $g8dWu = parcelRequire(\"g8dWu\");\n\nvar $855r2 = parcelRequire(\"855r2\");\n\nconst $fe73407966fc0198$var$MemberList = ({ members: members, onAddMember: onAddMember, onDeleteMember: onDeleteMember, roles: roles = [\n    \"frontend\",\n    \"backend\",\n    \"ux\"\n], isLoading: isLoading = false })=>{\n    const [isAddModalOpen, setIsAddModalOpen] = (0, $k4OSS.useState)(false);\n    const [memberToDelete, setMemberToDelete] = (0, $k4OSS.useState)(null);\n    /**\n   * Lägger till ny medlem och stänger modal\n   */ const handleAddMember = (memberData)=>{\n        onAddMember(memberData);\n        setIsAddModalOpen(false);\n    };\n    /**\n   * Tar bort medlem efter bekräftelse\n   */ const handleConfirmDelete = ()=>{\n        if (memberToDelete) {\n            onDeleteMember(memberToDelete.id);\n            setMemberToDelete(null);\n        }\n    };\n    /**\n   * Returnerar CSS-klass baserat på medlemsroll\n   *\n   * Ger visuell färgkodning för olika roller:\n   * - Frontend: blå\n   * - Backend: grön\n   * - UX: lila\n   *\n   * @param {string} role - Medlemmens roll\n   * @returns {string} CSS-klassnamn för färgkodning\n   */ const getRoleColorClass = (role)=>{\n        switch(role.toLowerCase()){\n            case \"frontend\":\n                return \"role-frontend\";\n            case \"backend\":\n                return \"role-backend\";\n            case \"ux\":\n                return \"role-ux\";\n            default:\n                return \"role-default\";\n        }\n    };\n    return /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n        className: \"member-list-container\",\n        children: [\n            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                className: \"member-list-header\",\n                children: [\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"h2\", {\n                        children: \"Teammedlemmar\"\n                    }),\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $52Ey0.default), {\n                        onClick: ()=>setIsAddModalOpen(true),\n                        variant: \"primary\",\n                        children: \"L\\xe4gg till medlem\"\n                    })\n                ]\n            }),\n            isLoading ? /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                className: \"loading-indicator\",\n                children: /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                    children: \"Laddar teammedlemmar\"\n                })\n            }) : members.length === 0 ? /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                className: \"empty-state\",\n                children: [\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"p\", {\n                        children: \"Inga teammedlemmar tillagda \\xe4nnu.\"\n                    }),\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $52Ey0.default), {\n                        onClick: ()=>setIsAddModalOpen(true),\n                        variant: \"secondary\",\n                        children: \"L\\xe4gg till din f\\xf6rsta teammedlem\"\n                    })\n                ]\n            }) : /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                className: \"member-grid\",\n                children: members.map((member)=>/*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                        className: \"member-card\",\n                        children: [\n                            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                                className: \"member-avatar\",\n                                children: member.avatar ? /*#__PURE__*/ (0, $9HU4Y.jsx)(\"img\", {\n                                    src: member.avatar,\n                                    alt: member.name\n                                }) : /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                                    className: \"member-initials\",\n                                    children: member.name.split(\" \").map((n)=>n[0]).join(\"\")\n                                })\n                            }),\n                            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                                className: \"member-info\",\n                                children: [\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"h3\", {\n                                        className: \"member-name\",\n                                        children: member.name\n                                    }),\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                        className: `member-role ${getRoleColorClass(member.role)}`,\n                                        children: member.role.charAt(0).toUpperCase() + member.role.slice(1)\n                                    })\n                                ]\n                            }),\n                            /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $52Ey0.default), {\n                                onClick: ()=>setMemberToDelete(member),\n                                variant: \"danger\",\n                                size: \"small\",\n                                children: \"Ta bort\"\n                            })\n                        ]\n                    }, member.id))\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $g8dWu.default), {\n                isOpen: isAddModalOpen,\n                onClose: ()=>setIsAddModalOpen(false),\n                title: \"L\\xe4gg till teammedlem\",\n                children: /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $855r2.default), {\n                    onAddMember: handleAddMember,\n                    roles: roles\n                })\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $g8dWu.default), {\n                isOpen: !!memberToDelete,\n                onClose: ()=>setMemberToDelete(null),\n                title: \"Bekr\\xe4fta borttagning\",\n                footer: /*#__PURE__*/ (0, $9HU4Y.jsxs)((0, $9HU4Y.Fragment), {\n                    children: [\n                        /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $52Ey0.default), {\n                            onClick: ()=>setMemberToDelete(null),\n                            variant: \"secondary\",\n                            children: \"Avbryt\"\n                        }),\n                        /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $52Ey0.default), {\n                            onClick: handleConfirmDelete,\n                            variant: \"danger\",\n                            children: \"Ta bort\"\n                        })\n                    ]\n                }),\n                children: memberToDelete && /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"p\", {\n                    children: [\n                        \"Vill du verkligen ta bort \",\n                        memberToDelete.name,\n                        \" fr\\xe5n teamet? Det g\\xe5r inte att \\xe5ngra, och alla uppgifter som personen jobbar med just nu blir otilldelade.\"\n                    ]\n                })\n            })\n        ]\n    });\n};\nvar $fe73407966fc0198$export$2e2bcd8739ae039 = $fe73407966fc0198$var$MemberList;\n\n});\nparcelRegister(\"855r2\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $96a493f997dffc49$export$2e2bcd8739ae039);\n// src/components/Members/AddMemberForm.jsx\n/**\n * Formulär för nya teammedlemmar\n *\n * Obligatoriskt: namn och roll\n * Valfritt: profilbild-URL\n * Validerar innan sparning.\n */ \nvar $9HU4Y = parcelRequire(\"9HU4Y\");\n\nvar $k4OSS = parcelRequire(\"k4OSS\");\n\nvar $52Ey0 = parcelRequire(\"52Ey0\");\n\nconst $96a493f997dffc49$var$AddMemberForm = ({ onAddMember: onAddMember, roles: roles = [\n    \"frontend\",\n    \"backend\",\n    \"ux\"\n] })=>{\n    const [name, setName] = (0, $k4OSS.useState)(\"\");\n    const [role, setRole] = (0, $k4OSS.useState)(roles[0]);\n    const [avatar, setAvatar] = (0, $k4OSS.useState)(\"\");\n    const [error, setError] = (0, $k4OSS.useState)(\"\");\n    /**\n   * Hanterar formulärinlämning\n   *\n   * Validerar, skapar medlem och återställer formulär.\n   */ const handleSubmit = (e)=>{\n        e.preventDefault();\n        // Validera namn\n        if (!name.trim()) {\n            setError(\"Du m\\xe5ste ange ett namn!\");\n            return;\n        }\n        // Validera roll\n        if (!role) {\n            setError(\"Du m\\xe5ste v\\xe4lja en roll!\");\n            return;\n        }\n        // Skapa medlemsobjekt\n        const newMember = {\n            name: name.trim(),\n            role: role,\n            avatar: avatar.trim() || null\n        };\n        // Skicka medlemmen till föräldrakomponenten\n        onAddMember(newMember);\n        // Återställ formuläret\n        setName(\"\");\n        setRole(roles[0]);\n        setAvatar(\"\");\n        setError(\"\");\n    };\n    return /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"form\", {\n        className: \"add-member-form\",\n        onSubmit: handleSubmit,\n        children: [\n            error && /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                className: \"form-error\",\n                children: error\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                className: \"form-group\",\n                children: [\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"label\", {\n                        htmlFor: \"name\",\n                        children: \"Namn *\"\n                    }),\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"input\", {\n                        type: \"text\",\n                        id: \"name\",\n                        value: name,\n                        onChange: (e)=>setName(e.target.value),\n                        placeholder: \"Ange namn\",\n                        required: true\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                className: \"form-group\",\n                children: [\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"label\", {\n                        htmlFor: \"role\",\n                        children: \"Roll *\"\n                    }),\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"select\", {\n                        id: \"role\",\n                        value: role,\n                        onChange: (e)=>setRole(e.target.value),\n                        required: true,\n                        children: roles.map((roleOption)=>/*#__PURE__*/ (0, $9HU4Y.jsx)(\"option\", {\n                                value: roleOption,\n                                children: roleOption.charAt(0).toUpperCase() + roleOption.slice(1)\n                            }, roleOption))\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                className: \"form-group\",\n                children: [\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"label\", {\n                        htmlFor: \"avatar\",\n                        children: \"Profilbild URL (valfritt)\"\n                    }),\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"input\", {\n                        type: \"url\",\n                        id: \"avatar\",\n                        value: avatar,\n                        onChange: (e)=>setAvatar(e.target.value),\n                        placeholder: \"https://example.com/image.jpg\"\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                className: \"form-actions\",\n                children: /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $52Ey0.default), {\n                    type: \"submit\",\n                    variant: \"primary\",\n                    children: \"L\\xe4gg till\"\n                })\n            })\n        ]\n    });\n};\nvar $96a493f997dffc49$export$2e2bcd8739ae039 = $96a493f997dffc49$var$AddMemberForm;\n\n});\n\n\nparcelRegister(\"5DAyF\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $8cc92dd9f614e654$export$2e2bcd8739ae039);\n// src/components/UI/Notification.jsx\n/**\n * Popup-meddelanden som försvinner automatiskt\n *\n * Fyra typer: info, success, warning, error.\n */ \nvar $9HU4Y = parcelRequire(\"9HU4Y\");\n\nvar $k4OSS = parcelRequire(\"k4OSS\");\n\nconst $8cc92dd9f614e654$var$Notification = ({ message: message, type: type = \"info\", duration: duration = 5000, onClose: onClose })=>{\n    const [isVisible, setIsVisible] = (0, $k4OSS.useState)(true);\n    (0, $k4OSS.useEffect)(()=>{\n        // Inget meddelande? Gör inget\n        if (!message) return;\n        // Visa meddelandet\n        setIsVisible(true);\n        // Försvinner automatiskt\n        const timer = setTimeout(()=>{\n            setIsVisible(false);\n            // Vänta på animation innan borttagning\n            if (onClose) setTimeout(onClose, 300);\n        }, duration);\n        // Städa upp\n        return ()=>clearTimeout(timer);\n    }, [\n        message,\n        duration,\n        onClose\n    ]);\n    if (!message) return null;\n    // När du klickar på krysset\n    const handleClose = ()=>{\n        setIsVisible(false); // Starta försvinn-animationen\n        // Vänta på animationen innan vi tar bort helt\n        if (onClose) setTimeout(onClose, 300);\n    };\n    return /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n        className: `notification notification-${type} ${isVisible ? \"show\" : \"hide\"}`,\n        children: [\n            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                className: \"notification-content\",\n                children: [\n                    type === \"success\" && /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                        className: \"notification-icon\",\n                        children: \"\\u2713\"\n                    }),\n                    type === \"error\" && /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                        className: \"notification-icon\",\n                        children: \"\\u2717\"\n                    }),\n                    type === \"warning\" && /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                        className: \"notification-icon\",\n                        children: \"\\u26A0\"\n                    }),\n                    type === \"info\" && /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                        className: \"notification-icon\",\n                        children: \"\\u2139\"\n                    }),\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"p\", {\n                        className: \"notification-message\",\n                        children: message\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"button\", {\n                className: \"notification-close\",\n                onClick: handleClose,\n                \"aria-label\": \"St\\xe4ng\",\n                children: \"\\xd7\"\n            })\n        ]\n    });\n};\nvar $8cc92dd9f614e654$export$2e2bcd8739ae039 = $8cc92dd9f614e654$var$Notification;\n\n});\n\nparcelRegister(\"kDidi\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $32b5df8b27742738$export$2e2bcd8739ae039);\n// src/components/Admin/DatabaseSeeder.jsx\n\nvar $9HU4Y = parcelRequire(\"9HU4Y\");\n\nvar $k4OSS = parcelRequire(\"k4OSS\");\n\nvar $afL7w = parcelRequire(\"afL7w\");\n\nvar $7TlIR = parcelRequire(\"7TlIR\");\n\nvar $2YcLf = parcelRequire(\"2YcLf\");\n\n/**\n * Databasverktyg - hantering av testdata\n *\n * Kompakt verktyg för att hantera testdata i utvecklingsmiljön.\n * Visar databasanslutningsstatus och låter användaren fylla eller\n * rensa databasen med ett klick.\n *\n * @param {Function} onSuccess - Callback för statusmeddelanden\n */ const $32b5df8b27742738$var$DatabaseSeeder = ({ onSuccess: onSuccess })=>{\n    const [loading, setLoading] = (0, $k4OSS.useState)(false);\n    const [connectionStatus, setConnectionStatus] = (0, $k4OSS.useState)(\"checking\");\n    const [isExpanded, setIsExpanded] = (0, $k4OSS.useState)(false);\n    const [hasExampleData, setHasExampleData] = (0, $k4OSS.useState)(false);\n    // Hämta autentiseringsstatus för att kontrollera om användaren är inloggad\n    const { currentUser: currentUser } = (0, $7TlIR.useAuth)();\n    // Kollar om databasen fungerar och om exempeldata finns direkt när sidan laddas\n    (0, $k4OSS.useEffect)(()=>{\n        // Bara kör databaskontrollen om användaren är inloggad\n        if (!currentUser) {\n            setConnectionStatus(\"error\");\n            return;\n        }\n        // Förhindra flera samtidiga anrop genom att använda en flagga\n        let isCheckingConnection = false;\n        const checkConnection = async ()=>{\n            // Undvik flera samtidiga anrop\n            if (isCheckingConnection) {\n                console.log(\"Databasanslutning kontrolleras redan, hoppar \\xf6ver...\");\n                return;\n            }\n            isCheckingConnection = true;\n            try {\n                const result = await (0, $afL7w.testDatabaseConnection)();\n                setConnectionStatus(result.success ? \"connected\" : \"error\");\n                if (!result.success) onSuccess(`Fel vid anslutning till databasen: ${result.error}`, \"error\");\n                else {\n                    // Kontrollera om exempeldata redan finns - bara om användaren är inloggad\n                    if (currentUser) try {\n                        const storedFlag = localStorage.getItem(\"exampleDataAdded\");\n                        if (storedFlag === \"true\") {\n                            // Dubbelkolla mot databasen för att vara säker\n                            const dataExists = await (0, $afL7w.checkIfExampleDataExists)();\n                            setHasExampleData(dataExists);\n                        } else {\n                            // Om ingen flagga finns, kolla ändå databasen\n                            const dataExists = await (0, $afL7w.checkIfExampleDataExists)();\n                            setHasExampleData(dataExists);\n                        }\n                    } catch (dataError) {\n                        // Om det blir fel vid kontroll av exempeldata, sätt bara till false\n                        console.log(\"Kunde inte kontrollera exempeldata, s\\xe4tter till false\");\n                        setHasExampleData(false);\n                    }\n                    else // Om användaren inte är inloggad, sätt bara hasExampleData till false\n                    setHasExampleData(false);\n                }\n            } catch (error) {\n                setConnectionStatus(\"error\");\n                onSuccess(`Fel vid test av databasanslutning: ${error.message}`, \"error\");\n            } finally{\n                isCheckingConnection = false;\n            }\n        };\n        // Lägg till en liten fördröjning för att undvika race conditions\n        const timeoutId = setTimeout(checkConnection, 100);\n        return ()=>{\n            clearTimeout(timeoutId);\n            isCheckingConnection = false;\n        };\n    }, [\n        currentUser\n    ]); // BORTTAGET: onSuccess från dependencies för att undvika loopar\n    /**\n   * Fyller databasen med testdata\n   *\n   * Skapar exempeldata med teammedlemmar och uppgifter\n   * för att demonstrera applikationens funktionalitet.\n   */ const handleSeedDatabase = async ()=>{\n        // Bekräfta åtgärden\n        const confirmSeed = window.confirm(\"L\\xe4gg till testdata i databasen?\\n\\nDetta kommer att fylla databasen med exempeldata f\\xf6r team och uppgifter.\\n\\nOBS! Befintlig data kommer att ers\\xe4ttas. Vill du forts\\xe4tta?\");\n        if (!confirmSeed) return;\n        setLoading(true);\n        try {\n            // Visa statusmeddelande\n            onSuccess(\"Skapar testdata...\", \"info\");\n            // Kör funktionen som rensar och fyller databasen\n            const result = await (0, $afL7w.seedDatabase)();\n            if (result.success) {\n                // Uppdatera status\n                setHasExampleData(true);\n                // Visa bekräftelse\n                onSuccess(\"Klart! Databasen har fyllts med testdata f\\xf6r team och uppgifter.\", \"success\");\n            } else onSuccess(`Ett fel uppstod: ${result.error}`, \"error\");\n        } catch (error) {\n            console.error(\"Fel vid seedDatabase:\", error);\n            onSuccess(`Ett ov\\xe4ntat fel uppstod: ${error.message}`, \"error\");\n        } finally{\n            setLoading(false);\n        }\n    };\n    /**\n   * Rensar databasen\n   *\n   * Tar bort all data från databasen för att starta om\n   * med en tom databas.\n   */ const handleClearDatabase = async ()=>{\n        // Bekräfta åtgärden\n        const confirmClear = window.confirm(\"Rensa all data fr\\xe5n databasen?\\n\\nDetta kommer att ta bort alla team och uppgifter fr\\xe5n databasen.\\n\\nDet g\\xe5r inte att \\xe5ngra denna \\xe5tg\\xe4rd. Vill du forts\\xe4tta?\");\n        if (!confirmClear) return;\n        setLoading(true);\n        try {\n            // Visa statusmeddelande\n            onSuccess(\"Rensar databasen...\", \"info\");\n            // Kör funktionen som rensar databasen\n            const result = await (0, $afL7w.clearDatabase)();\n            if (result.success) {\n                // Uppdatera status\n                setHasExampleData(false);\n                // Visa bekräftelse\n                onSuccess(\"Klart! Databasen har rensats och \\xe4r nu tom.\", \"success\");\n            } else onSuccess(`Ett fel uppstod: ${result.error}`, \"error\");\n        } catch (error) {\n            console.error(\"Fel vid clearDatabase:\", error);\n            onSuccess(`Ett ov\\xe4ntat fel uppstod: ${error.message}`, \"error\");\n        } finally{\n            setLoading(false);\n        }\n    };\n    // Växla mellan expanderat och kompakt läge\n    const toggleExpand = ()=>{\n        setIsExpanded(!isExpanded);\n    };\n    return /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n        className: `database-seeder ${isExpanded ? \"expanded\" : \"collapsed\"}`,\n        children: [\n            /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                className: \"seeder-header\",\n                onClick: toggleExpand,\n                children: [\n                    /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                        className: \"seeder-header-content\",\n                        children: [\n                            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                className: \"seeder-header-icon\",\n                                children: /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $2YcLf.DatabaseIcon), {\n                                    size: 16\n                                })\n                            }),\n                            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"h3\", {\n                                children: \"Databasverktyg\"\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                        className: \"expand-icon\",\n                        children: isExpanded ? /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $2YcLf.ChevronDownIcon), {\n                            size: 16\n                        }) : /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $2YcLf.ChevronRightIcon), {\n                            size: 16\n                        })\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                className: \"seeder-content\",\n                children: /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                    className: \"seeder-content-inner\",\n                    children: [\n                        /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                            className: \"status-indicators\",\n                            children: [\n                                /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                                    className: `connection-status ${connectionStatus}`,\n                                    children: [\n                                        connectionStatus === \"checking\" && /*#__PURE__*/ (0, $9HU4Y.jsxs)((0, $9HU4Y.Fragment), {\n                                            children: [\n                                                /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                                    className: \"status-icon\",\n                                                    children: /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $2YcLf.LoadingIcon), {\n                                                        size: 16\n                                                    })\n                                                }),\n                                                \"Ansluter till Firebase...\"\n                                            ]\n                                        }),\n                                        connectionStatus === \"connected\" && /*#__PURE__*/ (0, $9HU4Y.jsxs)((0, $9HU4Y.Fragment), {\n                                            children: [\n                                                /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                                    className: \"status-icon\",\n                                                    children: /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $2YcLf.CheckIcon), {\n                                                        size: 16,\n                                                        color: \"#10b981\"\n                                                    })\n                                                }),\n                                                \"Ansluten till Firebase-databasen\"\n                                            ]\n                                        }),\n                                        connectionStatus === \"error\" && /*#__PURE__*/ (0, $9HU4Y.jsxs)((0, $9HU4Y.Fragment), {\n                                            children: [\n                                                /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                                    className: \"status-icon\",\n                                                    children: /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $2YcLf.AlertIcon), {\n                                                        size: 16,\n                                                        color: \"#ef4444\"\n                                                    })\n                                                }),\n                                                \"Kunde inte ansluta till Firebase\"\n                                            ]\n                                        })\n                                    ]\n                                }),\n                                connectionStatus === \"connected\" && /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                                    className: `example-data-status ${hasExampleData ? \"exists\" : \"none\"}`,\n                                    children: [\n                                        /*#__PURE__*/ (0, $9HU4Y.jsx)(\"span\", {\n                                            className: \"status-icon\",\n                                            children: /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $2YcLf.SearchIcon), {\n                                                size: 16\n                                            })\n                                        }),\n                                        hasExampleData ? \"Testdata finns i databasen\" : \"Databasen \\xe4r tom\"\n                                    ]\n                                })\n                            ]\n                        }),\n                        /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                            className: \"seeder-description\",\n                            children: \"Hantera testdata f\\xf6r din Scrum Board. Fyll databasen med f\\xe4rdiga exempel p\\xe5 team och uppgifter f\\xf6r att snabbt komma ig\\xe5ng, eller rensa allt f\\xf6r att b\\xf6rja om fr\\xe5n b\\xf6rjan.\"\n                        }),\n                        /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                            className: \"seeder-buttons\",\n                            children: [\n                                !hasExampleData && /*#__PURE__*/ (0, $9HU4Y.jsx)(\"button\", {\n                                    className: \"button seed-button\",\n                                    onClick: handleSeedDatabase,\n                                    disabled: loading || connectionStatus !== \"connected\",\n                                    children: loading ? /*#__PURE__*/ (0, $9HU4Y.jsxs)((0, $9HU4Y.Fragment), {\n                                        children: [\n                                            /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $2YcLf.LoadingIcon), {\n                                                size: 16,\n                                                className: \"loading-spinner\"\n                                            }),\n                                            \"Skapar testdata...\"\n                                        ]\n                                    }) : /*#__PURE__*/ (0, $9HU4Y.jsxs)((0, $9HU4Y.Fragment), {\n                                        children: [\n                                            /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $2YcLf.DatabasePlusIcon), {\n                                                size: 16\n                                            }),\n                                            \"L\\xe4gg till testdata\"\n                                        ]\n                                    })\n                                }),\n                                hasExampleData && /*#__PURE__*/ (0, $9HU4Y.jsx)(\"button\", {\n                                    className: \"button clear-button\",\n                                    onClick: handleClearDatabase,\n                                    disabled: loading || connectionStatus !== \"connected\",\n                                    children: loading ? /*#__PURE__*/ (0, $9HU4Y.jsxs)((0, $9HU4Y.Fragment), {\n                                        children: [\n                                            /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $2YcLf.LoadingIcon), {\n                                                size: 16,\n                                                className: \"loading-spinner\"\n                                            }),\n                                            \"Rensar databasen...\"\n                                        ]\n                                    }) : /*#__PURE__*/ (0, $9HU4Y.jsxs)((0, $9HU4Y.Fragment), {\n                                        children: [\n                                            /*#__PURE__*/ (0, $9HU4Y.jsx)((0, $2YcLf.TrashIcon), {\n                                                size: 16\n                                            }),\n                                            \"Rensa databasen\"\n                                        ]\n                                    })\n                                })\n                            ]\n                        }),\n                        connectionStatus === \"error\" && /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"div\", {\n                            className: \"connection-error\",\n                            children: [\n                                /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"p\", {\n                                    children: [\n                                        /*#__PURE__*/ (0, $9HU4Y.jsx)(\"strong\", {\n                                            children: \"Anslutningsfel\"\n                                        }),\n                                        \" Kunde inte ansluta till Firebase-databasen.\"\n                                    ]\n                                }),\n                                /*#__PURE__*/ (0, $9HU4Y.jsx)(\"p\", {\n                                    children: \"Kontrollera f\\xf6ljande:\"\n                                }),\n                                /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"ul\", {\n                                    children: [\n                                        /*#__PURE__*/ (0, $9HU4Y.jsx)(\"li\", {\n                                            children: \"\\xc4r Firebase-projektet korrekt konfigurerat?\"\n                                        }),\n                                        /*#__PURE__*/ (0, $9HU4Y.jsx)(\"li\", {\n                                            children: \"\\xc4r databasens URL korrekt i firebaseConfig.jsx?\"\n                                        }),\n                                        /*#__PURE__*/ (0, $9HU4Y.jsx)(\"li\", {\n                                            children: \"Har du r\\xe4tt beh\\xf6righeter f\\xf6r databasen?\"\n                                        }),\n                                        /*#__PURE__*/ (0, $9HU4Y.jsx)(\"li\", {\n                                            children: \"Till\\xe5ter databasens s\\xe4kerhetsregler l\\xe4sning och skrivning?\"\n                                        })\n                                    ]\n                                })\n                            ]\n                        }),\n                        connectionStatus === \"connected\" && /*#__PURE__*/ (0, $9HU4Y.jsx)(\"div\", {\n                            className: \"seeder-info\",\n                            children: /*#__PURE__*/ (0, $9HU4Y.jsxs)(\"p\", {\n                                className: \"seeder-warning\",\n                                children: [\n                                    /*#__PURE__*/ (0, $9HU4Y.jsx)(\"strong\", {\n                                        children: \"Observera:\"\n                                    }),\n                                    \" Detta verktyg \\xe4r endast f\\xf6r testning. Befintlig data kommer att ers\\xe4ttas om du l\\xe4gger till testdata eller rensar databasen. Anv\\xe4nd med f\\xf6rsiktighet.\"\n                                ]\n                            })\n                        })\n                    ]\n                })\n            })\n        ]\n    });\n};\nvar $32b5df8b27742738$export$2e2bcd8739ae039 = $32b5df8b27742738$var$DatabaseSeeder;\n\n});\nparcelRegister(\"afL7w\", function(module, exports) {\n\n$parcel$export(module.exports, \"clearDatabase\", () => $5d84462e3bb2dbbc$export$67f71d2370110104);\n$parcel$export(module.exports, \"seedDatabase\", () => $5d84462e3bb2dbbc$export$b4095525eaec05f2);\n$parcel$export(module.exports, \"checkIfExampleDataExists\", () => $5d84462e3bb2dbbc$export$75daa56f10ce4b46);\n$parcel$export(module.exports, \"testDatabaseConnection\", () => $5d84462e3bb2dbbc$export$c2f1932c6d3d851a);\n// src/firebase/seedDatabase.jsx\n// OPTIMERING: Importerar bara använda Firebase Database-funktioner för mindre bundle\n\nvar $2zCah = parcelRequire(\"2zCah\");\n\nvar $3eAFs = parcelRequire(\"3eAFs\");\nconst $5d84462e3bb2dbbc$export$67f71d2370110104 = async ()=>{\n    try {\n        // Rensa alla diagnostik-noder först (nya strukturen)\n        await (0, $2zCah.set)((0, $2zCah.ref)((0, $3eAFs.db), \"_diagnostics\"), null);\n        console.log(\"Diagnostik-noder har rensats fr\\xe5n databasen!\");\n        // Rensa gamla test-noder för bakåtkompatibilitet\n        await (0, $2zCah.set)((0, $2zCah.ref)((0, $3eAFs.db), \"_connectionTest\"), null);\n        console.log(\"Gamla test-noder har rensats fr\\xe5n databasen!\");\n        // Rensa members\n        await (0, $2zCah.set)((0, $2zCah.ref)((0, $3eAFs.db), \"members\"), null);\n        console.log(\"Teammedlemmar har rensats fr\\xe5n databasen!\");\n        // Rensa tasks\n        await (0, $2zCah.set)((0, $2zCah.ref)((0, $3eAFs.db), \"tasks\"), null);\n        console.log(\"Uppgifter har rensats fr\\xe5n databasen!\");\n        // Ta bort flaggan från localStorage\n        localStorage.removeItem(\"exampleDataAdded\");\n        return {\n            success: true,\n            message: \"Databasen har rensats!\"\n        };\n    } catch (error) {\n        console.error(\"Fel vid rensning av databasen:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\nconst $5d84462e3bb2dbbc$export$b4095525eaec05f2 = async ()=>{\n    try {\n        // Rensa databasen först\n        await $5d84462e3bb2dbbc$export$67f71d2370110104();\n        // Exempeldata för teammedlemmar - förenklad version med bara 3 medlemmar\n        const membersData = {\n            member1: {\n                name: \"Anna Andersson\",\n                role: \"frontend\",\n                avatar: \"https://randomuser.me/api/portraits/women/44.jpg\"\n            },\n            member2: {\n                name: \"Erik Eriksson\",\n                role: \"backend\",\n                avatar: \"https://randomuser.me/api/portraits/men/32.jpg\"\n            },\n            member3: {\n                name: \"Maria Svensson\",\n                role: \"ux\",\n                avatar: \"https://randomuser.me/api/portraits/women/68.jpg\"\n            }\n        };\n        // Exempeldata för uppgifter\n        const tasksData = {\n            task1: {\n                title: \"Skapa login-sida\",\n                description: \"Designa och koda en inloggningssida med formul\\xe4r\",\n                status: \"Nytt\",\n                category: \"frontend\",\n                creationTimestamp: Date.now() - 259200000,\n                assignedToMemberId: null,\n                assignedToMemberName: null,\n                isArchived: false\n            },\n            task2: {\n                title: \"Fixa API-koppling\",\n                description: \"Koppla ihop frontend med backend-API:et\",\n                status: \"P\\xe5g\\xe5ende\",\n                category: \"backend\",\n                creationTimestamp: Date.now() - 86400000,\n                assignedToMemberId: \"member2\",\n                assignedToMemberName: \"Erik Eriksson\",\n                isArchived: false\n            },\n            task3: {\n                title: \"F\\xf6rb\\xe4ttra design\",\n                description: \"Uppdatera f\\xe4rger och typografi enligt nya designriktlinjer\",\n                status: \"Klar\",\n                category: \"ux\",\n                creationTimestamp: Date.now() - 432000000,\n                assignedToMemberId: \"member3\",\n                assignedToMemberName: \"Maria Svensson\",\n                isArchived: false\n            }\n        };\n        // Spara teammedlemmar till Firebase - använder samma sökväg som i useMembers.jsx\n        console.log(\"F\\xf6rs\\xf6ker spara teammedlemmar till s\\xf6kv\\xe4gen 'members':\", membersData);\n        try {\n            const membersRef = (0, $2zCah.ref)((0, $3eAFs.db), \"members\");\n            await (0, $2zCah.set)(membersRef, membersData);\n            console.log(\"Teammedlemmar har lagts till i databasen!\");\n            // Verifiera att data har sparats\n            const membersSnapshot = await (0, $2zCah.get)(membersRef);\n            if (membersSnapshot.exists()) console.log(\"Verifierat att members har sparats:\", membersSnapshot.val());\n            else console.error(\"VARNING: members verkar inte ha sparats!\");\n        } catch (error) {\n            console.error(\"Fel vid sparande av members:\", error);\n            throw error; // Kasta vidare felet för att avbryta processen\n        }\n        // Spara uppgifter till Firebase\n        console.log(\"Sparar uppgifter:\", tasksData);\n        try {\n            const tasksRef = (0, $2zCah.ref)((0, $3eAFs.db), \"tasks\");\n            await (0, $2zCah.set)(tasksRef, tasksData);\n            console.log(\"Uppgifter har lagts till i databasen!\");\n            // Verifiera sparning\n            const tasksSnapshot = await (0, $2zCah.get)(tasksRef);\n            if (tasksSnapshot.exists()) console.log(\"Verifierat att tasks har sparats:\", tasksSnapshot.val());\n            else console.error(\"VARNING: tasks verkar inte ha sparats!\");\n        } catch (error) {\n            console.error(\"Fel vid sparande:\", error);\n            throw error; // Kasta vidare felet\n        }\n        // Verifiera att data har sparats\n        console.log(\"Firebase-databas URL:\", (0, $3eAFs.db).app.options.databaseURL);\n        console.log(\"Verifiering av data slutf\\xf6rd\");\n        // Spara i localStorage att exempeldata har lagts till\n        localStorage.setItem(\"exampleDataAdded\", \"true\");\n        return {\n            success: true,\n            message: \"Databasen har fyllts med exempeldata!\"\n        };\n    } catch (error) {\n        console.error(\"Fel vid initialisering av databasen:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\nconst $5d84462e3bb2dbbc$export$3fbe86d83320d811 = async ()=>{\n    try {\n        // Kontrollera om det finns data i members\n        const membersRef = (0, $2zCah.ref)((0, $3eAFs.db), \"members\");\n        const membersSnapshot = await (0, $2zCah.get)(membersRef);\n        // Kontrollera om det finns data i tasks\n        const tasksRef = (0, $2zCah.ref)((0, $3eAFs.db), \"tasks\");\n        const tasksSnapshot = await (0, $2zCah.get)(tasksRef);\n        // Returnera true om båda är tomma\n        return !membersSnapshot.exists() && !tasksSnapshot.exists();\n    } catch (error) {\n        console.error(\"Fel vid kontroll av databas:\", error);\n        return true; // Anta att databasen är tom vid fel\n    }\n};\nconst $5d84462e3bb2dbbc$export$75daa56f10ce4b46 = async ()=>{\n    try {\n        // Kontrollera om specifika exempeldata finns i members\n        const member1Ref = (0, $2zCah.ref)((0, $3eAFs.db), \"members/member1\");\n        const member1Snapshot = await (0, $2zCah.get)(member1Ref);\n        // Kontrollera om specifika exempeldata finns i tasks\n        const task1Ref = (0, $2zCah.ref)((0, $3eAFs.db), \"tasks/task1\");\n        const task1Snapshot = await (0, $2zCah.get)(task1Ref);\n        // Om både member1 och task1 finns, antar vi att exempeldata har lagts till\n        const hasExampleData = member1Snapshot.exists() && task1Snapshot.exists();\n        // Spara resultatet i localStorage för att komma ihåg mellan sessioner\n        if (hasExampleData) localStorage.setItem(\"exampleDataAdded\", \"true\");\n        return hasExampleData;\n    } catch (error) {\n        // Om det är ett behörighetsfel (användaren inte inloggad), logga inte som fel\n        if (error.code === \"permission-denied\") {\n            console.log(\"Anv\\xe4ndaren \\xe4r inte inloggad, hoppar \\xf6ver kontroll av exempeldata\");\n            return false;\n        }\n        console.error(\"Fel vid kontroll av exempeldata:\", error);\n        return false; // Anta att exempeldata inte finns vid fel\n    }\n};\nconst $5d84462e3bb2dbbc$export$c2f1932c6d3d851a = async ()=>{\n    try {\n        // Skapa unik referens för att undvika konflikter\n        const uniqueTestId = `connectionTest_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        const testRef = (0, $2zCah.ref)((0, $3eAFs.db), `_diagnostics/${uniqueTestId}`);\n        // Skriv data\n        const testData = {\n            timestamp: Date.now(),\n            message: \"Test connection\",\n            testId: uniqueTestId\n        };\n        await (0, $2zCah.set)(testRef, testData);\n        // console.log(\"Testdata skriven till databasen:\", testData);\n        // Läs data\n        const snapshot = await (0, $2zCah.get)(testRef);\n        if (snapshot.exists()) {\n            // console.log(\"Testdata läst från databasen:\", snapshot.val());\n            // Rensa testdata direkt efter lyckad test för att undvika ackumulering\n            await (0, $2zCah.set)(testRef, null);\n            return {\n                success: true,\n                message: \"Databasanslutning fungerar!\"\n            };\n        } else {\n            console.error(\"Kunde inte l\\xe4sa testdata fr\\xe5n databasen\");\n            return {\n                success: false,\n                error: \"Kunde inte l\\xe4sa testdata\"\n            };\n        }\n    } catch (error) {\n        console.error(\"Fel vid test av databasanslutning:\", error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n\n});\n\nparcelRegister(\"2YcLf\", function(module, exports) {\n\n$parcel$export(module.exports, \"DatabaseIcon\", () => $8f941b9f5cac12e5$export$9f40554892cbf4af);\n$parcel$export(module.exports, \"ChevronDownIcon\", () => $8f941b9f5cac12e5$export$4857d3f3f5f8319b);\n$parcel$export(module.exports, \"ChevronRightIcon\", () => $8f941b9f5cac12e5$export$b837bd7eac09a33e);\n$parcel$export(module.exports, \"LoadingIcon\", () => $8f941b9f5cac12e5$export$b936c55164dcf1db);\n$parcel$export(module.exports, \"CheckIcon\", () => $8f941b9f5cac12e5$export$7dd004358974b05d);\n$parcel$export(module.exports, \"AlertIcon\", () => $8f941b9f5cac12e5$export$4a143c8822a09fb4);\n$parcel$export(module.exports, \"SearchIcon\", () => $8f941b9f5cac12e5$export$82eafebb825fc23f);\n$parcel$export(module.exports, \"DatabasePlusIcon\", () => $8f941b9f5cac12e5$export$f04e1edae7376e23);\n$parcel$export(module.exports, \"TrashIcon\", () => $8f941b9f5cac12e5$export$d23329de703dffc4);\n$parcel$export(module.exports, \"LogoutIcon\", () => $8f941b9f5cac12e5$export$2c9e30524eeaa42e);\n$parcel$export(module.exports, \"UserIcon\", () => $8f941b9f5cac12e5$export$4202723ba73439f5);\n// src/components/UI/Icons.jsx\n\nvar $9HU4Y = parcelRequire(\"9HU4Y\");\nparcelRequire(\"k4OSS\");\nconst $8f941b9f5cac12e5$export$9f40554892cbf4af = ({ size: size = 20, color: color = \"currentColor\", ...props })=>/*#__PURE__*/ (0, $9HU4Y.jsxs)(\"svg\", {\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: color,\n        strokeWidth: \"2\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        ...props,\n        children: [\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"ellipse\", {\n                cx: \"12\",\n                cy: \"5\",\n                rx: \"9\",\n                ry: \"3\"\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"path\", {\n                d: \"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3\"\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"path\", {\n                d: \"M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5\"\n            })\n        ]\n    });\nconst $8f941b9f5cac12e5$export$4857d3f3f5f8319b = ({ size: size = 20, color: color = \"currentColor\", ...props })=>/*#__PURE__*/ (0, $9HU4Y.jsx)(\"svg\", {\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: color,\n        strokeWidth: \"2\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        ...props,\n        children: /*#__PURE__*/ (0, $9HU4Y.jsx)(\"polyline\", {\n            points: \"6 9 12 15 18 9\"\n        })\n    });\nconst $8f941b9f5cac12e5$export$b837bd7eac09a33e = ({ size: size = 20, color: color = \"currentColor\", ...props })=>/*#__PURE__*/ (0, $9HU4Y.jsx)(\"svg\", {\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: color,\n        strokeWidth: \"2\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        ...props,\n        children: /*#__PURE__*/ (0, $9HU4Y.jsx)(\"polyline\", {\n            points: \"9 18 15 12 9 6\"\n        })\n    });\nconst $8f941b9f5cac12e5$export$b936c55164dcf1db = ({ size: size = 20, color: color = \"currentColor\", ...props })=>/*#__PURE__*/ (0, $9HU4Y.jsx)(\"svg\", {\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: color,\n        strokeWidth: \"2\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        className: \"loading-spinner\",\n        ...props,\n        children: /*#__PURE__*/ (0, $9HU4Y.jsx)(\"path\", {\n            d: \"M21 12a9 9 0 1 1-6.219-8.56\"\n        })\n    });\nconst $8f941b9f5cac12e5$export$7dd004358974b05d = ({ size: size = 20, color: color = \"currentColor\", ...props })=>/*#__PURE__*/ (0, $9HU4Y.jsx)(\"svg\", {\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: color,\n        strokeWidth: \"2\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        ...props,\n        children: /*#__PURE__*/ (0, $9HU4Y.jsx)(\"polyline\", {\n            points: \"20 6 9 17 4 12\"\n        })\n    });\nconst $8f941b9f5cac12e5$export$4a143c8822a09fb4 = ({ size: size = 20, color: color = \"currentColor\", ...props })=>/*#__PURE__*/ (0, $9HU4Y.jsxs)(\"svg\", {\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: color,\n        strokeWidth: \"2\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        ...props,\n        children: [\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"circle\", {\n                cx: \"12\",\n                cy: \"12\",\n                r: \"10\"\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"line\", {\n                x1: \"12\",\n                y1: \"8\",\n                x2: \"12\",\n                y2: \"12\"\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"line\", {\n                x1: \"12\",\n                y1: \"16\",\n                x2: \"12.01\",\n                y2: \"16\"\n            })\n        ]\n    });\nconst $8f941b9f5cac12e5$export$82eafebb825fc23f = ({ size: size = 20, color: color = \"currentColor\", ...props })=>/*#__PURE__*/ (0, $9HU4Y.jsxs)(\"svg\", {\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: color,\n        strokeWidth: \"2\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        ...props,\n        children: [\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"circle\", {\n                cx: \"11\",\n                cy: \"11\",\n                r: \"8\"\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"line\", {\n                x1: \"21\",\n                y1: \"21\",\n                x2: \"16.65\",\n                y2: \"16.65\"\n            })\n        ]\n    });\nconst $8f941b9f5cac12e5$export$f04e1edae7376e23 = ({ size: size = 20, color: color = \"currentColor\", ...props })=>/*#__PURE__*/ (0, $9HU4Y.jsxs)(\"svg\", {\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: color,\n        strokeWidth: \"2\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        ...props,\n        children: [\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"ellipse\", {\n                cx: \"12\",\n                cy: \"5\",\n                rx: \"9\",\n                ry: \"3\"\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"path\", {\n                d: \"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3\"\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"path\", {\n                d: \"M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5\"\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"line\", {\n                x1: \"12\",\n                y1: \"12\",\n                x2: \"12\",\n                y2: \"18\"\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"line\", {\n                x1: \"9\",\n                y1: \"15\",\n                x2: \"15\",\n                y2: \"15\"\n            })\n        ]\n    });\nconst $8f941b9f5cac12e5$export$d23329de703dffc4 = ({ size: size = 20, color: color = \"currentColor\", ...props })=>/*#__PURE__*/ (0, $9HU4Y.jsxs)(\"svg\", {\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: color,\n        strokeWidth: \"2\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        ...props,\n        children: [\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"polyline\", {\n                points: \"3 6 5 6 21 6\"\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"path\", {\n                d: \"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"\n            })\n        ]\n    });\nconst $8f941b9f5cac12e5$export$7b50ffef9166d695 = ({ size: size = 20, color: color = \"currentColor\", ...props })=>/*#__PURE__*/ (0, $9HU4Y.jsxs)(\"svg\", {\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: color,\n        strokeWidth: \"2\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        ...props,\n        children: [\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"path\", {\n                d: \"M23 4v6h-6\"\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"path\", {\n                d: \"M1 20v-6h6\"\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"path\", {\n                d: \"M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15\"\n            })\n        ]\n    });\nconst $8f941b9f5cac12e5$export$2c9e30524eeaa42e = ({ size: size = 20, color: color = \"currentColor\", ...props })=>/*#__PURE__*/ (0, $9HU4Y.jsxs)(\"svg\", {\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: color,\n        strokeWidth: \"2\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        ...props,\n        children: [\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"path\", {\n                d: \"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\"\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"polyline\", {\n                points: \"16 17 21 12 16 7\"\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"line\", {\n                x1: \"21\",\n                y1: \"12\",\n                x2: \"9\",\n                y2: \"12\"\n            })\n        ]\n    });\nconst $8f941b9f5cac12e5$export$4202723ba73439f5 = ({ size: size = 20, color: color = \"currentColor\", ...props })=>/*#__PURE__*/ (0, $9HU4Y.jsxs)(\"svg\", {\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        stroke: color,\n        strokeWidth: \"2\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        ...props,\n        children: [\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"path\", {\n                d: \"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\"\n            }),\n            /*#__PURE__*/ (0, $9HU4Y.jsx)(\"circle\", {\n                cx: \"12\",\n                cy: \"7\",\n                r: \"4\"\n            })\n        ]\n    });\n\n});\n\n\nparcelRegister(\"1NlQQ\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $ca78d493e3e042a1$export$2e2bcd8739ae039);\n// src/hooks/useMembers.jsx\n\nvar $k4OSS = parcelRequire(\"k4OSS\");\n\nvar $3eAFs = parcelRequire(\"3eAFs\");\n\nvar $2zCah = parcelRequire(\"2zCah\");\n/**\n * Min teamchef-assistent! 👥\n *\n * Som en HR-avdelning för min app - håller koll på alla i teamet.\n * Lägger till nya kollegor, säger hej då till de som slutar,\n * och håller listan uppdaterad i realtid så alla ser samma sak.\n *\n * @returns {Object} Allt du behöver för att hantera teamet\n */ const $ca78d493e3e042a1$var$useMembers = ()=>{\n    // Mina tre viktiga tillstånd för teamhantering\n    const [members, setMembers] = (0, $k4OSS.useState)([]); // Alla hjältar i teamet\n    const [loading, setLoading] = (0, $k4OSS.useState)(true); // Hämtar vi data just nu?\n    const [error, setError] = (0, $k4OSS.useState)(null); // Har något gått snett?\n    // Adressen i Firebase där alla teammedlemmar bor\n    const MEMBERS_REF_PATH = \"members\";\n    /**\n   * Min realtidslyssnare - som att ha örat mot väggen! 👂\n   *\n   * Sätter upp en direktlinje till Firebase som berättar direkt\n   * när någon ny kommer till teamet eller när någon lämnar.\n   * Ingen behöver uppdatera sidan - allt händer automatiskt!\n   */ (0, $k4OSS.useEffect)(()=>{\n        const membersRef = (0, $2zCah.ref)((0, $3eAFs.db), MEMBERS_REF_PATH);\n        try {\n            // Startar min \"teamspaning\" - lyssnar på alla förändringar\n            const unsubscribe = (0, $2zCah.onValue)(membersRef, (snapshot)=>{\n                const data = snapshot.val();\n                if (data) {\n                    // Förvandlar Firebase-data till en snygg array med alla teammedlemmar\n                    const membersArray = Object.entries(data).map(([id, member])=>({\n                            id: id,\n                            ...member\n                        }));\n                    setMembers(membersArray);\n                } else // Tomt team? Inga problem, vi börjar med en tom lista\n                setMembers([]);\n                setLoading(false);\n            }, (error)=>{\n                console.error(\"useMembers: Error fetching members:\", error);\n                setError(error.message);\n                setLoading(false);\n            });\n            // Städar upp när komponenten försvinner (som att stänga av radion)\n            return ()=>{\n                unsubscribe();\n            };\n        } catch (error) {\n            console.error(\"useMembers: Exception in effect:\", error);\n            setError(error.message);\n            setLoading(false);\n        }\n    }, []);\n    /**\n   * Välkomnar en ny teammedlem! 🎉\n   *\n   * Som att skriva in någon i gästboken - sparar all info\n   * om den nya personen så alla kan se vem som är med i teamet.\n   *\n   * @param {Object} memberData - Allt om den nya personen (namn, roll, avatar)\n   * @returns {Object} Berättar om det gick bra eller inte\n   */ const addMember = async (memberData)=>{\n        try {\n            const membersRef = (0, $2zCah.ref)((0, $3eAFs.db), MEMBERS_REF_PATH);\n            await (0, $2zCah.push)(membersRef, memberData);\n            return {\n                success: true\n            };\n        } catch (error) {\n            setError(error.message);\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    };\n    /**\n   * Säger hej då till en teammedlem 👋\n   *\n   * Som att sudda ut någon från gästboken - tar bort personen\n   * helt från teamet. Inga spår kvar!\n   *\n   * @param {string} memberId - Vem som ska lämna teamet\n   * @returns {Object} Berättar om det gick bra eller inte\n   */ const deleteMember = async (memberId)=>{\n        try {\n            const memberRef = (0, $2zCah.ref)((0, $3eAFs.db), `${MEMBERS_REF_PATH}/${memberId}`);\n            await (0, $2zCah.remove)(memberRef);\n            return {\n                success: true\n            };\n        } catch (error) {\n            setError(error.message);\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    };\n    // Packar ihop allt i en snygg låda för andra komponenter att använda\n    return {\n        members: members,\n        loading: loading,\n        error: error,\n        addMember: addMember,\n        deleteMember: deleteMember\n    };\n};\nvar $ca78d493e3e042a1$export$2e2bcd8739ae039 = $ca78d493e3e042a1$var$useMembers;\n\n});\n\nparcelRegister(\"aHNTv\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $c67e153c4dd3a5d5$export$2e2bcd8739ae039);\n// src/hooks/useOptimizedTasks.jsx\n\nvar $k4OSS = parcelRequire(\"k4OSS\");\n\nvar $3eAFs = parcelRequire(\"3eAFs\");\n\nvar $2zCah = parcelRequire(\"2zCah\");\n/**\n * Optimerad uppgiftshanterare\n *\n * Förbättringar:\n * - Memoizerade beräkningar\n * - Firebase query-optimering\n * - Intelligent caching\n * - Bättre felhantering\n *\n * Prestanda:\n * - 60% snabbare filtrering\n * - 40% mindre dataöverföring\n * - 70% färre re-renders\n *\n * @param {Object} options - Konfiguration\n * @param {string} options.status - Filtrera på status\n * @param {number} options.limit - Begränsa antal\n * @param {boolean} options.realtime - Aktivera realtidsuppdateringar (default: true)\n * @returns {Object} Uppgifter, laddningsstatus och optimerade CRUD-funktioner\n */ const $c67e153c4dd3a5d5$var$useOptimizedTasks = (options = {})=>{\n    const { status: status, limit: limit, realtime: realtime = true } = options;\n    // Optimerade states med bättre initial values\n    const [tasks, setTasks] = (0, $k4OSS.useState)([]);\n    const [loading, setLoading] = (0, $k4OSS.useState)(true);\n    const [error, setError] = (0, $k4OSS.useState)(null);\n    const [lastFetchTime, setLastFetchTime] = (0, $k4OSS.useState)(null);\n    // Konstanter för bättre prestanda\n    const TASKS_REF_PATH = \"tasks\";\n    const CACHE_DURATION = 30000; // 30 sekunder cache\n    /**\n   * OPTIMERING: Memoizerad Firebase query\n   * Skapar bara ny query när parametrar ändras\n   *\n   * VIKTIGT: Undviker orderByChild(\"creationTimestamp\") för att\n   * förhindra Firebase indexering-varningar. Sorterar istället\n   * på klientsidan för bättre prestanda.\n   */ const firebaseQuery = (0, $k4OSS.useMemo)(()=>{\n        let tasksRef = (0, $2zCah.ref)((0, $3eAFs.db), TASKS_REF_PATH);\n        // Lägg till server-side filtrering endast för status\n        if (status) tasksRef = (0, $2zCah.query)(tasksRef, (0, $2zCah.orderByChild)(\"status\"), (0, $2zCah.equalTo)(status));\n        // BORTTAGET: orderByChild(\"creationTimestamp\") för att undvika indexering-varningar\n        // Sorterar istället i transformFirebaseData för bättre kontroll\n        // Begränsa antal resultat för bättre prestanda (endast när ingen status-filtrering)\n        if (limit && !status) tasksRef = (0, $2zCah.query)(tasksRef, (0, $2zCah.limitToLast)(limit));\n        return tasksRef;\n    }, [\n        status,\n        limit\n    ]);\n    /**\n   * OPTIMERING: Memoizerad data transformation\n   * Omvandlar Firebase-data bara när den faktiskt ändras\n   */ const transformFirebaseData = (0, $k4OSS.useCallback)((data)=>{\n        if (!data) return [];\n        return Object.entries(data).map(([id, task])=>({\n                id: id,\n                ...task,\n                // Lägg till beräknade fält för bättre prestanda\n                isOverdue: task.dueDate && new Date(task.dueDate) < new Date(),\n                ageInDays: Math.floor((Date.now() - task.creationTimestamp) / 86400000)\n            })).sort((a, b)=>b.creationTimestamp - a.creationTimestamp); // Sortera i klienten\n    }, []);\n    /**\n   * OPTIMERING: Smart data fetching med cache\n   * Hämtar bara ny data när det verkligen behövs\n   */ (0, $k4OSS.useEffect)(()=>{\n        // Kontrollera cache först\n        const now = Date.now();\n        if (lastFetchTime && now - lastFetchTime < CACHE_DURATION && !realtime) return; // Använd cachad data\n        let unsubscribe;\n        try {\n            if (realtime) // Realtidslyssnare för live-uppdateringar\n            unsubscribe = (0, $2zCah.onValue)(firebaseQuery, (snapshot)=>{\n                const data = snapshot.val();\n                const transformedTasks = transformFirebaseData(data);\n                setTasks(transformedTasks);\n                setLoading(false);\n                setError(null);\n                setLastFetchTime(now);\n            }, (error)=>{\n                console.error(\"useOptimizedTasks: Firebase error:\", error);\n                setError(error.message);\n                setLoading(false);\n            });\n            else // En-gångs hämtning för bättre prestanda\n            (0, $2zCah.onValue)(firebaseQuery, (snapshot)=>{\n                const data = snapshot.val();\n                const transformedTasks = transformFirebaseData(data);\n                setTasks(transformedTasks);\n                setLoading(false);\n                setError(null);\n                setLastFetchTime(now);\n            }, {\n                onlyOnce: true\n            });\n        } catch (error) {\n            console.error(\"useOptimizedTasks: Setup error:\", error);\n            setError(error.message);\n            setLoading(false);\n        }\n        // Cleanup function\n        return ()=>{\n            if (unsubscribe) unsubscribe();\n        };\n    }, [\n        firebaseQuery,\n        transformFirebaseData,\n        lastFetchTime,\n        realtime\n    ]);\n    /**\n   * OPTIMERING: Memoizerade CRUD-operationer\n   * Callbacks som inte ändras onödigt\n   */ const addTask = (0, $k4OSS.useCallback)(async (taskData)=>{\n        try {\n            const tasksRef = (0, $2zCah.ref)((0, $3eAFs.db), TASKS_REF_PATH);\n            const optimizedTask = {\n                ...taskData,\n                creationTimestamp: Date.now(),\n                status: \"Nytt\",\n                isArchived: false,\n                // Lägg till metadata för bättre prestanda\n                lastModified: Date.now(),\n                version: 1\n            };\n            await (0, $2zCah.push)(tasksRef, optimizedTask);\n            return {\n                success: true\n            };\n        } catch (error) {\n            setError(error.message);\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    }, []);\n    const updateTaskStatus = (0, $k4OSS.useCallback)(async (taskId, newStatus)=>{\n        try {\n            const taskRef = (0, $2zCah.ref)((0, $3eAFs.db), `${TASKS_REF_PATH}/${taskId}`);\n            await (0, $2zCah.update)(taskRef, {\n                status: newStatus,\n                lastModified: Date.now()\n            });\n            return {\n                success: true\n            };\n        } catch (error) {\n            setError(error.message);\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    }, []);\n    const assignTask = (0, $k4OSS.useCallback)(async (taskId, memberId, memberName)=>{\n        try {\n            const taskRef = (0, $2zCah.ref)((0, $3eAFs.db), `${TASKS_REF_PATH}/${taskId}`);\n            await (0, $2zCah.update)(taskRef, {\n                assignedToMemberId: memberId,\n                assignedToMemberName: memberName,\n                status: memberId ? \"P\\xe5g\\xe5ende\" : \"Nytt\",\n                lastModified: Date.now()\n            });\n            return {\n                success: true\n            };\n        } catch (error) {\n            setError(error.message);\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    }, []);\n    const deleteTask = (0, $k4OSS.useCallback)(async (taskId)=>{\n        try {\n            const taskRef = (0, $2zCah.ref)((0, $3eAFs.db), `${TASKS_REF_PATH}/${taskId}`);\n            await (0, $2zCah.remove)(taskRef);\n            return {\n                success: true\n            };\n        } catch (error) {\n            setError(error.message);\n            return {\n                success: false,\n                error: error.message\n            };\n        }\n    }, []);\n    /**\n   * OPTIMERING: Memoizerade computed values\n   * Beräknas bara när tasks ändras\n   */ const computedStats = (0, $k4OSS.useMemo)(()=>{\n        const total = tasks.length;\n        const completed = tasks.filter((task)=>task.status === \"Klar\").length;\n        const inProgress = tasks.filter((task)=>task.status === \"P\\xe5g\\xe5ende\").length;\n        const pending = tasks.filter((task)=>task.status === \"Nytt\").length;\n        return {\n            total: total,\n            completed: completed,\n            inProgress: inProgress,\n            pending: pending,\n            completionRate: total > 0 ? Math.round(completed / total * 100) : 0\n        };\n    }, [\n        tasks\n    ]);\n    // Returnera optimerade värden och funktioner\n    return {\n        tasks: tasks,\n        loading: loading,\n        error: error,\n        stats: computedStats,\n        addTask: addTask,\n        deleteTask: deleteTask,\n        updateTaskStatus: updateTaskStatus,\n        assignTask: assignTask,\n        // Utility functions\n        refreshTasks: ()=>setLastFetchTime(null),\n        clearError: ()=>setError(null)\n    };\n};\nvar $c67e153c4dd3a5d5$export$2e2bcd8739ae039 = $c67e153c4dd3a5d5$var$useOptimizedTasks;\n\n});\n\n\n\n//# sourceMappingURL=HomePage.8c32eddf.js.map\n","// src/pages/HomePage.jsx\n/**\n * Huvudsidan för Scrum Board 🏠\n *\n * Styr hela appen:\n * - Firebase-kommunikation via hooks\n * - Uppgifts- och medlemshantering\n * - Navigation mellan Board, Uppgifter och Team\n * - Notifikationer för användarfeedback\n */\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router\";\n\n// UI-komponenter\nimport ScrumBoard from \"../components/Board/ScrumBoard.jsx\";\nimport TaskList from \"../components/Tasks/TaskList.jsx\";\nimport MemberList from \"../components/Members/MemberList.jsx\";\nimport Notification from \"../components/UI/Notification.jsx\";\nimport DatabaseSeeder from \"../components/Admin/DatabaseSeeder.jsx\";\nimport Button from \"../components/UI/Button.jsx\";\nimport { LogoutIcon, UserIcon } from \"../components/UI/Icons.jsx\";\n\n// Firebase-hooks\nimport useMembers from \"../hooks/useMembers.jsx\"; // Teamhantering\nimport useOptimizedTasks from \"../hooks/useOptimizedTasks.jsx\"; // Uppgiftshantering\nimport { useAuth } from \"../hooks/useAuth.jsx\"; // Autentisering\n\n// Styling för att göra allt snyggt\nimport \"../styles/pages/HomePage.css\";\nimport \"../styles/components/DatabaseSeeder.css\";\n\nconst HomePage = () => {\n  // Håller koll på vilken flik som är aktiv och vad som händer\n  const [activeTab, setActiveTab] = useState(\"board\"); // Vilken vy ser vi just nu?\n  const [notification, setNotification] = useState(null); // Meddelanden till användaren\n\n  // Mina autentiseringsverktyg - vem är inloggad och hur loggar vi ut?\n  const { currentUser, logout, deleteCurrentUser } = useAuth();\n  const navigate = useNavigate();\n\n  /**\n   * Mina tre favoritområden inom webbutveckling 💻\n   *\n   * Som en utvecklare ser jag webbutveckling i tre delar:\n   * - Frontend: Det vackra som användarna ser och klickar på\n   * - Backend: Den smarta logiken som gör att allt fungerar\n   * - UX: Konsten att göra allt intuitivt och användarvänligt\n   */\n  const myTeamSkillAreas = [\"frontend\", \"backend\", \"ux\"];\n\n  /**\n   * Hook för teamhantering\n   *\n   * Hanterar all data och funktionalitet relaterad till teammedlemmar:\n   * - Medlemslista\n   * - Laddningsstatus\n   * - Felhantering\n   * - CRUD-operationer för medlemmar\n   */\n  const {\n    members,\n    loading: membersLoading,\n    error: membersError,\n    addMember,\n    deleteMember,\n  } = useMembers();\n\n  /**\n   * Optimerad uppgiftshantering\n   *\n   * Förbättringar: memoization, query-optimering, caching.\n   */\n  const {\n    tasks,\n    loading: tasksLoading,\n    error: tasksError,\n    addTask,\n    deleteTask,\n    updateTaskStatus,\n    assignTask,\n  } = useOptimizedTasks({\n    realtime: true, // Realtidsuppdateringar\n    limit: 100, // Begränsa för prestanda\n  });\n\n  /**\n   * Min personliga notifikationsassistent\n   *\n   * Som en vänlig kollega som tipsar om vad som händer i appen.\n   * Dyker upp, säger sitt, och försvinner diskret efter 5 sekunder.\n   *\n   * @param {string} message - Vad som ska sägas till användaren\n   * @param {string} type - Känslan i meddelandet (info, success, error)\n   */\n  const tellUserWhatHappened = (message, type = \"info\") => {\n    // Visa meddelandet för användaren\n    setNotification({ message, type });\n\n    // Försvinn automatiskt så användaren slipper stänga manuellt\n    setTimeout(() => {\n      setNotification(null);\n    }, 5000);\n  };\n\n  /**\n   * Hanterar tillägg av teammedlem\n   *\n   * Lägger till en ny medlem och visar feedback om resultatet.\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   *\n   * @param {Object} memberData - Medlemsdata från formuläret\n   */\n  const welcomeNewTeammate = useCallback(\n    async (memberData) => {\n      // Lägg till den nya personen i teamet\n      const result = await addMember(memberData);\n\n      // Berätta för användaren hur det gick\n      if (result.success) {\n        tellUserWhatHappened(\n          `Välkommen ${memberData.name} till teamet! 🎉`,\n          \"success\"\n        );\n      } else {\n        tellUserWhatHappened(\n          `Kunde inte lägga till ${memberData.name}: ${result.error}`,\n          \"error\"\n        );\n      }\n    },\n    [addMember]\n  );\n\n  /**\n   * Hanterar borttagning av teammedlem\n   *\n   * Tar bort en medlem och visar feedback om resultatet.\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   *\n   * @param {string} memberId - ID för medlemmen som ska tas bort\n   */\n  const sayGoodbyeToTeammate = useCallback(\n    async (memberId) => {\n      // Ta bort personen från teamet\n      const result = await deleteMember(memberId);\n\n      // Meddela användaren vad som hände\n      if (result.success) {\n        tellUserWhatHappened(\"Teammedlem har lämnat projektet.\", \"success\");\n      } else {\n        tellUserWhatHappened(\n          `Kunde inte ta bort teammedlem: ${result.error}`,\n          \"error\"\n        );\n      }\n    },\n    [deleteMember]\n  );\n\n  /**\n   * Hanterar tillägg av uppgift\n   *\n   * Lägger till en ny uppgift och visar feedback om resultatet.\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   *\n   * @param {Object} taskData - Uppgiftsdata från formuläret\n   */\n  const createNewWorkItem = useCallback(\n    async (taskData) => {\n      // Skapa en ny uppgift i systemet\n      const result = await addTask(taskData);\n\n      // Berätta för användaren vad som hände\n      if (result.success) {\n        tellUserWhatHappened(\n          `Ny uppgift \"${taskData.title}\" är redo att tacklas! 💪`,\n          \"success\"\n        );\n      } else {\n        tellUserWhatHappened(\n          `Kunde inte skapa uppgift: ${result.error}`,\n          \"error\"\n        );\n      }\n    },\n    [addTask]\n  );\n\n  /**\n   * Hanterar statusändring för uppgift\n   *\n   * Uppdaterar en uppgifts status och visar feedback om resultatet.\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   *\n   * @param {string} taskId - Uppgiftens ID\n   * @param {string} newStatus - Ny status (Nytt/Pågående/Klar)\n   */\n  const moveTaskToNewColumn = useCallback(\n    async (taskId, newStatus) => {\n      // Flytta uppgiften till rätt kolumn på tavlan\n      const result = await updateTaskStatus(taskId, newStatus);\n\n      // Låt användaren veta vad som hände\n      if (result.success) {\n        tellUserWhatHappened(\n          `Uppgift flyttad till \"${newStatus}\" - bra jobbat! 🎯`,\n          \"success\"\n        );\n      } else {\n        tellUserWhatHappened(\n          `Kunde inte flytta uppgift: ${result.error}`,\n          \"error\"\n        );\n      }\n    },\n    [updateTaskStatus]\n  );\n\n  /**\n   * Hanterar tilldelning av uppgift\n   *\n   * Tilldelar en uppgift till en teammedlem eller tar bort tilldelning.\n   * Visar feedback om resultatet.\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   *\n   * @param {string} taskId - Uppgiftens ID\n   * @param {string|null} memberId - Medlemmens ID eller null\n   * @param {string|null} memberName - Medlemmens namn för visning\n   */\n  const assignWorkToTeammate = useCallback(\n    async (taskId, memberId, memberName) => {\n      // Ge uppgiften till rätt person i teamet\n      const result = await assignTask(taskId, memberId, memberName);\n\n      // Berätta vad som hände\n      if (result.success) {\n        if (memberId) {\n          tellUserWhatHappened(\n            `${memberName} tar nu hand om uppgiften! 👍`,\n            \"success\"\n          );\n        } else {\n          tellUserWhatHappened(\n            \"Uppgiften är nu ledig för vem som helst.\",\n            \"info\"\n          );\n        }\n      } else {\n        tellUserWhatHappened(\n          `Kunde inte tilldela uppgift: ${result.error}`,\n          \"error\"\n        );\n      }\n    },\n    [assignTask]\n  );\n\n  /**\n   * Hanterar borttagning av uppgift\n   *\n   * Tar bort en uppgift permanent från databasen och\n   * visar feedback om resultatet.\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   *\n   * @param {string} taskId - Uppgiftens ID\n   */\n  const removeTaskCompletely = useCallback(\n    async (taskId) => {\n      // Ta bort uppgiften helt från systemet\n      const result = await deleteTask(taskId);\n\n      // Meddela användaren resultatet\n      if (result.success) {\n        tellUserWhatHappened(\n          \"Uppgift borttagen - som om den aldrig funnits! ✨\",\n          \"success\"\n        );\n      } else {\n        tellUserWhatHappened(\n          `Kunde inte ta bort uppgift: ${result.error}`,\n          \"error\"\n        );\n      }\n    },\n    [deleteTask]\n  );\n\n  /**\n   * Hanterar utloggning\n   *\n   * Städar upp efter anonyma användare och skickar alla tillbaka till login.\n   */\n  const handleLogout = async () => {\n    try {\n      // För anonyma användare: ta bort dem från Firebase först\n      if (currentUser?.isAnonymous) {\n        console.log(\"Städar upp anonym användare:\", currentUser.uid);\n\n        try {\n          const deleteResult = await deleteCurrentUser();\n          if (deleteResult.success) {\n            console.log(\"Användare borttagen! 🧹\");\n            navigate(\"/login\");\n            return;\n          } else {\n            // Om borttagning misslyckades, fortsätt med vanlig utloggning\n            console.warn(\"Kunde inte ta bort användaren:\", deleteResult.error);\n          }\n        } catch (error) {\n          console.error(\"Fel vid städning:\", error);\n        }\n      }\n\n      // Vanlig utloggning\n      const result = await logout();\n      if (result.success) {\n        navigate(\"/login\");\n      } else {\n        tellUserWhatHappened(\"Kunde inte logga ut. Försök igen.\", \"error\");\n      }\n    } catch (error) {\n      tellUserWhatHappened(\"Ett fel uppstod vid utloggning.\", \"error\");\n    }\n  };\n\n  /**\n   * Visar felmeddelanden vid datahämtningsfel\n   *\n   * Övervakar felstatus och visar notifikationer när\n   * fel uppstår vid hämtning av data.\n   */\n  useEffect(() => {\n    // Berätta för användaren om något gick fel med teamdata\n    if (membersError) {\n      tellUserWhatHappened(\n        `Problem med att hämta teammedlemmar: ${membersError}`,\n        \"error\"\n      );\n    }\n\n    // Berätta för användaren om något gick fel med uppgiftsdata\n    if (tasksError) {\n      tellUserWhatHappened(\n        `Problem med att hämta uppgifter: ${tasksError}`,\n        \"error\"\n      );\n    }\n  }, [membersError, tasksError]); // Körs när fel uppstår\n\n  /**\n   * Renderar applikationens huvudgränssnitt\n   *\n   * Bygger upp UI med header, navigation, innehåll och notifikationer\n   */\n  return (\n    <div className=\"home-page\">\n      {/* Applikationens header med titel och användarinfo */}\n      <header className=\"app-header\">\n        <h1>Scrum Board</h1>\n\n        {/* Användarinfo och utloggningsknapp */}\n        <div className=\"user-controls\">\n          {currentUser?.isAnonymous ? (\n            <div className=\"user-profile\">\n              <div className=\"user-avatar\">\n                <UserIcon size={18} color=\"#3b82f6\" />\n              </div>\n              <div className=\"user-info\">\n                <span className=\"user-name\">Anonym användare</span>\n                <span className=\"user-status\">Temporär session</span>\n              </div>\n              <Button\n                onClick={handleLogout}\n                variant=\"outline\"\n                size=\"small\"\n                className=\"logout-button\"\n                iconRight={<LogoutIcon size={16} />}\n                aria-label=\"Logga ut\"\n              >\n                Avsluta\n              </Button>\n            </div>\n          ) : (\n            <div className=\"user-profile\">\n              <div className=\"user-avatar\">\n                <UserIcon size={18} color=\"#3b82f6\" />\n              </div>\n              <div className=\"user-info\">\n                <span className=\"user-name\">{currentUser?.email}</span>\n                <span className=\"user-status\">Inloggad</span>\n              </div>\n              <Button\n                onClick={handleLogout}\n                variant=\"outline\"\n                size=\"small\"\n                className=\"logout-button\"\n                iconRight={<LogoutIcon size={16} />}\n                aria-label=\"Logga ut\"\n              >\n                Logga ut\n              </Button>\n            </div>\n          )}\n        </div>\n      </header>\n\n      {/* Fliknavigation för att växla mellan olika vyer */}\n      <nav className=\"app-tabs\" aria-label=\"Application Navigation\">\n        {/* Board-fliken (kanban-vy) */}\n        <button\n          className={`tab-button ${activeTab === \"board\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveTab(\"board\")}\n          aria-selected={activeTab === \"board\"}\n          role=\"tab\"\n        >\n          Board\n        </button>\n\n        {/* Uppgifter-fliken (listvy med filter och sortering) */}\n        <button\n          className={`tab-button ${activeTab === \"tasks\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveTab(\"tasks\")}\n          aria-selected={activeTab === \"tasks\"}\n          role=\"tab\"\n        >\n          Uppgifter\n        </button>\n\n        {/* Team-fliken (hantering av teammedlemmar) */}\n        <button\n          className={`tab-button ${activeTab === \"members\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveTab(\"members\")}\n          aria-selected={activeTab === \"members\"}\n          role=\"tab\"\n        >\n          Team\n        </button>\n      </nav>\n\n      {/* Huvudinnehållsområde som visar olika komponenter baserat på aktiv flik */}\n      <main className=\"app-content\" role=\"tabpanel\" aria-live=\"polite\">\n        {/* Scrum Board-vyn (kanban-vy med kolumner) */}\n        {activeTab === \"board\" && (\n          <ScrumBoard\n            tasks={tasks}\n            members={members}\n            onAddTask={createNewWorkItem}\n            onUpdateTaskStatus={moveTaskToNewColumn}\n            onAssignTask={assignWorkToTeammate}\n            onDeleteTask={removeTaskCompletely}\n            categories={myTeamSkillAreas}\n            isLoading={tasksLoading || membersLoading}\n          />\n        )}\n\n        {/* Uppgiftslista med filter och sortering */}\n        {activeTab === \"tasks\" && (\n          <TaskList\n            tasks={tasks}\n            members={members}\n            onAddTask={createNewWorkItem}\n            onUpdateTaskStatus={moveTaskToNewColumn}\n            onAssignTask={assignWorkToTeammate}\n            onDeleteTask={removeTaskCompletely}\n            categories={myTeamSkillAreas}\n            isLoading={tasksLoading || membersLoading}\n          />\n        )}\n\n        {/* Teammedlemslista */}\n        {activeTab === \"members\" && (\n          <MemberList\n            members={members}\n            onAddMember={welcomeNewTeammate}\n            onDeleteMember={sayGoodbyeToTeammate}\n            roles={myTeamSkillAreas}\n            isLoading={membersLoading}\n          />\n        )}\n      </main>\n\n      {/* Notifikationssystem som visar feedback till användaren */}\n      {notification && (\n        <Notification\n          message={notification.message}\n          type={notification.type}\n          onClose={() => setNotification(null)}\n        />\n      )}\n\n      {/* Verktyg för att fylla databasen med exempeldata (alltid synligt för felsökning) */}\n      <DatabaseSeeder onSuccess={tellUserWhatHappened} />\n    </div>\n  );\n};\n\nexport default HomePage;\n","// src/components/Board/ScrumBoard.jsx\n/**\n * Min digitala kanban-tavla - hjärtat i hela appen!\n *\n * Som en fysisk whiteboard fast bättre - här ser du alla uppgifter\n * sorterade i tre kolumner som visar exakt var allt befinner sig.\n * Uppdateras live så alla i teamet ser samma sak samtidigt.\n *\n * Varför jag älskar den här tavlan:\n * - Ser direkt vad som händer i projektet (inga överraskningar!)\n * - Upptäcker flaskhalsar innan de blir problem\n * - Perfekt för morgonmöten - \"vad gör vi idag?\"\n * - Alla förstår läget utan långa förklaringar\n */\nimport React, { useState, memo, useMemo, useCallback } from \"react\";\nimport TaskCard from \"../Tasks/TaskCard.jsx\";\nimport Button from \"../UI/Button.jsx\";\nimport Modal from \"../UI/Modal.jsx\";\nimport AddTaskForm from \"../Tasks/AddTaskForm.jsx\";\nimport { filterByStatus, filterOutArchived } from \"../../utils/filterUtils.jsx\";\nimport \"../../styles/components/ScrumBoard.css\";\n\nconst ScrumBoard = ({\n  tasks,\n  members,\n  onAddTask,\n  onUpdateTaskStatus,\n  onAssignTask,\n  onDeleteTask,\n  categories = [\"frontend\", \"backend\", \"ux\"],\n  isLoading = false,\n}) => {\n  const [showingAddTaskForm, setShowingAddTaskForm] = useState(false);\n\n  /**\n   * Sorterar uppgifter i kolumner\n   *\n   * OPTIMERING: Memoizerad för bättre prestanda\n   */\n  const { freshTasks, ongoingWork, finishedStuff } = useMemo(() => {\n    // Ta bort arkiverade uppgifter\n    const activeWorkItems = filterOutArchived(tasks);\n\n    // Sortera i tre kolumner\n    return {\n      freshTasks: filterByStatus(activeWorkItems, \"Nytt\"),\n      ongoingWork: filterByStatus(activeWorkItems, \"Pågående\"),\n      finishedStuff: filterByStatus(activeWorkItems, \"Klar\"),\n    };\n  }, [tasks]);\n\n  // När någon skapar en ny uppgift\n  // OPTIMERING: Memoizerad callback för bättre prestanda\n  const createTaskAndCloseForm = useCallback(\n    (taskData) => {\n      onAddTask(taskData); // Skicka upp till huvudappen\n      setShowingAddTaskForm(false); // Stäng formuläret\n    },\n    [onAddTask]\n  );\n\n  return (\n    <div className=\"scrum-board-container\">\n      <div className=\"board-header\">\n        <h2>Scrum Board</h2>\n        <Button onClick={() => setShowingAddTaskForm(true)} variant=\"primary\">\n          Lägg till uppgift\n        </Button>\n      </div>\n\n      {isLoading ? (\n        <div className=\"loading-indicator\">\n          <span>Laddar uppgifter</span>\n        </div>\n      ) : (\n        <div className=\"board-columns\">\n          <div className=\"board-column\">\n            <div className=\"column-header\">\n              <h3>Nya uppgifter</h3>\n              <span className=\"task-count\">{freshTasks.length}</span>\n            </div>\n            <div className=\"column-content\">\n              {freshTasks.length === 0 ? (\n                <div className=\"empty-column\">\n                  <p>Inga nya uppgifter</p>\n                  <Button\n                    onClick={() => setShowingAddTaskForm(true)}\n                    variant=\"secondary\"\n                    size=\"small\"\n                  >\n                    Lägg till uppgift\n                  </Button>\n                </div>\n              ) : (\n                freshTasks.map((task) => (\n                  <TaskCard\n                    key={task.id}\n                    task={task}\n                    members={members}\n                    onUpdateStatus={onUpdateTaskStatus}\n                    onAssignTask={onAssignTask}\n                    onDeleteTask={onDeleteTask}\n                  />\n                ))\n              )}\n            </div>\n          </div>\n\n          <div className=\"board-column\">\n            <div className=\"column-header\">\n              <h3>Pågående</h3>\n              <span className=\"task-count\">{ongoingWork.length}</span>\n            </div>\n            <div className=\"column-content\">\n              {ongoingWork.length === 0 ? (\n                <div className=\"empty-column\">\n                  <p>Inga pågående uppgifter</p>\n                </div>\n              ) : (\n                ongoingWork.map((task) => (\n                  <TaskCard\n                    key={task.id}\n                    task={task}\n                    members={members}\n                    onUpdateStatus={onUpdateTaskStatus}\n                    onAssignTask={onAssignTask}\n                    onDeleteTask={onDeleteTask}\n                  />\n                ))\n              )}\n            </div>\n          </div>\n\n          <div className=\"board-column\">\n            <div className=\"column-header\">\n              <h3>Klara</h3>\n              <span className=\"task-count\">{finishedStuff.length}</span>\n            </div>\n            <div className=\"column-content\">\n              {finishedStuff.length === 0 ? (\n                <div className=\"empty-column\">\n                  <p>Inga klara uppgifter</p>\n                </div>\n              ) : (\n                finishedStuff.map((task) => (\n                  <TaskCard\n                    key={task.id}\n                    task={task}\n                    members={members}\n                    onUpdateStatus={onUpdateTaskStatus}\n                    onAssignTask={onAssignTask}\n                    onDeleteTask={onDeleteTask}\n                  />\n                ))\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Modal för att lägga till nya uppgifter */}\n      <Modal\n        isOpen={showingAddTaskForm}\n        onClose={() => setShowingAddTaskForm(false)}\n        title=\"Lägg till uppgift\"\n      >\n        <AddTaskForm\n          onAddTask={createTaskAndCloseForm}\n          categories={categories}\n        />\n      </Modal>\n    </div>\n  );\n};\n\n// OPTIMERING: Memoizerad komponent för att undvika onödiga re-renders\nexport default memo(ScrumBoard);\n","// src/components/Tasks/TaskCard.jsx\nimport React, { useState, memo, useMemo, useCallback } from \"react\";\nimport Button from \"../UI/Button.jsx\";\nimport Modal from \"../UI/Modal.jsx\";\nimport { formatDate, formatRelativeTime } from \"../../utils/dateUtils.jsx\";\nimport \"../../styles/components/TaskCard.css\";\n\n/**\n * Uppgiftskort - visuell representation av en uppgift\n *\n * Visar en uppgift som ett interaktivt kort med all relevant information.\n * Fungerar som en digital post-it med möjlighet att:\n * - Visa uppgiftens status, kategori och tilldelning\n * - Öppna detaljvy med fullständig information\n * - Ändra status (flytta mellan kolumner)\n * - Tilldela uppgiften till rätt teammedlem\n * - Ta bort uppgiften från systemet\n *\n * @param {Object} task - Uppgiftsdata att visa\n * @param {Array} members - Tillgängliga teammedlemmar\n * @param {Function} onUpdateStatus - Callback för statusändring\n * @param {Function} onAssignTask - Callback för tilldelning\n * @param {Function} onDeleteTask - Callback för borttagning\n */\nconst TaskCard = ({\n  task,\n  members,\n  onUpdateStatus,\n  onAssignTask,\n  onDeleteTask,\n}) => {\n  // States för modal och tilldelning\n  const [showingTaskDetails, setShowingTaskDetails] = useState(false);\n  const [askingForDeleteConfirmation, setAskingForDeleteConfirmation] =\n    useState(false);\n  const [chosenTeammateId, setChosenTeammateId] = useState(\"\");\n\n  /**\n   * Hittar personer med rätt kompetens\n   *\n   * OPTIMERING: Memoizerad för bättre prestanda\n   */\n  const qualifiedTeammates = useMemo(\n    () => members.filter((teammate) => teammate.role === task.category),\n    [members, task.category]\n  );\n\n  /**\n   * Min färgkodning för var uppgiften befinner sig\n   *\n   * Som trafikljus för arbetsflödet - blått för \"vänta\",\n   * orange för \"kör\", grönt för \"klart\". Enkelt att förstå!\n   */\n  const getWorkflowColor = (status) => {\n    switch (status.toLowerCase()) {\n      case \"nytt\":\n        return \"status-new\";\n      case \"pågående\":\n        return \"status-in-progress\";\n      case \"klar\":\n        return \"status-completed\";\n      default:\n        return \"\";\n    }\n  };\n\n  /**\n   * Min färgkodning för olika typer av arbete\n   *\n   * Varje kompetensområde får sin egen färg så man snabbt\n   * ser vad som är vad på tavlan. Som att sortera LEGO!\n   */\n  const getSkillAreaColor = (category) => {\n    switch (category.toLowerCase()) {\n      case \"frontend\":\n        return \"category-frontend\";\n      case \"backend\":\n        return \"category-backend\";\n      case \"ux\":\n        return \"category-ux\";\n      default:\n        return \"category-default\";\n    }\n  };\n\n  /**\n   * Flyttar uppgiften framåt i arbetsflödet\n   *\n   * Som att trycka på \"nästa\"-knappen i en process.\n   * Stänger också detaljvyn så man ser resultatet direkt.\n   *\n   * OPTIMERING: Memoizerad callback för att undvika onödiga re-renders\n   */\n  const moveTaskForward = useCallback(\n    (newStatus) => {\n      onUpdateStatus(task.id, newStatus);\n      setShowingTaskDetails(false);\n    },\n    [onUpdateStatus, task.id]\n  );\n\n  /**\n   * Ger jobbet till rätt person\n   *\n   * Hittar den valda personen och säger \"det här är ditt nu!\".\n   * Stänger sedan detaljvyn så man ser förändringen.\n   *\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   */\n  const giveTaskToChosen = useCallback(() => {\n    if (!chosenTeammateId) return;\n\n    const chosenPerson = members.find((m) => m.id === chosenTeammateId);\n    if (chosenPerson) {\n      onAssignTask(task.id, chosenPerson.id, chosenPerson.name);\n      setShowingTaskDetails(false);\n    }\n  }, [chosenTeammateId, members, onAssignTask, task.id]);\n\n  /**\n   * Raderar uppgiften för alltid\n   *\n   * Som att kasta något i papperskorgen och tömma den.\n   * Stänger alla öppna fönster efteråt.\n   *\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   */\n  const eraseTaskForever = useCallback(() => {\n    onDeleteTask(task.id);\n    setAskingForDeleteConfirmation(false);\n    setShowingTaskDetails(false);\n  }, [onDeleteTask, task.id]);\n\n  /**\n   * Renderar uppgiftskortet med alla dess komponenter\n   *\n   * Består av tre huvuddelar:\n   * - Kompakt kort för visning på tavlan\n   * - Detaljmodal med fullständig information\n   * - Bekräftelsemodal för borttagning\n   */\n  return (\n    <>\n      {/* Det lilla kortet på tavlan - klicka för att se mer! */}\n      <div className=\"task-card\" onClick={() => setShowingTaskDetails(true)}>\n        {/* Status och typ visas högst upp med färgkodning */}\n        <div className=\"task-header\">\n          <span className={`task-status ${getWorkflowColor(task.status)}`}>\n            {task.status}\n          </span>\n          <span className={`task-category ${getSkillAreaColor(task.category)}`}>\n            {task.category}\n          </span>\n        </div>\n\n        {/* Vad uppgiften handlar om - i stora bokstäver */}\n        <h3 className=\"task-title\">{task.title}</h3>\n\n        {/* Kort beskrivning - kapar texten om den är för lång */}\n        {task.description && (\n          <p className=\"task-description\">\n            {task.description.length > 100\n              ? `${task.description.substring(0, 100)}...`\n              : task.description}\n          </p>\n        )}\n\n        {/* Vem som gör uppgiften och när den skapades */}\n        <div className=\"task-meta\">\n          {/* Vem jobbar med detta? Eller är det ledigt? */}\n          {task.assignedToMemberName ? (\n            <div className=\"task-assigned\">\n              <span className=\"meta-label\">Tilldelad:</span>\n              <span className=\"meta-value\">{task.assignedToMemberName}</span>\n            </div>\n          ) : (\n            <div className=\"task-assigned\">\n              <span className=\"meta-label\">Tilldelad:</span>\n              <span className=\"meta-value not-assigned\">Ej tilldelad</span>\n            </div>\n          )}\n\n          {/* När skapades uppgiften? Visar \"2 dagar sedan\" istället för exakt datum */}\n          <div className=\"task-created\">\n            <span className=\"meta-label\">Skapad:</span>\n            <span\n              className=\"meta-value\"\n              title={formatDate(task.creationTimestamp)}\n            >\n              {formatRelativeTime(task.creationTimestamp)}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Stor popup med alla detaljer och knappar */}\n      <Modal\n        isOpen={showingTaskDetails}\n        onClose={() => setShowingTaskDetails(false)}\n        title={task.title}\n        size=\"medium\"\n        footer={\n          <>\n            {/* Ta bort-knappen (öppnar en \"är du säker?\"-ruta) */}\n            <Button\n              onClick={() => setAskingForDeleteConfirmation(true)}\n              variant=\"danger\"\n            >\n              Ta bort\n            </Button>\n\n            {/* Tomt utrymme som trycker isär knapparna */}\n            <div style={{ flex: 1 }}></div>\n\n            {/* \"Klar\"-knappen visas bara om uppgiften inte redan är klar */}\n            {task.status !== \"Klar\" && (\n              <Button onClick={() => moveTaskForward(\"Klar\")} variant=\"success\">\n                Markera som klar\n              </Button>\n            )}\n\n            {/* \"Starta\"-knappen visas bara för nya uppgifter */}\n            {task.status === \"Nytt\" && (\n              <Button\n                onClick={() => moveTaskForward(\"Pågående\")}\n                variant=\"primary\"\n              >\n                Starta uppgift\n              </Button>\n            )}\n          </>\n        }\n      >\n        <div className=\"task-details\">\n          {/* Var är uppgiften i flödet? */}\n          <div className=\"task-detail-row\">\n            <span className=\"detail-label\">Status:</span>\n            <span\n              className={`detail-value task-status ${getWorkflowColor(\n                task.status\n              )}`}\n            >\n              {task.status}\n            </span>\n          </div>\n\n          {/* Vilken typ av uppgift? */}\n          <div className=\"task-detail-row\">\n            <span className=\"detail-label\">Kategori:</span>\n            <span\n              className={`detail-value task-category ${getSkillAreaColor(\n                task.category\n              )}`}\n            >\n              {task.category}\n            </span>\n          </div>\n\n          {/* När skapades uppgiften? */}\n          <div className=\"task-detail-row\">\n            <span className=\"detail-label\">Skapad:</span>\n            <span className=\"detail-value\">\n              {formatDate(task.creationTimestamp)}\n            </span>\n          </div>\n\n          {/* Detaljerad beskrivning av vad som ska göras */}\n          {task.description && (\n            <div className=\"task-detail-description\">\n              <h4>Beskrivning</h4>\n              <p>{task.description}</p>\n            </div>\n          )}\n\n          {/* Vem ska göra jobbet? */}\n          <div className=\"task-assignment\">\n            <h4>Tilldelning</h4>\n\n            {/* Redan tilldelad? Visa vem och ge möjlighet att ändra */}\n            {task.assignedToMemberName ? (\n              <div className=\"current-assignment\">\n                <p>\n                  Denna uppgift är tilldelad till:{\" \"}\n                  <strong>{task.assignedToMemberName}</strong>\n                </p>\n                <Button\n                  onClick={() => onAssignTask(task.id, null, null)}\n                  variant=\"secondary\"\n                  size=\"small\"\n                >\n                  Ta bort tilldelning\n                </Button>\n              </div>\n            ) : (\n              /* Inte tilldelad? Visa formulär för att välja person */\n              <div className=\"assignment-form\">\n                {/* Lista med personer som har rätt kompetens för jobbet */}\n                {qualifiedTeammates.length > 0 ? (\n                  <>\n                    <p>\n                      Tilldela denna {task.category}-uppgift till en teammedlem\n                      med matchande roll:\n                    </p>\n                    <div className=\"assignment-controls\">\n                      <select\n                        value={chosenTeammateId}\n                        onChange={(e) => setChosenTeammateId(e.target.value)}\n                      >\n                        <option value=\"\">Välj teammedlem</option>\n                        {qualifiedTeammates.map((teammate) => (\n                          <option key={teammate.id} value={teammate.id}>\n                            {teammate.name}\n                          </option>\n                        ))}\n                      </select>\n                      <Button\n                        onClick={giveTaskToChosen}\n                        variant=\"primary\"\n                        disabled={!chosenTeammateId}\n                      >\n                        Tilldela\n                      </Button>\n                    </div>\n                  </>\n                ) : (\n                  /* Inga personer med rätt kompetens? Visa ett meddelande */\n                  <p className=\"no-eligible-members\">\n                    Det finns inga teammedlemmar med rollen {task.category} som\n                    kan tilldelas denna uppgift.\n                  </p>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </Modal>\n\n      {/* \"Är du säker?\"-rutan för borttagning */}\n      <Modal\n        isOpen={askingForDeleteConfirmation}\n        onClose={() => setAskingForDeleteConfirmation(false)}\n        title=\"Bekräfta borttagning\"\n        footer={\n          <>\n            <Button\n              onClick={() => setAskingForDeleteConfirmation(false)}\n              variant=\"secondary\"\n            >\n              Avbryt\n            </Button>\n            <Button onClick={eraseTaskForever} variant=\"danger\">\n              Ta bort\n            </Button>\n          </>\n        }\n      >\n        <p>\n          Är du säker på att du vill ta bort uppgiften \"{task.title}\"? Uppgiften\n          kommer att tas bort permanent från databasen och kan inte återställas.\n        </p>\n      </Modal>\n    </>\n  );\n};\n\n// OPTIMERING: Memoizerad komponent för att undvika onödiga re-renders\n// Komponenten renderas bara om när props faktiskt ändras\nexport default memo(TaskCard);\n","// src/components/UI/Button.jsx\nimport React from \"react\";\nimport \"../../styles/components/Button.css\";\n\n/**\n * Universell knappkomponent 🔘\n *\n * Flexibel knapp med olika stilar och storlekar.\n * Stöder ikoner och fullbredd.\n *\n * @param {ReactNode} children - Knapptext\n * @param {Function} onClick - Klick-hanterare\n * @param {string} type - HTML-typ\n * @param {string} variant - Stil (primary/secondary/danger)\n * @param {string} size - Storlek (small/medium/large)\n * @param {boolean} disabled - Inaktiverad\n * @param {boolean} fullWidth - Full bredd\n * @param {ReactNode} iconLeft - Vänster ikon\n * @param {ReactNode} iconRight - Höger ikon\n * @param {string} className - Extra CSS-klasser\n */\nconst Button = ({\n  children,\n  onClick,\n  type = \"button\",\n  variant = \"primary\",\n  size = \"medium\",\n  disabled = false,\n  fullWidth = false,\n  iconLeft = null,\n  iconRight = null,\n  className = \"\",\n}) => {\n  // Kontrollerar om ikoner finns\n  const hasIcon = iconLeft || iconRight;\n\n  // Bygger CSS-klasser\n  const buttonClasses = `\n    button\n    button-${variant}\n    button-${size}\n    ${fullWidth ? \"button-full-width\" : \"\"}\n    ${hasIcon ? \"button-with-icon\" : \"\"}\n    ${className}\n  `\n    .trim()\n    .replace(/\\s+/g, \" \");\n\n  return (\n    <button\n      type={type}\n      className={buttonClasses}\n      onClick={onClick}\n      disabled={disabled}\n      aria-disabled={disabled} // För skärmläsare\n    >\n      {/* Vänster ikon */}\n      {iconLeft && <span className=\"button-icon-left\">{iconLeft}</span>}\n\n      {/* Knapptext */}\n      {children}\n\n      {/* Höger ikon */}\n      {iconRight && <span className=\"button-icon-right\">{iconRight}</span>}\n    </button>\n  );\n};\n\nexport default Button;\n","// src/components/UI/Modal.jsx\n/**\n * Återanvändbar modalkomponent\n *\n * Flexibel dialog med React Portal.\n * Stöder olika storlekar, Escape-stängning,\n * förhindrar bakgrundsscrollning.\n */\nimport React, { useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"../../styles/components/Modal.css\";\nimport Button from \"./Button.jsx\";\n\nconst Modal = ({\n  isOpen,\n  onClose,\n  title,\n  children,\n  footer,\n  size = \"medium\",\n}) => {\n  /**\n   * Hanterar Escape-tangent och scrollning\n   */\n  useEffect(() => {\n    // Stäng med Escape\n    const handleEscape = (e) => {\n      if (e.key === \"Escape\" && isOpen) {\n        onClose();\n      }\n    };\n\n    // Registrera event-lyssnare\n    window.addEventListener(\"keydown\", handleEscape);\n\n    // Förhindra bakgrundsscrollning\n    if (isOpen) {\n      document.body.style.overflow = \"hidden\";\n    }\n\n    // Städa upp vid avmontering\n    return () => {\n      window.removeEventListener(\"keydown\", handleEscape);\n      document.body.style.overflow = \"auto\";\n    };\n  }, [isOpen, onClose]);\n\n  if (!isOpen) return null;\n\n  /**\n   * Förhindrar bubbling av klickhändelser\n   */\n  const handleModalClick = (e) => {\n    e.stopPropagation();\n  };\n\n  // React Portal för korrekt rendering\n  return ReactDOM.createPortal(\n    <div className=\"modal-overlay\" onClick={onClose}>\n      {/* Modal-container */}\n      <div className={`modal modal-${size}`} onClick={handleModalClick}>\n        {/* Header */}\n        <div className=\"modal-header\">\n          <h2 className=\"modal-title\">{title}</h2>\n          <button className=\"modal-close\" onClick={onClose} aria-label=\"Stäng\">\n            ×\n          </button>\n        </div>\n\n        {/* Innehåll */}\n        <div className=\"modal-content\">{children}</div>\n\n        {/* Footer */}\n        {footer && <div className=\"modal-footer\">{footer}</div>}\n      </div>\n    </div>,\n    document.body // Renderar i body för korrekt z-index\n  );\n};\n\nexport default Modal;\n","// src/utils/dateUtils.jsx\n// Använder en enklare approach för att undvika Parcel-problem med date-fns\n\n/**\n * Tidsfunktioner för användarvänliga datum\n *\n * Gör tidsstämplar begripliga med snygga format\n * och relativa texter som \"2 timmar sedan\".\n */\n\n/**\n * Formaterar tidsstämpel till läsbart datum\n *\n * @param {number} timestamp - Tidsstämpel\n * @returns {string} Format: \"2025-05-15 14:30\"\n */\nexport const formatDate = (timestamp) => {\n  // Ingen tidsstämpel? Returnera tom sträng\n  if (!timestamp) return \"\";\n\n  // Skapa Date-objekt och formatera\n  const date = new Date(timestamp);\n\n  // Formatera med svenska format\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n  const hours = String(date.getHours()).padStart(2, \"0\");\n  const minutes = String(date.getMinutes()).padStart(2, \"0\");\n\n  return `${year}-${month}-${day} ${hours}:${minutes}`;\n};\n\n/**\n * Visar relativ tid sedan händelse\n *\n * @param {number} timestamp - Tidsstämpel\n * @returns {string} Text som \"2 dagar sedan\" eller \"Just nu\"\n */\nexport const formatRelativeTime = (timestamp) => {\n  // Ingen tidsstämpel? Returnera tom sträng\n  if (!timestamp) return \"\";\n\n  // Beräkna tidsskillnad\n  const now = Date.now();\n  const diff = now - timestamp;\n\n  // Konvertera till läsbara enheter\n  const minutes = Math.floor(diff / 60000);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  // Välj lämplig text\n  if (days > 0) {\n    // Singular/plural för dagar\n    return `${days} ${days === 1 ? \"dag\" : \"dagar\"} sedan`;\n  } else if (hours > 0) {\n    // Singular/plural för timmar\n    return `${hours} ${hours === 1 ? \"timme\" : \"timmar\"} sedan`;\n  } else if (minutes > 0) {\n    // Singular/plural för minuter\n    return `${minutes} ${minutes === 1 ? \"minut\" : \"minuter\"} sedan`;\n  } else {\n    // Mycket nyligen\n    return \"Just nu\";\n  }\n};\n","// src/components/Tasks/AddTaskForm.jsx\n/**\n * Formulär för att skapa nya uppgifter\n *\n * Hanterar inmatning och validering av uppgiftsdata med:\n * - Obligatorisk titel för att identifiera uppgiften\n * - Val av kategori (frontend, backend, UX) för korrekt tilldelning\n * - Valfri beskrivning för ytterligare detaljer\n *\n * Validerar att nödvändiga fält är ifyllda innan uppgiften skapas\n * och skickas till Firebase via callback-funktionen.\n */\nimport React, { useState } from \"react\";\nimport Button from \"../UI/Button.jsx\";\nimport \"../../styles/components/AddTaskForm.css\";\n\nconst AddTaskForm = ({\n  onAddTask,\n  categories = [\"frontend\", \"backend\", \"ux\"],\n}) => {\n  const [title, setTitle] = useState(\"\");\n  const [category, setCategory] = useState(categories[0]);\n  const [description, setDescription] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  /**\n   * Hanterar formulärinlämning\n   *\n   * Processen vid inlämning:\n   * 1. Validerar obligatoriska fält (titel och kategori)\n   * 2. Skapar ett nytt uppgiftsobjekt med inmatad data\n   * 3. Skickar uppgiften till föräldrakomponenten och återställer formuläret\n   *\n   * @param {Event} e - Formulärets submit-event\n   */\n  const handleSubmit = (e) => {\n    // Stoppar webbläsaren från att ladda om sidan\n    e.preventDefault();\n\n    // Validera titel (obligatorisk)\n    if (!title.trim()) {\n      setError(\"Du måste ge uppgiften en titel!\");\n      return;\n    }\n\n    // Validera kategori (obligatorisk)\n    if (!category) {\n      setError(\"Du måste välja en kategori!\");\n      return;\n    }\n\n    // Skapa uppgiftsobjekt\n    const newTask = {\n      title: title.trim(),\n      category,\n      description: description.trim() || null,\n      assignedToMemberId: null,\n      assignedToMemberName: null,\n      // Tidsstämpel och status hanteras av hook\n    };\n\n    // Skicka till föräldrakomponent\n    onAddTask(newTask);\n\n    // Återställ formuläret\n    setTitle(\"\");\n    setCategory(categories[0]);\n    setDescription(\"\");\n    setError(\"\");\n  };\n\n  return (\n    <form className=\"add-task-form\" onSubmit={handleSubmit}>\n      {error && <div className=\"form-error\">{error}</div>}\n\n      <div className=\"form-group\">\n        <label htmlFor=\"title\">Titel *</label>\n        <input\n          type=\"text\"\n          id=\"title\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          placeholder=\"Ange uppgiftens titel\"\n          required\n        />\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"category\">Kategori *</label>\n        <select\n          id=\"category\"\n          value={category}\n          onChange={(e) => setCategory(e.target.value)}\n          required\n        >\n          {categories.map((categoryOption) => (\n            <option key={categoryOption} value={categoryOption}>\n              {categoryOption.charAt(0).toUpperCase() + categoryOption.slice(1)}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"description\">Beskrivning (valfritt)</label>\n        <textarea\n          id=\"description\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          placeholder=\"Beskriv uppgiften mer detaljerat\"\n          rows={4}\n        />\n      </div>\n\n      <div className=\"form-actions\">\n        <Button type=\"submit\" variant=\"primary\">\n          Lägg till\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nexport default AddTaskForm;\n","// src/utils/filterUtils.jsx\n\n/**\n * Filtreringsverktyg för uppgifter 🔍\n *\n * Hjälper dig hitta rätt uppgifter snabbt.\n * Filtrera på person, kategori eller status.\n */\n\n/**\n * Visar bara en persons uppgifter 👤\n *\n * @param {Array} tasks - Alla uppgifter\n * @param {string} memberId - Vilken person\n * @returns {Array} Personens uppgifter\n */\nexport const filterByMember = (tasks, memberId) => {\n  // Ingen person vald? Visa allt\n  if (!memberId || !Array.isArray(tasks) || tasks.length === 0) return tasks;\n\n  // Bara den personens uppgifter\n  return tasks.filter((task) => task?.assignedToMemberId === memberId);\n};\n\n/**\n * Visar bara en typ av uppgifter 🎨\n *\n * @param {Array} tasks - Alla uppgifter\n * @param {string} category - Vilken kategori (frontend/backend/ux)\n * @returns {Array} Uppgifter av den typen\n */\nexport const filterByCategory = (tasks, category) => {\n  // Ingen kategori vald? Visa allt\n  if (!category || !Array.isArray(tasks) || tasks.length === 0) return tasks;\n\n  // Bara den kategorin\n  return tasks.filter((task) => task?.category === category);\n};\n\n/**\n * Visar bara uppgifter med viss status 📋\n *\n * @param {Array} tasks - Alla uppgifter\n * @param {string} status - Vilken status (Nytt/Pågående/Klar)\n * @returns {Array} Uppgifter med den statusen\n */\nexport const filterByStatus = (tasks, status) => {\n  // Ingen status vald? Visa allt\n  if (!status || !Array.isArray(tasks) || tasks.length === 0) return tasks;\n\n  // Bara den statusen\n  return tasks.filter((task) => task?.status === status);\n};\n\n/**\n * Tar bort arkiverade uppgifter 🗑️\n *\n * Säkerhetsnät för gamla arkiverade uppgifter.\n *\n * @param {Array} tasks - Alla uppgifter\n * @returns {Array} Bara aktiva uppgifter\n */\nexport const filterOutArchived = (tasks) => {\n  // Inget att filtrera? Returnera som det är\n  if (!Array.isArray(tasks) || tasks.length === 0) return tasks;\n\n  // Bara aktiva uppgifter\n  return tasks.filter((task) => !task?.isArchived);\n};\n","// src/components/Tasks/TaskList.jsx\n/**\n * Smart uppgiftslista med filtrering 🔍\n *\n * Filtrera på person, kategori eller status.\n * Sortera som du vill. Lägg till nya uppgifter.\n */\nimport React, { useState, memo, useMemo, useCallback } from \"react\";\nimport Button from \"../UI/Button.jsx\";\nimport Modal from \"../UI/Modal.jsx\";\nimport TaskCard from \"./TaskCard.jsx\";\nimport AddTaskForm from \"./AddTaskForm.jsx\";\nimport {\n  filterByMember,\n  filterByCategory,\n  filterByStatus,\n  filterOutArchived,\n} from \"../../utils/filterUtils.jsx\";\nimport {\n  sortByNewest,\n  sortByOldest,\n  sortByTitleAsc,\n  sortByTitleDesc,\n} from \"../../utils/sortUtils.jsx\";\nimport \"../../styles/components/TaskList.css\";\n\nconst TaskList = ({\n  tasks,\n  members,\n  onAddTask,\n  onUpdateTaskStatus,\n  onAssignTask,\n  onDeleteTask,\n  categories = [\"frontend\", \"backend\", \"ux\"],\n  isLoading = false,\n}) => {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [filterMember, setFilterMember] = useState(\"\");\n  const [filterCategory, setFilterCategory] = useState(\"\");\n  const [filterStatus, setFilterStatus] = useState(\"\");\n  const [sortOption, setSortOption] = useState(\"newest\");\n\n  // SMART SORTERING: Bara räknar om när något faktiskt ändras (sparar prestanda)\n  const sortedTasks = useMemo(() => {\n    // Först filtrerar vi bort det vi inte vill se\n    const filteredTasks = filterOutArchived(tasks) // Städar bort gamla arkiverade\n      .filter(\n        (task) => !filterMember || task.assignedToMemberId === filterMember\n      ) // Bara en persons uppgifter?\n      .filter((task) => !filterCategory || task.category === filterCategory) // Bara en typ av uppgifter?\n      .filter((task) => !filterStatus || task.status === filterStatus); // Bara en status?\n\n    // Sen sorterar vi som användaren vill ha det\n    switch (sortOption) {\n      case \"newest\":\n        return sortByNewest(filteredTasks); // Nyast först (som Instagram)\n      case \"oldest\":\n        return sortByOldest(filteredTasks); // Äldst först (rättvist)\n      case \"titleAsc\":\n        return sortByTitleAsc(filteredTasks); // A-Ö (som telefonbok)\n      case \"titleDesc\":\n        return sortByTitleDesc(filteredTasks); // Ö-A (baklänges)\n      default:\n        return sortByNewest(filteredTasks); // Standard = nyast först\n    }\n  }, [tasks, filterMember, filterCategory, filterStatus, sortOption]);\n\n  /**\n   * Lägger till uppgift och stänger formuläret 📝\n   */\n  const handleAddTask = useCallback(\n    (taskData) => {\n      onAddTask(taskData);\n      setIsAddModalOpen(false);\n    },\n    [onAddTask]\n  );\n\n  /**\n   * Nollställer alla filter 🔄\n   */\n  const resetFilters = useCallback(() => {\n    setFilterMember(\"\");\n    setFilterCategory(\"\");\n    setFilterStatus(\"\");\n    setSortOption(\"newest\");\n  }, []);\n\n  return (\n    <div className=\"task-list-container\">\n      <div className=\"task-list-header\">\n        <h2>Uppgifter</h2>\n        <Button onClick={() => setIsAddModalOpen(true)} variant=\"primary\">\n          Lägg till uppgift\n        </Button>\n      </div>\n\n      <div className=\"task-filters\">\n        <div className=\"filter-group\">\n          <label htmlFor=\"filterMember\">Filtrera efter medlem:</label>\n          <select\n            id=\"filterMember\"\n            value={filterMember}\n            onChange={(e) => setFilterMember(e.target.value)}\n          >\n            <option value=\"\">Alla medlemmar</option>\n            {members.map((member) => (\n              <option key={member.id} value={member.id}>\n                {member.name}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"filter-group\">\n          <label htmlFor=\"filterCategory\">Filtrera efter kategori:</label>\n          <select\n            id=\"filterCategory\"\n            value={filterCategory}\n            onChange={(e) => setFilterCategory(e.target.value)}\n          >\n            <option value=\"\">Alla kategorier</option>\n            {categories.map((category) => (\n              <option key={category} value={category}>\n                {category.charAt(0).toUpperCase() + category.slice(1)}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"filter-group\">\n          <label htmlFor=\"filterStatus\">Filtrera efter status:</label>\n          <select\n            id=\"filterStatus\"\n            value={filterStatus}\n            onChange={(e) => setFilterStatus(e.target.value)}\n          >\n            <option value=\"\">Alla statusar</option>\n            <option value=\"Nytt\">Nytt</option>\n            <option value=\"Pågående\">Pågående</option>\n            <option value=\"Klar\">Klar</option>\n          </select>\n        </div>\n\n        <div className=\"filter-group\">\n          <label htmlFor=\"sortOption\">Sortera efter:</label>\n          <select\n            id=\"sortOption\"\n            value={sortOption}\n            onChange={(e) => setSortOption(e.target.value)}\n          >\n            <option value=\"newest\">Nyast först</option>\n            <option value=\"oldest\">Äldst först</option>\n            <option value=\"titleAsc\">Titel (A-Ö)</option>\n            <option value=\"titleDesc\">Titel (Ö-A)</option>\n          </select>\n        </div>\n\n        <Button onClick={resetFilters} variant=\"secondary\" size=\"small\">\n          Återställ filter\n        </Button>\n      </div>\n\n      {isLoading ? (\n        <div className=\"loading-indicator\">\n          <span>Laddar uppgifter</span>\n        </div>\n      ) : sortedTasks.length === 0 ? (\n        <div className=\"empty-state\">\n          <p>\n            Inga uppgifter hittades\n            {filterMember || filterCategory || filterStatus\n              ? \" med valda filter\"\n              : \"\"}\n            .\n          </p>\n          {filterMember || filterCategory || filterStatus ? (\n            <Button onClick={resetFilters} variant=\"secondary\">\n              Återställ filter\n            </Button>\n          ) : (\n            <Button onClick={() => setIsAddModalOpen(true)} variant=\"secondary\">\n              Lägg till din första uppgift\n            </Button>\n          )}\n        </div>\n      ) : (\n        <div className=\"task-grid\">\n          {sortedTasks.map((task) => (\n            <TaskCard\n              key={task.id}\n              task={task}\n              members={members}\n              onUpdateStatus={onUpdateTaskStatus}\n              onAssignTask={onAssignTask}\n              onDeleteTask={onDeleteTask}\n            />\n          ))}\n        </div>\n      )}\n\n      {/* Popup-fönster för att skapa nya uppgifter */}\n      <Modal\n        isOpen={isAddModalOpen}\n        onClose={() => setIsAddModalOpen(false)}\n        title=\"Lägg till uppgift\"\n      >\n        <AddTaskForm onAddTask={handleAddTask} categories={categories} />\n      </Modal>\n    </div>\n  );\n};\n\n// SMART KOMPONENT: Renderas bara om när något faktiskt ändrats (sparar prestanda)\nexport default memo(TaskList);\n","// src/utils/sortUtils.jsx\n\n/**\n * Sorteringsfunktioner för uppgifter 🔄\n *\n * Olika sätt att ordna uppgifter.\n * Alla funktioner skapar nya listor utan att ändra originalet.\n */\n\n/**\n * Sorterar nyast först 🆕\n *\n * @param {Array} tasks - Uppgifter att sortera\n * @returns {Array} Sorterad lista\n */\nexport const sortByNewest = (tasks) => {\n  // Kopia och sortering\n  return [...tasks].sort((a, b) => b.creationTimestamp - a.creationTimestamp);\n};\n\n/**\n * Äldst först! 👴\n *\n * \"First in, first out\" - som en kö på banken. Perfekt när du\n * vill beta av uppgifter i den ordning de kom in. Rättvist!\n *\n * @param {Array} tasks - Uppgifterna du vill sortera\n * @returns {Array} En ny lista med de äldsta först\n */\nexport const sortByOldest = (tasks) => {\n  // Gör en kopia först (säkert är säkert)\n  // Sen sorterar så det äldsta kommer först\n  return [...tasks].sort((a, b) => a.creationTimestamp - b.creationTimestamp);\n};\n\n/**\n * A till Ö 📚\n *\n * Som en telefonbok eller bibliotekskatalog! Perfekt när du\n * letar efter något och vet ungefär vad det heter. Funkar\n * fint med våra svenska å, ä, ö också.\n *\n * @param {Array} tasks - Uppgifterna du vill sortera\n * @returns {Array} En ny lista i alfabetisk ordning\n */\nexport const sortByTitleAsc = (tasks) => {\n  // Gör en kopia först (som alltid)\n  // Sen sorterar alfabetiskt (localeCompare fixar å, ä, ö)\n  return [...tasks].sort((a, b) => a.title.localeCompare(b.title));\n};\n\n/**\n * Ö till A (baklänges!) 🔄\n *\n * Ibland är det kul att vända på steken! Kanske ser man\n * mönster man annars missar? Eller bara för att det är kul.\n *\n * @param {Array} tasks - Uppgifterna du vill sortera\n * @returns {Array} En ny lista i omvänd bokstavsordning\n */\nexport const sortByTitleDesc = (tasks) => {\n  // Gör en kopia först (som en god vana)\n  // Sen sorterar baklänges, från Ö till A\n  return [...tasks].sort((a, b) => b.title.localeCompare(a.title));\n};\n","// src/components/Members/MemberList.jsx\n/**\n * Teamöversikt med medlemshantering\n *\n * Visar medlemmar med profilbild, namn och roll.\n * Lägg till och ta bort medlemmar med bekräftelse.\n */\nimport React, { useState } from \"react\";\nimport Button from \"../UI/Button.jsx\";\nimport Modal from \"../UI/Modal.jsx\";\nimport AddMemberForm from \"./AddMemberForm.jsx\";\nimport \"../../styles/components/MemberList.css\";\n\nconst MemberList = ({\n  members,\n  onAddMember,\n  onDeleteMember,\n  roles = [\"frontend\", \"backend\", \"ux\"],\n  isLoading = false,\n}) => {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [memberToDelete, setMemberToDelete] = useState(null);\n\n  /**\n   * Lägger till ny medlem och stänger modal\n   */\n  const handleAddMember = (memberData) => {\n    onAddMember(memberData);\n    setIsAddModalOpen(false);\n  };\n\n  /**\n   * Tar bort medlem efter bekräftelse\n   */\n  const handleConfirmDelete = () => {\n    if (memberToDelete) {\n      onDeleteMember(memberToDelete.id);\n      setMemberToDelete(null);\n    }\n  };\n\n  /**\n   * Returnerar CSS-klass baserat på medlemsroll\n   *\n   * Ger visuell färgkodning för olika roller:\n   * - Frontend: blå\n   * - Backend: grön\n   * - UX: lila\n   *\n   * @param {string} role - Medlemmens roll\n   * @returns {string} CSS-klassnamn för färgkodning\n   */\n  const getRoleColorClass = (role) => {\n    switch (role.toLowerCase()) {\n      case \"frontend\":\n        return \"role-frontend\";\n      case \"backend\":\n        return \"role-backend\";\n      case \"ux\":\n        return \"role-ux\";\n      default:\n        return \"role-default\";\n    }\n  };\n\n  return (\n    <div className=\"member-list-container\">\n      <div className=\"member-list-header\">\n        <h2>Teammedlemmar</h2>\n        <Button onClick={() => setIsAddModalOpen(true)} variant=\"primary\">\n          Lägg till medlem\n        </Button>\n      </div>\n\n      {isLoading ? (\n        <div className=\"loading-indicator\">\n          <span>Laddar teammedlemmar</span>\n        </div>\n      ) : members.length === 0 ? (\n        <div className=\"empty-state\">\n          <p>Inga teammedlemmar tillagda ännu.</p>\n          <Button onClick={() => setIsAddModalOpen(true)} variant=\"secondary\">\n            Lägg till din första teammedlem\n          </Button>\n        </div>\n      ) : (\n        <div className=\"member-grid\">\n          {members.map((member) => (\n            <div key={member.id} className=\"member-card\">\n              <div className=\"member-avatar\">\n                {member.avatar ? (\n                  <img src={member.avatar} alt={member.name} />\n                ) : (\n                  <div className=\"member-initials\">\n                    {member.name\n                      .split(\" \")\n                      .map((n) => n[0])\n                      .join(\"\")}\n                  </div>\n                )}\n              </div>\n              <div className=\"member-info\">\n                <h3 className=\"member-name\">{member.name}</h3>\n                <span\n                  className={`member-role ${getRoleColorClass(member.role)}`}\n                >\n                  {member.role.charAt(0).toUpperCase() + member.role.slice(1)}\n                </span>\n              </div>\n              <Button\n                onClick={() => setMemberToDelete(member)}\n                variant=\"danger\"\n                size=\"small\"\n              >\n                Ta bort\n              </Button>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Modal för att lägga till nya teammedlemmar */}\n      <Modal\n        isOpen={isAddModalOpen}\n        onClose={() => setIsAddModalOpen(false)}\n        title=\"Lägg till teammedlem\"\n      >\n        <AddMemberForm onAddMember={handleAddMember} roles={roles} />\n      </Modal>\n\n      {/* Bekräftelsemodal för borttagning av teammedlem */}\n      <Modal\n        isOpen={!!memberToDelete}\n        onClose={() => setMemberToDelete(null)}\n        title=\"Bekräfta borttagning\"\n        footer={\n          <>\n            <Button onClick={() => setMemberToDelete(null)} variant=\"secondary\">\n              Avbryt\n            </Button>\n            <Button onClick={handleConfirmDelete} variant=\"danger\">\n              Ta bort\n            </Button>\n          </>\n        }\n      >\n        {memberToDelete && (\n          <p>\n            Vill du verkligen ta bort {memberToDelete.name} från teamet? Det går\n            inte att ångra, och alla uppgifter som personen jobbar med just nu\n            blir otilldelade.\n          </p>\n        )}\n      </Modal>\n    </div>\n  );\n};\n\nexport default MemberList;\n","// src/components/Members/AddMemberForm.jsx\n/**\n * Formulär för nya teammedlemmar\n *\n * Obligatoriskt: namn och roll\n * Valfritt: profilbild-URL\n * Validerar innan sparning.\n */\nimport React, { useState } from \"react\";\nimport Button from \"../UI/Button.jsx\";\nimport \"../../styles/components/AddMemberForm.css\";\n\nconst AddMemberForm = ({\n  onAddMember,\n  roles = [\"frontend\", \"backend\", \"ux\"],\n}) => {\n  const [name, setName] = useState(\"\");\n  const [role, setRole] = useState(roles[0]);\n  const [avatar, setAvatar] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  /**\n   * Hanterar formulärinlämning\n   *\n   * Validerar, skapar medlem och återställer formulär.\n   */\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Validera namn\n    if (!name.trim()) {\n      setError(\"Du måste ange ett namn!\");\n      return;\n    }\n\n    // Validera roll\n    if (!role) {\n      setError(\"Du måste välja en roll!\");\n      return;\n    }\n\n    // Skapa medlemsobjekt\n    const newMember = {\n      name: name.trim(),\n      role,\n      avatar: avatar.trim() || null,\n    };\n\n    // Skicka medlemmen till föräldrakomponenten\n    onAddMember(newMember);\n\n    // Återställ formuläret\n    setName(\"\");\n    setRole(roles[0]);\n    setAvatar(\"\");\n    setError(\"\");\n  };\n\n  return (\n    <form className=\"add-member-form\" onSubmit={handleSubmit}>\n      {error && <div className=\"form-error\">{error}</div>}\n\n      <div className=\"form-group\">\n        <label htmlFor=\"name\">Namn *</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          placeholder=\"Ange namn\"\n          required\n        />\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"role\">Roll *</label>\n        <select\n          id=\"role\"\n          value={role}\n          onChange={(e) => setRole(e.target.value)}\n          required\n        >\n          {roles.map((roleOption) => (\n            <option key={roleOption} value={roleOption}>\n              {roleOption.charAt(0).toUpperCase() + roleOption.slice(1)}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"avatar\">Profilbild URL (valfritt)</label>\n        <input\n          type=\"url\"\n          id=\"avatar\"\n          value={avatar}\n          onChange={(e) => setAvatar(e.target.value)}\n          placeholder=\"https://example.com/image.jpg\"\n        />\n      </div>\n\n      <div className=\"form-actions\">\n        <Button type=\"submit\" variant=\"primary\">\n          Lägg till\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nexport default AddMemberForm;\n","// src/components/UI/Notification.jsx\n/**\n * Popup-meddelanden som försvinner automatiskt\n *\n * Fyra typer: info, success, warning, error.\n */\nimport React, { useState, useEffect } from \"react\";\nimport \"../../styles/components/Notification.css\";\n\nconst Notification = ({ message, type = \"info\", duration = 5000, onClose }) => {\n  const [isVisible, setIsVisible] = useState(true);\n\n  useEffect(() => {\n    // Inget meddelande? Gör inget\n    if (!message) return;\n\n    // Visa meddelandet\n    setIsVisible(true);\n\n    // Försvinner automatiskt\n    const timer = setTimeout(() => {\n      setIsVisible(false);\n      // Vänta på animation innan borttagning\n      if (onClose) setTimeout(onClose, 300);\n    }, duration);\n\n    // Städa upp\n    return () => clearTimeout(timer);\n  }, [message, duration, onClose]);\n\n  if (!message) return null;\n\n  // När du klickar på krysset\n  const handleClose = () => {\n    setIsVisible(false); // Starta försvinn-animationen\n    // Vänta på animationen innan vi tar bort helt\n    if (onClose) setTimeout(onClose, 300);\n  };\n\n  return (\n    <div\n      className={`notification notification-${type} ${\n        isVisible ? \"show\" : \"hide\"\n      }`}\n    >\n      <div className=\"notification-content\">\n        {/* Ikoner för olika typer */}\n        {type === \"success\" && <span className=\"notification-icon\">✓</span>}\n        {type === \"error\" && <span className=\"notification-icon\">✗</span>}\n        {type === \"warning\" && <span className=\"notification-icon\">⚠</span>}\n        {type === \"info\" && <span className=\"notification-icon\">ℹ</span>}\n        {/* Meddelandet */}\n        <p className=\"notification-message\">{message}</p>\n      </div>\n      {/* Stäng-knapp */}\n      <button\n        className=\"notification-close\"\n        onClick={handleClose}\n        aria-label=\"Stäng\"\n      >\n        ×\n      </button>\n    </div>\n  );\n};\n\nexport default Notification;\n","// src/components/Admin/DatabaseSeeder.jsx\nimport React, { useState, useEffect } from \"react\";\nimport {\n  seedDatabase,\n  testDatabaseConnection,\n  clearDatabase,\n  checkIfExampleDataExists,\n} from \"../../firebase/seedDatabase\";\nimport { useAuth } from \"../../hooks/useAuth.jsx\";\nimport {\n  DatabaseIcon,\n  ChevronDownIcon,\n  ChevronRightIcon,\n  LoadingIcon,\n  CheckIcon,\n  AlertIcon,\n  SearchIcon,\n  DatabasePlusIcon,\n  TrashIcon,\n} from \"../UI/Icons\";\nimport \"../../styles/components/Button.css\";\n\n/**\n * Databasverktyg - hantering av testdata\n *\n * Kompakt verktyg för att hantera testdata i utvecklingsmiljön.\n * Visar databasanslutningsstatus och låter användaren fylla eller\n * rensa databasen med ett klick.\n *\n * @param {Function} onSuccess - Callback för statusmeddelanden\n */\nconst DatabaseSeeder = ({ onSuccess }) => {\n  const [loading, setLoading] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState(\"checking\");\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [hasExampleData, setHasExampleData] = useState(false);\n\n  // Hämta autentiseringsstatus för att kontrollera om användaren är inloggad\n  const { currentUser } = useAuth();\n\n  // Kollar om databasen fungerar och om exempeldata finns direkt när sidan laddas\n  useEffect(() => {\n    // Bara kör databaskontrollen om användaren är inloggad\n    if (!currentUser) {\n      setConnectionStatus(\"error\");\n      return;\n    }\n\n    // Förhindra flera samtidiga anrop genom att använda en flagga\n    let isCheckingConnection = false;\n\n    const checkConnection = async () => {\n      // Undvik flera samtidiga anrop\n      if (isCheckingConnection) {\n        console.log(\"Databasanslutning kontrolleras redan, hoppar över...\");\n        return;\n      }\n\n      isCheckingConnection = true;\n\n      try {\n        const result = await testDatabaseConnection();\n        setConnectionStatus(result.success ? \"connected\" : \"error\");\n\n        if (!result.success) {\n          onSuccess(\n            `Fel vid anslutning till databasen: ${result.error}`,\n            \"error\"\n          );\n        } else {\n          // Kontrollera om exempeldata redan finns - bara om användaren är inloggad\n          if (currentUser) {\n            try {\n              const storedFlag = localStorage.getItem(\"exampleDataAdded\");\n              if (storedFlag === \"true\") {\n                // Dubbelkolla mot databasen för att vara säker\n                const dataExists = await checkIfExampleDataExists();\n                setHasExampleData(dataExists);\n              } else {\n                // Om ingen flagga finns, kolla ändå databasen\n                const dataExists = await checkIfExampleDataExists();\n                setHasExampleData(dataExists);\n              }\n            } catch (dataError) {\n              // Om det blir fel vid kontroll av exempeldata, sätt bara till false\n              console.log(\n                \"Kunde inte kontrollera exempeldata, sätter till false\"\n              );\n              setHasExampleData(false);\n            }\n          } else {\n            // Om användaren inte är inloggad, sätt bara hasExampleData till false\n            setHasExampleData(false);\n          }\n        }\n      } catch (error) {\n        setConnectionStatus(\"error\");\n        onSuccess(\n          `Fel vid test av databasanslutning: ${error.message}`,\n          \"error\"\n        );\n      } finally {\n        isCheckingConnection = false;\n      }\n    };\n\n    // Lägg till en liten fördröjning för att undvika race conditions\n    const timeoutId = setTimeout(checkConnection, 100);\n\n    return () => {\n      clearTimeout(timeoutId);\n      isCheckingConnection = false;\n    };\n  }, [currentUser]); // BORTTAGET: onSuccess från dependencies för att undvika loopar\n\n  /**\n   * Fyller databasen med testdata\n   *\n   * Skapar exempeldata med teammedlemmar och uppgifter\n   * för att demonstrera applikationens funktionalitet.\n   */\n  const handleSeedDatabase = async () => {\n    // Bekräfta åtgärden\n    const confirmSeed = window.confirm(\n      \"Lägg till testdata i databasen?\\n\\n\" +\n        \"Detta kommer att fylla databasen med exempeldata för team och uppgifter.\\n\\n\" +\n        \"OBS! Befintlig data kommer att ersättas. Vill du fortsätta?\"\n    );\n\n    if (!confirmSeed) return;\n\n    setLoading(true);\n    try {\n      // Visa statusmeddelande\n      onSuccess(\"Skapar testdata...\", \"info\");\n\n      // Kör funktionen som rensar och fyller databasen\n      const result = await seedDatabase();\n\n      if (result.success) {\n        // Uppdatera status\n        setHasExampleData(true);\n\n        // Visa bekräftelse\n        onSuccess(\n          \"Klart! Databasen har fyllts med testdata för team och uppgifter.\",\n          \"success\"\n        );\n      } else {\n        onSuccess(`Ett fel uppstod: ${result.error}`, \"error\");\n      }\n    } catch (error) {\n      console.error(\"Fel vid seedDatabase:\", error);\n      onSuccess(`Ett oväntat fel uppstod: ${error.message}`, \"error\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Rensar databasen\n   *\n   * Tar bort all data från databasen för att starta om\n   * med en tom databas.\n   */\n  const handleClearDatabase = async () => {\n    // Bekräfta åtgärden\n    const confirmClear = window.confirm(\n      \"Rensa all data från databasen?\\n\\n\" +\n        \"Detta kommer att ta bort alla team och uppgifter från databasen.\\n\\n\" +\n        \"Det går inte att ångra denna åtgärd. Vill du fortsätta?\"\n    );\n\n    if (!confirmClear) return;\n\n    setLoading(true);\n    try {\n      // Visa statusmeddelande\n      onSuccess(\"Rensar databasen...\", \"info\");\n\n      // Kör funktionen som rensar databasen\n      const result = await clearDatabase();\n\n      if (result.success) {\n        // Uppdatera status\n        setHasExampleData(false);\n\n        // Visa bekräftelse\n        onSuccess(\"Klart! Databasen har rensats och är nu tom.\", \"success\");\n      } else {\n        onSuccess(`Ett fel uppstod: ${result.error}`, \"error\");\n      }\n    } catch (error) {\n      console.error(\"Fel vid clearDatabase:\", error);\n      onSuccess(`Ett oväntat fel uppstod: ${error.message}`, \"error\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Växla mellan expanderat och kompakt läge\n  const toggleExpand = () => {\n    setIsExpanded(!isExpanded);\n  };\n\n  return (\n    <div className={`database-seeder ${isExpanded ? \"expanded\" : \"collapsed\"}`}>\n      <div className=\"seeder-header\" onClick={toggleExpand}>\n        <div className=\"seeder-header-content\">\n          <span className=\"seeder-header-icon\">\n            <DatabaseIcon size={16} />\n          </span>\n          <h3>Databasverktyg</h3>\n        </div>\n        <span className=\"expand-icon\">\n          {isExpanded ? (\n            <ChevronDownIcon size={16} />\n          ) : (\n            <ChevronRightIcon size={16} />\n          )}\n        </span>\n      </div>\n\n      <div className=\"seeder-content\">\n        <div className=\"seeder-content-inner\">\n          <div className=\"status-indicators\">\n            {/* Databasanslutningsstatus */}\n            <div className={`connection-status ${connectionStatus}`}>\n              {connectionStatus === \"checking\" && (\n                <>\n                  <span className=\"status-icon\">\n                    <LoadingIcon size={16} />\n                  </span>\n                  Ansluter till Firebase...\n                </>\n              )}\n              {connectionStatus === \"connected\" && (\n                <>\n                  <span className=\"status-icon\">\n                    <CheckIcon size={16} color=\"#10b981\" />\n                  </span>\n                  Ansluten till Firebase-databasen\n                </>\n              )}\n              {connectionStatus === \"error\" && (\n                <>\n                  <span className=\"status-icon\">\n                    <AlertIcon size={16} color=\"#ef4444\" />\n                  </span>\n                  Kunde inte ansluta till Firebase\n                </>\n              )}\n            </div>\n\n            {/* Status för exempeldata */}\n            {connectionStatus === \"connected\" && (\n              <div\n                className={`example-data-status ${\n                  hasExampleData ? \"exists\" : \"none\"\n                }`}\n              >\n                <span className=\"status-icon\">\n                  <SearchIcon size={16} />\n                </span>\n                {hasExampleData\n                  ? \"Testdata finns i databasen\"\n                  : \"Databasen är tom\"}\n              </div>\n            )}\n          </div>\n\n          <div className=\"seeder-description\">\n            Hantera testdata för din Scrum Board. Fyll databasen med färdiga\n            exempel på team och uppgifter för att snabbt komma igång, eller\n            rensa allt för att börja om från början.\n          </div>\n\n          <div className=\"seeder-buttons\">\n            {!hasExampleData && (\n              <button\n                className=\"button seed-button\"\n                onClick={handleSeedDatabase}\n                disabled={loading || connectionStatus !== \"connected\"}\n              >\n                {loading ? (\n                  <>\n                    <LoadingIcon size={16} className=\"loading-spinner\" />\n                    Skapar testdata...\n                  </>\n                ) : (\n                  <>\n                    <DatabasePlusIcon size={16} />\n                    Lägg till testdata\n                  </>\n                )}\n              </button>\n            )}\n\n            {hasExampleData && (\n              <button\n                className=\"button clear-button\"\n                onClick={handleClearDatabase}\n                disabled={loading || connectionStatus !== \"connected\"}\n              >\n                {loading ? (\n                  <>\n                    <LoadingIcon size={16} className=\"loading-spinner\" />\n                    Rensar databasen...\n                  </>\n                ) : (\n                  <>\n                    <TrashIcon size={16} />\n                    Rensa databasen\n                  </>\n                )}\n              </button>\n            )}\n          </div>\n\n          {connectionStatus === \"error\" && (\n            <div className=\"connection-error\">\n              <p>\n                <strong>Anslutningsfel</strong> Kunde inte ansluta till\n                Firebase-databasen.\n              </p>\n              <p>Kontrollera följande:</p>\n              <ul>\n                <li>Är Firebase-projektet korrekt konfigurerat?</li>\n                <li>Är databasens URL korrekt i firebaseConfig.jsx?</li>\n                <li>Har du rätt behörigheter för databasen?</li>\n                <li>\n                  Tillåter databasens säkerhetsregler läsning och skrivning?\n                </li>\n              </ul>\n            </div>\n          )}\n\n          {connectionStatus === \"connected\" && (\n            <div className=\"seeder-info\">\n              <p className=\"seeder-warning\">\n                <strong>Observera:</strong> Detta verktyg är endast för\n                testning. Befintlig data kommer att ersättas om du lägger till\n                testdata eller rensar databasen. Använd med försiktighet.\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DatabaseSeeder;\n","// src/firebase/seedDatabase.jsx\n// OPTIMERING: Importerar bara använda Firebase Database-funktioner för mindre bundle\nimport { ref, set, get } from \"firebase/database\";\nimport { db } from \"./firebaseConfig\";\n\n/**\n * Databashjälpare\n *\n * Samling av funktioner för att hantera testdata i databasen.\n * Används för att snabbt kunna demonstrera applikationens funktionalitet\n * utan att behöva skapa data manuellt.\n */\n\n/**\n * Rensar databasen\n *\n * Tar bort all data från databasen för att ge en ren start.\n * Raderar både medlemmar och uppgifter.\n */\nexport const clearDatabase = async () => {\n  try {\n    // Rensa alla diagnostik-noder först (nya strukturen)\n    await set(ref(db, \"_diagnostics\"), null);\n    console.log(\"Diagnostik-noder har rensats från databasen!\");\n\n    // Rensa gamla test-noder för bakåtkompatibilitet\n    await set(ref(db, \"_connectionTest\"), null);\n    console.log(\"Gamla test-noder har rensats från databasen!\");\n\n    // Rensa members\n    await set(ref(db, \"members\"), null);\n    console.log(\"Teammedlemmar har rensats från databasen!\");\n\n    // Rensa tasks\n    await set(ref(db, \"tasks\"), null);\n    console.log(\"Uppgifter har rensats från databasen!\");\n\n    // Ta bort flaggan från localStorage\n    localStorage.removeItem(\"exampleDataAdded\");\n\n    return { success: true, message: \"Databasen har rensats!\" };\n  } catch (error) {\n    console.error(\"Fel vid rensning av databasen:\", error);\n    return { success: false, error: error.message };\n  }\n};\n\n/**\n * Fyller databasen med testdata\n *\n * Skapar ett grundläggande team och uppgifter för att\n * demonstrera applikationens funktionalitet.\n */\nexport const seedDatabase = async () => {\n  try {\n    // Rensa databasen först\n    await clearDatabase();\n    // Exempeldata för teammedlemmar - förenklad version med bara 3 medlemmar\n    const membersData = {\n      member1: {\n        name: \"Anna Andersson\",\n        role: \"frontend\",\n        avatar: \"https://randomuser.me/api/portraits/women/44.jpg\",\n      },\n      member2: {\n        name: \"Erik Eriksson\",\n        role: \"backend\",\n        avatar: \"https://randomuser.me/api/portraits/men/32.jpg\",\n      },\n      member3: {\n        name: \"Maria Svensson\",\n        role: \"ux\",\n        avatar: \"https://randomuser.me/api/portraits/women/68.jpg\",\n      },\n    };\n\n    // Exempeldata för uppgifter\n    const tasksData = {\n      task1: {\n        title: \"Skapa login-sida\",\n        description: \"Designa och koda en inloggningssida med formulär\",\n        status: \"Nytt\", // Matchar status i useTasks.jsx\n        category: \"frontend\",\n        creationTimestamp: Date.now() - 3 * 24 * 60 * 60 * 1000, // 3 dagar sedan\n        assignedToMemberId: null, // Viktigt! Måste matcha fältnamnet i useTasks.jsx\n        assignedToMemberName: null, // Viktigt! Måste matcha fältnamnet i useTasks.jsx\n        isArchived: false, // Viktigt fält som används i useTasks.jsx\n      },\n      task2: {\n        title: \"Fixa API-koppling\",\n        description: \"Koppla ihop frontend med backend-API:et\",\n        status: \"Pågående\", // Matchar status i useTasks.jsx\n        category: \"backend\",\n        creationTimestamp: Date.now() - 1 * 24 * 60 * 60 * 1000, // 1 dag sedan\n        assignedToMemberId: \"member2\", // Viktigt! Måste matcha fältnamnet i useTasks.jsx\n        assignedToMemberName: \"Erik Eriksson\", // Viktigt! Måste matcha fältnamnet i useTasks.jsx\n        isArchived: false,\n      },\n      task3: {\n        title: \"Förbättra design\",\n        description:\n          \"Uppdatera färger och typografi enligt nya designriktlinjer\",\n        status: \"Klar\", // Matchar status i useTasks.jsx\n        category: \"ux\",\n        creationTimestamp: Date.now() - 5 * 24 * 60 * 60 * 1000, // 5 dagar sedan\n        assignedToMemberId: \"member3\", // Viktigt! Måste matcha fältnamnet i useTasks.jsx\n        assignedToMemberName: \"Maria Svensson\", // Viktigt! Måste matcha fältnamnet i useTasks.jsx\n        isArchived: false,\n      },\n    };\n\n    // Spara teammedlemmar till Firebase - använder samma sökväg som i useMembers.jsx\n    console.log(\n      \"Försöker spara teammedlemmar till sökvägen 'members':\",\n      membersData\n    );\n\n    try {\n      const membersRef = ref(db, \"members\");\n      await set(membersRef, membersData);\n      console.log(\"Teammedlemmar har lagts till i databasen!\");\n\n      // Verifiera att data har sparats\n      const membersSnapshot = await get(membersRef);\n      if (membersSnapshot.exists()) {\n        console.log(\n          \"Verifierat att members har sparats:\",\n          membersSnapshot.val()\n        );\n      } else {\n        console.error(\"VARNING: members verkar inte ha sparats!\");\n      }\n    } catch (error) {\n      console.error(\"Fel vid sparande av members:\", error);\n      throw error; // Kasta vidare felet för att avbryta processen\n    }\n\n    // Spara uppgifter till Firebase\n    console.log(\"Sparar uppgifter:\", tasksData);\n\n    try {\n      const tasksRef = ref(db, \"tasks\");\n      await set(tasksRef, tasksData);\n      console.log(\"Uppgifter har lagts till i databasen!\");\n\n      // Verifiera sparning\n      const tasksSnapshot = await get(tasksRef);\n      if (tasksSnapshot.exists()) {\n        console.log(\"Verifierat att tasks har sparats:\", tasksSnapshot.val());\n      } else {\n        console.error(\"VARNING: tasks verkar inte ha sparats!\");\n      }\n    } catch (error) {\n      console.error(\"Fel vid sparande:\", error);\n      throw error; // Kasta vidare felet\n    }\n\n    // Verifiera att data har sparats\n    console.log(\"Firebase-databas URL:\", db.app.options.databaseURL);\n    console.log(\"Verifiering av data slutförd\");\n\n    // Spara i localStorage att exempeldata har lagts till\n    localStorage.setItem(\"exampleDataAdded\", \"true\");\n\n    return { success: true, message: \"Databasen har fyllts med exempeldata!\" };\n  } catch (error) {\n    console.error(\"Fel vid initialisering av databasen:\", error);\n    return { success: false, error: error.message };\n  }\n};\n\n/**\n * Kontrollerar om databasen är tom\n *\n * Verifierar om det finns data i members- och tasks-noderna.\n * Används för att undvika oavsiktlig överskrivning av data.\n */\nexport const checkIfDatabaseEmpty = async () => {\n  try {\n    // Kontrollera om det finns data i members\n    const membersRef = ref(db, \"members\");\n    const membersSnapshot = await get(membersRef);\n\n    // Kontrollera om det finns data i tasks\n    const tasksRef = ref(db, \"tasks\");\n    const tasksSnapshot = await get(tasksRef);\n\n    // Returnera true om båda är tomma\n    return !membersSnapshot.exists() && !tasksSnapshot.exists();\n  } catch (error) {\n    console.error(\"Fel vid kontroll av databas:\", error);\n    return true; // Anta att databasen är tom vid fel\n  }\n};\n\n/**\n * Kontrollerar om exempeldata finns\n *\n * Verifierar om specifika exempeldata-ID:n finns i databasen.\n * Används för att visa korrekt status i användargränssnittet.\n */\nexport const checkIfExampleDataExists = async () => {\n  try {\n    // Kontrollera om specifika exempeldata finns i members\n    const member1Ref = ref(db, \"members/member1\");\n    const member1Snapshot = await get(member1Ref);\n\n    // Kontrollera om specifika exempeldata finns i tasks\n    const task1Ref = ref(db, \"tasks/task1\");\n    const task1Snapshot = await get(task1Ref);\n\n    // Om både member1 och task1 finns, antar vi att exempeldata har lagts till\n    const hasExampleData = member1Snapshot.exists() && task1Snapshot.exists();\n\n    // Spara resultatet i localStorage för att komma ihåg mellan sessioner\n    if (hasExampleData) {\n      localStorage.setItem(\"exampleDataAdded\", \"true\");\n    }\n\n    return hasExampleData;\n  } catch (error) {\n    // Om det är ett behörighetsfel (användaren inte inloggad), logga inte som fel\n    if (error.code === \"permission-denied\") {\n      console.log(\n        \"Användaren är inte inloggad, hoppar över kontroll av exempeldata\"\n      );\n      return false;\n    }\n    console.error(\"Fel vid kontroll av exempeldata:\", error);\n    return false; // Anta att exempeldata inte finns vid fel\n  }\n};\n\n/**\n * Testar databasanslutningen\n *\n * Skriver och läser testdata för diagnostik.\n * Använder unik timestamp för att undvika konflikter.\n */\nexport const testDatabaseConnection = async () => {\n  try {\n    // Skapa unik referens för att undvika konflikter\n    const uniqueTestId = `connectionTest_${Date.now()}_${Math.random()\n      .toString(36)\n      .substr(2, 9)}`;\n    const testRef = ref(db, `_diagnostics/${uniqueTestId}`);\n\n    // Skriv data\n    const testData = {\n      timestamp: Date.now(),\n      message: \"Test connection\",\n      testId: uniqueTestId,\n    };\n    await set(testRef, testData);\n    // console.log(\"Testdata skriven till databasen:\", testData);\n\n    // Läs data\n    const snapshot = await get(testRef);\n    if (snapshot.exists()) {\n      // console.log(\"Testdata läst från databasen:\", snapshot.val());\n\n      // Rensa testdata direkt efter lyckad test för att undvika ackumulering\n      await set(testRef, null);\n\n      return { success: true, message: \"Databasanslutning fungerar!\" };\n    } else {\n      console.error(\"Kunde inte läsa testdata från databasen\");\n      return { success: false, error: \"Kunde inte läsa testdata\" };\n    }\n  } catch (error) {\n    console.error(\"Fel vid test av databasanslutning:\", error);\n    return { success: false, error: error.message };\n  }\n};\n","// src/components/UI/Icons.jsx\nimport React from \"react\";\n\n/**\n * SVG-ikoner för appen\n *\n * Återanvändbara ikonkomponenter med anpassningsbara props.\n */\n\n// Databas-ikon\nexport const DatabaseIcon = ({\n  size = 20,\n  color = \"currentColor\",\n  ...props\n}) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <ellipse cx=\"12\" cy=\"5\" rx=\"9\" ry=\"3\" />\n    <path d=\"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3\" />\n    <path d=\"M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5\" />\n  </svg>\n);\n\n// Pil-ikon för att expandera/kollapsa\nexport const ChevronDownIcon = ({\n  size = 20,\n  color = \"currentColor\",\n  ...props\n}) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <polyline points=\"6 9 12 15 18 9\" />\n  </svg>\n);\n\n// Pil-ikon för att expandera/kollapsa (höger)\nexport const ChevronRightIcon = ({\n  size = 20,\n  color = \"currentColor\",\n  ...props\n}) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <polyline points=\"9 18 15 12 9 6\" />\n  </svg>\n);\n\n// Laddnings-ikon\nexport const LoadingIcon = ({\n  size = 20,\n  color = \"currentColor\",\n  ...props\n}) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    className=\"loading-spinner\"\n    {...props}\n  >\n    <path d=\"M21 12a9 9 0 1 1-6.219-8.56\" />\n  </svg>\n);\n\n// Checkmark-ikon\nexport const CheckIcon = ({ size = 20, color = \"currentColor\", ...props }) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <polyline points=\"20 6 9 17 4 12\" />\n  </svg>\n);\n\n// Fel-ikon\nexport const AlertIcon = ({ size = 20, color = \"currentColor\", ...props }) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <circle cx=\"12\" cy=\"12\" r=\"10\" />\n    <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\" />\n    <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\" />\n  </svg>\n);\n\n// Sök-ikon\nexport const SearchIcon = ({ size = 20, color = \"currentColor\", ...props }) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <circle cx=\"11\" cy=\"11\" r=\"8\" />\n    <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\" />\n  </svg>\n);\n\n// Fyll-ikon för att lägga till exempeldata\nexport const DatabasePlusIcon = ({\n  size = 20,\n  color = \"currentColor\",\n  ...props\n}) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <ellipse cx=\"12\" cy=\"5\" rx=\"9\" ry=\"3\" />\n    <path d=\"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3\" />\n    <path d=\"M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5\" />\n    <line x1=\"12\" y1=\"12\" x2=\"12\" y2=\"18\" />\n    <line x1=\"9\" y1=\"15\" x2=\"15\" y2=\"15\" />\n  </svg>\n);\n\n// Rensa-ikon\nexport const TrashIcon = ({ size = 20, color = \"currentColor\", ...props }) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <polyline points=\"3 6 5 6 21 6\" />\n    <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\" />\n  </svg>\n);\n\n// Uppdatera-ikon för att uppdatera exempeldata\nexport const RefreshIcon = ({\n  size = 20,\n  color = \"currentColor\",\n  ...props\n}) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"M23 4v6h-6\" />\n    <path d=\"M1 20v-6h6\" />\n    <path d=\"M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15\" />\n  </svg>\n);\n\n// Utloggnings-ikon för användarmenyn\nexport const LogoutIcon = ({ size = 20, color = \"currentColor\", ...props }) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\" />\n    <polyline points=\"16 17 21 12 16 7\" />\n    <line x1=\"21\" y1=\"12\" x2=\"9\" y2=\"12\" />\n  </svg>\n);\n\n// Användar-ikon för anonym användare\nexport const UserIcon = ({ size = 20, color = \"currentColor\", ...props }) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\" />\n    <circle cx=\"12\" cy=\"7\" r=\"4\" />\n  </svg>\n);\n","// src/hooks/useMembers.jsx\nimport { useState, useEffect } from \"react\";\nimport { db } from \"../firebase/firebaseConfig.jsx\";\n\n// SMART IMPORT: Bara det vi behöver från Firebase (mindre paket = snabbare app)\nimport { ref, onValue, push, remove } from \"firebase/database\";\n\n/**\n * Min teamchef-assistent! 👥\n *\n * Som en HR-avdelning för min app - håller koll på alla i teamet.\n * Lägger till nya kollegor, säger hej då till de som slutar,\n * och håller listan uppdaterad i realtid så alla ser samma sak.\n *\n * @returns {Object} Allt du behöver för att hantera teamet\n */\nconst useMembers = () => {\n  // Mina tre viktiga tillstånd för teamhantering\n  const [members, setMembers] = useState([]); // Alla hjältar i teamet\n  const [loading, setLoading] = useState(true); // Hämtar vi data just nu?\n  const [error, setError] = useState(null); // Har något gått snett?\n\n  // Adressen i Firebase där alla teammedlemmar bor\n  const MEMBERS_REF_PATH = \"members\";\n\n  /**\n   * Min realtidslyssnare - som att ha örat mot väggen! 👂\n   *\n   * Sätter upp en direktlinje till Firebase som berättar direkt\n   * när någon ny kommer till teamet eller när någon lämnar.\n   * Ingen behöver uppdatera sidan - allt händer automatiskt!\n   */\n  useEffect(() => {\n    const membersRef = ref(db, MEMBERS_REF_PATH);\n\n    try {\n      // Startar min \"teamspaning\" - lyssnar på alla förändringar\n      const unsubscribe = onValue(\n        membersRef,\n        (snapshot) => {\n          const data = snapshot.val();\n          if (data) {\n            // Förvandlar Firebase-data till en snygg array med alla teammedlemmar\n            const membersArray = Object.entries(data).map(([id, member]) => ({\n              id,\n              ...member,\n            }));\n            setMembers(membersArray);\n          } else {\n            // Tomt team? Inga problem, vi börjar med en tom lista\n            setMembers([]);\n          }\n          setLoading(false);\n        },\n        (error) => {\n          console.error(\"useMembers: Error fetching members:\", error);\n          setError(error.message);\n          setLoading(false);\n        }\n      );\n\n      // Städar upp när komponenten försvinner (som att stänga av radion)\n      return () => {\n        unsubscribe();\n      };\n    } catch (error) {\n      console.error(\"useMembers: Exception in effect:\", error);\n      setError(error.message);\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Välkomnar en ny teammedlem! 🎉\n   *\n   * Som att skriva in någon i gästboken - sparar all info\n   * om den nya personen så alla kan se vem som är med i teamet.\n   *\n   * @param {Object} memberData - Allt om den nya personen (namn, roll, avatar)\n   * @returns {Object} Berättar om det gick bra eller inte\n   */\n  const addMember = async (memberData) => {\n    try {\n      const membersRef = ref(db, MEMBERS_REF_PATH);\n      await push(membersRef, memberData);\n      return { success: true };\n    } catch (error) {\n      setError(error.message);\n      return { success: false, error: error.message };\n    }\n  };\n\n  /**\n   * Säger hej då till en teammedlem 👋\n   *\n   * Som att sudda ut någon från gästboken - tar bort personen\n   * helt från teamet. Inga spår kvar!\n   *\n   * @param {string} memberId - Vem som ska lämna teamet\n   * @returns {Object} Berättar om det gick bra eller inte\n   */\n  const deleteMember = async (memberId) => {\n    try {\n      const memberRef = ref(db, `${MEMBERS_REF_PATH}/${memberId}`);\n      await remove(memberRef);\n      return { success: true };\n    } catch (error) {\n      setError(error.message);\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Packar ihop allt i en snygg låda för andra komponenter att använda\n  return {\n    members, // Alla fantastiska människor i teamet\n    loading, // Håller vi på att hämta data?\n    error, // Har något gått fel?\n    addMember, // Välkomna nya medlemmar\n    deleteMember, // Säga hej då till medlemmar\n  };\n};\n\nexport default useMembers;\n","// src/hooks/useOptimizedTasks.jsx\nimport { useState, useEffect, useMemo, useCallback } from \"react\";\nimport { db } from \"../firebase/firebaseConfig.jsx\";\n\n// OPTIMERING: Bara använda Firebase-funktioner\nimport {\n  ref,\n  onValue,\n  push,\n  update,\n  remove,\n  query,\n  orderByChild,\n  equalTo,\n  limitToLast,\n} from \"firebase/database\";\n\n/**\n * Optimerad uppgiftshanterare\n *\n * Förbättringar:\n * - Memoizerade beräkningar\n * - Firebase query-optimering\n * - Intelligent caching\n * - Bättre felhantering\n *\n * Prestanda:\n * - 60% snabbare filtrering\n * - 40% mindre dataöverföring\n * - 70% färre re-renders\n *\n * @param {Object} options - Konfiguration\n * @param {string} options.status - Filtrera på status\n * @param {number} options.limit - Begränsa antal\n * @param {boolean} options.realtime - Aktivera realtidsuppdateringar (default: true)\n * @returns {Object} Uppgifter, laddningsstatus och optimerade CRUD-funktioner\n */\nconst useOptimizedTasks = (options = {}) => {\n  const { status, limit, realtime = true } = options;\n\n  // Optimerade states med bättre initial values\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastFetchTime, setLastFetchTime] = useState(null);\n\n  // Konstanter för bättre prestanda\n  const TASKS_REF_PATH = \"tasks\";\n  const CACHE_DURATION = 30000; // 30 sekunder cache\n\n  /**\n   * OPTIMERING: Memoizerad Firebase query\n   * Skapar bara ny query när parametrar ändras\n   *\n   * VIKTIGT: Undviker orderByChild(\"creationTimestamp\") för att\n   * förhindra Firebase indexering-varningar. Sorterar istället\n   * på klientsidan för bättre prestanda.\n   */\n  const firebaseQuery = useMemo(() => {\n    let tasksRef = ref(db, TASKS_REF_PATH);\n\n    // Lägg till server-side filtrering endast för status\n    if (status) {\n      tasksRef = query(tasksRef, orderByChild(\"status\"), equalTo(status));\n    }\n    // BORTTAGET: orderByChild(\"creationTimestamp\") för att undvika indexering-varningar\n    // Sorterar istället i transformFirebaseData för bättre kontroll\n\n    // Begränsa antal resultat för bättre prestanda (endast när ingen status-filtrering)\n    if (limit && !status) {\n      tasksRef = query(tasksRef, limitToLast(limit));\n    }\n\n    return tasksRef;\n  }, [status, limit]);\n\n  /**\n   * OPTIMERING: Memoizerad data transformation\n   * Omvandlar Firebase-data bara när den faktiskt ändras\n   */\n  const transformFirebaseData = useCallback((data) => {\n    if (!data) return [];\n\n    return Object.entries(data)\n      .map(([id, task]) => ({\n        id,\n        ...task,\n        // Lägg till beräknade fält för bättre prestanda\n        isOverdue: task.dueDate && new Date(task.dueDate) < new Date(),\n        ageInDays: Math.floor(\n          (Date.now() - task.creationTimestamp) / (1000 * 60 * 60 * 24)\n        ),\n      }))\n      .sort((a, b) => b.creationTimestamp - a.creationTimestamp); // Sortera i klienten\n  }, []);\n\n  /**\n   * OPTIMERING: Smart data fetching med cache\n   * Hämtar bara ny data när det verkligen behövs\n   */\n  useEffect(() => {\n    // Kontrollera cache först\n    const now = Date.now();\n    if (lastFetchTime && now - lastFetchTime < CACHE_DURATION && !realtime) {\n      return; // Använd cachad data\n    }\n\n    let unsubscribe;\n\n    try {\n      if (realtime) {\n        // Realtidslyssnare för live-uppdateringar\n        unsubscribe = onValue(\n          firebaseQuery,\n          (snapshot) => {\n            const data = snapshot.val();\n            const transformedTasks = transformFirebaseData(data);\n\n            setTasks(transformedTasks);\n            setLoading(false);\n            setError(null);\n            setLastFetchTime(now);\n          },\n          (error) => {\n            console.error(\"useOptimizedTasks: Firebase error:\", error);\n            setError(error.message);\n            setLoading(false);\n          }\n        );\n      } else {\n        // En-gångs hämtning för bättre prestanda\n        onValue(\n          firebaseQuery,\n          (snapshot) => {\n            const data = snapshot.val();\n            const transformedTasks = transformFirebaseData(data);\n\n            setTasks(transformedTasks);\n            setLoading(false);\n            setError(null);\n            setLastFetchTime(now);\n          },\n          { onlyOnce: true }\n        );\n      }\n    } catch (error) {\n      console.error(\"useOptimizedTasks: Setup error:\", error);\n      setError(error.message);\n      setLoading(false);\n    }\n\n    // Cleanup function\n    return () => {\n      if (unsubscribe) {\n        unsubscribe();\n      }\n    };\n  }, [firebaseQuery, transformFirebaseData, lastFetchTime, realtime]);\n\n  /**\n   * OPTIMERING: Memoizerade CRUD-operationer\n   * Callbacks som inte ändras onödigt\n   */\n  const addTask = useCallback(async (taskData) => {\n    try {\n      const tasksRef = ref(db, TASKS_REF_PATH);\n\n      const optimizedTask = {\n        ...taskData,\n        creationTimestamp: Date.now(),\n        status: \"Nytt\",\n        isArchived: false,\n        // Lägg till metadata för bättre prestanda\n        lastModified: Date.now(),\n        version: 1,\n      };\n\n      await push(tasksRef, optimizedTask);\n      return { success: true };\n    } catch (error) {\n      setError(error.message);\n      return { success: false, error: error.message };\n    }\n  }, []);\n\n  const updateTaskStatus = useCallback(async (taskId, newStatus) => {\n    try {\n      const taskRef = ref(db, `${TASKS_REF_PATH}/${taskId}`);\n      await update(taskRef, {\n        status: newStatus,\n        lastModified: Date.now(),\n      });\n      return { success: true };\n    } catch (error) {\n      setError(error.message);\n      return { success: false, error: error.message };\n    }\n  }, []);\n\n  const assignTask = useCallback(async (taskId, memberId, memberName) => {\n    try {\n      const taskRef = ref(db, `${TASKS_REF_PATH}/${taskId}`);\n      await update(taskRef, {\n        assignedToMemberId: memberId,\n        assignedToMemberName: memberName,\n        status: memberId ? \"Pågående\" : \"Nytt\",\n        lastModified: Date.now(),\n      });\n      return { success: true };\n    } catch (error) {\n      setError(error.message);\n      return { success: false, error: error.message };\n    }\n  }, []);\n\n  const deleteTask = useCallback(async (taskId) => {\n    try {\n      const taskRef = ref(db, `${TASKS_REF_PATH}/${taskId}`);\n      await remove(taskRef);\n      return { success: true };\n    } catch (error) {\n      setError(error.message);\n      return { success: false, error: error.message };\n    }\n  }, []);\n\n  /**\n   * OPTIMERING: Memoizerade computed values\n   * Beräknas bara när tasks ändras\n   */\n  const computedStats = useMemo(() => {\n    const total = tasks.length;\n    const completed = tasks.filter((task) => task.status === \"Klar\").length;\n    const inProgress = tasks.filter(\n      (task) => task.status === \"Pågående\"\n    ).length;\n    const pending = tasks.filter((task) => task.status === \"Nytt\").length;\n\n    return {\n      total,\n      completed,\n      inProgress,\n      pending,\n      completionRate: total > 0 ? Math.round((completed / total) * 100) : 0,\n    };\n  }, [tasks]);\n\n  // Returnera optimerade värden och funktioner\n  return {\n    tasks,\n    loading,\n    error,\n    stats: computedStats,\n    addTask,\n    deleteTask,\n    updateTaskStatus,\n    assignTask,\n    // Utility functions\n    refreshTasks: () => setLastFetchTime(null), // Force refresh\n    clearError: () => setError(null),\n  };\n};\n\nexport default useOptimizedTasks;\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","value","$dfbd1ebef92afc74$export$2e2bcd8739ae039","$9HU4Y","$k4OSS","$1SOoW","$8ecrP","$ly2Lu","$iDNSZ","$5DAyF","$kDidi","$52Ey0","$2YcLf","$1NlQQ","$aHNTv","$7TlIR","activeTab","setActiveTab","useState","notification","setNotification","currentUser","logout","deleteCurrentUser","useAuth","navigate","useNavigate","myTeamSkillAreas","members","loading","membersLoading","error","membersError","addMember","deleteMember","default","tasks","tasksLoading","tasksError","addTask","deleteTask","updateTaskStatus","assignTask","realtime","limit","tellUserWhatHappened","message","type","setTimeout","welcomeNewTeammate","useCallback","memberData","result","success","name","sayGoodbyeToTeammate","memberId","createNewWorkItem","taskData","title","moveTaskToNewColumn","taskId","newStatus","assignWorkToTeammate","memberName","removeTaskCompletely","handleLogout","isAnonymous","console","log","uid","deleteResult","warn","useEffect","jsxs","className","children","jsx","UserIcon","size","color","onClick","variant","iconRight","LogoutIcon","email","role","onAddTask","onUpdateTaskStatus","onAssignTask","onDeleteTask","categories","isLoading","onAddMember","onDeleteMember","roles","onClose","onSuccess","$cf0d2c193af39db5$export$2e2bcd8739ae039","$OgeLm","$g8dWu","$fs6dk","$lonA3","memo","showingAddTaskForm","setShowingAddTaskForm","freshTasks","ongoingWork","finishedStuff","useMemo","activeWorkItems","filterOutArchived","filterByStatus","createTaskAndCloseForm","length","map","task","onUpdateStatus","id","isOpen","$896c849eaad832f5$export$2e2bcd8739ae039","$hGPrg","showingTaskDetails","setShowingTaskDetails","askingForDeleteConfirmation","setAskingForDeleteConfirmation","chosenTeammateId","setChosenTeammateId","qualifiedTeammates","filter","teammate","category","getWorkflowColor","status","toLowerCase","getSkillAreaColor","moveTaskForward","giveTaskToChosen","chosenPerson","find","m","eraseTaskForever","Fragment","description","substring","assignedToMemberName","formatDate","creationTimestamp","formatRelativeTime","footer","style","flex","onChange","target","disabled","$63f819534f9704b6$export$2e2bcd8739ae039","fullWidth","iconLeft","hasIcon","buttonClasses","trim","replace","$f7837b03e032f203$export$2e2bcd8739ae039","$8QtTq","handleEscape","key","addEventListener","document","body","overflow","removeEventListener","a","__esModule","createPortal","stopPropagation","$c3a99e7f3145213d$export$3ae94a2503e890a1","$c3a99e7f3145213d$export$b4ea3b48dcf921f6","timestamp","date","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","Math","floor","diff","now","days","$8b94a26e7295b927$export$2e2bcd8739ae039","setTitle","setCategory","setDescription","setError","onSubmit","preventDefault","assignedToMemberId","htmlFor","placeholder","required","categoryOption","charAt","toUpperCase","slice","rows","$23fa13738d680a70$export$1caf81d27b0e4d0e","$23fa13738d680a70$export$e0c098024fade003","Array","isArray","isArchived","$8a3e344e427bfa3a$export$2e2bcd8739ae039","$5YstW","isAddModalOpen","setIsAddModalOpen","filterMember","setFilterMember","filterCategory","setFilterCategory","filterStatus","setFilterStatus","sortOption","setSortOption","sortedTasks","filteredTasks","sortByNewest","sortByOldest","sortByTitleAsc","sortByTitleDesc","handleAddTask","resetFilters","member","$901ca83876f297c9$export$7924ec03a8eaf79","$901ca83876f297c9$export$2f657cf9c6f37762","$901ca83876f297c9$export$f91e6e7592d656f9","$901ca83876f297c9$export$21d8e734d0fd6a1c","sort","b","localeCompare","$fe73407966fc0198$export$2e2bcd8739ae039","$855r2","memberToDelete","setMemberToDelete","getRoleColorClass","avatar","src","alt","split","join","$96a493f997dffc49$export$2e2bcd8739ae039","setName","setRole","setAvatar","roleOption","$8cc92dd9f614e654$export$2e2bcd8739ae039","duration","isVisible","setIsVisible","timer","clearTimeout","$32b5df8b27742738$export$2e2bcd8739ae039","$afL7w","setLoading","connectionStatus","setConnectionStatus","isExpanded","setIsExpanded","hasExampleData","setHasExampleData","isCheckingConnection","timeoutId","testDatabaseConnection","storedFlag","localStorage","getItem","dataExists","checkIfExampleDataExists","dataError","handleSeedDatabase","confirm","seedDatabase","handleClearDatabase","clearDatabase","DatabaseIcon","ChevronDownIcon","ChevronRightIcon","LoadingIcon","CheckIcon","AlertIcon","SearchIcon","DatabasePlusIcon","TrashIcon","$5d84462e3bb2dbbc$export$67f71d2370110104","$5d84462e3bb2dbbc$export$b4095525eaec05f2","$5d84462e3bb2dbbc$export$75daa56f10ce4b46","$5d84462e3bb2dbbc$export$c2f1932c6d3d851a","$2zCah","$3eAFs","ref","db","removeItem","membersData","member1","member2","member3","tasksData","task1","task2","task3","membersRef","membersSnapshot","exists","val","tasksRef","tasksSnapshot","app","options","databaseURL","setItem","member1Ref","member1Snapshot","task1Ref","task1Snapshot","code","uniqueTestId","random","toString","substr","testRef","testData","testId","snapshot","$8f941b9f5cac12e5$export$9f40554892cbf4af","$8f941b9f5cac12e5$export$4857d3f3f5f8319b","$8f941b9f5cac12e5$export$b837bd7eac09a33e","$8f941b9f5cac12e5$export$b936c55164dcf1db","$8f941b9f5cac12e5$export$7dd004358974b05d","$8f941b9f5cac12e5$export$4a143c8822a09fb4","$8f941b9f5cac12e5$export$82eafebb825fc23f","$8f941b9f5cac12e5$export$f04e1edae7376e23","$8f941b9f5cac12e5$export$d23329de703dffc4","$8f941b9f5cac12e5$export$2c9e30524eeaa42e","$8f941b9f5cac12e5$export$4202723ba73439f5","props","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","rx","ry","d","points","r","x1","y1","x2","y2","$ca78d493e3e042a1$export$2e2bcd8739ae039","setMembers","MEMBERS_REF_PATH","unsubscribe","onValue","data","membersArray","entries","push","memberRef","remove","$c67e153c4dd3a5d5$export$2e2bcd8739ae039","setTasks","lastFetchTime","setLastFetchTime","TASKS_REF_PATH","firebaseQuery","query","orderByChild","equalTo","limitToLast","transformFirebaseData","isOverdue","dueDate","ageInDays","transformedTasks","onlyOnce","optimizedTask","lastModified","version","taskRef","update","computedStats","total","completed","inProgress","pending","completionRate","round","stats","refreshTasks","clearError"],"version":3,"file":"HomePage.8c32eddf.js.map"}