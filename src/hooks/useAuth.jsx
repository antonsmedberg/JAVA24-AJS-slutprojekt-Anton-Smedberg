// src/hooks/useAuth.jsx
import { useState, useEffect, createContext, useContext } from "react";

// OPTIMERING: Bara anv칛nda Firebase-funktioner
import {
  signOut,
  onAuthStateChanged,
  signInAnonymously,
  deleteUser,
} from "firebase/auth";
import { auth } from "../firebase/firebaseConfig.jsx";

/**
 * Hanterar inloggning och autentisering 游뛁
 *
 * Anonyma inloggningar utan kr친ngel med konton.
 * Kommer ih친g vem som 칛r inloggad.
 */

// Gemensam kontext f칬r autentisering
const AuthContext = createContext({
  currentUser: null,
  loading: true,
  error: null,
  loginAnonymously: () => Promise.resolve({ success: false }),
  logout: () => Promise.resolve({ success: false }),
  deleteCurrentUser: () => Promise.resolve({ success: false }),
  isAnonymous: false,
});

// Hook f칬r att komma 친t autentisering
export const useAuth = () => {
  const context = useContext(AuthContext);

  // Returnerar alltid n친got anv칛ndbart
  return context;
};

// Provider-komponent som ger tillg친ng till autentisering
export const AuthProvider = ({ children }) => {
  const [currentUser, setCurrentUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Anv칛nder den redan initialiserade Firebase Auth-instansen fr친n config

  /**
   * 칐ppnar d칬rren f칬r anonyma g칛ster 游꿠
   *
   * Som att s칛ga "kom in, du beh칬ver inte visa legitimation!"
   * Firebase skapar en tillf칛llig identitet 친t dig automatiskt.
   */
  const loginAnonymously = async () => {
    try {
      setError(null);
      const userCredential = await signInAnonymously(auth);
      return { success: true, user: userCredential.user };
    } catch (error) {
      console.error("Inloggningsfel:", error.message);
      setError("Kunde inte logga in");
      return { success: false, error: "Kunde inte logga in" };
    }
  };

  /**
   * St칛dar upp efter g칛ster som g친r hem 游빛
   *
   * Som att torka av bordet efter att n친gon 칛tit - vi vill inte
   * att Firebase fylls med gamla anonyma konton som ingen anv칛nder.
   * Bra milj칬t칛nk f칬r databasen!
   */
  const deleteCurrentUser = async () => {
    try {
      if (!currentUser) {
        return { success: false, error: "Ingen anv칛ndare att ta bort" };
      }

      await deleteUser(currentUser);
      console.log("Anv칛ndare borttagen fr친n Firebase 游빛");
      return { success: true };
    } catch (error) {
      console.error("Kunde inte ta bort anv칛ndare:", error.message);
      return {
        success: false,
        error: "Borttagning misslyckades: " + error.message,
      };
    }
  };

  /**
   * S칛ger hej d친 och st칛nger d칬rren 游녦
   *
   * Som att l칛mna en fest - vi s칛ger tack f칬r ikv칛ll och g친r hem.
   * Firebase gl칬mmer vem vi var och vi b칬rjar om fr친n b칬rjan n칛sta g친ng.
   */
  const logout = async () => {
    try {
      await signOut(auth);
      return { success: true };
    } catch (error) {
      console.error("Utloggningsfel:", error.message);
      setError("Kunde inte logga ut. F칬rs칬k igen.");
      return { success: false, error: "Kunde inte logga ut. F칬rs칬k igen." };
    }
  };

  /**
   * Lyssnar p친 칛ndringar i inloggningsstatus 游녝
   */
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setCurrentUser(user);
      setLoading(false);
    });

    return unsubscribe; // St칛dar upp n칛r komponenten f칬rsvinner
  }, []); // K칬r bara en g친ng

  // Packar ihop allt f칬r andra komponenter
  const value = {
    currentUser,
    loading,
    error,
    loginAnonymously,
    logout,
    deleteCurrentUser,
    isAnonymous: currentUser?.isAnonymous || false,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

export default useAuth;
