// src/hooks/useMembers.jsx
import { useState, useEffect } from "react";
import { db } from "../firebase/firebaseConfig.jsx";

// SMART IMPORT: Bara det vi beh칬ver fr친n Firebase (mindre paket = snabbare app)
import { ref, onValue, push, remove } from "firebase/database";

/**
 * Min teamchef-assistent! 游논
 *
 * Som en HR-avdelning f칬r min app - h친ller koll p친 alla i teamet.
 * L칛gger till nya kollegor, s칛ger hej d친 till de som slutar,
 * och h친ller listan uppdaterad i realtid s친 alla ser samma sak.
 *
 * @returns {Object} Allt du beh칬ver f칬r att hantera teamet
 */
const useMembers = () => {
  // Mina tre viktiga tillst친nd f칬r teamhantering
  const [members, setMembers] = useState([]); // Alla hj칛ltar i teamet
  const [loading, setLoading] = useState(true); // H칛mtar vi data just nu?
  const [error, setError] = useState(null); // Har n친got g친tt snett?

  // Adressen i Firebase d칛r alla teammedlemmar bor
  const MEMBERS_REF_PATH = "members";

  /**
   * Min realtidslyssnare - som att ha 칬rat mot v칛ggen! 游녝
   *
   * S칛tter upp en direktlinje till Firebase som ber칛ttar direkt
   * n칛r n친gon ny kommer till teamet eller n칛r n친gon l칛mnar.
   * Ingen beh칬ver uppdatera sidan - allt h칛nder automatiskt!
   */
  useEffect(() => {
    const membersRef = ref(db, MEMBERS_REF_PATH);

    try {
      // Startar min "teamspaning" - lyssnar p친 alla f칬r칛ndringar
      const unsubscribe = onValue(
        membersRef,
        (snapshot) => {
          const data = snapshot.val();
          if (data) {
            // F칬rvandlar Firebase-data till en snygg array med alla teammedlemmar
            const membersArray = Object.entries(data).map(([id, member]) => ({
              id,
              ...member,
            }));
            setMembers(membersArray);
          } else {
            // Tomt team? Inga problem, vi b칬rjar med en tom lista
            setMembers([]);
          }
          setLoading(false);
        },
        (error) => {
          console.error("useMembers: Error fetching members:", error);
          setError(error.message);
          setLoading(false);
        }
      );

      // St칛dar upp n칛r komponenten f칬rsvinner (som att st칛nga av radion)
      return () => {
        unsubscribe();
      };
    } catch (error) {
      console.error("useMembers: Exception in effect:", error);
      setError(error.message);
      setLoading(false);
    }
  }, []);

  /**
   * V칛lkomnar en ny teammedlem! 游꿀
   *
   * Som att skriva in n친gon i g칛stboken - sparar all info
   * om den nya personen s친 alla kan se vem som 칛r med i teamet.
   *
   * @param {Object} memberData - Allt om den nya personen (namn, roll, avatar)
   * @returns {Object} Ber칛ttar om det gick bra eller inte
   */
  const addMember = async (memberData) => {
    try {
      const membersRef = ref(db, MEMBERS_REF_PATH);
      await push(membersRef, memberData);
      return { success: true };
    } catch (error) {
      setError(error.message);
      return { success: false, error: error.message };
    }
  };

  /**
   * S칛ger hej d친 till en teammedlem 游녦
   *
   * Som att sudda ut n친gon fr친n g칛stboken - tar bort personen
   * helt fr친n teamet. Inga sp친r kvar!
   *
   * @param {string} memberId - Vem som ska l칛mna teamet
   * @returns {Object} Ber칛ttar om det gick bra eller inte
   */
  const deleteMember = async (memberId) => {
    try {
      const memberRef = ref(db, `${MEMBERS_REF_PATH}/${memberId}`);
      await remove(memberRef);
      return { success: true };
    } catch (error) {
      setError(error.message);
      return { success: false, error: error.message };
    }
  };

  // Packar ihop allt i en snygg l친da f칬r andra komponenter att anv칛nda
  return {
    members, // Alla fantastiska m칛nniskor i teamet
    loading, // H친ller vi p친 att h칛mta data?
    error, // Har n친got g친tt fel?
    addMember, // V칛lkomna nya medlemmar
    deleteMember, // S칛ga hej d친 till medlemmar
  };
};

export default useMembers;
