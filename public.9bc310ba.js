
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

      var $parcel$global =
        typeof globalThis !== 'undefined'
          ? globalThis
          : typeof self !== 'undefined'
          ? self
          : typeof window !== 'undefined'
          ? window
          : typeof global !== 'undefined'
          ? global
          : {};
  
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequiredb09"];

if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequiredb09"] = parcelRequire;
}

var parcelRegister = parcelRequire.register;
parcelRegister("2u1j3", function(module, exports) {

$parcel$export(module.exports, "Fragment", () => $1cef658bcdec9cba$export$ffb0004e005737fa, (v) => $1cef658bcdec9cba$export$ffb0004e005737fa = v);
$parcel$export(module.exports, "jsx", () => $1cef658bcdec9cba$export$34b9dba7ce09269b, (v) => $1cef658bcdec9cba$export$34b9dba7ce09269b = v);
$parcel$export(module.exports, "jsxs", () => $1cef658bcdec9cba$export$25062201e9e25d76, (v) => $1cef658bcdec9cba$export$25062201e9e25d76 = v);
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var $1cef658bcdec9cba$export$ffb0004e005737fa;
var $1cef658bcdec9cba$export$34b9dba7ce09269b;
var $1cef658bcdec9cba$export$25062201e9e25d76;
'use strict';

var $7p28Q = parcelRequire("7p28Q");
var $1cef658bcdec9cba$var$k = Symbol.for("react.element"), $1cef658bcdec9cba$var$l = Symbol.for("react.fragment"), $1cef658bcdec9cba$var$m = Object.prototype.hasOwnProperty, $1cef658bcdec9cba$var$n = $7p28Q.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, $1cef658bcdec9cba$var$p = {
    key: !0,
    ref: !0,
    __self: !0,
    __source: !0
};
function $1cef658bcdec9cba$var$q(c, a, g) {
    var b, d = {}, e = null, h = null;
    void 0 !== g && (e = "" + g);
    void 0 !== a.key && (e = "" + a.key);
    void 0 !== a.ref && (h = a.ref);
    for(b in a)$1cef658bcdec9cba$var$m.call(a, b) && !$1cef658bcdec9cba$var$p.hasOwnProperty(b) && (d[b] = a[b]);
    if (c && c.defaultProps) for(b in a = c.defaultProps, a)void 0 === d[b] && (d[b] = a[b]);
    return {
        $$typeof: $1cef658bcdec9cba$var$k,
        type: c,
        key: e,
        ref: h,
        props: d,
        _owner: $1cef658bcdec9cba$var$n.current
    };
}
$1cef658bcdec9cba$export$ffb0004e005737fa = $1cef658bcdec9cba$var$l;
$1cef658bcdec9cba$export$34b9dba7ce09269b = $1cef658bcdec9cba$var$q;
$1cef658bcdec9cba$export$25062201e9e25d76 = $1cef658bcdec9cba$var$q;

});
parcelRegister("7p28Q", function(module, exports) {
'use strict';

module.exports = (parcelRequire("4IiWd"));

});
parcelRegister("4IiWd", function(module, exports) {

$parcel$export(module.exports, "Children", () => $36e9f630dda9d16b$export$dca3b0875bd9a954, (v) => $36e9f630dda9d16b$export$dca3b0875bd9a954 = v);
$parcel$export(module.exports, "Component", () => $36e9f630dda9d16b$export$16fa2f45be04daa8, (v) => $36e9f630dda9d16b$export$16fa2f45be04daa8 = v);
$parcel$export(module.exports, "Fragment", () => $36e9f630dda9d16b$export$ffb0004e005737fa, (v) => $36e9f630dda9d16b$export$ffb0004e005737fa = v);
$parcel$export(module.exports, "Profiler", () => $36e9f630dda9d16b$export$e2c29f18771995cb, (v) => $36e9f630dda9d16b$export$e2c29f18771995cb = v);
$parcel$export(module.exports, "PureComponent", () => $36e9f630dda9d16b$export$221d75b3f55bb0bd, (v) => $36e9f630dda9d16b$export$221d75b3f55bb0bd = v);
$parcel$export(module.exports, "StrictMode", () => $36e9f630dda9d16b$export$5f8d39834fd61797, (v) => $36e9f630dda9d16b$export$5f8d39834fd61797 = v);
$parcel$export(module.exports, "Suspense", () => $36e9f630dda9d16b$export$74bf444e3cd11ea5, (v) => $36e9f630dda9d16b$export$74bf444e3cd11ea5 = v);
$parcel$export(module.exports, "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED", () => $36e9f630dda9d16b$export$ae55be85d98224ed, (v) => $36e9f630dda9d16b$export$ae55be85d98224ed = v);
$parcel$export(module.exports, "act", () => $36e9f630dda9d16b$export$3ba232387fd5d6dd, (v) => $36e9f630dda9d16b$export$3ba232387fd5d6dd = v);
$parcel$export(module.exports, "cloneElement", () => $36e9f630dda9d16b$export$e530037191fcd5d7, (v) => $36e9f630dda9d16b$export$e530037191fcd5d7 = v);
$parcel$export(module.exports, "createContext", () => $36e9f630dda9d16b$export$fd42f52fd3ae1109, (v) => $36e9f630dda9d16b$export$fd42f52fd3ae1109 = v);
$parcel$export(module.exports, "createElement", () => $36e9f630dda9d16b$export$c8a8987d4410bf2d, (v) => $36e9f630dda9d16b$export$c8a8987d4410bf2d = v);
$parcel$export(module.exports, "createFactory", () => $36e9f630dda9d16b$export$d38cd72104c1f0e9, (v) => $36e9f630dda9d16b$export$d38cd72104c1f0e9 = v);
$parcel$export(module.exports, "createRef", () => $36e9f630dda9d16b$export$7d1e3a5e95ceca43, (v) => $36e9f630dda9d16b$export$7d1e3a5e95ceca43 = v);
$parcel$export(module.exports, "forwardRef", () => $36e9f630dda9d16b$export$257a8862b851cb5b, (v) => $36e9f630dda9d16b$export$257a8862b851cb5b = v);
$parcel$export(module.exports, "isValidElement", () => $36e9f630dda9d16b$export$a8257692ac88316c, (v) => $36e9f630dda9d16b$export$a8257692ac88316c = v);
$parcel$export(module.exports, "lazy", () => $36e9f630dda9d16b$export$488013bae63b21da, (v) => $36e9f630dda9d16b$export$488013bae63b21da = v);
$parcel$export(module.exports, "memo", () => $36e9f630dda9d16b$export$7c73462e0d25e514, (v) => $36e9f630dda9d16b$export$7c73462e0d25e514 = v);
$parcel$export(module.exports, "startTransition", () => $36e9f630dda9d16b$export$7568632d0d33d16d, (v) => $36e9f630dda9d16b$export$7568632d0d33d16d = v);
$parcel$export(module.exports, "unstable_act", () => $36e9f630dda9d16b$export$88948ce120ea2619, (v) => $36e9f630dda9d16b$export$88948ce120ea2619 = v);
$parcel$export(module.exports, "useCallback", () => $36e9f630dda9d16b$export$35808ee640e87ca7, (v) => $36e9f630dda9d16b$export$35808ee640e87ca7 = v);
$parcel$export(module.exports, "useContext", () => $36e9f630dda9d16b$export$fae74005e78b1a27, (v) => $36e9f630dda9d16b$export$fae74005e78b1a27 = v);
$parcel$export(module.exports, "useDebugValue", () => $36e9f630dda9d16b$export$dc8fbce3eb94dc1e, (v) => $36e9f630dda9d16b$export$dc8fbce3eb94dc1e = v);
$parcel$export(module.exports, "useDeferredValue", () => $36e9f630dda9d16b$export$6a7bc4e911dc01cf, (v) => $36e9f630dda9d16b$export$6a7bc4e911dc01cf = v);
$parcel$export(module.exports, "useEffect", () => $36e9f630dda9d16b$export$6d9c69b0de29b591, (v) => $36e9f630dda9d16b$export$6d9c69b0de29b591 = v);
$parcel$export(module.exports, "useId", () => $36e9f630dda9d16b$export$f680877a34711e37, (v) => $36e9f630dda9d16b$export$f680877a34711e37 = v);
$parcel$export(module.exports, "useImperativeHandle", () => $36e9f630dda9d16b$export$d5a552a76deda3c2, (v) => $36e9f630dda9d16b$export$d5a552a76deda3c2 = v);
$parcel$export(module.exports, "useInsertionEffect", () => $36e9f630dda9d16b$export$aaabe4eda9ed9969, (v) => $36e9f630dda9d16b$export$aaabe4eda9ed9969 = v);
$parcel$export(module.exports, "useLayoutEffect", () => $36e9f630dda9d16b$export$e5c5a5f917a5871c, (v) => $36e9f630dda9d16b$export$e5c5a5f917a5871c = v);
$parcel$export(module.exports, "useMemo", () => $36e9f630dda9d16b$export$1538c33de8887b59, (v) => $36e9f630dda9d16b$export$1538c33de8887b59 = v);
$parcel$export(module.exports, "useReducer", () => $36e9f630dda9d16b$export$13e3392192263954, (v) => $36e9f630dda9d16b$export$13e3392192263954 = v);
$parcel$export(module.exports, "useRef", () => $36e9f630dda9d16b$export$b8f5890fc79d6aca, (v) => $36e9f630dda9d16b$export$b8f5890fc79d6aca = v);
$parcel$export(module.exports, "useState", () => $36e9f630dda9d16b$export$60241385465d0a34, (v) => $36e9f630dda9d16b$export$60241385465d0a34 = v);
$parcel$export(module.exports, "useSyncExternalStore", () => $36e9f630dda9d16b$export$306c0aa65ff9ec16, (v) => $36e9f630dda9d16b$export$306c0aa65ff9ec16 = v);
$parcel$export(module.exports, "useTransition", () => $36e9f630dda9d16b$export$7b286972b8d8ccbf, (v) => $36e9f630dda9d16b$export$7b286972b8d8ccbf = v);
$parcel$export(module.exports, "version", () => $36e9f630dda9d16b$export$83d89fbfd8236492, (v) => $36e9f630dda9d16b$export$83d89fbfd8236492 = v);
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var $36e9f630dda9d16b$export$dca3b0875bd9a954;
var $36e9f630dda9d16b$export$16fa2f45be04daa8;
var $36e9f630dda9d16b$export$ffb0004e005737fa;
var $36e9f630dda9d16b$export$e2c29f18771995cb;
var $36e9f630dda9d16b$export$221d75b3f55bb0bd;
var $36e9f630dda9d16b$export$5f8d39834fd61797;
var $36e9f630dda9d16b$export$74bf444e3cd11ea5;
var $36e9f630dda9d16b$export$ae55be85d98224ed;
var $36e9f630dda9d16b$export$3ba232387fd5d6dd;
var $36e9f630dda9d16b$export$e530037191fcd5d7;
var $36e9f630dda9d16b$export$fd42f52fd3ae1109;
var $36e9f630dda9d16b$export$c8a8987d4410bf2d;
var $36e9f630dda9d16b$export$d38cd72104c1f0e9;
var $36e9f630dda9d16b$export$7d1e3a5e95ceca43;
var $36e9f630dda9d16b$export$257a8862b851cb5b;
var $36e9f630dda9d16b$export$a8257692ac88316c;
var $36e9f630dda9d16b$export$488013bae63b21da;
var $36e9f630dda9d16b$export$7c73462e0d25e514;
var $36e9f630dda9d16b$export$7568632d0d33d16d;
var $36e9f630dda9d16b$export$88948ce120ea2619;
var $36e9f630dda9d16b$export$35808ee640e87ca7;
var $36e9f630dda9d16b$export$fae74005e78b1a27;
var $36e9f630dda9d16b$export$dc8fbce3eb94dc1e;
var $36e9f630dda9d16b$export$6a7bc4e911dc01cf;
var $36e9f630dda9d16b$export$6d9c69b0de29b591;
var $36e9f630dda9d16b$export$f680877a34711e37;
var $36e9f630dda9d16b$export$d5a552a76deda3c2;
var $36e9f630dda9d16b$export$aaabe4eda9ed9969;
var $36e9f630dda9d16b$export$e5c5a5f917a5871c;
var $36e9f630dda9d16b$export$1538c33de8887b59;
var $36e9f630dda9d16b$export$13e3392192263954;
var $36e9f630dda9d16b$export$b8f5890fc79d6aca;
var $36e9f630dda9d16b$export$60241385465d0a34;
var $36e9f630dda9d16b$export$306c0aa65ff9ec16;
var $36e9f630dda9d16b$export$7b286972b8d8ccbf;
var $36e9f630dda9d16b$export$83d89fbfd8236492;
'use strict';
var $36e9f630dda9d16b$var$l = Symbol.for("react.element"), $36e9f630dda9d16b$var$n = Symbol.for("react.portal"), $36e9f630dda9d16b$var$p = Symbol.for("react.fragment"), $36e9f630dda9d16b$var$q = Symbol.for("react.strict_mode"), $36e9f630dda9d16b$var$r = Symbol.for("react.profiler"), $36e9f630dda9d16b$var$t = Symbol.for("react.provider"), $36e9f630dda9d16b$var$u = Symbol.for("react.context"), $36e9f630dda9d16b$var$v = Symbol.for("react.forward_ref"), $36e9f630dda9d16b$var$w = Symbol.for("react.suspense"), $36e9f630dda9d16b$var$x = Symbol.for("react.memo"), $36e9f630dda9d16b$var$y = Symbol.for("react.lazy"), $36e9f630dda9d16b$var$z = Symbol.iterator;
function $36e9f630dda9d16b$var$A(a) {
    if (null === a || "object" !== typeof a) return null;
    a = $36e9f630dda9d16b$var$z && a[$36e9f630dda9d16b$var$z] || a["@@iterator"];
    return "function" === typeof a ? a : null;
}
var $36e9f630dda9d16b$var$B = {
    isMounted: function() {
        return !1;
    },
    enqueueForceUpdate: function() {},
    enqueueReplaceState: function() {},
    enqueueSetState: function() {}
}, $36e9f630dda9d16b$var$C = Object.assign, $36e9f630dda9d16b$var$D = {};
function $36e9f630dda9d16b$var$E(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = $36e9f630dda9d16b$var$D;
    this.updater = e || $36e9f630dda9d16b$var$B;
}
$36e9f630dda9d16b$var$E.prototype.isReactComponent = {};
$36e9f630dda9d16b$var$E.prototype.setState = function(a, b) {
    if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
    this.updater.enqueueSetState(this, a, b, "setState");
};
$36e9f630dda9d16b$var$E.prototype.forceUpdate = function(a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
};
function $36e9f630dda9d16b$var$F() {}
$36e9f630dda9d16b$var$F.prototype = $36e9f630dda9d16b$var$E.prototype;
function $36e9f630dda9d16b$var$G(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = $36e9f630dda9d16b$var$D;
    this.updater = e || $36e9f630dda9d16b$var$B;
}
var $36e9f630dda9d16b$var$H = $36e9f630dda9d16b$var$G.prototype = new $36e9f630dda9d16b$var$F;
$36e9f630dda9d16b$var$H.constructor = $36e9f630dda9d16b$var$G;
$36e9f630dda9d16b$var$C($36e9f630dda9d16b$var$H, $36e9f630dda9d16b$var$E.prototype);
$36e9f630dda9d16b$var$H.isPureReactComponent = !0;
var $36e9f630dda9d16b$var$I = Array.isArray, $36e9f630dda9d16b$var$J = Object.prototype.hasOwnProperty, $36e9f630dda9d16b$var$K = {
    current: null
}, $36e9f630dda9d16b$var$L = {
    key: !0,
    ref: !0,
    __self: !0,
    __source: !0
};
function $36e9f630dda9d16b$var$M(a, b, e) {
    var d, c = {}, k = null, h = null;
    if (null != b) for(d in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b)$36e9f630dda9d16b$var$J.call(b, d) && !$36e9f630dda9d16b$var$L.hasOwnProperty(d) && (c[d] = b[d]);
    var g = arguments.length - 2;
    if (1 === g) c.children = e;
    else if (1 < g) {
        for(var f = Array(g), m = 0; m < g; m++)f[m] = arguments[m + 2];
        c.children = f;
    }
    if (a && a.defaultProps) for(d in g = a.defaultProps, g)void 0 === c[d] && (c[d] = g[d]);
    return {
        $$typeof: $36e9f630dda9d16b$var$l,
        type: a,
        key: k,
        ref: h,
        props: c,
        _owner: $36e9f630dda9d16b$var$K.current
    };
}
function $36e9f630dda9d16b$var$N(a, b) {
    return {
        $$typeof: $36e9f630dda9d16b$var$l,
        type: a.type,
        key: b,
        ref: a.ref,
        props: a.props,
        _owner: a._owner
    };
}
function $36e9f630dda9d16b$var$O(a) {
    return "object" === typeof a && null !== a && a.$$typeof === $36e9f630dda9d16b$var$l;
}
function $36e9f630dda9d16b$var$escape(a) {
    var b = {
        "=": "=0",
        ":": "=2"
    };
    return "$" + a.replace(/[=:]/g, function(a) {
        return b[a];
    });
}
var $36e9f630dda9d16b$var$P = /\/+/g;
function $36e9f630dda9d16b$var$Q(a, b) {
    return "object" === typeof a && null !== a && null != a.key ? $36e9f630dda9d16b$var$escape("" + a.key) : b.toString(36);
}
function $36e9f630dda9d16b$var$R(a, b, e, d, c) {
    var k = typeof a;
    if ("undefined" === k || "boolean" === k) a = null;
    var h = !1;
    if (null === a) h = !0;
    else switch(k){
        case "string":
        case "number":
            h = !0;
            break;
        case "object":
            switch(a.$$typeof){
                case $36e9f630dda9d16b$var$l:
                case $36e9f630dda9d16b$var$n:
                    h = !0;
            }
    }
    if (h) return h = a, c = c(h), a = "" === d ? "." + $36e9f630dda9d16b$var$Q(h, 0) : d, $36e9f630dda9d16b$var$I(c) ? (e = "", null != a && (e = a.replace($36e9f630dda9d16b$var$P, "$&/") + "/"), $36e9f630dda9d16b$var$R(c, b, e, "", function(a) {
        return a;
    })) : null != c && ($36e9f630dda9d16b$var$O(c) && (c = $36e9f630dda9d16b$var$N(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace($36e9f630dda9d16b$var$P, "$&/") + "/") + a)), b.push(c)), 1;
    h = 0;
    d = "" === d ? "." : d + ":";
    if ($36e9f630dda9d16b$var$I(a)) for(var g = 0; g < a.length; g++){
        k = a[g];
        var f = d + $36e9f630dda9d16b$var$Q(k, g);
        h += $36e9f630dda9d16b$var$R(k, b, e, f, c);
    }
    else if (f = $36e9f630dda9d16b$var$A(a), "function" === typeof f) for(a = f.call(a), g = 0; !(k = a.next()).done;)k = k.value, f = d + $36e9f630dda9d16b$var$Q(k, g++), h += $36e9f630dda9d16b$var$R(k, b, e, f, c);
    else if ("object" === k) throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
    return h;
}
function $36e9f630dda9d16b$var$S(a, b, e) {
    if (null == a) return a;
    var d = [], c = 0;
    $36e9f630dda9d16b$var$R(a, d, "", "", function(a) {
        return b.call(e, a, c++);
    });
    return d;
}
function $36e9f630dda9d16b$var$T(a) {
    if (-1 === a._status) {
        var b = a._result;
        b = b();
        b.then(function(b) {
            if (0 === a._status || -1 === a._status) a._status = 1, a._result = b;
        }, function(b) {
            if (0 === a._status || -1 === a._status) a._status = 2, a._result = b;
        });
        -1 === a._status && (a._status = 0, a._result = b);
    }
    if (1 === a._status) return a._result.default;
    throw a._result;
}
var $36e9f630dda9d16b$var$U = {
    current: null
}, $36e9f630dda9d16b$var$V = {
    transition: null
}, $36e9f630dda9d16b$var$W = {
    ReactCurrentDispatcher: $36e9f630dda9d16b$var$U,
    ReactCurrentBatchConfig: $36e9f630dda9d16b$var$V,
    ReactCurrentOwner: $36e9f630dda9d16b$var$K
};
function $36e9f630dda9d16b$var$X() {
    throw Error("act(...) is not supported in production builds of React.");
}
$36e9f630dda9d16b$export$dca3b0875bd9a954 = {
    map: $36e9f630dda9d16b$var$S,
    forEach: function(a, b, e) {
        $36e9f630dda9d16b$var$S(a, function() {
            b.apply(this, arguments);
        }, e);
    },
    count: function(a) {
        var b = 0;
        $36e9f630dda9d16b$var$S(a, function() {
            b++;
        });
        return b;
    },
    toArray: function(a) {
        return $36e9f630dda9d16b$var$S(a, function(a) {
            return a;
        }) || [];
    },
    only: function(a) {
        if (!$36e9f630dda9d16b$var$O(a)) throw Error("React.Children.only expected to receive a single React element child.");
        return a;
    }
};
$36e9f630dda9d16b$export$16fa2f45be04daa8 = $36e9f630dda9d16b$var$E;
$36e9f630dda9d16b$export$ffb0004e005737fa = $36e9f630dda9d16b$var$p;
$36e9f630dda9d16b$export$e2c29f18771995cb = $36e9f630dda9d16b$var$r;
$36e9f630dda9d16b$export$221d75b3f55bb0bd = $36e9f630dda9d16b$var$G;
$36e9f630dda9d16b$export$5f8d39834fd61797 = $36e9f630dda9d16b$var$q;
$36e9f630dda9d16b$export$74bf444e3cd11ea5 = $36e9f630dda9d16b$var$w;
$36e9f630dda9d16b$export$ae55be85d98224ed = $36e9f630dda9d16b$var$W;
$36e9f630dda9d16b$export$3ba232387fd5d6dd = $36e9f630dda9d16b$var$X;
$36e9f630dda9d16b$export$e530037191fcd5d7 = function(a, b, e) {
    if (null === a || void 0 === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
    var d = $36e9f630dda9d16b$var$C({}, a.props), c = a.key, k = a.ref, h = a._owner;
    if (null != b) {
        void 0 !== b.ref && (k = b.ref, h = $36e9f630dda9d16b$var$K.current);
        void 0 !== b.key && (c = "" + b.key);
        if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
        for(f in b)$36e9f630dda9d16b$var$J.call(b, f) && !$36e9f630dda9d16b$var$L.hasOwnProperty(f) && (d[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
    }
    var f = arguments.length - 2;
    if (1 === f) d.children = e;
    else if (1 < f) {
        g = Array(f);
        for(var m = 0; m < f; m++)g[m] = arguments[m + 2];
        d.children = g;
    }
    return {
        $$typeof: $36e9f630dda9d16b$var$l,
        type: a.type,
        key: c,
        ref: k,
        props: d,
        _owner: h
    };
};
$36e9f630dda9d16b$export$fd42f52fd3ae1109 = function(a) {
    a = {
        $$typeof: $36e9f630dda9d16b$var$u,
        _currentValue: a,
        _currentValue2: a,
        _threadCount: 0,
        Provider: null,
        Consumer: null,
        _defaultValue: null,
        _globalName: null
    };
    a.Provider = {
        $$typeof: $36e9f630dda9d16b$var$t,
        _context: a
    };
    return a.Consumer = a;
};
$36e9f630dda9d16b$export$c8a8987d4410bf2d = $36e9f630dda9d16b$var$M;
$36e9f630dda9d16b$export$d38cd72104c1f0e9 = function(a) {
    var b = $36e9f630dda9d16b$var$M.bind(null, a);
    b.type = a;
    return b;
};
$36e9f630dda9d16b$export$7d1e3a5e95ceca43 = function() {
    return {
        current: null
    };
};
$36e9f630dda9d16b$export$257a8862b851cb5b = function(a) {
    return {
        $$typeof: $36e9f630dda9d16b$var$v,
        render: a
    };
};
$36e9f630dda9d16b$export$a8257692ac88316c = $36e9f630dda9d16b$var$O;
$36e9f630dda9d16b$export$488013bae63b21da = function(a) {
    return {
        $$typeof: $36e9f630dda9d16b$var$y,
        _payload: {
            _status: -1,
            _result: a
        },
        _init: $36e9f630dda9d16b$var$T
    };
};
$36e9f630dda9d16b$export$7c73462e0d25e514 = function(a, b) {
    return {
        $$typeof: $36e9f630dda9d16b$var$x,
        type: a,
        compare: void 0 === b ? null : b
    };
};
$36e9f630dda9d16b$export$7568632d0d33d16d = function(a) {
    var b = $36e9f630dda9d16b$var$V.transition;
    $36e9f630dda9d16b$var$V.transition = {};
    try {
        a();
    } finally{
        $36e9f630dda9d16b$var$V.transition = b;
    }
};
$36e9f630dda9d16b$export$88948ce120ea2619 = $36e9f630dda9d16b$var$X;
$36e9f630dda9d16b$export$35808ee640e87ca7 = function(a, b) {
    return $36e9f630dda9d16b$var$U.current.useCallback(a, b);
};
$36e9f630dda9d16b$export$fae74005e78b1a27 = function(a) {
    return $36e9f630dda9d16b$var$U.current.useContext(a);
};
$36e9f630dda9d16b$export$dc8fbce3eb94dc1e = function() {};
$36e9f630dda9d16b$export$6a7bc4e911dc01cf = function(a) {
    return $36e9f630dda9d16b$var$U.current.useDeferredValue(a);
};
$36e9f630dda9d16b$export$6d9c69b0de29b591 = function(a, b) {
    return $36e9f630dda9d16b$var$U.current.useEffect(a, b);
};
$36e9f630dda9d16b$export$f680877a34711e37 = function() {
    return $36e9f630dda9d16b$var$U.current.useId();
};
$36e9f630dda9d16b$export$d5a552a76deda3c2 = function(a, b, e) {
    return $36e9f630dda9d16b$var$U.current.useImperativeHandle(a, b, e);
};
$36e9f630dda9d16b$export$aaabe4eda9ed9969 = function(a, b) {
    return $36e9f630dda9d16b$var$U.current.useInsertionEffect(a, b);
};
$36e9f630dda9d16b$export$e5c5a5f917a5871c = function(a, b) {
    return $36e9f630dda9d16b$var$U.current.useLayoutEffect(a, b);
};
$36e9f630dda9d16b$export$1538c33de8887b59 = function(a, b) {
    return $36e9f630dda9d16b$var$U.current.useMemo(a, b);
};
$36e9f630dda9d16b$export$13e3392192263954 = function(a, b, e) {
    return $36e9f630dda9d16b$var$U.current.useReducer(a, b, e);
};
$36e9f630dda9d16b$export$b8f5890fc79d6aca = function(a) {
    return $36e9f630dda9d16b$var$U.current.useRef(a);
};
$36e9f630dda9d16b$export$60241385465d0a34 = function(a) {
    return $36e9f630dda9d16b$var$U.current.useState(a);
};
$36e9f630dda9d16b$export$306c0aa65ff9ec16 = function(a, b, e) {
    return $36e9f630dda9d16b$var$U.current.useSyncExternalStore(a, b, e);
};
$36e9f630dda9d16b$export$7b286972b8d8ccbf = function() {
    return $36e9f630dda9d16b$var$U.current.useTransition();
};
$36e9f630dda9d16b$export$83d89fbfd8236492 = "18.3.1";

});



parcelRegister("dAiNB", function(module, exports) {

$parcel$export(module.exports, "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED", () => $9e3d383a4c02c1e5$export$ae55be85d98224ed, (v) => $9e3d383a4c02c1e5$export$ae55be85d98224ed = v);
$parcel$export(module.exports, "createPortal", () => $9e3d383a4c02c1e5$export$d39a5bbd09211389, (v) => $9e3d383a4c02c1e5$export$d39a5bbd09211389 = v);
$parcel$export(module.exports, "createRoot", () => $9e3d383a4c02c1e5$export$882461b6382ed46c, (v) => $9e3d383a4c02c1e5$export$882461b6382ed46c = v);
$parcel$export(module.exports, "findDOMNode", () => $9e3d383a4c02c1e5$export$466bfc07425424d5, (v) => $9e3d383a4c02c1e5$export$466bfc07425424d5 = v);
$parcel$export(module.exports, "flushSync", () => $9e3d383a4c02c1e5$export$cd75ccfd720a3cd4, (v) => $9e3d383a4c02c1e5$export$cd75ccfd720a3cd4 = v);
$parcel$export(module.exports, "hydrate", () => $9e3d383a4c02c1e5$export$fa8d919ba61d84db, (v) => $9e3d383a4c02c1e5$export$fa8d919ba61d84db = v);
$parcel$export(module.exports, "hydrateRoot", () => $9e3d383a4c02c1e5$export$757ceba2d55c277e, (v) => $9e3d383a4c02c1e5$export$757ceba2d55c277e = v);
$parcel$export(module.exports, "render", () => $9e3d383a4c02c1e5$export$b3890eb0ae9dca99, (v) => $9e3d383a4c02c1e5$export$b3890eb0ae9dca99 = v);
$parcel$export(module.exports, "unmountComponentAtNode", () => $9e3d383a4c02c1e5$export$502457920280e6be, (v) => $9e3d383a4c02c1e5$export$502457920280e6be = v);
$parcel$export(module.exports, "unstable_batchedUpdates", () => $9e3d383a4c02c1e5$export$c78a37762a8d58e1, (v) => $9e3d383a4c02c1e5$export$c78a37762a8d58e1 = v);
$parcel$export(module.exports, "unstable_renderSubtreeIntoContainer", () => $9e3d383a4c02c1e5$export$dc54d992c10e8a18, (v) => $9e3d383a4c02c1e5$export$dc54d992c10e8a18 = v);
$parcel$export(module.exports, "version", () => $9e3d383a4c02c1e5$export$83d89fbfd8236492, (v) => $9e3d383a4c02c1e5$export$83d89fbfd8236492 = v);
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ /*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/ var $9e3d383a4c02c1e5$export$ae55be85d98224ed;
var $9e3d383a4c02c1e5$export$d39a5bbd09211389;
var $9e3d383a4c02c1e5$export$882461b6382ed46c;
var $9e3d383a4c02c1e5$export$466bfc07425424d5;
var $9e3d383a4c02c1e5$export$cd75ccfd720a3cd4;
var $9e3d383a4c02c1e5$export$fa8d919ba61d84db;
var $9e3d383a4c02c1e5$export$757ceba2d55c277e;
var $9e3d383a4c02c1e5$export$b3890eb0ae9dca99;
var $9e3d383a4c02c1e5$export$502457920280e6be;
var $9e3d383a4c02c1e5$export$c78a37762a8d58e1;
var $9e3d383a4c02c1e5$export$dc54d992c10e8a18;
var $9e3d383a4c02c1e5$export$83d89fbfd8236492;
'use strict';

var $7p28Q = parcelRequire("7p28Q");

var $lnQPQ = parcelRequire("lnQPQ");
function $9e3d383a4c02c1e5$var$p(a) {
    for(var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)b += "&args[]=" + encodeURIComponent(arguments[c]);
    return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
var $9e3d383a4c02c1e5$var$da = new Set, $9e3d383a4c02c1e5$var$ea = {};
function $9e3d383a4c02c1e5$var$fa(a, b) {
    $9e3d383a4c02c1e5$var$ha(a, b);
    $9e3d383a4c02c1e5$var$ha(a + "Capture", b);
}
function $9e3d383a4c02c1e5$var$ha(a, b) {
    $9e3d383a4c02c1e5$var$ea[a] = b;
    for(a = 0; a < b.length; a++)$9e3d383a4c02c1e5$var$da.add(b[a]);
}
var $9e3d383a4c02c1e5$var$ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), $9e3d383a4c02c1e5$var$ja = Object.prototype.hasOwnProperty, $9e3d383a4c02c1e5$var$ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, $9e3d383a4c02c1e5$var$la = {}, $9e3d383a4c02c1e5$var$ma = {};
function $9e3d383a4c02c1e5$var$oa(a) {
    if ($9e3d383a4c02c1e5$var$ja.call($9e3d383a4c02c1e5$var$ma, a)) return !0;
    if ($9e3d383a4c02c1e5$var$ja.call($9e3d383a4c02c1e5$var$la, a)) return !1;
    if ($9e3d383a4c02c1e5$var$ka.test(a)) return $9e3d383a4c02c1e5$var$ma[a] = !0;
    $9e3d383a4c02c1e5$var$la[a] = !0;
    return !1;
}
function $9e3d383a4c02c1e5$var$pa(a, b, c, d) {
    if (null !== c && 0 === c.type) return !1;
    switch(typeof b){
        case "function":
        case "symbol":
            return !0;
        case "boolean":
            if (d) return !1;
            if (null !== c) return !c.acceptsBooleans;
            a = a.toLowerCase().slice(0, 5);
            return "data-" !== a && "aria-" !== a;
        default:
            return !1;
    }
}
function $9e3d383a4c02c1e5$var$qa(a, b, c, d) {
    if (null === b || "undefined" === typeof b || $9e3d383a4c02c1e5$var$pa(a, b, c, d)) return !0;
    if (d) return !1;
    if (null !== c) switch(c.type){
        case 3:
            return !b;
        case 4:
            return !1 === b;
        case 5:
            return isNaN(b);
        case 6:
            return isNaN(b) || 1 > b;
    }
    return !1;
}
function $9e3d383a4c02c1e5$var$v(a, b, c, d, e, f, g) {
    this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
    this.attributeName = d;
    this.attributeNamespace = e;
    this.mustUseProperty = c;
    this.propertyName = a;
    this.type = b;
    this.sanitizeURL = f;
    this.removeEmptyString = g;
}
var $9e3d383a4c02c1e5$var$z = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
    $9e3d383a4c02c1e5$var$z[a] = new $9e3d383a4c02c1e5$var$v(a, 0, !1, a, null, !1, !1);
});
[
    [
        "acceptCharset",
        "accept-charset"
    ],
    [
        "className",
        "class"
    ],
    [
        "htmlFor",
        "for"
    ],
    [
        "httpEquiv",
        "http-equiv"
    ]
].forEach(function(a) {
    var b = a[0];
    $9e3d383a4c02c1e5$var$z[b] = new $9e3d383a4c02c1e5$var$v(b, 1, !1, a[1], null, !1, !1);
});
[
    "contentEditable",
    "draggable",
    "spellCheck",
    "value"
].forEach(function(a) {
    $9e3d383a4c02c1e5$var$z[a] = new $9e3d383a4c02c1e5$var$v(a, 2, !1, a.toLowerCase(), null, !1, !1);
});
[
    "autoReverse",
    "externalResourcesRequired",
    "focusable",
    "preserveAlpha"
].forEach(function(a) {
    $9e3d383a4c02c1e5$var$z[a] = new $9e3d383a4c02c1e5$var$v(a, 2, !1, a, null, !1, !1);
});
"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
    $9e3d383a4c02c1e5$var$z[a] = new $9e3d383a4c02c1e5$var$v(a, 3, !1, a.toLowerCase(), null, !1, !1);
});
[
    "checked",
    "multiple",
    "muted",
    "selected"
].forEach(function(a) {
    $9e3d383a4c02c1e5$var$z[a] = new $9e3d383a4c02c1e5$var$v(a, 3, !0, a, null, !1, !1);
});
[
    "capture",
    "download"
].forEach(function(a) {
    $9e3d383a4c02c1e5$var$z[a] = new $9e3d383a4c02c1e5$var$v(a, 4, !1, a, null, !1, !1);
});
[
    "cols",
    "rows",
    "size",
    "span"
].forEach(function(a) {
    $9e3d383a4c02c1e5$var$z[a] = new $9e3d383a4c02c1e5$var$v(a, 6, !1, a, null, !1, !1);
});
[
    "rowSpan",
    "start"
].forEach(function(a) {
    $9e3d383a4c02c1e5$var$z[a] = new $9e3d383a4c02c1e5$var$v(a, 5, !1, a.toLowerCase(), null, !1, !1);
});
var $9e3d383a4c02c1e5$var$ra = /[\-:]([a-z])/g;
function $9e3d383a4c02c1e5$var$sa(a) {
    return a[1].toUpperCase();
}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
    var b = a.replace($9e3d383a4c02c1e5$var$ra, $9e3d383a4c02c1e5$var$sa);
    $9e3d383a4c02c1e5$var$z[b] = new $9e3d383a4c02c1e5$var$v(b, 1, !1, a, null, !1, !1);
});
"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
    var b = a.replace($9e3d383a4c02c1e5$var$ra, $9e3d383a4c02c1e5$var$sa);
    $9e3d383a4c02c1e5$var$z[b] = new $9e3d383a4c02c1e5$var$v(b, 1, !1, a, "http://www.w3.org/1999/xlink", !1, !1);
});
[
    "xml:base",
    "xml:lang",
    "xml:space"
].forEach(function(a) {
    var b = a.replace($9e3d383a4c02c1e5$var$ra, $9e3d383a4c02c1e5$var$sa);
    $9e3d383a4c02c1e5$var$z[b] = new $9e3d383a4c02c1e5$var$v(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1, !1);
});
[
    "tabIndex",
    "crossOrigin"
].forEach(function(a) {
    $9e3d383a4c02c1e5$var$z[a] = new $9e3d383a4c02c1e5$var$v(a, 1, !1, a.toLowerCase(), null, !1, !1);
});
$9e3d383a4c02c1e5$var$z.xlinkHref = new $9e3d383a4c02c1e5$var$v("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);
[
    "src",
    "href",
    "action",
    "formAction"
].forEach(function(a) {
    $9e3d383a4c02c1e5$var$z[a] = new $9e3d383a4c02c1e5$var$v(a, 1, !1, a.toLowerCase(), null, !0, !0);
});
function $9e3d383a4c02c1e5$var$ta(a, b, c, d) {
    var e = $9e3d383a4c02c1e5$var$z.hasOwnProperty(b) ? $9e3d383a4c02c1e5$var$z[b] : null;
    if (null !== e ? 0 !== e.type : d || !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1]) $9e3d383a4c02c1e5$var$qa(b, c, e, d) && (c = null), d || null === e ? $9e3d383a4c02c1e5$var$oa(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c)));
}
var $9e3d383a4c02c1e5$var$ua = $7p28Q.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, $9e3d383a4c02c1e5$var$va = Symbol.for("react.element"), $9e3d383a4c02c1e5$var$wa = Symbol.for("react.portal"), $9e3d383a4c02c1e5$var$ya = Symbol.for("react.fragment"), $9e3d383a4c02c1e5$var$za = Symbol.for("react.strict_mode"), $9e3d383a4c02c1e5$var$Aa = Symbol.for("react.profiler"), $9e3d383a4c02c1e5$var$Ba = Symbol.for("react.provider"), $9e3d383a4c02c1e5$var$Ca = Symbol.for("react.context"), $9e3d383a4c02c1e5$var$Da = Symbol.for("react.forward_ref"), $9e3d383a4c02c1e5$var$Ea = Symbol.for("react.suspense"), $9e3d383a4c02c1e5$var$Fa = Symbol.for("react.suspense_list"), $9e3d383a4c02c1e5$var$Ga = Symbol.for("react.memo"), $9e3d383a4c02c1e5$var$Ha = Symbol.for("react.lazy");
Symbol.for("react.scope");
Symbol.for("react.debug_trace_mode");
var $9e3d383a4c02c1e5$var$Ia = Symbol.for("react.offscreen");
Symbol.for("react.legacy_hidden");
Symbol.for("react.cache");
Symbol.for("react.tracing_marker");
var $9e3d383a4c02c1e5$var$Ja = Symbol.iterator;
function $9e3d383a4c02c1e5$var$Ka(a) {
    if (null === a || "object" !== typeof a) return null;
    a = $9e3d383a4c02c1e5$var$Ja && a[$9e3d383a4c02c1e5$var$Ja] || a["@@iterator"];
    return "function" === typeof a ? a : null;
}
var $9e3d383a4c02c1e5$var$A = Object.assign, $9e3d383a4c02c1e5$var$La;
function $9e3d383a4c02c1e5$var$Ma(a) {
    if (void 0 === $9e3d383a4c02c1e5$var$La) try {
        throw Error();
    } catch (c) {
        var b = c.stack.trim().match(/\n( *(at )?)/);
        $9e3d383a4c02c1e5$var$La = b && b[1] || "";
    }
    return "\n" + $9e3d383a4c02c1e5$var$La + a;
}
var $9e3d383a4c02c1e5$var$Na = !1;
function $9e3d383a4c02c1e5$var$Oa(a, b) {
    if (!a || $9e3d383a4c02c1e5$var$Na) return "";
    $9e3d383a4c02c1e5$var$Na = !0;
    var c = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
        if (b) {
            if (b = function() {
                throw Error();
            }, Object.defineProperty(b.prototype, "props", {
                set: function() {
                    throw Error();
                }
            }), "object" === typeof Reflect && Reflect.construct) {
                try {
                    Reflect.construct(b, []);
                } catch (l) {
                    var d = l;
                }
                Reflect.construct(a, [], b);
            } else {
                try {
                    b.call();
                } catch (l) {
                    d = l;
                }
                a.call(b.prototype);
            }
        } else {
            try {
                throw Error();
            } catch (l) {
                d = l;
            }
            a();
        }
    } catch (l) {
        if (l && d && "string" === typeof l.stack) {
            for(var e = l.stack.split("\n"), f = d.stack.split("\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h];)h--;
            for(; 1 <= g && 0 <= h; g--, h--)if (e[g] !== f[h]) {
                if (1 !== g || 1 !== h) {
                    do if (g--, h--, 0 > h || e[g] !== f[h]) {
                        var k = "\n" + e[g].replace(" at new ", " at ");
                        a.displayName && k.includes("<anonymous>") && (k = k.replace("<anonymous>", a.displayName));
                        return k;
                    }
                    while (1 <= g && 0 <= h);
                }
                break;
            }
        }
    } finally{
        $9e3d383a4c02c1e5$var$Na = !1, Error.prepareStackTrace = c;
    }
    return (a = a ? a.displayName || a.name : "") ? $9e3d383a4c02c1e5$var$Ma(a) : "";
}
function $9e3d383a4c02c1e5$var$Pa(a) {
    switch(a.tag){
        case 5:
            return $9e3d383a4c02c1e5$var$Ma(a.type);
        case 16:
            return $9e3d383a4c02c1e5$var$Ma("Lazy");
        case 13:
            return $9e3d383a4c02c1e5$var$Ma("Suspense");
        case 19:
            return $9e3d383a4c02c1e5$var$Ma("SuspenseList");
        case 0:
        case 2:
        case 15:
            return a = $9e3d383a4c02c1e5$var$Oa(a.type, !1), a;
        case 11:
            return a = $9e3d383a4c02c1e5$var$Oa(a.type.render, !1), a;
        case 1:
            return a = $9e3d383a4c02c1e5$var$Oa(a.type, !0), a;
        default:
            return "";
    }
}
function $9e3d383a4c02c1e5$var$Qa(a) {
    if (null == a) return null;
    if ("function" === typeof a) return a.displayName || a.name || null;
    if ("string" === typeof a) return a;
    switch(a){
        case $9e3d383a4c02c1e5$var$ya:
            return "Fragment";
        case $9e3d383a4c02c1e5$var$wa:
            return "Portal";
        case $9e3d383a4c02c1e5$var$Aa:
            return "Profiler";
        case $9e3d383a4c02c1e5$var$za:
            return "StrictMode";
        case $9e3d383a4c02c1e5$var$Ea:
            return "Suspense";
        case $9e3d383a4c02c1e5$var$Fa:
            return "SuspenseList";
    }
    if ("object" === typeof a) switch(a.$$typeof){
        case $9e3d383a4c02c1e5$var$Ca:
            return (a.displayName || "Context") + ".Consumer";
        case $9e3d383a4c02c1e5$var$Ba:
            return (a._context.displayName || "Context") + ".Provider";
        case $9e3d383a4c02c1e5$var$Da:
            var b = a.render;
            a = a.displayName;
            a || (a = b.displayName || b.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
            return a;
        case $9e3d383a4c02c1e5$var$Ga:
            return b = a.displayName || null, null !== b ? b : $9e3d383a4c02c1e5$var$Qa(a.type) || "Memo";
        case $9e3d383a4c02c1e5$var$Ha:
            b = a._payload;
            a = a._init;
            try {
                return $9e3d383a4c02c1e5$var$Qa(a(b));
            } catch (c) {}
    }
    return null;
}
function $9e3d383a4c02c1e5$var$Ra(a) {
    var b = a.type;
    switch(a.tag){
        case 24:
            return "Cache";
        case 9:
            return (b.displayName || "Context") + ".Consumer";
        case 10:
            return (b._context.displayName || "Context") + ".Provider";
        case 18:
            return "DehydratedFragment";
        case 11:
            return a = b.render, a = a.displayName || a.name || "", b.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
        case 7:
            return "Fragment";
        case 5:
            return b;
        case 4:
            return "Portal";
        case 3:
            return "Root";
        case 6:
            return "Text";
        case 16:
            return $9e3d383a4c02c1e5$var$Qa(b);
        case 8:
            return b === $9e3d383a4c02c1e5$var$za ? "StrictMode" : "Mode";
        case 22:
            return "Offscreen";
        case 12:
            return "Profiler";
        case 21:
            return "Scope";
        case 13:
            return "Suspense";
        case 19:
            return "SuspenseList";
        case 25:
            return "TracingMarker";
        case 1:
        case 0:
        case 17:
        case 2:
        case 14:
        case 15:
            if ("function" === typeof b) return b.displayName || b.name || null;
            if ("string" === typeof b) return b;
    }
    return null;
}
function $9e3d383a4c02c1e5$var$Sa(a) {
    switch(typeof a){
        case "boolean":
        case "number":
        case "string":
        case "undefined":
            return a;
        case "object":
            return a;
        default:
            return "";
    }
}
function $9e3d383a4c02c1e5$var$Ta(a) {
    var b = a.type;
    return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
}
function $9e3d383a4c02c1e5$var$Ua(a) {
    var b = $9e3d383a4c02c1e5$var$Ta(a) ? "checked" : "value", c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b), d = "" + a[b];
    if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
        var e = c.get, f = c.set;
        Object.defineProperty(a, b, {
            configurable: !0,
            get: function() {
                return e.call(this);
            },
            set: function(a) {
                d = "" + a;
                f.call(this, a);
            }
        });
        Object.defineProperty(a, b, {
            enumerable: c.enumerable
        });
        return {
            getValue: function() {
                return d;
            },
            setValue: function(a) {
                d = "" + a;
            },
            stopTracking: function() {
                a._valueTracker = null;
                delete a[b];
            }
        };
    }
}
function $9e3d383a4c02c1e5$var$Va(a) {
    a._valueTracker || (a._valueTracker = $9e3d383a4c02c1e5$var$Ua(a));
}
function $9e3d383a4c02c1e5$var$Wa(a) {
    if (!a) return !1;
    var b = a._valueTracker;
    if (!b) return !0;
    var c = b.getValue();
    var d = "";
    a && (d = $9e3d383a4c02c1e5$var$Ta(a) ? a.checked ? "true" : "false" : a.value);
    a = d;
    return a !== c ? (b.setValue(a), !0) : !1;
}
function $9e3d383a4c02c1e5$var$Xa(a) {
    a = a || ("undefined" !== typeof document ? document : void 0);
    if ("undefined" === typeof a) return null;
    try {
        return a.activeElement || a.body;
    } catch (b) {
        return a.body;
    }
}
function $9e3d383a4c02c1e5$var$Ya(a, b) {
    var c = b.checked;
    return $9e3d383a4c02c1e5$var$A({}, b, {
        defaultChecked: void 0,
        defaultValue: void 0,
        value: void 0,
        checked: null != c ? c : a._wrapperState.initialChecked
    });
}
function $9e3d383a4c02c1e5$var$Za(a, b) {
    var c = null == b.defaultValue ? "" : b.defaultValue, d = null != b.checked ? b.checked : b.defaultChecked;
    c = $9e3d383a4c02c1e5$var$Sa(null != b.value ? b.value : c);
    a._wrapperState = {
        initialChecked: d,
        initialValue: c,
        controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value
    };
}
function $9e3d383a4c02c1e5$var$ab(a, b) {
    b = b.checked;
    null != b && $9e3d383a4c02c1e5$var$ta(a, "checked", b, !1);
}
function $9e3d383a4c02c1e5$var$bb(a, b) {
    $9e3d383a4c02c1e5$var$ab(a, b);
    var c = $9e3d383a4c02c1e5$var$Sa(b.value), d = b.type;
    if (null != c) {
        if ("number" === d) {
            if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
        } else a.value !== "" + c && (a.value = "" + c);
    } else if ("submit" === d || "reset" === d) {
        a.removeAttribute("value");
        return;
    }
    b.hasOwnProperty("value") ? $9e3d383a4c02c1e5$var$cb(a, b.type, c) : b.hasOwnProperty("defaultValue") && $9e3d383a4c02c1e5$var$cb(a, b.type, $9e3d383a4c02c1e5$var$Sa(b.defaultValue));
    null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
}
function $9e3d383a4c02c1e5$var$db(a, b, c) {
    if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
        var d = b.type;
        if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;
        b = "" + a._wrapperState.initialValue;
        c || b === a.value || (a.value = b);
        a.defaultValue = b;
    }
    c = a.name;
    "" !== c && (a.name = "");
    a.defaultChecked = !!a._wrapperState.initialChecked;
    "" !== c && (a.name = c);
}
function $9e3d383a4c02c1e5$var$cb(a, b, c) {
    if ("number" !== b || $9e3d383a4c02c1e5$var$Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
}
var $9e3d383a4c02c1e5$var$eb = Array.isArray;
function $9e3d383a4c02c1e5$var$fb(a, b, c, d) {
    a = a.options;
    if (b) {
        b = {};
        for(var e = 0; e < c.length; e++)b["$" + c[e]] = !0;
        for(c = 0; c < a.length; c++)e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);
    } else {
        c = "" + $9e3d383a4c02c1e5$var$Sa(c);
        b = null;
        for(e = 0; e < a.length; e++){
            if (a[e].value === c) {
                a[e].selected = !0;
                d && (a[e].defaultSelected = !0);
                return;
            }
            null !== b || a[e].disabled || (b = a[e]);
        }
        null !== b && (b.selected = !0);
    }
}
function $9e3d383a4c02c1e5$var$gb(a, b) {
    if (null != b.dangerouslySetInnerHTML) throw Error($9e3d383a4c02c1e5$var$p(91));
    return $9e3d383a4c02c1e5$var$A({}, b, {
        value: void 0,
        defaultValue: void 0,
        children: "" + a._wrapperState.initialValue
    });
}
function $9e3d383a4c02c1e5$var$hb(a, b) {
    var c = b.value;
    if (null == c) {
        c = b.children;
        b = b.defaultValue;
        if (null != c) {
            if (null != b) throw Error($9e3d383a4c02c1e5$var$p(92));
            if ($9e3d383a4c02c1e5$var$eb(c)) {
                if (1 < c.length) throw Error($9e3d383a4c02c1e5$var$p(93));
                c = c[0];
            }
            b = c;
        }
        null == b && (b = "");
        c = b;
    }
    a._wrapperState = {
        initialValue: $9e3d383a4c02c1e5$var$Sa(c)
    };
}
function $9e3d383a4c02c1e5$var$ib(a, b) {
    var c = $9e3d383a4c02c1e5$var$Sa(b.value), d = $9e3d383a4c02c1e5$var$Sa(b.defaultValue);
    null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
    null != d && (a.defaultValue = "" + d);
}
function $9e3d383a4c02c1e5$var$jb(a) {
    var b = a.textContent;
    b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);
}
function $9e3d383a4c02c1e5$var$kb(a) {
    switch(a){
        case "svg":
            return "http://www.w3.org/2000/svg";
        case "math":
            return "http://www.w3.org/1998/Math/MathML";
        default:
            return "http://www.w3.org/1999/xhtml";
    }
}
function $9e3d383a4c02c1e5$var$lb(a, b) {
    return null == a || "http://www.w3.org/1999/xhtml" === a ? $9e3d383a4c02c1e5$var$kb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
}
var $9e3d383a4c02c1e5$var$mb, $9e3d383a4c02c1e5$var$nb = function(a) {
    return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b, c, d, e) {
        MSApp.execUnsafeLocalFunction(function() {
            return a(b, c, d, e);
        });
    } : a;
}(function(a, b) {
    if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a) a.innerHTML = b;
    else {
        $9e3d383a4c02c1e5$var$mb = $9e3d383a4c02c1e5$var$mb || document.createElement("div");
        $9e3d383a4c02c1e5$var$mb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";
        for(b = $9e3d383a4c02c1e5$var$mb.firstChild; a.firstChild;)a.removeChild(a.firstChild);
        for(; b.firstChild;)a.appendChild(b.firstChild);
    }
});
function $9e3d383a4c02c1e5$var$ob(a, b) {
    if (b) {
        var c = a.firstChild;
        if (c && c === a.lastChild && 3 === c.nodeType) {
            c.nodeValue = b;
            return;
        }
    }
    a.textContent = b;
}
var $9e3d383a4c02c1e5$var$pb = {
    animationIterationCount: !0,
    aspectRatio: !0,
    borderImageOutset: !0,
    borderImageSlice: !0,
    borderImageWidth: !0,
    boxFlex: !0,
    boxFlexGroup: !0,
    boxOrdinalGroup: !0,
    columnCount: !0,
    columns: !0,
    flex: !0,
    flexGrow: !0,
    flexPositive: !0,
    flexShrink: !0,
    flexNegative: !0,
    flexOrder: !0,
    gridArea: !0,
    gridRow: !0,
    gridRowEnd: !0,
    gridRowSpan: !0,
    gridRowStart: !0,
    gridColumn: !0,
    gridColumnEnd: !0,
    gridColumnSpan: !0,
    gridColumnStart: !0,
    fontWeight: !0,
    lineClamp: !0,
    lineHeight: !0,
    opacity: !0,
    order: !0,
    orphans: !0,
    tabSize: !0,
    widows: !0,
    zIndex: !0,
    zoom: !0,
    fillOpacity: !0,
    floodOpacity: !0,
    stopOpacity: !0,
    strokeDasharray: !0,
    strokeDashoffset: !0,
    strokeMiterlimit: !0,
    strokeOpacity: !0,
    strokeWidth: !0
}, $9e3d383a4c02c1e5$var$qb = [
    "Webkit",
    "ms",
    "Moz",
    "O"
];
Object.keys($9e3d383a4c02c1e5$var$pb).forEach(function(a) {
    $9e3d383a4c02c1e5$var$qb.forEach(function(b) {
        b = b + a.charAt(0).toUpperCase() + a.substring(1);
        $9e3d383a4c02c1e5$var$pb[b] = $9e3d383a4c02c1e5$var$pb[a];
    });
});
function $9e3d383a4c02c1e5$var$rb(a, b, c) {
    return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || $9e3d383a4c02c1e5$var$pb.hasOwnProperty(a) && $9e3d383a4c02c1e5$var$pb[a] ? ("" + b).trim() : b + "px";
}
function $9e3d383a4c02c1e5$var$sb(a, b) {
    a = a.style;
    for(var c in b)if (b.hasOwnProperty(c)) {
        var d = 0 === c.indexOf("--"), e = $9e3d383a4c02c1e5$var$rb(c, b[c], d);
        "float" === c && (c = "cssFloat");
        d ? a.setProperty(c, e) : a[c] = e;
    }
}
var $9e3d383a4c02c1e5$var$tb = $9e3d383a4c02c1e5$var$A({
    menuitem: !0
}, {
    area: !0,
    base: !0,
    br: !0,
    col: !0,
    embed: !0,
    hr: !0,
    img: !0,
    input: !0,
    keygen: !0,
    link: !0,
    meta: !0,
    param: !0,
    source: !0,
    track: !0,
    wbr: !0
});
function $9e3d383a4c02c1e5$var$ub(a, b) {
    if (b) {
        if ($9e3d383a4c02c1e5$var$tb[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error($9e3d383a4c02c1e5$var$p(137, a));
        if (null != b.dangerouslySetInnerHTML) {
            if (null != b.children) throw Error($9e3d383a4c02c1e5$var$p(60));
            if ("object" !== typeof b.dangerouslySetInnerHTML || !("__html" in b.dangerouslySetInnerHTML)) throw Error($9e3d383a4c02c1e5$var$p(61));
        }
        if (null != b.style && "object" !== typeof b.style) throw Error($9e3d383a4c02c1e5$var$p(62));
    }
}
function $9e3d383a4c02c1e5$var$vb(a, b) {
    if (-1 === a.indexOf("-")) return "string" === typeof b.is;
    switch(a){
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
            return !1;
        default:
            return !0;
    }
}
var $9e3d383a4c02c1e5$var$wb = null;
function $9e3d383a4c02c1e5$var$xb(a) {
    a = a.target || a.srcElement || window;
    a.correspondingUseElement && (a = a.correspondingUseElement);
    return 3 === a.nodeType ? a.parentNode : a;
}
var $9e3d383a4c02c1e5$var$yb = null, $9e3d383a4c02c1e5$var$zb = null, $9e3d383a4c02c1e5$var$Ab = null;
function $9e3d383a4c02c1e5$var$Bb(a) {
    if (a = $9e3d383a4c02c1e5$var$Cb(a)) {
        if ("function" !== typeof $9e3d383a4c02c1e5$var$yb) throw Error($9e3d383a4c02c1e5$var$p(280));
        var b = a.stateNode;
        b && (b = $9e3d383a4c02c1e5$var$Db(b), $9e3d383a4c02c1e5$var$yb(a.stateNode, a.type, b));
    }
}
function $9e3d383a4c02c1e5$var$Eb(a) {
    $9e3d383a4c02c1e5$var$zb ? $9e3d383a4c02c1e5$var$Ab ? $9e3d383a4c02c1e5$var$Ab.push(a) : $9e3d383a4c02c1e5$var$Ab = [
        a
    ] : $9e3d383a4c02c1e5$var$zb = a;
}
function $9e3d383a4c02c1e5$var$Fb() {
    if ($9e3d383a4c02c1e5$var$zb) {
        var a = $9e3d383a4c02c1e5$var$zb, b = $9e3d383a4c02c1e5$var$Ab;
        $9e3d383a4c02c1e5$var$Ab = $9e3d383a4c02c1e5$var$zb = null;
        $9e3d383a4c02c1e5$var$Bb(a);
        if (b) for(a = 0; a < b.length; a++)$9e3d383a4c02c1e5$var$Bb(b[a]);
    }
}
function $9e3d383a4c02c1e5$var$Gb(a, b) {
    return a(b);
}
function $9e3d383a4c02c1e5$var$Hb() {}
var $9e3d383a4c02c1e5$var$Ib = !1;
function $9e3d383a4c02c1e5$var$Jb(a, b, c) {
    if ($9e3d383a4c02c1e5$var$Ib) return a(b, c);
    $9e3d383a4c02c1e5$var$Ib = !0;
    try {
        return $9e3d383a4c02c1e5$var$Gb(a, b, c);
    } finally{
        if ($9e3d383a4c02c1e5$var$Ib = !1, null !== $9e3d383a4c02c1e5$var$zb || null !== $9e3d383a4c02c1e5$var$Ab) $9e3d383a4c02c1e5$var$Hb(), $9e3d383a4c02c1e5$var$Fb();
    }
}
function $9e3d383a4c02c1e5$var$Kb(a, b) {
    var c = a.stateNode;
    if (null === c) return null;
    var d = $9e3d383a4c02c1e5$var$Db(c);
    if (null === d) return null;
    c = d[b];
    a: switch(b){
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
            (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
            a = !d;
            break a;
        default:
            a = !1;
    }
    if (a) return null;
    if (c && "function" !== typeof c) throw Error($9e3d383a4c02c1e5$var$p(231, b, typeof c));
    return c;
}
var $9e3d383a4c02c1e5$var$Lb = !1;
if ($9e3d383a4c02c1e5$var$ia) try {
    var $9e3d383a4c02c1e5$var$Mb = {};
    Object.defineProperty($9e3d383a4c02c1e5$var$Mb, "passive", {
        get: function() {
            $9e3d383a4c02c1e5$var$Lb = !0;
        }
    });
    window.addEventListener("test", $9e3d383a4c02c1e5$var$Mb, $9e3d383a4c02c1e5$var$Mb);
    window.removeEventListener("test", $9e3d383a4c02c1e5$var$Mb, $9e3d383a4c02c1e5$var$Mb);
} catch (a) {
    $9e3d383a4c02c1e5$var$Lb = !1;
}
function $9e3d383a4c02c1e5$var$Nb(a, b, c, d, e, f, g, h, k) {
    var l = Array.prototype.slice.call(arguments, 3);
    try {
        b.apply(c, l);
    } catch (m) {
        this.onError(m);
    }
}
var $9e3d383a4c02c1e5$var$Ob = !1, $9e3d383a4c02c1e5$var$Pb = null, $9e3d383a4c02c1e5$var$Qb = !1, $9e3d383a4c02c1e5$var$Rb = null, $9e3d383a4c02c1e5$var$Sb = {
    onError: function(a) {
        $9e3d383a4c02c1e5$var$Ob = !0;
        $9e3d383a4c02c1e5$var$Pb = a;
    }
};
function $9e3d383a4c02c1e5$var$Tb(a, b, c, d, e, f, g, h, k) {
    $9e3d383a4c02c1e5$var$Ob = !1;
    $9e3d383a4c02c1e5$var$Pb = null;
    $9e3d383a4c02c1e5$var$Nb.apply($9e3d383a4c02c1e5$var$Sb, arguments);
}
function $9e3d383a4c02c1e5$var$Ub(a, b, c, d, e, f, g, h, k) {
    $9e3d383a4c02c1e5$var$Tb.apply(this, arguments);
    if ($9e3d383a4c02c1e5$var$Ob) {
        if ($9e3d383a4c02c1e5$var$Ob) {
            var l = $9e3d383a4c02c1e5$var$Pb;
            $9e3d383a4c02c1e5$var$Ob = !1;
            $9e3d383a4c02c1e5$var$Pb = null;
        } else throw Error($9e3d383a4c02c1e5$var$p(198));
        $9e3d383a4c02c1e5$var$Qb || ($9e3d383a4c02c1e5$var$Qb = !0, $9e3d383a4c02c1e5$var$Rb = l);
    }
}
function $9e3d383a4c02c1e5$var$Vb(a) {
    var b = a, c = a;
    if (a.alternate) for(; b.return;)b = b.return;
    else {
        a = b;
        do b = a, 0 !== (b.flags & 4098) && (c = b.return), a = b.return;
        while (a);
    }
    return 3 === b.tag ? c : null;
}
function $9e3d383a4c02c1e5$var$Wb(a) {
    if (13 === a.tag) {
        var b = a.memoizedState;
        null === b && (a = a.alternate, null !== a && (b = a.memoizedState));
        if (null !== b) return b.dehydrated;
    }
    return null;
}
function $9e3d383a4c02c1e5$var$Xb(a) {
    if ($9e3d383a4c02c1e5$var$Vb(a) !== a) throw Error($9e3d383a4c02c1e5$var$p(188));
}
function $9e3d383a4c02c1e5$var$Yb(a) {
    var b = a.alternate;
    if (!b) {
        b = $9e3d383a4c02c1e5$var$Vb(a);
        if (null === b) throw Error($9e3d383a4c02c1e5$var$p(188));
        return b !== a ? null : a;
    }
    for(var c = a, d = b;;){
        var e = c.return;
        if (null === e) break;
        var f = e.alternate;
        if (null === f) {
            d = e.return;
            if (null !== d) {
                c = d;
                continue;
            }
            break;
        }
        if (e.child === f.child) {
            for(f = e.child; f;){
                if (f === c) return $9e3d383a4c02c1e5$var$Xb(e), a;
                if (f === d) return $9e3d383a4c02c1e5$var$Xb(e), b;
                f = f.sibling;
            }
            throw Error($9e3d383a4c02c1e5$var$p(188));
        }
        if (c.return !== d.return) c = e, d = f;
        else {
            for(var g = !1, h = e.child; h;){
                if (h === c) {
                    g = !0;
                    c = e;
                    d = f;
                    break;
                }
                if (h === d) {
                    g = !0;
                    d = e;
                    c = f;
                    break;
                }
                h = h.sibling;
            }
            if (!g) {
                for(h = f.child; h;){
                    if (h === c) {
                        g = !0;
                        c = f;
                        d = e;
                        break;
                    }
                    if (h === d) {
                        g = !0;
                        d = f;
                        c = e;
                        break;
                    }
                    h = h.sibling;
                }
                if (!g) throw Error($9e3d383a4c02c1e5$var$p(189));
            }
        }
        if (c.alternate !== d) throw Error($9e3d383a4c02c1e5$var$p(190));
    }
    if (3 !== c.tag) throw Error($9e3d383a4c02c1e5$var$p(188));
    return c.stateNode.current === c ? a : b;
}
function $9e3d383a4c02c1e5$var$Zb(a) {
    a = $9e3d383a4c02c1e5$var$Yb(a);
    return null !== a ? $9e3d383a4c02c1e5$var$$b(a) : null;
}
function $9e3d383a4c02c1e5$var$$b(a) {
    if (5 === a.tag || 6 === a.tag) return a;
    for(a = a.child; null !== a;){
        var b = $9e3d383a4c02c1e5$var$$b(a);
        if (null !== b) return b;
        a = a.sibling;
    }
    return null;
}
var $9e3d383a4c02c1e5$var$ac = $lnQPQ.unstable_scheduleCallback, $9e3d383a4c02c1e5$var$bc = $lnQPQ.unstable_cancelCallback, $9e3d383a4c02c1e5$var$cc = $lnQPQ.unstable_shouldYield, $9e3d383a4c02c1e5$var$dc = $lnQPQ.unstable_requestPaint, $9e3d383a4c02c1e5$var$B = $lnQPQ.unstable_now, $9e3d383a4c02c1e5$var$ec = $lnQPQ.unstable_getCurrentPriorityLevel, $9e3d383a4c02c1e5$var$fc = $lnQPQ.unstable_ImmediatePriority, $9e3d383a4c02c1e5$var$gc = $lnQPQ.unstable_UserBlockingPriority, $9e3d383a4c02c1e5$var$hc = $lnQPQ.unstable_NormalPriority, $9e3d383a4c02c1e5$var$ic = $lnQPQ.unstable_LowPriority, $9e3d383a4c02c1e5$var$jc = $lnQPQ.unstable_IdlePriority, $9e3d383a4c02c1e5$var$kc = null, $9e3d383a4c02c1e5$var$lc = null;
function $9e3d383a4c02c1e5$var$mc(a) {
    if ($9e3d383a4c02c1e5$var$lc && "function" === typeof $9e3d383a4c02c1e5$var$lc.onCommitFiberRoot) try {
        $9e3d383a4c02c1e5$var$lc.onCommitFiberRoot($9e3d383a4c02c1e5$var$kc, a, void 0, 128 === (a.current.flags & 128));
    } catch (b) {}
}
var $9e3d383a4c02c1e5$var$oc = Math.clz32 ? Math.clz32 : $9e3d383a4c02c1e5$var$nc, $9e3d383a4c02c1e5$var$pc = Math.log, $9e3d383a4c02c1e5$var$qc = Math.LN2;
function $9e3d383a4c02c1e5$var$nc(a) {
    a >>>= 0;
    return 0 === a ? 32 : 31 - ($9e3d383a4c02c1e5$var$pc(a) / $9e3d383a4c02c1e5$var$qc | 0) | 0;
}
var $9e3d383a4c02c1e5$var$rc = 64, $9e3d383a4c02c1e5$var$sc = 4194304;
function $9e3d383a4c02c1e5$var$tc(a) {
    switch(a & -a){
        case 1:
            return 1;
        case 2:
            return 2;
        case 4:
            return 4;
        case 8:
            return 8;
        case 16:
            return 16;
        case 32:
            return 32;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
            return a & 4194240;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
            return a & 130023424;
        case 134217728:
            return 134217728;
        case 268435456:
            return 268435456;
        case 536870912:
            return 536870912;
        case 1073741824:
            return 1073741824;
        default:
            return a;
    }
}
function $9e3d383a4c02c1e5$var$uc(a, b) {
    var c = a.pendingLanes;
    if (0 === c) return 0;
    var d = 0, e = a.suspendedLanes, f = a.pingedLanes, g = c & 268435455;
    if (0 !== g) {
        var h = g & ~e;
        0 !== h ? d = $9e3d383a4c02c1e5$var$tc(h) : (f &= g, 0 !== f && (d = $9e3d383a4c02c1e5$var$tc(f)));
    } else g = c & ~e, 0 !== g ? d = $9e3d383a4c02c1e5$var$tc(g) : 0 !== f && (d = $9e3d383a4c02c1e5$var$tc(f));
    if (0 === d) return 0;
    if (0 !== b && b !== d && 0 === (b & e) && (e = d & -d, f = b & -b, e >= f || 16 === e && 0 !== (f & 4194240))) return b;
    0 !== (d & 4) && (d |= c & 16);
    b = a.entangledLanes;
    if (0 !== b) for(a = a.entanglements, b &= d; 0 < b;)c = 31 - $9e3d383a4c02c1e5$var$oc(b), e = 1 << c, d |= a[c], b &= ~e;
    return d;
}
function $9e3d383a4c02c1e5$var$vc(a, b) {
    switch(a){
        case 1:
        case 2:
        case 4:
            return b + 250;
        case 8:
        case 16:
        case 32:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
            return b + 5E3;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
            return -1;
        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
            return -1;
        default:
            return -1;
    }
}
function $9e3d383a4c02c1e5$var$wc(a, b) {
    for(var c = a.suspendedLanes, d = a.pingedLanes, e = a.expirationTimes, f = a.pendingLanes; 0 < f;){
        var g = 31 - $9e3d383a4c02c1e5$var$oc(f), h = 1 << g, k = e[g];
        if (-1 === k) {
            if (0 === (h & c) || 0 !== (h & d)) e[g] = $9e3d383a4c02c1e5$var$vc(h, b);
        } else k <= b && (a.expiredLanes |= h);
        f &= ~h;
    }
}
function $9e3d383a4c02c1e5$var$xc(a) {
    a = a.pendingLanes & -1073741825;
    return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
}
function $9e3d383a4c02c1e5$var$yc() {
    var a = $9e3d383a4c02c1e5$var$rc;
    $9e3d383a4c02c1e5$var$rc <<= 1;
    0 === ($9e3d383a4c02c1e5$var$rc & 4194240) && ($9e3d383a4c02c1e5$var$rc = 64);
    return a;
}
function $9e3d383a4c02c1e5$var$zc(a) {
    for(var b = [], c = 0; 31 > c; c++)b.push(a);
    return b;
}
function $9e3d383a4c02c1e5$var$Ac(a, b, c) {
    a.pendingLanes |= b;
    536870912 !== b && (a.suspendedLanes = 0, a.pingedLanes = 0);
    a = a.eventTimes;
    b = 31 - $9e3d383a4c02c1e5$var$oc(b);
    a[b] = c;
}
function $9e3d383a4c02c1e5$var$Bc(a, b) {
    var c = a.pendingLanes & ~b;
    a.pendingLanes = b;
    a.suspendedLanes = 0;
    a.pingedLanes = 0;
    a.expiredLanes &= b;
    a.mutableReadLanes &= b;
    a.entangledLanes &= b;
    b = a.entanglements;
    var d = a.eventTimes;
    for(a = a.expirationTimes; 0 < c;){
        var e = 31 - $9e3d383a4c02c1e5$var$oc(c), f = 1 << e;
        b[e] = 0;
        d[e] = -1;
        a[e] = -1;
        c &= ~f;
    }
}
function $9e3d383a4c02c1e5$var$Cc(a, b) {
    var c = a.entangledLanes |= b;
    for(a = a.entanglements; c;){
        var d = 31 - $9e3d383a4c02c1e5$var$oc(c), e = 1 << d;
        e & b | a[d] & b && (a[d] |= b);
        c &= ~e;
    }
}
var $9e3d383a4c02c1e5$var$C = 0;
function $9e3d383a4c02c1e5$var$Dc(a) {
    a &= -a;
    return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;
}
var $9e3d383a4c02c1e5$var$Ec, $9e3d383a4c02c1e5$var$Fc, $9e3d383a4c02c1e5$var$Gc, $9e3d383a4c02c1e5$var$Hc, $9e3d383a4c02c1e5$var$Ic, $9e3d383a4c02c1e5$var$Jc = !1, $9e3d383a4c02c1e5$var$Kc = [], $9e3d383a4c02c1e5$var$Lc = null, $9e3d383a4c02c1e5$var$Mc = null, $9e3d383a4c02c1e5$var$Nc = null, $9e3d383a4c02c1e5$var$Oc = new Map, $9e3d383a4c02c1e5$var$Pc = new Map, $9e3d383a4c02c1e5$var$Qc = [], $9e3d383a4c02c1e5$var$Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
function $9e3d383a4c02c1e5$var$Sc(a, b) {
    switch(a){
        case "focusin":
        case "focusout":
            $9e3d383a4c02c1e5$var$Lc = null;
            break;
        case "dragenter":
        case "dragleave":
            $9e3d383a4c02c1e5$var$Mc = null;
            break;
        case "mouseover":
        case "mouseout":
            $9e3d383a4c02c1e5$var$Nc = null;
            break;
        case "pointerover":
        case "pointerout":
            $9e3d383a4c02c1e5$var$Oc.delete(b.pointerId);
            break;
        case "gotpointercapture":
        case "lostpointercapture":
            $9e3d383a4c02c1e5$var$Pc.delete(b.pointerId);
    }
}
function $9e3d383a4c02c1e5$var$Tc(a, b, c, d, e, f) {
    if (null === a || a.nativeEvent !== f) return a = {
        blockedOn: b,
        domEventName: c,
        eventSystemFlags: d,
        nativeEvent: f,
        targetContainers: [
            e
        ]
    }, null !== b && (b = $9e3d383a4c02c1e5$var$Cb(b), null !== b && $9e3d383a4c02c1e5$var$Fc(b)), a;
    a.eventSystemFlags |= d;
    b = a.targetContainers;
    null !== e && -1 === b.indexOf(e) && b.push(e);
    return a;
}
function $9e3d383a4c02c1e5$var$Uc(a, b, c, d, e) {
    switch(b){
        case "focusin":
            return $9e3d383a4c02c1e5$var$Lc = $9e3d383a4c02c1e5$var$Tc($9e3d383a4c02c1e5$var$Lc, a, b, c, d, e), !0;
        case "dragenter":
            return $9e3d383a4c02c1e5$var$Mc = $9e3d383a4c02c1e5$var$Tc($9e3d383a4c02c1e5$var$Mc, a, b, c, d, e), !0;
        case "mouseover":
            return $9e3d383a4c02c1e5$var$Nc = $9e3d383a4c02c1e5$var$Tc($9e3d383a4c02c1e5$var$Nc, a, b, c, d, e), !0;
        case "pointerover":
            var f = e.pointerId;
            $9e3d383a4c02c1e5$var$Oc.set(f, $9e3d383a4c02c1e5$var$Tc($9e3d383a4c02c1e5$var$Oc.get(f) || null, a, b, c, d, e));
            return !0;
        case "gotpointercapture":
            return f = e.pointerId, $9e3d383a4c02c1e5$var$Pc.set(f, $9e3d383a4c02c1e5$var$Tc($9e3d383a4c02c1e5$var$Pc.get(f) || null, a, b, c, d, e)), !0;
    }
    return !1;
}
function $9e3d383a4c02c1e5$var$Vc(a) {
    var b = $9e3d383a4c02c1e5$var$Wc(a.target);
    if (null !== b) {
        var c = $9e3d383a4c02c1e5$var$Vb(b);
        if (null !== c) {
            if (b = c.tag, 13 === b) {
                if (b = $9e3d383a4c02c1e5$var$Wb(c), null !== b) {
                    a.blockedOn = b;
                    $9e3d383a4c02c1e5$var$Ic(a.priority, function() {
                        $9e3d383a4c02c1e5$var$Gc(c);
                    });
                    return;
                }
            } else if (3 === b && c.stateNode.current.memoizedState.isDehydrated) {
                a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
                return;
            }
        }
    }
    a.blockedOn = null;
}
function $9e3d383a4c02c1e5$var$Xc(a) {
    if (null !== a.blockedOn) return !1;
    for(var b = a.targetContainers; 0 < b.length;){
        var c = $9e3d383a4c02c1e5$var$Yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
        if (null === c) {
            c = a.nativeEvent;
            var d = new c.constructor(c.type, c);
            $9e3d383a4c02c1e5$var$wb = d;
            c.target.dispatchEvent(d);
            $9e3d383a4c02c1e5$var$wb = null;
        } else return b = $9e3d383a4c02c1e5$var$Cb(c), null !== b && $9e3d383a4c02c1e5$var$Fc(b), a.blockedOn = c, !1;
        b.shift();
    }
    return !0;
}
function $9e3d383a4c02c1e5$var$Zc(a, b, c) {
    $9e3d383a4c02c1e5$var$Xc(a) && c.delete(b);
}
function $9e3d383a4c02c1e5$var$$c() {
    $9e3d383a4c02c1e5$var$Jc = !1;
    null !== $9e3d383a4c02c1e5$var$Lc && $9e3d383a4c02c1e5$var$Xc($9e3d383a4c02c1e5$var$Lc) && ($9e3d383a4c02c1e5$var$Lc = null);
    null !== $9e3d383a4c02c1e5$var$Mc && $9e3d383a4c02c1e5$var$Xc($9e3d383a4c02c1e5$var$Mc) && ($9e3d383a4c02c1e5$var$Mc = null);
    null !== $9e3d383a4c02c1e5$var$Nc && $9e3d383a4c02c1e5$var$Xc($9e3d383a4c02c1e5$var$Nc) && ($9e3d383a4c02c1e5$var$Nc = null);
    $9e3d383a4c02c1e5$var$Oc.forEach($9e3d383a4c02c1e5$var$Zc);
    $9e3d383a4c02c1e5$var$Pc.forEach($9e3d383a4c02c1e5$var$Zc);
}
function $9e3d383a4c02c1e5$var$ad(a, b) {
    a.blockedOn === b && (a.blockedOn = null, $9e3d383a4c02c1e5$var$Jc || ($9e3d383a4c02c1e5$var$Jc = !0, $lnQPQ.unstable_scheduleCallback($lnQPQ.unstable_NormalPriority, $9e3d383a4c02c1e5$var$$c)));
}
function $9e3d383a4c02c1e5$var$bd(a) {
    function b(b) {
        return $9e3d383a4c02c1e5$var$ad(b, a);
    }
    if (0 < $9e3d383a4c02c1e5$var$Kc.length) {
        $9e3d383a4c02c1e5$var$ad($9e3d383a4c02c1e5$var$Kc[0], a);
        for(var c = 1; c < $9e3d383a4c02c1e5$var$Kc.length; c++){
            var d = $9e3d383a4c02c1e5$var$Kc[c];
            d.blockedOn === a && (d.blockedOn = null);
        }
    }
    null !== $9e3d383a4c02c1e5$var$Lc && $9e3d383a4c02c1e5$var$ad($9e3d383a4c02c1e5$var$Lc, a);
    null !== $9e3d383a4c02c1e5$var$Mc && $9e3d383a4c02c1e5$var$ad($9e3d383a4c02c1e5$var$Mc, a);
    null !== $9e3d383a4c02c1e5$var$Nc && $9e3d383a4c02c1e5$var$ad($9e3d383a4c02c1e5$var$Nc, a);
    $9e3d383a4c02c1e5$var$Oc.forEach(b);
    $9e3d383a4c02c1e5$var$Pc.forEach(b);
    for(c = 0; c < $9e3d383a4c02c1e5$var$Qc.length; c++)d = $9e3d383a4c02c1e5$var$Qc[c], d.blockedOn === a && (d.blockedOn = null);
    for(; 0 < $9e3d383a4c02c1e5$var$Qc.length && (c = $9e3d383a4c02c1e5$var$Qc[0], null === c.blockedOn);)$9e3d383a4c02c1e5$var$Vc(c), null === c.blockedOn && $9e3d383a4c02c1e5$var$Qc.shift();
}
var $9e3d383a4c02c1e5$var$cd = $9e3d383a4c02c1e5$var$ua.ReactCurrentBatchConfig, $9e3d383a4c02c1e5$var$dd = !0;
function $9e3d383a4c02c1e5$var$ed(a, b, c, d) {
    var e = $9e3d383a4c02c1e5$var$C, f = $9e3d383a4c02c1e5$var$cd.transition;
    $9e3d383a4c02c1e5$var$cd.transition = null;
    try {
        $9e3d383a4c02c1e5$var$C = 1, $9e3d383a4c02c1e5$var$fd(a, b, c, d);
    } finally{
        $9e3d383a4c02c1e5$var$C = e, $9e3d383a4c02c1e5$var$cd.transition = f;
    }
}
function $9e3d383a4c02c1e5$var$gd(a, b, c, d) {
    var e = $9e3d383a4c02c1e5$var$C, f = $9e3d383a4c02c1e5$var$cd.transition;
    $9e3d383a4c02c1e5$var$cd.transition = null;
    try {
        $9e3d383a4c02c1e5$var$C = 4, $9e3d383a4c02c1e5$var$fd(a, b, c, d);
    } finally{
        $9e3d383a4c02c1e5$var$C = e, $9e3d383a4c02c1e5$var$cd.transition = f;
    }
}
function $9e3d383a4c02c1e5$var$fd(a, b, c, d) {
    if ($9e3d383a4c02c1e5$var$dd) {
        var e = $9e3d383a4c02c1e5$var$Yc(a, b, c, d);
        if (null === e) $9e3d383a4c02c1e5$var$hd(a, b, d, $9e3d383a4c02c1e5$var$id, c), $9e3d383a4c02c1e5$var$Sc(a, d);
        else if ($9e3d383a4c02c1e5$var$Uc(e, a, b, c, d)) d.stopPropagation();
        else if ($9e3d383a4c02c1e5$var$Sc(a, d), b & 4 && -1 < $9e3d383a4c02c1e5$var$Rc.indexOf(a)) {
            for(; null !== e;){
                var f = $9e3d383a4c02c1e5$var$Cb(e);
                null !== f && $9e3d383a4c02c1e5$var$Ec(f);
                f = $9e3d383a4c02c1e5$var$Yc(a, b, c, d);
                null === f && $9e3d383a4c02c1e5$var$hd(a, b, d, $9e3d383a4c02c1e5$var$id, c);
                if (f === e) break;
                e = f;
            }
            null !== e && d.stopPropagation();
        } else $9e3d383a4c02c1e5$var$hd(a, b, d, null, c);
    }
}
var $9e3d383a4c02c1e5$var$id = null;
function $9e3d383a4c02c1e5$var$Yc(a, b, c, d) {
    $9e3d383a4c02c1e5$var$id = null;
    a = $9e3d383a4c02c1e5$var$xb(d);
    a = $9e3d383a4c02c1e5$var$Wc(a);
    if (null !== a) {
        if (b = $9e3d383a4c02c1e5$var$Vb(a), null === b) a = null;
        else if (c = b.tag, 13 === c) {
            a = $9e3d383a4c02c1e5$var$Wb(b);
            if (null !== a) return a;
            a = null;
        } else if (3 === c) {
            if (b.stateNode.current.memoizedState.isDehydrated) return 3 === b.tag ? b.stateNode.containerInfo : null;
            a = null;
        } else b !== a && (a = null);
    }
    $9e3d383a4c02c1e5$var$id = a;
    return null;
}
function $9e3d383a4c02c1e5$var$jd(a) {
    switch(a){
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
            return 1;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "toggle":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
            return 4;
        case "message":
            switch($9e3d383a4c02c1e5$var$ec()){
                case $9e3d383a4c02c1e5$var$fc:
                    return 1;
                case $9e3d383a4c02c1e5$var$gc:
                    return 4;
                case $9e3d383a4c02c1e5$var$hc:
                case $9e3d383a4c02c1e5$var$ic:
                    return 16;
                case $9e3d383a4c02c1e5$var$jc:
                    return 536870912;
                default:
                    return 16;
            }
        default:
            return 16;
    }
}
var $9e3d383a4c02c1e5$var$kd = null, $9e3d383a4c02c1e5$var$ld = null, $9e3d383a4c02c1e5$var$md = null;
function $9e3d383a4c02c1e5$var$nd() {
    if ($9e3d383a4c02c1e5$var$md) return $9e3d383a4c02c1e5$var$md;
    var a, b = $9e3d383a4c02c1e5$var$ld, c = b.length, d, e = "value" in $9e3d383a4c02c1e5$var$kd ? $9e3d383a4c02c1e5$var$kd.value : $9e3d383a4c02c1e5$var$kd.textContent, f = e.length;
    for(a = 0; a < c && b[a] === e[a]; a++);
    var g = c - a;
    for(d = 1; d <= g && b[c - d] === e[f - d]; d++);
    return $9e3d383a4c02c1e5$var$md = e.slice(a, 1 < d ? 1 - d : void 0);
}
function $9e3d383a4c02c1e5$var$od(a) {
    var b = a.keyCode;
    "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
    10 === a && (a = 13);
    return 32 <= a || 13 === a ? a : 0;
}
function $9e3d383a4c02c1e5$var$pd() {
    return !0;
}
function $9e3d383a4c02c1e5$var$qd() {
    return !1;
}
function $9e3d383a4c02c1e5$var$rd(a) {
    function b(b, d, e, f, g) {
        this._reactName = b;
        this._targetInst = e;
        this.type = d;
        this.nativeEvent = f;
        this.target = g;
        this.currentTarget = null;
        for(var c in a)a.hasOwnProperty(c) && (b = a[c], this[c] = b ? b(f) : f[c]);
        this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : !1 === f.returnValue) ? $9e3d383a4c02c1e5$var$pd : $9e3d383a4c02c1e5$var$qd;
        this.isPropagationStopped = $9e3d383a4c02c1e5$var$qd;
        return this;
    }
    $9e3d383a4c02c1e5$var$A(b.prototype, {
        preventDefault: function() {
            this.defaultPrevented = !0;
            var a = this.nativeEvent;
            a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = $9e3d383a4c02c1e5$var$pd);
        },
        stopPropagation: function() {
            var a = this.nativeEvent;
            a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = $9e3d383a4c02c1e5$var$pd);
        },
        persist: function() {},
        isPersistent: $9e3d383a4c02c1e5$var$pd
    });
    return b;
}
var $9e3d383a4c02c1e5$var$sd = {
    eventPhase: 0,
    bubbles: 0,
    cancelable: 0,
    timeStamp: function(a) {
        return a.timeStamp || Date.now();
    },
    defaultPrevented: 0,
    isTrusted: 0
}, $9e3d383a4c02c1e5$var$td = $9e3d383a4c02c1e5$var$rd($9e3d383a4c02c1e5$var$sd), $9e3d383a4c02c1e5$var$ud = $9e3d383a4c02c1e5$var$A({}, $9e3d383a4c02c1e5$var$sd, {
    view: 0,
    detail: 0
}), $9e3d383a4c02c1e5$var$vd = $9e3d383a4c02c1e5$var$rd($9e3d383a4c02c1e5$var$ud), $9e3d383a4c02c1e5$var$wd, $9e3d383a4c02c1e5$var$xd, $9e3d383a4c02c1e5$var$yd, $9e3d383a4c02c1e5$var$Ad = $9e3d383a4c02c1e5$var$A({}, $9e3d383a4c02c1e5$var$ud, {
    screenX: 0,
    screenY: 0,
    clientX: 0,
    clientY: 0,
    pageX: 0,
    pageY: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    getModifierState: $9e3d383a4c02c1e5$var$zd,
    button: 0,
    buttons: 0,
    relatedTarget: function(a) {
        return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
    },
    movementX: function(a) {
        if ("movementX" in a) return a.movementX;
        a !== $9e3d383a4c02c1e5$var$yd && ($9e3d383a4c02c1e5$var$yd && "mousemove" === a.type ? ($9e3d383a4c02c1e5$var$wd = a.screenX - $9e3d383a4c02c1e5$var$yd.screenX, $9e3d383a4c02c1e5$var$xd = a.screenY - $9e3d383a4c02c1e5$var$yd.screenY) : $9e3d383a4c02c1e5$var$xd = $9e3d383a4c02c1e5$var$wd = 0, $9e3d383a4c02c1e5$var$yd = a);
        return $9e3d383a4c02c1e5$var$wd;
    },
    movementY: function(a) {
        return "movementY" in a ? a.movementY : $9e3d383a4c02c1e5$var$xd;
    }
}), $9e3d383a4c02c1e5$var$Bd = $9e3d383a4c02c1e5$var$rd($9e3d383a4c02c1e5$var$Ad), $9e3d383a4c02c1e5$var$Cd = $9e3d383a4c02c1e5$var$A({}, $9e3d383a4c02c1e5$var$Ad, {
    dataTransfer: 0
}), $9e3d383a4c02c1e5$var$Dd = $9e3d383a4c02c1e5$var$rd($9e3d383a4c02c1e5$var$Cd), $9e3d383a4c02c1e5$var$Ed = $9e3d383a4c02c1e5$var$A({}, $9e3d383a4c02c1e5$var$ud, {
    relatedTarget: 0
}), $9e3d383a4c02c1e5$var$Fd = $9e3d383a4c02c1e5$var$rd($9e3d383a4c02c1e5$var$Ed), $9e3d383a4c02c1e5$var$Gd = $9e3d383a4c02c1e5$var$A({}, $9e3d383a4c02c1e5$var$sd, {
    animationName: 0,
    elapsedTime: 0,
    pseudoElement: 0
}), $9e3d383a4c02c1e5$var$Hd = $9e3d383a4c02c1e5$var$rd($9e3d383a4c02c1e5$var$Gd), $9e3d383a4c02c1e5$var$Id = $9e3d383a4c02c1e5$var$A({}, $9e3d383a4c02c1e5$var$sd, {
    clipboardData: function(a) {
        return "clipboardData" in a ? a.clipboardData : window.clipboardData;
    }
}), $9e3d383a4c02c1e5$var$Jd = $9e3d383a4c02c1e5$var$rd($9e3d383a4c02c1e5$var$Id), $9e3d383a4c02c1e5$var$Kd = $9e3d383a4c02c1e5$var$A({}, $9e3d383a4c02c1e5$var$sd, {
    data: 0
}), $9e3d383a4c02c1e5$var$Ld = $9e3d383a4c02c1e5$var$rd($9e3d383a4c02c1e5$var$Kd), $9e3d383a4c02c1e5$var$Md = {
    Esc: "Escape",
    Spacebar: " ",
    Left: "ArrowLeft",
    Up: "ArrowUp",
    Right: "ArrowRight",
    Down: "ArrowDown",
    Del: "Delete",
    Win: "OS",
    Menu: "ContextMenu",
    Apps: "ContextMenu",
    Scroll: "ScrollLock",
    MozPrintableKey: "Unidentified"
}, $9e3d383a4c02c1e5$var$Nd = {
    8: "Backspace",
    9: "Tab",
    12: "Clear",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    19: "Pause",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    45: "Insert",
    46: "Delete",
    112: "F1",
    113: "F2",
    114: "F3",
    115: "F4",
    116: "F5",
    117: "F6",
    118: "F7",
    119: "F8",
    120: "F9",
    121: "F10",
    122: "F11",
    123: "F12",
    144: "NumLock",
    145: "ScrollLock",
    224: "Meta"
}, $9e3d383a4c02c1e5$var$Od = {
    Alt: "altKey",
    Control: "ctrlKey",
    Meta: "metaKey",
    Shift: "shiftKey"
};
function $9e3d383a4c02c1e5$var$Pd(a) {
    var b = this.nativeEvent;
    return b.getModifierState ? b.getModifierState(a) : (a = $9e3d383a4c02c1e5$var$Od[a]) ? !!b[a] : !1;
}
function $9e3d383a4c02c1e5$var$zd() {
    return $9e3d383a4c02c1e5$var$Pd;
}
var $9e3d383a4c02c1e5$var$Qd = $9e3d383a4c02c1e5$var$A({}, $9e3d383a4c02c1e5$var$ud, {
    key: function(a) {
        if (a.key) {
            var b = $9e3d383a4c02c1e5$var$Md[a.key] || a.key;
            if ("Unidentified" !== b) return b;
        }
        return "keypress" === a.type ? (a = $9e3d383a4c02c1e5$var$od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? $9e3d383a4c02c1e5$var$Nd[a.keyCode] || "Unidentified" : "";
    },
    code: 0,
    location: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    repeat: 0,
    locale: 0,
    getModifierState: $9e3d383a4c02c1e5$var$zd,
    charCode: function(a) {
        return "keypress" === a.type ? $9e3d383a4c02c1e5$var$od(a) : 0;
    },
    keyCode: function(a) {
        return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    },
    which: function(a) {
        return "keypress" === a.type ? $9e3d383a4c02c1e5$var$od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    }
}), $9e3d383a4c02c1e5$var$Rd = $9e3d383a4c02c1e5$var$rd($9e3d383a4c02c1e5$var$Qd), $9e3d383a4c02c1e5$var$Sd = $9e3d383a4c02c1e5$var$A({}, $9e3d383a4c02c1e5$var$Ad, {
    pointerId: 0,
    width: 0,
    height: 0,
    pressure: 0,
    tangentialPressure: 0,
    tiltX: 0,
    tiltY: 0,
    twist: 0,
    pointerType: 0,
    isPrimary: 0
}), $9e3d383a4c02c1e5$var$Td = $9e3d383a4c02c1e5$var$rd($9e3d383a4c02c1e5$var$Sd), $9e3d383a4c02c1e5$var$Ud = $9e3d383a4c02c1e5$var$A({}, $9e3d383a4c02c1e5$var$ud, {
    touches: 0,
    targetTouches: 0,
    changedTouches: 0,
    altKey: 0,
    metaKey: 0,
    ctrlKey: 0,
    shiftKey: 0,
    getModifierState: $9e3d383a4c02c1e5$var$zd
}), $9e3d383a4c02c1e5$var$Vd = $9e3d383a4c02c1e5$var$rd($9e3d383a4c02c1e5$var$Ud), $9e3d383a4c02c1e5$var$Wd = $9e3d383a4c02c1e5$var$A({}, $9e3d383a4c02c1e5$var$sd, {
    propertyName: 0,
    elapsedTime: 0,
    pseudoElement: 0
}), $9e3d383a4c02c1e5$var$Xd = $9e3d383a4c02c1e5$var$rd($9e3d383a4c02c1e5$var$Wd), $9e3d383a4c02c1e5$var$Yd = $9e3d383a4c02c1e5$var$A({}, $9e3d383a4c02c1e5$var$Ad, {
    deltaX: function(a) {
        return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
    },
    deltaY: function(a) {
        return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
    },
    deltaZ: 0,
    deltaMode: 0
}), $9e3d383a4c02c1e5$var$Zd = $9e3d383a4c02c1e5$var$rd($9e3d383a4c02c1e5$var$Yd), $9e3d383a4c02c1e5$var$$d = [
    9,
    13,
    27,
    32
], $9e3d383a4c02c1e5$var$ae = $9e3d383a4c02c1e5$var$ia && "CompositionEvent" in window, $9e3d383a4c02c1e5$var$be = null;
$9e3d383a4c02c1e5$var$ia && "documentMode" in document && ($9e3d383a4c02c1e5$var$be = document.documentMode);
var $9e3d383a4c02c1e5$var$ce = $9e3d383a4c02c1e5$var$ia && "TextEvent" in window && !$9e3d383a4c02c1e5$var$be, $9e3d383a4c02c1e5$var$de = $9e3d383a4c02c1e5$var$ia && (!$9e3d383a4c02c1e5$var$ae || $9e3d383a4c02c1e5$var$be && 8 < $9e3d383a4c02c1e5$var$be && 11 >= $9e3d383a4c02c1e5$var$be), $9e3d383a4c02c1e5$var$ee = String.fromCharCode(32), $9e3d383a4c02c1e5$var$fe = !1;
function $9e3d383a4c02c1e5$var$ge(a, b) {
    switch(a){
        case "keyup":
            return -1 !== $9e3d383a4c02c1e5$var$$d.indexOf(b.keyCode);
        case "keydown":
            return 229 !== b.keyCode;
        case "keypress":
        case "mousedown":
        case "focusout":
            return !0;
        default:
            return !1;
    }
}
function $9e3d383a4c02c1e5$var$he(a) {
    a = a.detail;
    return "object" === typeof a && "data" in a ? a.data : null;
}
var $9e3d383a4c02c1e5$var$ie = !1;
function $9e3d383a4c02c1e5$var$je(a, b) {
    switch(a){
        case "compositionend":
            return $9e3d383a4c02c1e5$var$he(b);
        case "keypress":
            if (32 !== b.which) return null;
            $9e3d383a4c02c1e5$var$fe = !0;
            return $9e3d383a4c02c1e5$var$ee;
        case "textInput":
            return a = b.data, a === $9e3d383a4c02c1e5$var$ee && $9e3d383a4c02c1e5$var$fe ? null : a;
        default:
            return null;
    }
}
function $9e3d383a4c02c1e5$var$ke(a, b) {
    if ($9e3d383a4c02c1e5$var$ie) return "compositionend" === a || !$9e3d383a4c02c1e5$var$ae && $9e3d383a4c02c1e5$var$ge(a, b) ? (a = $9e3d383a4c02c1e5$var$nd(), $9e3d383a4c02c1e5$var$md = $9e3d383a4c02c1e5$var$ld = $9e3d383a4c02c1e5$var$kd = null, $9e3d383a4c02c1e5$var$ie = !1, a) : null;
    switch(a){
        case "paste":
            return null;
        case "keypress":
            if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
                if (b.char && 1 < b.char.length) return b.char;
                if (b.which) return String.fromCharCode(b.which);
            }
            return null;
        case "compositionend":
            return $9e3d383a4c02c1e5$var$de && "ko" !== b.locale ? null : b.data;
        default:
            return null;
    }
}
var $9e3d383a4c02c1e5$var$le = {
    color: !0,
    date: !0,
    datetime: !0,
    "datetime-local": !0,
    email: !0,
    month: !0,
    number: !0,
    password: !0,
    range: !0,
    search: !0,
    tel: !0,
    text: !0,
    time: !0,
    url: !0,
    week: !0
};
function $9e3d383a4c02c1e5$var$me(a) {
    var b = a && a.nodeName && a.nodeName.toLowerCase();
    return "input" === b ? !!$9e3d383a4c02c1e5$var$le[a.type] : "textarea" === b ? !0 : !1;
}
function $9e3d383a4c02c1e5$var$ne(a, b, c, d) {
    $9e3d383a4c02c1e5$var$Eb(d);
    b = $9e3d383a4c02c1e5$var$oe(b, "onChange");
    0 < b.length && (c = new $9e3d383a4c02c1e5$var$td("onChange", "change", null, c, d), a.push({
        event: c,
        listeners: b
    }));
}
var $9e3d383a4c02c1e5$var$pe = null, $9e3d383a4c02c1e5$var$qe = null;
function $9e3d383a4c02c1e5$var$re(a) {
    $9e3d383a4c02c1e5$var$se(a, 0);
}
function $9e3d383a4c02c1e5$var$te(a) {
    var b = $9e3d383a4c02c1e5$var$ue(a);
    if ($9e3d383a4c02c1e5$var$Wa(b)) return a;
}
function $9e3d383a4c02c1e5$var$ve(a, b) {
    if ("change" === a) return b;
}
var $9e3d383a4c02c1e5$var$we = !1;
if ($9e3d383a4c02c1e5$var$ia) {
    var $9e3d383a4c02c1e5$var$xe;
    if ($9e3d383a4c02c1e5$var$ia) {
        var $9e3d383a4c02c1e5$var$ye = "oninput" in document;
        if (!$9e3d383a4c02c1e5$var$ye) {
            var $9e3d383a4c02c1e5$var$ze = document.createElement("div");
            $9e3d383a4c02c1e5$var$ze.setAttribute("oninput", "return;");
            $9e3d383a4c02c1e5$var$ye = "function" === typeof $9e3d383a4c02c1e5$var$ze.oninput;
        }
        $9e3d383a4c02c1e5$var$xe = $9e3d383a4c02c1e5$var$ye;
    } else $9e3d383a4c02c1e5$var$xe = !1;
    $9e3d383a4c02c1e5$var$we = $9e3d383a4c02c1e5$var$xe && (!document.documentMode || 9 < document.documentMode);
}
function $9e3d383a4c02c1e5$var$Ae() {
    $9e3d383a4c02c1e5$var$pe && ($9e3d383a4c02c1e5$var$pe.detachEvent("onpropertychange", $9e3d383a4c02c1e5$var$Be), $9e3d383a4c02c1e5$var$qe = $9e3d383a4c02c1e5$var$pe = null);
}
function $9e3d383a4c02c1e5$var$Be(a) {
    if ("value" === a.propertyName && $9e3d383a4c02c1e5$var$te($9e3d383a4c02c1e5$var$qe)) {
        var b = [];
        $9e3d383a4c02c1e5$var$ne(b, $9e3d383a4c02c1e5$var$qe, a, $9e3d383a4c02c1e5$var$xb(a));
        $9e3d383a4c02c1e5$var$Jb($9e3d383a4c02c1e5$var$re, b);
    }
}
function $9e3d383a4c02c1e5$var$Ce(a, b, c) {
    "focusin" === a ? ($9e3d383a4c02c1e5$var$Ae(), $9e3d383a4c02c1e5$var$pe = b, $9e3d383a4c02c1e5$var$qe = c, $9e3d383a4c02c1e5$var$pe.attachEvent("onpropertychange", $9e3d383a4c02c1e5$var$Be)) : "focusout" === a && $9e3d383a4c02c1e5$var$Ae();
}
function $9e3d383a4c02c1e5$var$De(a) {
    if ("selectionchange" === a || "keyup" === a || "keydown" === a) return $9e3d383a4c02c1e5$var$te($9e3d383a4c02c1e5$var$qe);
}
function $9e3d383a4c02c1e5$var$Ee(a, b) {
    if ("click" === a) return $9e3d383a4c02c1e5$var$te(b);
}
function $9e3d383a4c02c1e5$var$Fe(a, b) {
    if ("input" === a || "change" === a) return $9e3d383a4c02c1e5$var$te(b);
}
function $9e3d383a4c02c1e5$var$Ge(a, b) {
    return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
}
var $9e3d383a4c02c1e5$var$He = "function" === typeof Object.is ? Object.is : $9e3d383a4c02c1e5$var$Ge;
function $9e3d383a4c02c1e5$var$Ie(a, b) {
    if ($9e3d383a4c02c1e5$var$He(a, b)) return !0;
    if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) return !1;
    var c = Object.keys(a), d = Object.keys(b);
    if (c.length !== d.length) return !1;
    for(d = 0; d < c.length; d++){
        var e = c[d];
        if (!$9e3d383a4c02c1e5$var$ja.call(b, e) || !$9e3d383a4c02c1e5$var$He(a[e], b[e])) return !1;
    }
    return !0;
}
function $9e3d383a4c02c1e5$var$Je(a) {
    for(; a && a.firstChild;)a = a.firstChild;
    return a;
}
function $9e3d383a4c02c1e5$var$Ke(a, b) {
    var c = $9e3d383a4c02c1e5$var$Je(a);
    a = 0;
    for(var d; c;){
        if (3 === c.nodeType) {
            d = a + c.textContent.length;
            if (a <= b && d >= b) return {
                node: c,
                offset: b - a
            };
            a = d;
        }
        a: {
            for(; c;){
                if (c.nextSibling) {
                    c = c.nextSibling;
                    break a;
                }
                c = c.parentNode;
            }
            c = void 0;
        }
        c = $9e3d383a4c02c1e5$var$Je(c);
    }
}
function $9e3d383a4c02c1e5$var$Le(a, b) {
    return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? $9e3d383a4c02c1e5$var$Le(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;
}
function $9e3d383a4c02c1e5$var$Me() {
    for(var a = window, b = $9e3d383a4c02c1e5$var$Xa(); b instanceof a.HTMLIFrameElement;){
        try {
            var c = "string" === typeof b.contentWindow.location.href;
        } catch (d) {
            c = !1;
        }
        if (c) a = b.contentWindow;
        else break;
        b = $9e3d383a4c02c1e5$var$Xa(a.document);
    }
    return b;
}
function $9e3d383a4c02c1e5$var$Ne(a) {
    var b = a && a.nodeName && a.nodeName.toLowerCase();
    return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
}
function $9e3d383a4c02c1e5$var$Oe(a) {
    var b = $9e3d383a4c02c1e5$var$Me(), c = a.focusedElem, d = a.selectionRange;
    if (b !== c && c && c.ownerDocument && $9e3d383a4c02c1e5$var$Le(c.ownerDocument.documentElement, c)) {
        if (null !== d && $9e3d383a4c02c1e5$var$Ne(c)) {
            if (b = d.start, a = d.end, void 0 === a && (a = b), "selectionStart" in c) c.selectionStart = b, c.selectionEnd = Math.min(a, c.value.length);
            else if (a = (b = c.ownerDocument || document) && b.defaultView || window, a.getSelection) {
                a = a.getSelection();
                var e = c.textContent.length, f = Math.min(d.start, e);
                d = void 0 === d.end ? f : Math.min(d.end, e);
                !a.extend && f > d && (e = d, d = f, f = e);
                e = $9e3d383a4c02c1e5$var$Ke(c, f);
                var g = $9e3d383a4c02c1e5$var$Ke(c, d);
                e && g && (1 !== a.rangeCount || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g.node || a.focusOffset !== g.offset) && (b = b.createRange(), b.setStart(e.node, e.offset), a.removeAllRanges(), f > d ? (a.addRange(b), a.extend(g.node, g.offset)) : (b.setEnd(g.node, g.offset), a.addRange(b)));
            }
        }
        b = [];
        for(a = c; a = a.parentNode;)1 === a.nodeType && b.push({
            element: a,
            left: a.scrollLeft,
            top: a.scrollTop
        });
        "function" === typeof c.focus && c.focus();
        for(c = 0; c < b.length; c++)a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
    }
}
var $9e3d383a4c02c1e5$var$Pe = $9e3d383a4c02c1e5$var$ia && "documentMode" in document && 11 >= document.documentMode, $9e3d383a4c02c1e5$var$Qe = null, $9e3d383a4c02c1e5$var$Re = null, $9e3d383a4c02c1e5$var$Se = null, $9e3d383a4c02c1e5$var$Te = !1;
function $9e3d383a4c02c1e5$var$Ue(a, b, c) {
    var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
    $9e3d383a4c02c1e5$var$Te || null == $9e3d383a4c02c1e5$var$Qe || $9e3d383a4c02c1e5$var$Qe !== $9e3d383a4c02c1e5$var$Xa(d) || (d = $9e3d383a4c02c1e5$var$Qe, "selectionStart" in d && $9e3d383a4c02c1e5$var$Ne(d) ? d = {
        start: d.selectionStart,
        end: d.selectionEnd
    } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = {
        anchorNode: d.anchorNode,
        anchorOffset: d.anchorOffset,
        focusNode: d.focusNode,
        focusOffset: d.focusOffset
    }), $9e3d383a4c02c1e5$var$Se && $9e3d383a4c02c1e5$var$Ie($9e3d383a4c02c1e5$var$Se, d) || ($9e3d383a4c02c1e5$var$Se = d, d = $9e3d383a4c02c1e5$var$oe($9e3d383a4c02c1e5$var$Re, "onSelect"), 0 < d.length && (b = new $9e3d383a4c02c1e5$var$td("onSelect", "select", null, b, c), a.push({
        event: b,
        listeners: d
    }), b.target = $9e3d383a4c02c1e5$var$Qe)));
}
function $9e3d383a4c02c1e5$var$Ve(a, b) {
    var c = {};
    c[a.toLowerCase()] = b.toLowerCase();
    c["Webkit" + a] = "webkit" + b;
    c["Moz" + a] = "moz" + b;
    return c;
}
var $9e3d383a4c02c1e5$var$We = {
    animationend: $9e3d383a4c02c1e5$var$Ve("Animation", "AnimationEnd"),
    animationiteration: $9e3d383a4c02c1e5$var$Ve("Animation", "AnimationIteration"),
    animationstart: $9e3d383a4c02c1e5$var$Ve("Animation", "AnimationStart"),
    transitionend: $9e3d383a4c02c1e5$var$Ve("Transition", "TransitionEnd")
}, $9e3d383a4c02c1e5$var$Xe = {}, $9e3d383a4c02c1e5$var$Ye = {};
$9e3d383a4c02c1e5$var$ia && ($9e3d383a4c02c1e5$var$Ye = document.createElement("div").style, "AnimationEvent" in window || (delete $9e3d383a4c02c1e5$var$We.animationend.animation, delete $9e3d383a4c02c1e5$var$We.animationiteration.animation, delete $9e3d383a4c02c1e5$var$We.animationstart.animation), "TransitionEvent" in window || delete $9e3d383a4c02c1e5$var$We.transitionend.transition);
function $9e3d383a4c02c1e5$var$Ze(a) {
    if ($9e3d383a4c02c1e5$var$Xe[a]) return $9e3d383a4c02c1e5$var$Xe[a];
    if (!$9e3d383a4c02c1e5$var$We[a]) return a;
    var b = $9e3d383a4c02c1e5$var$We[a], c;
    for(c in b)if (b.hasOwnProperty(c) && c in $9e3d383a4c02c1e5$var$Ye) return $9e3d383a4c02c1e5$var$Xe[a] = b[c];
    return a;
}
var $9e3d383a4c02c1e5$var$$e = $9e3d383a4c02c1e5$var$Ze("animationend"), $9e3d383a4c02c1e5$var$af = $9e3d383a4c02c1e5$var$Ze("animationiteration"), $9e3d383a4c02c1e5$var$bf = $9e3d383a4c02c1e5$var$Ze("animationstart"), $9e3d383a4c02c1e5$var$cf = $9e3d383a4c02c1e5$var$Ze("transitionend"), $9e3d383a4c02c1e5$var$df = new Map, $9e3d383a4c02c1e5$var$ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
function $9e3d383a4c02c1e5$var$ff(a, b) {
    $9e3d383a4c02c1e5$var$df.set(a, b);
    $9e3d383a4c02c1e5$var$fa(b, [
        a
    ]);
}
for(var $9e3d383a4c02c1e5$var$gf = 0; $9e3d383a4c02c1e5$var$gf < $9e3d383a4c02c1e5$var$ef.length; $9e3d383a4c02c1e5$var$gf++){
    var $9e3d383a4c02c1e5$var$hf = $9e3d383a4c02c1e5$var$ef[$9e3d383a4c02c1e5$var$gf], $9e3d383a4c02c1e5$var$jf = $9e3d383a4c02c1e5$var$hf.toLowerCase(), $9e3d383a4c02c1e5$var$kf = $9e3d383a4c02c1e5$var$hf[0].toUpperCase() + $9e3d383a4c02c1e5$var$hf.slice(1);
    $9e3d383a4c02c1e5$var$ff($9e3d383a4c02c1e5$var$jf, "on" + $9e3d383a4c02c1e5$var$kf);
}
$9e3d383a4c02c1e5$var$ff($9e3d383a4c02c1e5$var$$e, "onAnimationEnd");
$9e3d383a4c02c1e5$var$ff($9e3d383a4c02c1e5$var$af, "onAnimationIteration");
$9e3d383a4c02c1e5$var$ff($9e3d383a4c02c1e5$var$bf, "onAnimationStart");
$9e3d383a4c02c1e5$var$ff("dblclick", "onDoubleClick");
$9e3d383a4c02c1e5$var$ff("focusin", "onFocus");
$9e3d383a4c02c1e5$var$ff("focusout", "onBlur");
$9e3d383a4c02c1e5$var$ff($9e3d383a4c02c1e5$var$cf, "onTransitionEnd");
$9e3d383a4c02c1e5$var$ha("onMouseEnter", [
    "mouseout",
    "mouseover"
]);
$9e3d383a4c02c1e5$var$ha("onMouseLeave", [
    "mouseout",
    "mouseover"
]);
$9e3d383a4c02c1e5$var$ha("onPointerEnter", [
    "pointerout",
    "pointerover"
]);
$9e3d383a4c02c1e5$var$ha("onPointerLeave", [
    "pointerout",
    "pointerover"
]);
$9e3d383a4c02c1e5$var$fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
$9e3d383a4c02c1e5$var$fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
$9e3d383a4c02c1e5$var$fa("onBeforeInput", [
    "compositionend",
    "keypress",
    "textInput",
    "paste"
]);
$9e3d383a4c02c1e5$var$fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
$9e3d383a4c02c1e5$var$fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
$9e3d383a4c02c1e5$var$fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
var $9e3d383a4c02c1e5$var$lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), $9e3d383a4c02c1e5$var$mf = new Set("cancel close invalid load scroll toggle".split(" ").concat($9e3d383a4c02c1e5$var$lf));
function $9e3d383a4c02c1e5$var$nf(a, b, c) {
    var d = a.type || "unknown-event";
    a.currentTarget = c;
    $9e3d383a4c02c1e5$var$Ub(d, b, void 0, a);
    a.currentTarget = null;
}
function $9e3d383a4c02c1e5$var$se(a, b) {
    b = 0 !== (b & 4);
    for(var c = 0; c < a.length; c++){
        var d = a[c], e = d.event;
        d = d.listeners;
        a: {
            var f = void 0;
            if (b) for(var g = d.length - 1; 0 <= g; g--){
                var h = d[g], k = h.instance, l = h.currentTarget;
                h = h.listener;
                if (k !== f && e.isPropagationStopped()) break a;
                $9e3d383a4c02c1e5$var$nf(e, h, l);
                f = k;
            }
            else for(g = 0; g < d.length; g++){
                h = d[g];
                k = h.instance;
                l = h.currentTarget;
                h = h.listener;
                if (k !== f && e.isPropagationStopped()) break a;
                $9e3d383a4c02c1e5$var$nf(e, h, l);
                f = k;
            }
        }
    }
    if ($9e3d383a4c02c1e5$var$Qb) throw a = $9e3d383a4c02c1e5$var$Rb, $9e3d383a4c02c1e5$var$Qb = !1, $9e3d383a4c02c1e5$var$Rb = null, a;
}
function $9e3d383a4c02c1e5$var$D(a, b) {
    var c = b[$9e3d383a4c02c1e5$var$of];
    void 0 === c && (c = b[$9e3d383a4c02c1e5$var$of] = new Set);
    var d = a + "__bubble";
    c.has(d) || ($9e3d383a4c02c1e5$var$pf(b, a, 2, !1), c.add(d));
}
function $9e3d383a4c02c1e5$var$qf(a, b, c) {
    var d = 0;
    b && (d |= 4);
    $9e3d383a4c02c1e5$var$pf(c, a, d, b);
}
var $9e3d383a4c02c1e5$var$rf = "_reactListening" + Math.random().toString(36).slice(2);
function $9e3d383a4c02c1e5$var$sf(a) {
    if (!a[$9e3d383a4c02c1e5$var$rf]) {
        a[$9e3d383a4c02c1e5$var$rf] = !0;
        $9e3d383a4c02c1e5$var$da.forEach(function(b) {
            "selectionchange" !== b && ($9e3d383a4c02c1e5$var$mf.has(b) || $9e3d383a4c02c1e5$var$qf(b, !1, a), $9e3d383a4c02c1e5$var$qf(b, !0, a));
        });
        var b = 9 === a.nodeType ? a : a.ownerDocument;
        null === b || b[$9e3d383a4c02c1e5$var$rf] || (b[$9e3d383a4c02c1e5$var$rf] = !0, $9e3d383a4c02c1e5$var$qf("selectionchange", !1, b));
    }
}
function $9e3d383a4c02c1e5$var$pf(a, b, c, d) {
    switch($9e3d383a4c02c1e5$var$jd(b)){
        case 1:
            var e = $9e3d383a4c02c1e5$var$ed;
            break;
        case 4:
            e = $9e3d383a4c02c1e5$var$gd;
            break;
        default:
            e = $9e3d383a4c02c1e5$var$fd;
    }
    c = e.bind(null, b, c, a);
    e = void 0;
    !$9e3d383a4c02c1e5$var$Lb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = !0);
    d ? void 0 !== e ? a.addEventListener(b, c, {
        capture: !0,
        passive: e
    }) : a.addEventListener(b, c, !0) : void 0 !== e ? a.addEventListener(b, c, {
        passive: e
    }) : a.addEventListener(b, c, !1);
}
function $9e3d383a4c02c1e5$var$hd(a, b, c, d, e) {
    var f = d;
    if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for(;;){
        if (null === d) return;
        var g = d.tag;
        if (3 === g || 4 === g) {
            var h = d.stateNode.containerInfo;
            if (h === e || 8 === h.nodeType && h.parentNode === e) break;
            if (4 === g) for(g = d.return; null !== g;){
                var k = g.tag;
                if (3 === k || 4 === k) {
                    if (k = g.stateNode.containerInfo, k === e || 8 === k.nodeType && k.parentNode === e) return;
                }
                g = g.return;
            }
            for(; null !== h;){
                g = $9e3d383a4c02c1e5$var$Wc(h);
                if (null === g) return;
                k = g.tag;
                if (5 === k || 6 === k) {
                    d = f = g;
                    continue a;
                }
                h = h.parentNode;
            }
        }
        d = d.return;
    }
    $9e3d383a4c02c1e5$var$Jb(function() {
        var d = f, e = $9e3d383a4c02c1e5$var$xb(c), g = [];
        a: {
            var h = $9e3d383a4c02c1e5$var$df.get(a);
            if (void 0 !== h) {
                var k = $9e3d383a4c02c1e5$var$td, n = a;
                switch(a){
                    case "keypress":
                        if (0 === $9e3d383a4c02c1e5$var$od(c)) break a;
                    case "keydown":
                    case "keyup":
                        k = $9e3d383a4c02c1e5$var$Rd;
                        break;
                    case "focusin":
                        n = "focus";
                        k = $9e3d383a4c02c1e5$var$Fd;
                        break;
                    case "focusout":
                        n = "blur";
                        k = $9e3d383a4c02c1e5$var$Fd;
                        break;
                    case "beforeblur":
                    case "afterblur":
                        k = $9e3d383a4c02c1e5$var$Fd;
                        break;
                    case "click":
                        if (2 === c.button) break a;
                    case "auxclick":
                    case "dblclick":
                    case "mousedown":
                    case "mousemove":
                    case "mouseup":
                    case "mouseout":
                    case "mouseover":
                    case "contextmenu":
                        k = $9e3d383a4c02c1e5$var$Bd;
                        break;
                    case "drag":
                    case "dragend":
                    case "dragenter":
                    case "dragexit":
                    case "dragleave":
                    case "dragover":
                    case "dragstart":
                    case "drop":
                        k = $9e3d383a4c02c1e5$var$Dd;
                        break;
                    case "touchcancel":
                    case "touchend":
                    case "touchmove":
                    case "touchstart":
                        k = $9e3d383a4c02c1e5$var$Vd;
                        break;
                    case $9e3d383a4c02c1e5$var$$e:
                    case $9e3d383a4c02c1e5$var$af:
                    case $9e3d383a4c02c1e5$var$bf:
                        k = $9e3d383a4c02c1e5$var$Hd;
                        break;
                    case $9e3d383a4c02c1e5$var$cf:
                        k = $9e3d383a4c02c1e5$var$Xd;
                        break;
                    case "scroll":
                        k = $9e3d383a4c02c1e5$var$vd;
                        break;
                    case "wheel":
                        k = $9e3d383a4c02c1e5$var$Zd;
                        break;
                    case "copy":
                    case "cut":
                    case "paste":
                        k = $9e3d383a4c02c1e5$var$Jd;
                        break;
                    case "gotpointercapture":
                    case "lostpointercapture":
                    case "pointercancel":
                    case "pointerdown":
                    case "pointermove":
                    case "pointerout":
                    case "pointerover":
                    case "pointerup":
                        k = $9e3d383a4c02c1e5$var$Td;
                }
                var t = 0 !== (b & 4), J = !t && "scroll" === a, x = t ? null !== h ? h + "Capture" : null : h;
                t = [];
                for(var w = d, u; null !== w;){
                    u = w;
                    var F = u.stateNode;
                    5 === u.tag && null !== F && (u = F, null !== x && (F = $9e3d383a4c02c1e5$var$Kb(w, x), null != F && t.push($9e3d383a4c02c1e5$var$tf(w, F, u))));
                    if (J) break;
                    w = w.return;
                }
                0 < t.length && (h = new k(h, n, null, c, e), g.push({
                    event: h,
                    listeners: t
                }));
            }
        }
        if (0 === (b & 7)) {
            a: {
                h = "mouseover" === a || "pointerover" === a;
                k = "mouseout" === a || "pointerout" === a;
                if (h && c !== $9e3d383a4c02c1e5$var$wb && (n = c.relatedTarget || c.fromElement) && ($9e3d383a4c02c1e5$var$Wc(n) || n[$9e3d383a4c02c1e5$var$uf])) break a;
                if (k || h) {
                    h = e.window === e ? e : (h = e.ownerDocument) ? h.defaultView || h.parentWindow : window;
                    if (k) {
                        if (n = c.relatedTarget || c.toElement, k = d, n = n ? $9e3d383a4c02c1e5$var$Wc(n) : null, null !== n && (J = $9e3d383a4c02c1e5$var$Vb(n), n !== J || 5 !== n.tag && 6 !== n.tag)) n = null;
                    } else k = null, n = d;
                    if (k !== n) {
                        t = $9e3d383a4c02c1e5$var$Bd;
                        F = "onMouseLeave";
                        x = "onMouseEnter";
                        w = "mouse";
                        if ("pointerout" === a || "pointerover" === a) t = $9e3d383a4c02c1e5$var$Td, F = "onPointerLeave", x = "onPointerEnter", w = "pointer";
                        J = null == k ? h : $9e3d383a4c02c1e5$var$ue(k);
                        u = null == n ? h : $9e3d383a4c02c1e5$var$ue(n);
                        h = new t(F, w + "leave", k, c, e);
                        h.target = J;
                        h.relatedTarget = u;
                        F = null;
                        $9e3d383a4c02c1e5$var$Wc(e) === d && (t = new t(x, w + "enter", n, c, e), t.target = u, t.relatedTarget = J, F = t);
                        J = F;
                        if (k && n) b: {
                            t = k;
                            x = n;
                            w = 0;
                            for(u = t; u; u = $9e3d383a4c02c1e5$var$vf(u))w++;
                            u = 0;
                            for(F = x; F; F = $9e3d383a4c02c1e5$var$vf(F))u++;
                            for(; 0 < w - u;)t = $9e3d383a4c02c1e5$var$vf(t), w--;
                            for(; 0 < u - w;)x = $9e3d383a4c02c1e5$var$vf(x), u--;
                            for(; w--;){
                                if (t === x || null !== x && t === x.alternate) break b;
                                t = $9e3d383a4c02c1e5$var$vf(t);
                                x = $9e3d383a4c02c1e5$var$vf(x);
                            }
                            t = null;
                        }
                        else t = null;
                        null !== k && $9e3d383a4c02c1e5$var$wf(g, h, k, t, !1);
                        null !== n && null !== J && $9e3d383a4c02c1e5$var$wf(g, J, n, t, !0);
                    }
                }
            }
            a: {
                h = d ? $9e3d383a4c02c1e5$var$ue(d) : window;
                k = h.nodeName && h.nodeName.toLowerCase();
                if ("select" === k || "input" === k && "file" === h.type) var na = $9e3d383a4c02c1e5$var$ve;
                else if ($9e3d383a4c02c1e5$var$me(h)) {
                    if ($9e3d383a4c02c1e5$var$we) na = $9e3d383a4c02c1e5$var$Fe;
                    else {
                        na = $9e3d383a4c02c1e5$var$De;
                        var xa = $9e3d383a4c02c1e5$var$Ce;
                    }
                } else (k = h.nodeName) && "input" === k.toLowerCase() && ("checkbox" === h.type || "radio" === h.type) && (na = $9e3d383a4c02c1e5$var$Ee);
                if (na && (na = na(a, d))) {
                    $9e3d383a4c02c1e5$var$ne(g, na, c, e);
                    break a;
                }
                xa && xa(a, h, d);
                "focusout" === a && (xa = h._wrapperState) && xa.controlled && "number" === h.type && $9e3d383a4c02c1e5$var$cb(h, "number", h.value);
            }
            xa = d ? $9e3d383a4c02c1e5$var$ue(d) : window;
            switch(a){
                case "focusin":
                    if ($9e3d383a4c02c1e5$var$me(xa) || "true" === xa.contentEditable) $9e3d383a4c02c1e5$var$Qe = xa, $9e3d383a4c02c1e5$var$Re = d, $9e3d383a4c02c1e5$var$Se = null;
                    break;
                case "focusout":
                    $9e3d383a4c02c1e5$var$Se = $9e3d383a4c02c1e5$var$Re = $9e3d383a4c02c1e5$var$Qe = null;
                    break;
                case "mousedown":
                    $9e3d383a4c02c1e5$var$Te = !0;
                    break;
                case "contextmenu":
                case "mouseup":
                case "dragend":
                    $9e3d383a4c02c1e5$var$Te = !1;
                    $9e3d383a4c02c1e5$var$Ue(g, c, e);
                    break;
                case "selectionchange":
                    if ($9e3d383a4c02c1e5$var$Pe) break;
                case "keydown":
                case "keyup":
                    $9e3d383a4c02c1e5$var$Ue(g, c, e);
            }
            var $a;
            if ($9e3d383a4c02c1e5$var$ae) b: {
                switch(a){
                    case "compositionstart":
                        var ba = "onCompositionStart";
                        break b;
                    case "compositionend":
                        ba = "onCompositionEnd";
                        break b;
                    case "compositionupdate":
                        ba = "onCompositionUpdate";
                        break b;
                }
                ba = void 0;
            }
            else $9e3d383a4c02c1e5$var$ie ? $9e3d383a4c02c1e5$var$ge(a, c) && (ba = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (ba = "onCompositionStart");
            ba && ($9e3d383a4c02c1e5$var$de && "ko" !== c.locale && ($9e3d383a4c02c1e5$var$ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && $9e3d383a4c02c1e5$var$ie && ($a = $9e3d383a4c02c1e5$var$nd()) : ($9e3d383a4c02c1e5$var$kd = e, $9e3d383a4c02c1e5$var$ld = "value" in $9e3d383a4c02c1e5$var$kd ? $9e3d383a4c02c1e5$var$kd.value : $9e3d383a4c02c1e5$var$kd.textContent, $9e3d383a4c02c1e5$var$ie = !0)), xa = $9e3d383a4c02c1e5$var$oe(d, ba), 0 < xa.length && (ba = new $9e3d383a4c02c1e5$var$Ld(ba, a, null, c, e), g.push({
                event: ba,
                listeners: xa
            }), $a ? ba.data = $a : ($a = $9e3d383a4c02c1e5$var$he(c), null !== $a && (ba.data = $a))));
            if ($a = $9e3d383a4c02c1e5$var$ce ? $9e3d383a4c02c1e5$var$je(a, c) : $9e3d383a4c02c1e5$var$ke(a, c)) d = $9e3d383a4c02c1e5$var$oe(d, "onBeforeInput"), 0 < d.length && (e = new $9e3d383a4c02c1e5$var$Ld("onBeforeInput", "beforeinput", null, c, e), g.push({
                event: e,
                listeners: d
            }), e.data = $a);
        }
        $9e3d383a4c02c1e5$var$se(g, b);
    });
}
function $9e3d383a4c02c1e5$var$tf(a, b, c) {
    return {
        instance: a,
        listener: b,
        currentTarget: c
    };
}
function $9e3d383a4c02c1e5$var$oe(a, b) {
    for(var c = b + "Capture", d = []; null !== a;){
        var e = a, f = e.stateNode;
        5 === e.tag && null !== f && (e = f, f = $9e3d383a4c02c1e5$var$Kb(a, c), null != f && d.unshift($9e3d383a4c02c1e5$var$tf(a, f, e)), f = $9e3d383a4c02c1e5$var$Kb(a, b), null != f && d.push($9e3d383a4c02c1e5$var$tf(a, f, e)));
        a = a.return;
    }
    return d;
}
function $9e3d383a4c02c1e5$var$vf(a) {
    if (null === a) return null;
    do a = a.return;
    while (a && 5 !== a.tag);
    return a ? a : null;
}
function $9e3d383a4c02c1e5$var$wf(a, b, c, d, e) {
    for(var f = b._reactName, g = []; null !== c && c !== d;){
        var h = c, k = h.alternate, l = h.stateNode;
        if (null !== k && k === d) break;
        5 === h.tag && null !== l && (h = l, e ? (k = $9e3d383a4c02c1e5$var$Kb(c, f), null != k && g.unshift($9e3d383a4c02c1e5$var$tf(c, k, h))) : e || (k = $9e3d383a4c02c1e5$var$Kb(c, f), null != k && g.push($9e3d383a4c02c1e5$var$tf(c, k, h))));
        c = c.return;
    }
    0 !== g.length && a.push({
        event: b,
        listeners: g
    });
}
var $9e3d383a4c02c1e5$var$xf = /\r\n?/g, $9e3d383a4c02c1e5$var$yf = /\u0000|\uFFFD/g;
function $9e3d383a4c02c1e5$var$zf(a) {
    return ("string" === typeof a ? a : "" + a).replace($9e3d383a4c02c1e5$var$xf, "\n").replace($9e3d383a4c02c1e5$var$yf, "");
}
function $9e3d383a4c02c1e5$var$Af(a, b, c) {
    b = $9e3d383a4c02c1e5$var$zf(b);
    if ($9e3d383a4c02c1e5$var$zf(a) !== b && c) throw Error($9e3d383a4c02c1e5$var$p(425));
}
function $9e3d383a4c02c1e5$var$Bf() {}
var $9e3d383a4c02c1e5$var$Cf = null, $9e3d383a4c02c1e5$var$Df = null;
function $9e3d383a4c02c1e5$var$Ef(a, b) {
    return "textarea" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
}
var $9e3d383a4c02c1e5$var$Ff = "function" === typeof setTimeout ? setTimeout : void 0, $9e3d383a4c02c1e5$var$Gf = "function" === typeof clearTimeout ? clearTimeout : void 0, $9e3d383a4c02c1e5$var$Hf = "function" === typeof Promise ? Promise : void 0, $9e3d383a4c02c1e5$var$Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof $9e3d383a4c02c1e5$var$Hf ? function(a) {
    return $9e3d383a4c02c1e5$var$Hf.resolve(null).then(a).catch($9e3d383a4c02c1e5$var$If);
} : $9e3d383a4c02c1e5$var$Ff;
function $9e3d383a4c02c1e5$var$If(a) {
    setTimeout(function() {
        throw a;
    });
}
function $9e3d383a4c02c1e5$var$Kf(a, b) {
    var c = b, d = 0;
    do {
        var e = c.nextSibling;
        a.removeChild(c);
        if (e && 8 === e.nodeType) {
            if (c = e.data, "/$" === c) {
                if (0 === d) {
                    a.removeChild(e);
                    $9e3d383a4c02c1e5$var$bd(b);
                    return;
                }
                d--;
            } else "$" !== c && "$?" !== c && "$!" !== c || d++;
        }
        c = e;
    }while (c);
    $9e3d383a4c02c1e5$var$bd(b);
}
function $9e3d383a4c02c1e5$var$Lf(a) {
    for(; null != a; a = a.nextSibling){
        var b = a.nodeType;
        if (1 === b || 3 === b) break;
        if (8 === b) {
            b = a.data;
            if ("$" === b || "$!" === b || "$?" === b) break;
            if ("/$" === b) return null;
        }
    }
    return a;
}
function $9e3d383a4c02c1e5$var$Mf(a) {
    a = a.previousSibling;
    for(var b = 0; a;){
        if (8 === a.nodeType) {
            var c = a.data;
            if ("$" === c || "$!" === c || "$?" === c) {
                if (0 === b) return a;
                b--;
            } else "/$" === c && b++;
        }
        a = a.previousSibling;
    }
    return null;
}
var $9e3d383a4c02c1e5$var$Nf = Math.random().toString(36).slice(2), $9e3d383a4c02c1e5$var$Of = "__reactFiber$" + $9e3d383a4c02c1e5$var$Nf, $9e3d383a4c02c1e5$var$Pf = "__reactProps$" + $9e3d383a4c02c1e5$var$Nf, $9e3d383a4c02c1e5$var$uf = "__reactContainer$" + $9e3d383a4c02c1e5$var$Nf, $9e3d383a4c02c1e5$var$of = "__reactEvents$" + $9e3d383a4c02c1e5$var$Nf, $9e3d383a4c02c1e5$var$Qf = "__reactListeners$" + $9e3d383a4c02c1e5$var$Nf, $9e3d383a4c02c1e5$var$Rf = "__reactHandles$" + $9e3d383a4c02c1e5$var$Nf;
function $9e3d383a4c02c1e5$var$Wc(a) {
    var b = a[$9e3d383a4c02c1e5$var$Of];
    if (b) return b;
    for(var c = a.parentNode; c;){
        if (b = c[$9e3d383a4c02c1e5$var$uf] || c[$9e3d383a4c02c1e5$var$Of]) {
            c = b.alternate;
            if (null !== b.child || null !== c && null !== c.child) for(a = $9e3d383a4c02c1e5$var$Mf(a); null !== a;){
                if (c = a[$9e3d383a4c02c1e5$var$Of]) return c;
                a = $9e3d383a4c02c1e5$var$Mf(a);
            }
            return b;
        }
        a = c;
        c = a.parentNode;
    }
    return null;
}
function $9e3d383a4c02c1e5$var$Cb(a) {
    a = a[$9e3d383a4c02c1e5$var$Of] || a[$9e3d383a4c02c1e5$var$uf];
    return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
}
function $9e3d383a4c02c1e5$var$ue(a) {
    if (5 === a.tag || 6 === a.tag) return a.stateNode;
    throw Error($9e3d383a4c02c1e5$var$p(33));
}
function $9e3d383a4c02c1e5$var$Db(a) {
    return a[$9e3d383a4c02c1e5$var$Pf] || null;
}
var $9e3d383a4c02c1e5$var$Sf = [], $9e3d383a4c02c1e5$var$Tf = -1;
function $9e3d383a4c02c1e5$var$Uf(a) {
    return {
        current: a
    };
}
function $9e3d383a4c02c1e5$var$E(a) {
    0 > $9e3d383a4c02c1e5$var$Tf || (a.current = $9e3d383a4c02c1e5$var$Sf[$9e3d383a4c02c1e5$var$Tf], $9e3d383a4c02c1e5$var$Sf[$9e3d383a4c02c1e5$var$Tf] = null, $9e3d383a4c02c1e5$var$Tf--);
}
function $9e3d383a4c02c1e5$var$G(a, b) {
    $9e3d383a4c02c1e5$var$Tf++;
    $9e3d383a4c02c1e5$var$Sf[$9e3d383a4c02c1e5$var$Tf] = a.current;
    a.current = b;
}
var $9e3d383a4c02c1e5$var$Vf = {}, $9e3d383a4c02c1e5$var$H = $9e3d383a4c02c1e5$var$Uf($9e3d383a4c02c1e5$var$Vf), $9e3d383a4c02c1e5$var$Wf = $9e3d383a4c02c1e5$var$Uf(!1), $9e3d383a4c02c1e5$var$Xf = $9e3d383a4c02c1e5$var$Vf;
function $9e3d383a4c02c1e5$var$Yf(a, b) {
    var c = a.type.contextTypes;
    if (!c) return $9e3d383a4c02c1e5$var$Vf;
    var d = a.stateNode;
    if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
    var e = {}, f;
    for(f in c)e[f] = b[f];
    d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
    return e;
}
function $9e3d383a4c02c1e5$var$Zf(a) {
    a = a.childContextTypes;
    return null !== a && void 0 !== a;
}
function $9e3d383a4c02c1e5$var$$f() {
    $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$Wf);
    $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$H);
}
function $9e3d383a4c02c1e5$var$ag(a, b, c) {
    if ($9e3d383a4c02c1e5$var$H.current !== $9e3d383a4c02c1e5$var$Vf) throw Error($9e3d383a4c02c1e5$var$p(168));
    $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$H, b);
    $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$Wf, c);
}
function $9e3d383a4c02c1e5$var$bg(a, b, c) {
    var d = a.stateNode;
    b = b.childContextTypes;
    if ("function" !== typeof d.getChildContext) return c;
    d = d.getChildContext();
    for(var e in d)if (!(e in b)) throw Error($9e3d383a4c02c1e5$var$p(108, $9e3d383a4c02c1e5$var$Ra(a) || "Unknown", e));
    return $9e3d383a4c02c1e5$var$A({}, c, d);
}
function $9e3d383a4c02c1e5$var$cg(a) {
    a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || $9e3d383a4c02c1e5$var$Vf;
    $9e3d383a4c02c1e5$var$Xf = $9e3d383a4c02c1e5$var$H.current;
    $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$H, a);
    $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$Wf, $9e3d383a4c02c1e5$var$Wf.current);
    return !0;
}
function $9e3d383a4c02c1e5$var$dg(a, b, c) {
    var d = a.stateNode;
    if (!d) throw Error($9e3d383a4c02c1e5$var$p(169));
    c ? (a = $9e3d383a4c02c1e5$var$bg(a, b, $9e3d383a4c02c1e5$var$Xf), d.__reactInternalMemoizedMergedChildContext = a, $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$Wf), $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$H), $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$H, a)) : $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$Wf);
    $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$Wf, c);
}
var $9e3d383a4c02c1e5$var$eg = null, $9e3d383a4c02c1e5$var$fg = !1, $9e3d383a4c02c1e5$var$gg = !1;
function $9e3d383a4c02c1e5$var$hg(a) {
    null === $9e3d383a4c02c1e5$var$eg ? $9e3d383a4c02c1e5$var$eg = [
        a
    ] : $9e3d383a4c02c1e5$var$eg.push(a);
}
function $9e3d383a4c02c1e5$var$ig(a) {
    $9e3d383a4c02c1e5$var$fg = !0;
    $9e3d383a4c02c1e5$var$hg(a);
}
function $9e3d383a4c02c1e5$var$jg() {
    if (!$9e3d383a4c02c1e5$var$gg && null !== $9e3d383a4c02c1e5$var$eg) {
        $9e3d383a4c02c1e5$var$gg = !0;
        var a = 0, b = $9e3d383a4c02c1e5$var$C;
        try {
            var c = $9e3d383a4c02c1e5$var$eg;
            for($9e3d383a4c02c1e5$var$C = 1; a < c.length; a++){
                var d = c[a];
                do d = d(!0);
                while (null !== d);
            }
            $9e3d383a4c02c1e5$var$eg = null;
            $9e3d383a4c02c1e5$var$fg = !1;
        } catch (e) {
            throw null !== $9e3d383a4c02c1e5$var$eg && ($9e3d383a4c02c1e5$var$eg = $9e3d383a4c02c1e5$var$eg.slice(a + 1)), $9e3d383a4c02c1e5$var$ac($9e3d383a4c02c1e5$var$fc, $9e3d383a4c02c1e5$var$jg), e;
        } finally{
            $9e3d383a4c02c1e5$var$C = b, $9e3d383a4c02c1e5$var$gg = !1;
        }
    }
    return null;
}
var $9e3d383a4c02c1e5$var$kg = [], $9e3d383a4c02c1e5$var$lg = 0, $9e3d383a4c02c1e5$var$mg = null, $9e3d383a4c02c1e5$var$ng = 0, $9e3d383a4c02c1e5$var$og = [], $9e3d383a4c02c1e5$var$pg = 0, $9e3d383a4c02c1e5$var$qg = null, $9e3d383a4c02c1e5$var$rg = 1, $9e3d383a4c02c1e5$var$sg = "";
function $9e3d383a4c02c1e5$var$tg(a, b) {
    $9e3d383a4c02c1e5$var$kg[$9e3d383a4c02c1e5$var$lg++] = $9e3d383a4c02c1e5$var$ng;
    $9e3d383a4c02c1e5$var$kg[$9e3d383a4c02c1e5$var$lg++] = $9e3d383a4c02c1e5$var$mg;
    $9e3d383a4c02c1e5$var$mg = a;
    $9e3d383a4c02c1e5$var$ng = b;
}
function $9e3d383a4c02c1e5$var$ug(a, b, c) {
    $9e3d383a4c02c1e5$var$og[$9e3d383a4c02c1e5$var$pg++] = $9e3d383a4c02c1e5$var$rg;
    $9e3d383a4c02c1e5$var$og[$9e3d383a4c02c1e5$var$pg++] = $9e3d383a4c02c1e5$var$sg;
    $9e3d383a4c02c1e5$var$og[$9e3d383a4c02c1e5$var$pg++] = $9e3d383a4c02c1e5$var$qg;
    $9e3d383a4c02c1e5$var$qg = a;
    var d = $9e3d383a4c02c1e5$var$rg;
    a = $9e3d383a4c02c1e5$var$sg;
    var e = 32 - $9e3d383a4c02c1e5$var$oc(d) - 1;
    d &= ~(1 << e);
    c += 1;
    var f = 32 - $9e3d383a4c02c1e5$var$oc(b) + e;
    if (30 < f) {
        var g = e - e % 5;
        f = (d & (1 << g) - 1).toString(32);
        d >>= g;
        e -= g;
        $9e3d383a4c02c1e5$var$rg = 1 << 32 - $9e3d383a4c02c1e5$var$oc(b) + e | c << e | d;
        $9e3d383a4c02c1e5$var$sg = f + a;
    } else $9e3d383a4c02c1e5$var$rg = 1 << f | c << e | d, $9e3d383a4c02c1e5$var$sg = a;
}
function $9e3d383a4c02c1e5$var$vg(a) {
    null !== a.return && ($9e3d383a4c02c1e5$var$tg(a, 1), $9e3d383a4c02c1e5$var$ug(a, 1, 0));
}
function $9e3d383a4c02c1e5$var$wg(a) {
    for(; a === $9e3d383a4c02c1e5$var$mg;)$9e3d383a4c02c1e5$var$mg = $9e3d383a4c02c1e5$var$kg[--$9e3d383a4c02c1e5$var$lg], $9e3d383a4c02c1e5$var$kg[$9e3d383a4c02c1e5$var$lg] = null, $9e3d383a4c02c1e5$var$ng = $9e3d383a4c02c1e5$var$kg[--$9e3d383a4c02c1e5$var$lg], $9e3d383a4c02c1e5$var$kg[$9e3d383a4c02c1e5$var$lg] = null;
    for(; a === $9e3d383a4c02c1e5$var$qg;)$9e3d383a4c02c1e5$var$qg = $9e3d383a4c02c1e5$var$og[--$9e3d383a4c02c1e5$var$pg], $9e3d383a4c02c1e5$var$og[$9e3d383a4c02c1e5$var$pg] = null, $9e3d383a4c02c1e5$var$sg = $9e3d383a4c02c1e5$var$og[--$9e3d383a4c02c1e5$var$pg], $9e3d383a4c02c1e5$var$og[$9e3d383a4c02c1e5$var$pg] = null, $9e3d383a4c02c1e5$var$rg = $9e3d383a4c02c1e5$var$og[--$9e3d383a4c02c1e5$var$pg], $9e3d383a4c02c1e5$var$og[$9e3d383a4c02c1e5$var$pg] = null;
}
var $9e3d383a4c02c1e5$var$xg = null, $9e3d383a4c02c1e5$var$yg = null, $9e3d383a4c02c1e5$var$I = !1, $9e3d383a4c02c1e5$var$zg = null;
function $9e3d383a4c02c1e5$var$Ag(a, b) {
    var c = $9e3d383a4c02c1e5$var$Bg(5, null, null, 0);
    c.elementType = "DELETED";
    c.stateNode = b;
    c.return = a;
    b = a.deletions;
    null === b ? (a.deletions = [
        c
    ], a.flags |= 16) : b.push(c);
}
function $9e3d383a4c02c1e5$var$Cg(a, b) {
    switch(a.tag){
        case 5:
            var c = a.type;
            b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
            return null !== b ? (a.stateNode = b, $9e3d383a4c02c1e5$var$xg = a, $9e3d383a4c02c1e5$var$yg = $9e3d383a4c02c1e5$var$Lf(b.firstChild), !0) : !1;
        case 6:
            return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, $9e3d383a4c02c1e5$var$xg = a, $9e3d383a4c02c1e5$var$yg = null, !0) : !1;
        case 13:
            return b = 8 !== b.nodeType ? null : b, null !== b ? (c = null !== $9e3d383a4c02c1e5$var$qg ? {
                id: $9e3d383a4c02c1e5$var$rg,
                overflow: $9e3d383a4c02c1e5$var$sg
            } : null, a.memoizedState = {
                dehydrated: b,
                treeContext: c,
                retryLane: 1073741824
            }, c = $9e3d383a4c02c1e5$var$Bg(18, null, null, 0), c.stateNode = b, c.return = a, a.child = c, $9e3d383a4c02c1e5$var$xg = a, $9e3d383a4c02c1e5$var$yg = null, !0) : !1;
        default:
            return !1;
    }
}
function $9e3d383a4c02c1e5$var$Dg(a) {
    return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
}
function $9e3d383a4c02c1e5$var$Eg(a) {
    if ($9e3d383a4c02c1e5$var$I) {
        var b = $9e3d383a4c02c1e5$var$yg;
        if (b) {
            var c = b;
            if (!$9e3d383a4c02c1e5$var$Cg(a, b)) {
                if ($9e3d383a4c02c1e5$var$Dg(a)) throw Error($9e3d383a4c02c1e5$var$p(418));
                b = $9e3d383a4c02c1e5$var$Lf(c.nextSibling);
                var d = $9e3d383a4c02c1e5$var$xg;
                b && $9e3d383a4c02c1e5$var$Cg(a, b) ? $9e3d383a4c02c1e5$var$Ag(d, c) : (a.flags = a.flags & -4097 | 2, $9e3d383a4c02c1e5$var$I = !1, $9e3d383a4c02c1e5$var$xg = a);
            }
        } else {
            if ($9e3d383a4c02c1e5$var$Dg(a)) throw Error($9e3d383a4c02c1e5$var$p(418));
            a.flags = a.flags & -4097 | 2;
            $9e3d383a4c02c1e5$var$I = !1;
            $9e3d383a4c02c1e5$var$xg = a;
        }
    }
}
function $9e3d383a4c02c1e5$var$Fg(a) {
    for(a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;)a = a.return;
    $9e3d383a4c02c1e5$var$xg = a;
}
function $9e3d383a4c02c1e5$var$Gg(a) {
    if (a !== $9e3d383a4c02c1e5$var$xg) return !1;
    if (!$9e3d383a4c02c1e5$var$I) return $9e3d383a4c02c1e5$var$Fg(a), $9e3d383a4c02c1e5$var$I = !0, !1;
    var b;
    (b = 3 !== a.tag) && !(b = 5 !== a.tag) && (b = a.type, b = "head" !== b && "body" !== b && !$9e3d383a4c02c1e5$var$Ef(a.type, a.memoizedProps));
    if (b && (b = $9e3d383a4c02c1e5$var$yg)) {
        if ($9e3d383a4c02c1e5$var$Dg(a)) throw $9e3d383a4c02c1e5$var$Hg(), Error($9e3d383a4c02c1e5$var$p(418));
        for(; b;)$9e3d383a4c02c1e5$var$Ag(a, b), b = $9e3d383a4c02c1e5$var$Lf(b.nextSibling);
    }
    $9e3d383a4c02c1e5$var$Fg(a);
    if (13 === a.tag) {
        a = a.memoizedState;
        a = null !== a ? a.dehydrated : null;
        if (!a) throw Error($9e3d383a4c02c1e5$var$p(317));
        a: {
            a = a.nextSibling;
            for(b = 0; a;){
                if (8 === a.nodeType) {
                    var c = a.data;
                    if ("/$" === c) {
                        if (0 === b) {
                            $9e3d383a4c02c1e5$var$yg = $9e3d383a4c02c1e5$var$Lf(a.nextSibling);
                            break a;
                        }
                        b--;
                    } else "$" !== c && "$!" !== c && "$?" !== c || b++;
                }
                a = a.nextSibling;
            }
            $9e3d383a4c02c1e5$var$yg = null;
        }
    } else $9e3d383a4c02c1e5$var$yg = $9e3d383a4c02c1e5$var$xg ? $9e3d383a4c02c1e5$var$Lf(a.stateNode.nextSibling) : null;
    return !0;
}
function $9e3d383a4c02c1e5$var$Hg() {
    for(var a = $9e3d383a4c02c1e5$var$yg; a;)a = $9e3d383a4c02c1e5$var$Lf(a.nextSibling);
}
function $9e3d383a4c02c1e5$var$Ig() {
    $9e3d383a4c02c1e5$var$yg = $9e3d383a4c02c1e5$var$xg = null;
    $9e3d383a4c02c1e5$var$I = !1;
}
function $9e3d383a4c02c1e5$var$Jg(a) {
    null === $9e3d383a4c02c1e5$var$zg ? $9e3d383a4c02c1e5$var$zg = [
        a
    ] : $9e3d383a4c02c1e5$var$zg.push(a);
}
var $9e3d383a4c02c1e5$var$Kg = $9e3d383a4c02c1e5$var$ua.ReactCurrentBatchConfig;
function $9e3d383a4c02c1e5$var$Lg(a, b, c) {
    a = c.ref;
    if (null !== a && "function" !== typeof a && "object" !== typeof a) {
        if (c._owner) {
            c = c._owner;
            if (c) {
                if (1 !== c.tag) throw Error($9e3d383a4c02c1e5$var$p(309));
                var d = c.stateNode;
            }
            if (!d) throw Error($9e3d383a4c02c1e5$var$p(147, a));
            var e = d, f = "" + a;
            if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === f) return b.ref;
            b = function(a) {
                var b = e.refs;
                null === a ? delete b[f] : b[f] = a;
            };
            b._stringRef = f;
            return b;
        }
        if ("string" !== typeof a) throw Error($9e3d383a4c02c1e5$var$p(284));
        if (!c._owner) throw Error($9e3d383a4c02c1e5$var$p(290, a));
    }
    return a;
}
function $9e3d383a4c02c1e5$var$Mg(a, b) {
    a = Object.prototype.toString.call(b);
    throw Error($9e3d383a4c02c1e5$var$p(31, "[object Object]" === a ? "object with keys {" + Object.keys(b).join(", ") + "}" : a));
}
function $9e3d383a4c02c1e5$var$Ng(a) {
    var b = a._init;
    return b(a._payload);
}
function $9e3d383a4c02c1e5$var$Og(a) {
    function b(b, c) {
        if (a) {
            var d = b.deletions;
            null === d ? (b.deletions = [
                c
            ], b.flags |= 16) : d.push(c);
        }
    }
    function c(c, d) {
        if (!a) return null;
        for(; null !== d;)b(c, d), d = d.sibling;
        return null;
    }
    function d(a, b) {
        for(a = new Map; null !== b;)null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;
        return a;
    }
    function e(a, b) {
        a = $9e3d383a4c02c1e5$var$Pg(a, b);
        a.index = 0;
        a.sibling = null;
        return a;
    }
    function f(b, c, d) {
        b.index = d;
        if (!a) return b.flags |= 1048576, c;
        d = b.alternate;
        if (null !== d) return d = d.index, d < c ? (b.flags |= 2, c) : d;
        b.flags |= 2;
        return c;
    }
    function g(b) {
        a && null === b.alternate && (b.flags |= 2);
        return b;
    }
    function h(a, b, c, d) {
        if (null === b || 6 !== b.tag) return b = $9e3d383a4c02c1e5$var$Qg(c, a.mode, d), b.return = a, b;
        b = e(b, c);
        b.return = a;
        return b;
    }
    function k(a, b, c, d) {
        var f = c.type;
        if (f === $9e3d383a4c02c1e5$var$ya) return m(a, b, c.props.children, d, c.key);
        if (null !== b && (b.elementType === f || "object" === typeof f && null !== f && f.$$typeof === $9e3d383a4c02c1e5$var$Ha && $9e3d383a4c02c1e5$var$Ng(f) === b.type)) return d = e(b, c.props), d.ref = $9e3d383a4c02c1e5$var$Lg(a, b, c), d.return = a, d;
        d = $9e3d383a4c02c1e5$var$Rg(c.type, c.key, c.props, null, a.mode, d);
        d.ref = $9e3d383a4c02c1e5$var$Lg(a, b, c);
        d.return = a;
        return d;
    }
    function l(a, b, c, d) {
        if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = $9e3d383a4c02c1e5$var$Sg(c, a.mode, d), b.return = a, b;
        b = e(b, c.children || []);
        b.return = a;
        return b;
    }
    function m(a, b, c, d, f) {
        if (null === b || 7 !== b.tag) return b = $9e3d383a4c02c1e5$var$Tg(c, a.mode, d, f), b.return = a, b;
        b = e(b, c);
        b.return = a;
        return b;
    }
    function q(a, b, c) {
        if ("string" === typeof b && "" !== b || "number" === typeof b) return b = $9e3d383a4c02c1e5$var$Qg("" + b, a.mode, c), b.return = a, b;
        if ("object" === typeof b && null !== b) {
            switch(b.$$typeof){
                case $9e3d383a4c02c1e5$var$va:
                    return c = $9e3d383a4c02c1e5$var$Rg(b.type, b.key, b.props, null, a.mode, c), c.ref = $9e3d383a4c02c1e5$var$Lg(a, null, b), c.return = a, c;
                case $9e3d383a4c02c1e5$var$wa:
                    return b = $9e3d383a4c02c1e5$var$Sg(b, a.mode, c), b.return = a, b;
                case $9e3d383a4c02c1e5$var$Ha:
                    var d = b._init;
                    return q(a, d(b._payload), c);
            }
            if ($9e3d383a4c02c1e5$var$eb(b) || $9e3d383a4c02c1e5$var$Ka(b)) return b = $9e3d383a4c02c1e5$var$Tg(b, a.mode, c, null), b.return = a, b;
            $9e3d383a4c02c1e5$var$Mg(a, b);
        }
        return null;
    }
    function r(a, b, c, d) {
        var e = null !== b ? b.key : null;
        if ("string" === typeof c && "" !== c || "number" === typeof c) return null !== e ? null : h(a, b, "" + c, d);
        if ("object" === typeof c && null !== c) {
            switch(c.$$typeof){
                case $9e3d383a4c02c1e5$var$va:
                    return c.key === e ? k(a, b, c, d) : null;
                case $9e3d383a4c02c1e5$var$wa:
                    return c.key === e ? l(a, b, c, d) : null;
                case $9e3d383a4c02c1e5$var$Ha:
                    return e = c._init, r(a, b, e(c._payload), d);
            }
            if ($9e3d383a4c02c1e5$var$eb(c) || $9e3d383a4c02c1e5$var$Ka(c)) return null !== e ? null : m(a, b, c, d, null);
            $9e3d383a4c02c1e5$var$Mg(a, c);
        }
        return null;
    }
    function y(a, b, c, d, e) {
        if ("string" === typeof d && "" !== d || "number" === typeof d) return a = a.get(c) || null, h(b, a, "" + d, e);
        if ("object" === typeof d && null !== d) {
            switch(d.$$typeof){
                case $9e3d383a4c02c1e5$var$va:
                    return a = a.get(null === d.key ? c : d.key) || null, k(b, a, d, e);
                case $9e3d383a4c02c1e5$var$wa:
                    return a = a.get(null === d.key ? c : d.key) || null, l(b, a, d, e);
                case $9e3d383a4c02c1e5$var$Ha:
                    var f = d._init;
                    return y(a, b, c, f(d._payload), e);
            }
            if ($9e3d383a4c02c1e5$var$eb(d) || $9e3d383a4c02c1e5$var$Ka(d)) return a = a.get(c) || null, m(b, a, d, e, null);
            $9e3d383a4c02c1e5$var$Mg(b, d);
        }
        return null;
    }
    function n(e, g, h, k) {
        for(var l = null, m = null, u = g, w = g = 0, x = null; null !== u && w < h.length; w++){
            u.index > w ? (x = u, u = null) : x = u.sibling;
            var n = r(e, u, h[w], k);
            if (null === n) {
                null === u && (u = x);
                break;
            }
            a && u && null === n.alternate && b(e, u);
            g = f(n, g, w);
            null === m ? l = n : m.sibling = n;
            m = n;
            u = x;
        }
        if (w === h.length) return c(e, u), $9e3d383a4c02c1e5$var$I && $9e3d383a4c02c1e5$var$tg(e, w), l;
        if (null === u) {
            for(; w < h.length; w++)u = q(e, h[w], k), null !== u && (g = f(u, g, w), null === m ? l = u : m.sibling = u, m = u);
            $9e3d383a4c02c1e5$var$I && $9e3d383a4c02c1e5$var$tg(e, w);
            return l;
        }
        for(u = d(e, u); w < h.length; w++)x = y(u, e, w, h[w], k), null !== x && (a && null !== x.alternate && u.delete(null === x.key ? w : x.key), g = f(x, g, w), null === m ? l = x : m.sibling = x, m = x);
        a && u.forEach(function(a) {
            return b(e, a);
        });
        $9e3d383a4c02c1e5$var$I && $9e3d383a4c02c1e5$var$tg(e, w);
        return l;
    }
    function t(e, g, h, k) {
        var l = $9e3d383a4c02c1e5$var$Ka(h);
        if ("function" !== typeof l) throw Error($9e3d383a4c02c1e5$var$p(150));
        h = l.call(h);
        if (null == h) throw Error($9e3d383a4c02c1e5$var$p(151));
        for(var u = l = null, m = g, w = g = 0, x = null, n = h.next(); null !== m && !n.done; w++, n = h.next()){
            m.index > w ? (x = m, m = null) : x = m.sibling;
            var t = r(e, m, n.value, k);
            if (null === t) {
                null === m && (m = x);
                break;
            }
            a && m && null === t.alternate && b(e, m);
            g = f(t, g, w);
            null === u ? l = t : u.sibling = t;
            u = t;
            m = x;
        }
        if (n.done) return c(e, m), $9e3d383a4c02c1e5$var$I && $9e3d383a4c02c1e5$var$tg(e, w), l;
        if (null === m) {
            for(; !n.done; w++, n = h.next())n = q(e, n.value, k), null !== n && (g = f(n, g, w), null === u ? l = n : u.sibling = n, u = n);
            $9e3d383a4c02c1e5$var$I && $9e3d383a4c02c1e5$var$tg(e, w);
            return l;
        }
        for(m = d(e, m); !n.done; w++, n = h.next())n = y(m, e, w, n.value, k), null !== n && (a && null !== n.alternate && m.delete(null === n.key ? w : n.key), g = f(n, g, w), null === u ? l = n : u.sibling = n, u = n);
        a && m.forEach(function(a) {
            return b(e, a);
        });
        $9e3d383a4c02c1e5$var$I && $9e3d383a4c02c1e5$var$tg(e, w);
        return l;
    }
    function J(a, d, f, h) {
        "object" === typeof f && null !== f && f.type === $9e3d383a4c02c1e5$var$ya && null === f.key && (f = f.props.children);
        if ("object" === typeof f && null !== f) {
            switch(f.$$typeof){
                case $9e3d383a4c02c1e5$var$va:
                    a: {
                        for(var k = f.key, l = d; null !== l;){
                            if (l.key === k) {
                                k = f.type;
                                if (k === $9e3d383a4c02c1e5$var$ya) {
                                    if (7 === l.tag) {
                                        c(a, l.sibling);
                                        d = e(l, f.props.children);
                                        d.return = a;
                                        a = d;
                                        break a;
                                    }
                                } else if (l.elementType === k || "object" === typeof k && null !== k && k.$$typeof === $9e3d383a4c02c1e5$var$Ha && $9e3d383a4c02c1e5$var$Ng(k) === l.type) {
                                    c(a, l.sibling);
                                    d = e(l, f.props);
                                    d.ref = $9e3d383a4c02c1e5$var$Lg(a, l, f);
                                    d.return = a;
                                    a = d;
                                    break a;
                                }
                                c(a, l);
                                break;
                            } else b(a, l);
                            l = l.sibling;
                        }
                        f.type === $9e3d383a4c02c1e5$var$ya ? (d = $9e3d383a4c02c1e5$var$Tg(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = $9e3d383a4c02c1e5$var$Rg(f.type, f.key, f.props, null, a.mode, h), h.ref = $9e3d383a4c02c1e5$var$Lg(a, d, f), h.return = a, a = h);
                    }
                    return g(a);
                case $9e3d383a4c02c1e5$var$wa:
                    a: {
                        for(l = f.key; null !== d;){
                            if (d.key === l) {
                                if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {
                                    c(a, d.sibling);
                                    d = e(d, f.children || []);
                                    d.return = a;
                                    a = d;
                                    break a;
                                } else {
                                    c(a, d);
                                    break;
                                }
                            } else b(a, d);
                            d = d.sibling;
                        }
                        d = $9e3d383a4c02c1e5$var$Sg(f, a.mode, h);
                        d.return = a;
                        a = d;
                    }
                    return g(a);
                case $9e3d383a4c02c1e5$var$Ha:
                    return l = f._init, J(a, d, l(f._payload), h);
            }
            if ($9e3d383a4c02c1e5$var$eb(f)) return n(a, d, f, h);
            if ($9e3d383a4c02c1e5$var$Ka(f)) return t(a, d, f, h);
            $9e3d383a4c02c1e5$var$Mg(a, f);
        }
        return "string" === typeof f && "" !== f || "number" === typeof f ? (f = "" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f), d.return = a, a = d) : (c(a, d), d = $9e3d383a4c02c1e5$var$Qg(f, a.mode, h), d.return = a, a = d), g(a)) : c(a, d);
    }
    return J;
}
var $9e3d383a4c02c1e5$var$Ug = $9e3d383a4c02c1e5$var$Og(!0), $9e3d383a4c02c1e5$var$Vg = $9e3d383a4c02c1e5$var$Og(!1), $9e3d383a4c02c1e5$var$Wg = $9e3d383a4c02c1e5$var$Uf(null), $9e3d383a4c02c1e5$var$Xg = null, $9e3d383a4c02c1e5$var$Yg = null, $9e3d383a4c02c1e5$var$Zg = null;
function $9e3d383a4c02c1e5$var$$g() {
    $9e3d383a4c02c1e5$var$Zg = $9e3d383a4c02c1e5$var$Yg = $9e3d383a4c02c1e5$var$Xg = null;
}
function $9e3d383a4c02c1e5$var$ah(a) {
    var b = $9e3d383a4c02c1e5$var$Wg.current;
    $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$Wg);
    a._currentValue = b;
}
function $9e3d383a4c02c1e5$var$bh(a, b, c) {
    for(; null !== a;){
        var d = a.alternate;
        (a.childLanes & b) !== b ? (a.childLanes |= b, null !== d && (d.childLanes |= b)) : null !== d && (d.childLanes & b) !== b && (d.childLanes |= b);
        if (a === c) break;
        a = a.return;
    }
}
function $9e3d383a4c02c1e5$var$ch(a, b) {
    $9e3d383a4c02c1e5$var$Xg = a;
    $9e3d383a4c02c1e5$var$Zg = $9e3d383a4c02c1e5$var$Yg = null;
    a = a.dependencies;
    null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && ($9e3d383a4c02c1e5$var$dh = !0), a.firstContext = null);
}
function $9e3d383a4c02c1e5$var$eh(a) {
    var b = a._currentValue;
    if ($9e3d383a4c02c1e5$var$Zg !== a) {
        if (a = {
            context: a,
            memoizedValue: b,
            next: null
        }, null === $9e3d383a4c02c1e5$var$Yg) {
            if (null === $9e3d383a4c02c1e5$var$Xg) throw Error($9e3d383a4c02c1e5$var$p(308));
            $9e3d383a4c02c1e5$var$Yg = a;
            $9e3d383a4c02c1e5$var$Xg.dependencies = {
                lanes: 0,
                firstContext: a
            };
        } else $9e3d383a4c02c1e5$var$Yg = $9e3d383a4c02c1e5$var$Yg.next = a;
    }
    return b;
}
var $9e3d383a4c02c1e5$var$fh = null;
function $9e3d383a4c02c1e5$var$gh(a) {
    null === $9e3d383a4c02c1e5$var$fh ? $9e3d383a4c02c1e5$var$fh = [
        a
    ] : $9e3d383a4c02c1e5$var$fh.push(a);
}
function $9e3d383a4c02c1e5$var$hh(a, b, c, d) {
    var e = b.interleaved;
    null === e ? (c.next = c, $9e3d383a4c02c1e5$var$gh(b)) : (c.next = e.next, e.next = c);
    b.interleaved = c;
    return $9e3d383a4c02c1e5$var$ih(a, d);
}
function $9e3d383a4c02c1e5$var$ih(a, b) {
    a.lanes |= b;
    var c = a.alternate;
    null !== c && (c.lanes |= b);
    c = a;
    for(a = a.return; null !== a;)a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a.return;
    return 3 === c.tag ? c.stateNode : null;
}
var $9e3d383a4c02c1e5$var$jh = !1;
function $9e3d383a4c02c1e5$var$kh(a) {
    a.updateQueue = {
        baseState: a.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
            pending: null,
            interleaved: null,
            lanes: 0
        },
        effects: null
    };
}
function $9e3d383a4c02c1e5$var$lh(a, b) {
    a = a.updateQueue;
    b.updateQueue === a && (b.updateQueue = {
        baseState: a.baseState,
        firstBaseUpdate: a.firstBaseUpdate,
        lastBaseUpdate: a.lastBaseUpdate,
        shared: a.shared,
        effects: a.effects
    });
}
function $9e3d383a4c02c1e5$var$mh(a, b) {
    return {
        eventTime: a,
        lane: b,
        tag: 0,
        payload: null,
        callback: null,
        next: null
    };
}
function $9e3d383a4c02c1e5$var$nh(a, b, c) {
    var d = a.updateQueue;
    if (null === d) return null;
    d = d.shared;
    if (0 !== ($9e3d383a4c02c1e5$var$K & 2)) {
        var e = d.pending;
        null === e ? b.next = b : (b.next = e.next, e.next = b);
        d.pending = b;
        return $9e3d383a4c02c1e5$var$ih(a, c);
    }
    e = d.interleaved;
    null === e ? (b.next = b, $9e3d383a4c02c1e5$var$gh(d)) : (b.next = e.next, e.next = b);
    d.interleaved = b;
    return $9e3d383a4c02c1e5$var$ih(a, c);
}
function $9e3d383a4c02c1e5$var$oh(a, b, c) {
    b = b.updateQueue;
    if (null !== b && (b = b.shared, 0 !== (c & 4194240))) {
        var d = b.lanes;
        d &= a.pendingLanes;
        c |= d;
        b.lanes = c;
        $9e3d383a4c02c1e5$var$Cc(a, c);
    }
}
function $9e3d383a4c02c1e5$var$ph(a, b) {
    var c = a.updateQueue, d = a.alternate;
    if (null !== d && (d = d.updateQueue, c === d)) {
        var e = null, f = null;
        c = c.firstBaseUpdate;
        if (null !== c) {
            do {
                var g = {
                    eventTime: c.eventTime,
                    lane: c.lane,
                    tag: c.tag,
                    payload: c.payload,
                    callback: c.callback,
                    next: null
                };
                null === f ? e = f = g : f = f.next = g;
                c = c.next;
            }while (null !== c);
            null === f ? e = f = b : f = f.next = b;
        } else e = f = b;
        c = {
            baseState: d.baseState,
            firstBaseUpdate: e,
            lastBaseUpdate: f,
            shared: d.shared,
            effects: d.effects
        };
        a.updateQueue = c;
        return;
    }
    a = c.lastBaseUpdate;
    null === a ? c.firstBaseUpdate = b : a.next = b;
    c.lastBaseUpdate = b;
}
function $9e3d383a4c02c1e5$var$qh(a, b, c, d) {
    var e = a.updateQueue;
    $9e3d383a4c02c1e5$var$jh = !1;
    var f = e.firstBaseUpdate, g = e.lastBaseUpdate, h = e.shared.pending;
    if (null !== h) {
        e.shared.pending = null;
        var k = h, l = k.next;
        k.next = null;
        null === g ? f = l : g.next = l;
        g = k;
        var m = a.alternate;
        null !== m && (m = m.updateQueue, h = m.lastBaseUpdate, h !== g && (null === h ? m.firstBaseUpdate = l : h.next = l, m.lastBaseUpdate = k));
    }
    if (null !== f) {
        var q = e.baseState;
        g = 0;
        m = l = k = null;
        h = f;
        do {
            var r = h.lane, y = h.eventTime;
            if ((d & r) === r) {
                null !== m && (m = m.next = {
                    eventTime: y,
                    lane: 0,
                    tag: h.tag,
                    payload: h.payload,
                    callback: h.callback,
                    next: null
                });
                a: {
                    var n = a, t = h;
                    r = b;
                    y = c;
                    switch(t.tag){
                        case 1:
                            n = t.payload;
                            if ("function" === typeof n) {
                                q = n.call(y, q, r);
                                break a;
                            }
                            q = n;
                            break a;
                        case 3:
                            n.flags = n.flags & -65537 | 128;
                        case 0:
                            n = t.payload;
                            r = "function" === typeof n ? n.call(y, q, r) : n;
                            if (null === r || void 0 === r) break a;
                            q = $9e3d383a4c02c1e5$var$A({}, q, r);
                            break a;
                        case 2:
                            $9e3d383a4c02c1e5$var$jh = !0;
                    }
                }
                null !== h.callback && 0 !== h.lane && (a.flags |= 64, r = e.effects, null === r ? e.effects = [
                    h
                ] : r.push(h));
            } else y = {
                eventTime: y,
                lane: r,
                tag: h.tag,
                payload: h.payload,
                callback: h.callback,
                next: null
            }, null === m ? (l = m = y, k = q) : m = m.next = y, g |= r;
            h = h.next;
            if (null === h) {
                if (h = e.shared.pending, null === h) break;
                else r = h, h = r.next, r.next = null, e.lastBaseUpdate = r, e.shared.pending = null;
            }
        }while (1);
        null === m && (k = q);
        e.baseState = k;
        e.firstBaseUpdate = l;
        e.lastBaseUpdate = m;
        b = e.shared.interleaved;
        if (null !== b) {
            e = b;
            do g |= e.lane, e = e.next;
            while (e !== b);
        } else null === f && (e.shared.lanes = 0);
        $9e3d383a4c02c1e5$var$rh |= g;
        a.lanes = g;
        a.memoizedState = q;
    }
}
function $9e3d383a4c02c1e5$var$sh(a, b, c) {
    a = b.effects;
    b.effects = null;
    if (null !== a) for(b = 0; b < a.length; b++){
        var d = a[b], e = d.callback;
        if (null !== e) {
            d.callback = null;
            d = c;
            if ("function" !== typeof e) throw Error($9e3d383a4c02c1e5$var$p(191, e));
            e.call(d);
        }
    }
}
var $9e3d383a4c02c1e5$var$th = {}, $9e3d383a4c02c1e5$var$uh = $9e3d383a4c02c1e5$var$Uf($9e3d383a4c02c1e5$var$th), $9e3d383a4c02c1e5$var$vh = $9e3d383a4c02c1e5$var$Uf($9e3d383a4c02c1e5$var$th), $9e3d383a4c02c1e5$var$wh = $9e3d383a4c02c1e5$var$Uf($9e3d383a4c02c1e5$var$th);
function $9e3d383a4c02c1e5$var$xh(a) {
    if (a === $9e3d383a4c02c1e5$var$th) throw Error($9e3d383a4c02c1e5$var$p(174));
    return a;
}
function $9e3d383a4c02c1e5$var$yh(a, b) {
    $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$wh, b);
    $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$vh, a);
    $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$uh, $9e3d383a4c02c1e5$var$th);
    a = b.nodeType;
    switch(a){
        case 9:
        case 11:
            b = (b = b.documentElement) ? b.namespaceURI : $9e3d383a4c02c1e5$var$lb(null, "");
            break;
        default:
            a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = $9e3d383a4c02c1e5$var$lb(b, a);
    }
    $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$uh);
    $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$uh, b);
}
function $9e3d383a4c02c1e5$var$zh() {
    $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$uh);
    $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$vh);
    $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$wh);
}
function $9e3d383a4c02c1e5$var$Ah(a) {
    $9e3d383a4c02c1e5$var$xh($9e3d383a4c02c1e5$var$wh.current);
    var b = $9e3d383a4c02c1e5$var$xh($9e3d383a4c02c1e5$var$uh.current);
    var c = $9e3d383a4c02c1e5$var$lb(b, a.type);
    b !== c && ($9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$vh, a), $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$uh, c));
}
function $9e3d383a4c02c1e5$var$Bh(a) {
    $9e3d383a4c02c1e5$var$vh.current === a && ($9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$uh), $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$vh));
}
var $9e3d383a4c02c1e5$var$L = $9e3d383a4c02c1e5$var$Uf(0);
function $9e3d383a4c02c1e5$var$Ch(a) {
    for(var b = a; null !== b;){
        if (13 === b.tag) {
            var c = b.memoizedState;
            if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;
        } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
            if (0 !== (b.flags & 128)) return b;
        } else if (null !== b.child) {
            b.child.return = b;
            b = b.child;
            continue;
        }
        if (b === a) break;
        for(; null === b.sibling;){
            if (null === b.return || b.return === a) return null;
            b = b.return;
        }
        b.sibling.return = b.return;
        b = b.sibling;
    }
    return null;
}
var $9e3d383a4c02c1e5$var$Dh = [];
function $9e3d383a4c02c1e5$var$Eh() {
    for(var a = 0; a < $9e3d383a4c02c1e5$var$Dh.length; a++)$9e3d383a4c02c1e5$var$Dh[a]._workInProgressVersionPrimary = null;
    $9e3d383a4c02c1e5$var$Dh.length = 0;
}
var $9e3d383a4c02c1e5$var$Fh = $9e3d383a4c02c1e5$var$ua.ReactCurrentDispatcher, $9e3d383a4c02c1e5$var$Gh = $9e3d383a4c02c1e5$var$ua.ReactCurrentBatchConfig, $9e3d383a4c02c1e5$var$Hh = 0, $9e3d383a4c02c1e5$var$M = null, $9e3d383a4c02c1e5$var$N = null, $9e3d383a4c02c1e5$var$O = null, $9e3d383a4c02c1e5$var$Ih = !1, $9e3d383a4c02c1e5$var$Jh = !1, $9e3d383a4c02c1e5$var$Kh = 0, $9e3d383a4c02c1e5$var$Lh = 0;
function $9e3d383a4c02c1e5$var$P() {
    throw Error($9e3d383a4c02c1e5$var$p(321));
}
function $9e3d383a4c02c1e5$var$Mh(a, b) {
    if (null === b) return !1;
    for(var c = 0; c < b.length && c < a.length; c++)if (!$9e3d383a4c02c1e5$var$He(a[c], b[c])) return !1;
    return !0;
}
function $9e3d383a4c02c1e5$var$Nh(a, b, c, d, e, f) {
    $9e3d383a4c02c1e5$var$Hh = f;
    $9e3d383a4c02c1e5$var$M = b;
    b.memoizedState = null;
    b.updateQueue = null;
    b.lanes = 0;
    $9e3d383a4c02c1e5$var$Fh.current = null === a || null === a.memoizedState ? $9e3d383a4c02c1e5$var$Oh : $9e3d383a4c02c1e5$var$Ph;
    a = c(d, e);
    if ($9e3d383a4c02c1e5$var$Jh) {
        f = 0;
        do {
            $9e3d383a4c02c1e5$var$Jh = !1;
            $9e3d383a4c02c1e5$var$Kh = 0;
            if (25 <= f) throw Error($9e3d383a4c02c1e5$var$p(301));
            f += 1;
            $9e3d383a4c02c1e5$var$O = $9e3d383a4c02c1e5$var$N = null;
            b.updateQueue = null;
            $9e3d383a4c02c1e5$var$Fh.current = $9e3d383a4c02c1e5$var$Qh;
            a = c(d, e);
        }while ($9e3d383a4c02c1e5$var$Jh);
    }
    $9e3d383a4c02c1e5$var$Fh.current = $9e3d383a4c02c1e5$var$Rh;
    b = null !== $9e3d383a4c02c1e5$var$N && null !== $9e3d383a4c02c1e5$var$N.next;
    $9e3d383a4c02c1e5$var$Hh = 0;
    $9e3d383a4c02c1e5$var$O = $9e3d383a4c02c1e5$var$N = $9e3d383a4c02c1e5$var$M = null;
    $9e3d383a4c02c1e5$var$Ih = !1;
    if (b) throw Error($9e3d383a4c02c1e5$var$p(300));
    return a;
}
function $9e3d383a4c02c1e5$var$Sh() {
    var a = 0 !== $9e3d383a4c02c1e5$var$Kh;
    $9e3d383a4c02c1e5$var$Kh = 0;
    return a;
}
function $9e3d383a4c02c1e5$var$Th() {
    var a = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
    };
    null === $9e3d383a4c02c1e5$var$O ? $9e3d383a4c02c1e5$var$M.memoizedState = $9e3d383a4c02c1e5$var$O = a : $9e3d383a4c02c1e5$var$O = $9e3d383a4c02c1e5$var$O.next = a;
    return $9e3d383a4c02c1e5$var$O;
}
function $9e3d383a4c02c1e5$var$Uh() {
    if (null === $9e3d383a4c02c1e5$var$N) {
        var a = $9e3d383a4c02c1e5$var$M.alternate;
        a = null !== a ? a.memoizedState : null;
    } else a = $9e3d383a4c02c1e5$var$N.next;
    var b = null === $9e3d383a4c02c1e5$var$O ? $9e3d383a4c02c1e5$var$M.memoizedState : $9e3d383a4c02c1e5$var$O.next;
    if (null !== b) $9e3d383a4c02c1e5$var$O = b, $9e3d383a4c02c1e5$var$N = a;
    else {
        if (null === a) throw Error($9e3d383a4c02c1e5$var$p(310));
        $9e3d383a4c02c1e5$var$N = a;
        a = {
            memoizedState: $9e3d383a4c02c1e5$var$N.memoizedState,
            baseState: $9e3d383a4c02c1e5$var$N.baseState,
            baseQueue: $9e3d383a4c02c1e5$var$N.baseQueue,
            queue: $9e3d383a4c02c1e5$var$N.queue,
            next: null
        };
        null === $9e3d383a4c02c1e5$var$O ? $9e3d383a4c02c1e5$var$M.memoizedState = $9e3d383a4c02c1e5$var$O = a : $9e3d383a4c02c1e5$var$O = $9e3d383a4c02c1e5$var$O.next = a;
    }
    return $9e3d383a4c02c1e5$var$O;
}
function $9e3d383a4c02c1e5$var$Vh(a, b) {
    return "function" === typeof b ? b(a) : b;
}
function $9e3d383a4c02c1e5$var$Wh(a) {
    var b = $9e3d383a4c02c1e5$var$Uh(), c = b.queue;
    if (null === c) throw Error($9e3d383a4c02c1e5$var$p(311));
    c.lastRenderedReducer = a;
    var d = $9e3d383a4c02c1e5$var$N, e = d.baseQueue, f = c.pending;
    if (null !== f) {
        if (null !== e) {
            var g = e.next;
            e.next = f.next;
            f.next = g;
        }
        d.baseQueue = e = f;
        c.pending = null;
    }
    if (null !== e) {
        f = e.next;
        d = d.baseState;
        var h = g = null, k = null, l = f;
        do {
            var m = l.lane;
            if (($9e3d383a4c02c1e5$var$Hh & m) === m) null !== k && (k = k.next = {
                lane: 0,
                action: l.action,
                hasEagerState: l.hasEagerState,
                eagerState: l.eagerState,
                next: null
            }), d = l.hasEagerState ? l.eagerState : a(d, l.action);
            else {
                var q = {
                    lane: m,
                    action: l.action,
                    hasEagerState: l.hasEagerState,
                    eagerState: l.eagerState,
                    next: null
                };
                null === k ? (h = k = q, g = d) : k = k.next = q;
                $9e3d383a4c02c1e5$var$M.lanes |= m;
                $9e3d383a4c02c1e5$var$rh |= m;
            }
            l = l.next;
        }while (null !== l && l !== f);
        null === k ? g = d : k.next = h;
        $9e3d383a4c02c1e5$var$He(d, b.memoizedState) || ($9e3d383a4c02c1e5$var$dh = !0);
        b.memoizedState = d;
        b.baseState = g;
        b.baseQueue = k;
        c.lastRenderedState = d;
    }
    a = c.interleaved;
    if (null !== a) {
        e = a;
        do f = e.lane, $9e3d383a4c02c1e5$var$M.lanes |= f, $9e3d383a4c02c1e5$var$rh |= f, e = e.next;
        while (e !== a);
    } else null === e && (c.lanes = 0);
    return [
        b.memoizedState,
        c.dispatch
    ];
}
function $9e3d383a4c02c1e5$var$Xh(a) {
    var b = $9e3d383a4c02c1e5$var$Uh(), c = b.queue;
    if (null === c) throw Error($9e3d383a4c02c1e5$var$p(311));
    c.lastRenderedReducer = a;
    var d = c.dispatch, e = c.pending, f = b.memoizedState;
    if (null !== e) {
        c.pending = null;
        var g = e = e.next;
        do f = a(f, g.action), g = g.next;
        while (g !== e);
        $9e3d383a4c02c1e5$var$He(f, b.memoizedState) || ($9e3d383a4c02c1e5$var$dh = !0);
        b.memoizedState = f;
        null === b.baseQueue && (b.baseState = f);
        c.lastRenderedState = f;
    }
    return [
        f,
        d
    ];
}
function $9e3d383a4c02c1e5$var$Yh() {}
function $9e3d383a4c02c1e5$var$Zh(a, b) {
    var c = $9e3d383a4c02c1e5$var$M, d = $9e3d383a4c02c1e5$var$Uh(), e = b(), f = !$9e3d383a4c02c1e5$var$He(d.memoizedState, e);
    f && (d.memoizedState = e, $9e3d383a4c02c1e5$var$dh = !0);
    d = d.queue;
    $9e3d383a4c02c1e5$var$$h($9e3d383a4c02c1e5$var$ai.bind(null, c, d, a), [
        a
    ]);
    if (d.getSnapshot !== b || f || null !== $9e3d383a4c02c1e5$var$O && $9e3d383a4c02c1e5$var$O.memoizedState.tag & 1) {
        c.flags |= 2048;
        $9e3d383a4c02c1e5$var$bi(9, $9e3d383a4c02c1e5$var$ci.bind(null, c, d, e, b), void 0, null);
        if (null === $9e3d383a4c02c1e5$var$Q) throw Error($9e3d383a4c02c1e5$var$p(349));
        0 !== ($9e3d383a4c02c1e5$var$Hh & 30) || $9e3d383a4c02c1e5$var$di(c, b, e);
    }
    return e;
}
function $9e3d383a4c02c1e5$var$di(a, b, c) {
    a.flags |= 16384;
    a = {
        getSnapshot: b,
        value: c
    };
    b = $9e3d383a4c02c1e5$var$M.updateQueue;
    null === b ? (b = {
        lastEffect: null,
        stores: null
    }, $9e3d383a4c02c1e5$var$M.updateQueue = b, b.stores = [
        a
    ]) : (c = b.stores, null === c ? b.stores = [
        a
    ] : c.push(a));
}
function $9e3d383a4c02c1e5$var$ci(a, b, c, d) {
    b.value = c;
    b.getSnapshot = d;
    $9e3d383a4c02c1e5$var$ei(b) && $9e3d383a4c02c1e5$var$fi(a);
}
function $9e3d383a4c02c1e5$var$ai(a, b, c) {
    return c(function() {
        $9e3d383a4c02c1e5$var$ei(b) && $9e3d383a4c02c1e5$var$fi(a);
    });
}
function $9e3d383a4c02c1e5$var$ei(a) {
    var b = a.getSnapshot;
    a = a.value;
    try {
        var c = b();
        return !$9e3d383a4c02c1e5$var$He(a, c);
    } catch (d) {
        return !0;
    }
}
function $9e3d383a4c02c1e5$var$fi(a) {
    var b = $9e3d383a4c02c1e5$var$ih(a, 1);
    null !== b && $9e3d383a4c02c1e5$var$gi(b, a, 1, -1);
}
function $9e3d383a4c02c1e5$var$hi(a) {
    var b = $9e3d383a4c02c1e5$var$Th();
    "function" === typeof a && (a = a());
    b.memoizedState = b.baseState = a;
    a = {
        pending: null,
        interleaved: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: $9e3d383a4c02c1e5$var$Vh,
        lastRenderedState: a
    };
    b.queue = a;
    a = a.dispatch = $9e3d383a4c02c1e5$var$ii.bind(null, $9e3d383a4c02c1e5$var$M, a);
    return [
        b.memoizedState,
        a
    ];
}
function $9e3d383a4c02c1e5$var$bi(a, b, c, d) {
    a = {
        tag: a,
        create: b,
        destroy: c,
        deps: d,
        next: null
    };
    b = $9e3d383a4c02c1e5$var$M.updateQueue;
    null === b ? (b = {
        lastEffect: null,
        stores: null
    }, $9e3d383a4c02c1e5$var$M.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));
    return a;
}
function $9e3d383a4c02c1e5$var$ji() {
    return $9e3d383a4c02c1e5$var$Uh().memoizedState;
}
function $9e3d383a4c02c1e5$var$ki(a, b, c, d) {
    var e = $9e3d383a4c02c1e5$var$Th();
    $9e3d383a4c02c1e5$var$M.flags |= a;
    e.memoizedState = $9e3d383a4c02c1e5$var$bi(1 | b, c, void 0, void 0 === d ? null : d);
}
function $9e3d383a4c02c1e5$var$li(a, b, c, d) {
    var e = $9e3d383a4c02c1e5$var$Uh();
    d = void 0 === d ? null : d;
    var f = void 0;
    if (null !== $9e3d383a4c02c1e5$var$N) {
        var g = $9e3d383a4c02c1e5$var$N.memoizedState;
        f = g.destroy;
        if (null !== d && $9e3d383a4c02c1e5$var$Mh(d, g.deps)) {
            e.memoizedState = $9e3d383a4c02c1e5$var$bi(b, c, f, d);
            return;
        }
    }
    $9e3d383a4c02c1e5$var$M.flags |= a;
    e.memoizedState = $9e3d383a4c02c1e5$var$bi(1 | b, c, f, d);
}
function $9e3d383a4c02c1e5$var$mi(a, b) {
    return $9e3d383a4c02c1e5$var$ki(8390656, 8, a, b);
}
function $9e3d383a4c02c1e5$var$$h(a, b) {
    return $9e3d383a4c02c1e5$var$li(2048, 8, a, b);
}
function $9e3d383a4c02c1e5$var$ni(a, b) {
    return $9e3d383a4c02c1e5$var$li(4, 2, a, b);
}
function $9e3d383a4c02c1e5$var$oi(a, b) {
    return $9e3d383a4c02c1e5$var$li(4, 4, a, b);
}
function $9e3d383a4c02c1e5$var$pi(a, b) {
    if ("function" === typeof b) return a = a(), b(a), function() {
        b(null);
    };
    if (null !== b && void 0 !== b) return a = a(), b.current = a, function() {
        b.current = null;
    };
}
function $9e3d383a4c02c1e5$var$qi(a, b, c) {
    c = null !== c && void 0 !== c ? c.concat([
        a
    ]) : null;
    return $9e3d383a4c02c1e5$var$li(4, 4, $9e3d383a4c02c1e5$var$pi.bind(null, b, a), c);
}
function $9e3d383a4c02c1e5$var$ri() {}
function $9e3d383a4c02c1e5$var$si(a, b) {
    var c = $9e3d383a4c02c1e5$var$Uh();
    b = void 0 === b ? null : b;
    var d = c.memoizedState;
    if (null !== d && null !== b && $9e3d383a4c02c1e5$var$Mh(b, d[1])) return d[0];
    c.memoizedState = [
        a,
        b
    ];
    return a;
}
function $9e3d383a4c02c1e5$var$ti(a, b) {
    var c = $9e3d383a4c02c1e5$var$Uh();
    b = void 0 === b ? null : b;
    var d = c.memoizedState;
    if (null !== d && null !== b && $9e3d383a4c02c1e5$var$Mh(b, d[1])) return d[0];
    a = a();
    c.memoizedState = [
        a,
        b
    ];
    return a;
}
function $9e3d383a4c02c1e5$var$ui(a, b, c) {
    if (0 === ($9e3d383a4c02c1e5$var$Hh & 21)) return a.baseState && (a.baseState = !1, $9e3d383a4c02c1e5$var$dh = !0), a.memoizedState = c;
    $9e3d383a4c02c1e5$var$He(c, b) || (c = $9e3d383a4c02c1e5$var$yc(), $9e3d383a4c02c1e5$var$M.lanes |= c, $9e3d383a4c02c1e5$var$rh |= c, a.baseState = !0);
    return b;
}
function $9e3d383a4c02c1e5$var$vi(a, b) {
    var c = $9e3d383a4c02c1e5$var$C;
    $9e3d383a4c02c1e5$var$C = 0 !== c && 4 > c ? c : 4;
    a(!0);
    var d = $9e3d383a4c02c1e5$var$Gh.transition;
    $9e3d383a4c02c1e5$var$Gh.transition = {};
    try {
        a(!1), b();
    } finally{
        $9e3d383a4c02c1e5$var$C = c, $9e3d383a4c02c1e5$var$Gh.transition = d;
    }
}
function $9e3d383a4c02c1e5$var$wi() {
    return $9e3d383a4c02c1e5$var$Uh().memoizedState;
}
function $9e3d383a4c02c1e5$var$xi(a, b, c) {
    var d = $9e3d383a4c02c1e5$var$yi(a);
    c = {
        lane: d,
        action: c,
        hasEagerState: !1,
        eagerState: null,
        next: null
    };
    if ($9e3d383a4c02c1e5$var$zi(a)) $9e3d383a4c02c1e5$var$Ai(b, c);
    else if (c = $9e3d383a4c02c1e5$var$hh(a, b, c, d), null !== c) {
        var e = $9e3d383a4c02c1e5$var$R();
        $9e3d383a4c02c1e5$var$gi(c, a, d, e);
        $9e3d383a4c02c1e5$var$Bi(c, b, d);
    }
}
function $9e3d383a4c02c1e5$var$ii(a, b, c) {
    var d = $9e3d383a4c02c1e5$var$yi(a), e = {
        lane: d,
        action: c,
        hasEagerState: !1,
        eagerState: null,
        next: null
    };
    if ($9e3d383a4c02c1e5$var$zi(a)) $9e3d383a4c02c1e5$var$Ai(b, e);
    else {
        var f = a.alternate;
        if (0 === a.lanes && (null === f || 0 === f.lanes) && (f = b.lastRenderedReducer, null !== f)) try {
            var g = b.lastRenderedState, h = f(g, c);
            e.hasEagerState = !0;
            e.eagerState = h;
            if ($9e3d383a4c02c1e5$var$He(h, g)) {
                var k = b.interleaved;
                null === k ? (e.next = e, $9e3d383a4c02c1e5$var$gh(b)) : (e.next = k.next, k.next = e);
                b.interleaved = e;
                return;
            }
        } catch (l) {} finally{}
        c = $9e3d383a4c02c1e5$var$hh(a, b, e, d);
        null !== c && (e = $9e3d383a4c02c1e5$var$R(), $9e3d383a4c02c1e5$var$gi(c, a, d, e), $9e3d383a4c02c1e5$var$Bi(c, b, d));
    }
}
function $9e3d383a4c02c1e5$var$zi(a) {
    var b = a.alternate;
    return a === $9e3d383a4c02c1e5$var$M || null !== b && b === $9e3d383a4c02c1e5$var$M;
}
function $9e3d383a4c02c1e5$var$Ai(a, b) {
    $9e3d383a4c02c1e5$var$Jh = $9e3d383a4c02c1e5$var$Ih = !0;
    var c = a.pending;
    null === c ? b.next = b : (b.next = c.next, c.next = b);
    a.pending = b;
}
function $9e3d383a4c02c1e5$var$Bi(a, b, c) {
    if (0 !== (c & 4194240)) {
        var d = b.lanes;
        d &= a.pendingLanes;
        c |= d;
        b.lanes = c;
        $9e3d383a4c02c1e5$var$Cc(a, c);
    }
}
var $9e3d383a4c02c1e5$var$Rh = {
    readContext: $9e3d383a4c02c1e5$var$eh,
    useCallback: $9e3d383a4c02c1e5$var$P,
    useContext: $9e3d383a4c02c1e5$var$P,
    useEffect: $9e3d383a4c02c1e5$var$P,
    useImperativeHandle: $9e3d383a4c02c1e5$var$P,
    useInsertionEffect: $9e3d383a4c02c1e5$var$P,
    useLayoutEffect: $9e3d383a4c02c1e5$var$P,
    useMemo: $9e3d383a4c02c1e5$var$P,
    useReducer: $9e3d383a4c02c1e5$var$P,
    useRef: $9e3d383a4c02c1e5$var$P,
    useState: $9e3d383a4c02c1e5$var$P,
    useDebugValue: $9e3d383a4c02c1e5$var$P,
    useDeferredValue: $9e3d383a4c02c1e5$var$P,
    useTransition: $9e3d383a4c02c1e5$var$P,
    useMutableSource: $9e3d383a4c02c1e5$var$P,
    useSyncExternalStore: $9e3d383a4c02c1e5$var$P,
    useId: $9e3d383a4c02c1e5$var$P,
    unstable_isNewReconciler: !1
}, $9e3d383a4c02c1e5$var$Oh = {
    readContext: $9e3d383a4c02c1e5$var$eh,
    useCallback: function(a, b) {
        $9e3d383a4c02c1e5$var$Th().memoizedState = [
            a,
            void 0 === b ? null : b
        ];
        return a;
    },
    useContext: $9e3d383a4c02c1e5$var$eh,
    useEffect: $9e3d383a4c02c1e5$var$mi,
    useImperativeHandle: function(a, b, c) {
        c = null !== c && void 0 !== c ? c.concat([
            a
        ]) : null;
        return $9e3d383a4c02c1e5$var$ki(4194308, 4, $9e3d383a4c02c1e5$var$pi.bind(null, b, a), c);
    },
    useLayoutEffect: function(a, b) {
        return $9e3d383a4c02c1e5$var$ki(4194308, 4, a, b);
    },
    useInsertionEffect: function(a, b) {
        return $9e3d383a4c02c1e5$var$ki(4, 2, a, b);
    },
    useMemo: function(a, b) {
        var c = $9e3d383a4c02c1e5$var$Th();
        b = void 0 === b ? null : b;
        a = a();
        c.memoizedState = [
            a,
            b
        ];
        return a;
    },
    useReducer: function(a, b, c) {
        var d = $9e3d383a4c02c1e5$var$Th();
        b = void 0 !== c ? c(b) : b;
        d.memoizedState = d.baseState = b;
        a = {
            pending: null,
            interleaved: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: a,
            lastRenderedState: b
        };
        d.queue = a;
        a = a.dispatch = $9e3d383a4c02c1e5$var$xi.bind(null, $9e3d383a4c02c1e5$var$M, a);
        return [
            d.memoizedState,
            a
        ];
    },
    useRef: function(a) {
        var b = $9e3d383a4c02c1e5$var$Th();
        a = {
            current: a
        };
        return b.memoizedState = a;
    },
    useState: $9e3d383a4c02c1e5$var$hi,
    useDebugValue: $9e3d383a4c02c1e5$var$ri,
    useDeferredValue: function(a) {
        return $9e3d383a4c02c1e5$var$Th().memoizedState = a;
    },
    useTransition: function() {
        var a = $9e3d383a4c02c1e5$var$hi(!1), b = a[0];
        a = $9e3d383a4c02c1e5$var$vi.bind(null, a[1]);
        $9e3d383a4c02c1e5$var$Th().memoizedState = a;
        return [
            b,
            a
        ];
    },
    useMutableSource: function() {},
    useSyncExternalStore: function(a, b, c) {
        var d = $9e3d383a4c02c1e5$var$M, e = $9e3d383a4c02c1e5$var$Th();
        if ($9e3d383a4c02c1e5$var$I) {
            if (void 0 === c) throw Error($9e3d383a4c02c1e5$var$p(407));
            c = c();
        } else {
            c = b();
            if (null === $9e3d383a4c02c1e5$var$Q) throw Error($9e3d383a4c02c1e5$var$p(349));
            0 !== ($9e3d383a4c02c1e5$var$Hh & 30) || $9e3d383a4c02c1e5$var$di(d, b, c);
        }
        e.memoizedState = c;
        var f = {
            value: c,
            getSnapshot: b
        };
        e.queue = f;
        $9e3d383a4c02c1e5$var$mi($9e3d383a4c02c1e5$var$ai.bind(null, d, f, a), [
            a
        ]);
        d.flags |= 2048;
        $9e3d383a4c02c1e5$var$bi(9, $9e3d383a4c02c1e5$var$ci.bind(null, d, f, c, b), void 0, null);
        return c;
    },
    useId: function() {
        var a = $9e3d383a4c02c1e5$var$Th(), b = $9e3d383a4c02c1e5$var$Q.identifierPrefix;
        if ($9e3d383a4c02c1e5$var$I) {
            var c = $9e3d383a4c02c1e5$var$sg;
            var d = $9e3d383a4c02c1e5$var$rg;
            c = (d & ~(1 << 32 - $9e3d383a4c02c1e5$var$oc(d) - 1)).toString(32) + c;
            b = ":" + b + "R" + c;
            c = $9e3d383a4c02c1e5$var$Kh++;
            0 < c && (b += "H" + c.toString(32));
            b += ":";
        } else c = $9e3d383a4c02c1e5$var$Lh++, b = ":" + b + "r" + c.toString(32) + ":";
        return a.memoizedState = b;
    },
    unstable_isNewReconciler: !1
}, $9e3d383a4c02c1e5$var$Ph = {
    readContext: $9e3d383a4c02c1e5$var$eh,
    useCallback: $9e3d383a4c02c1e5$var$si,
    useContext: $9e3d383a4c02c1e5$var$eh,
    useEffect: $9e3d383a4c02c1e5$var$$h,
    useImperativeHandle: $9e3d383a4c02c1e5$var$qi,
    useInsertionEffect: $9e3d383a4c02c1e5$var$ni,
    useLayoutEffect: $9e3d383a4c02c1e5$var$oi,
    useMemo: $9e3d383a4c02c1e5$var$ti,
    useReducer: $9e3d383a4c02c1e5$var$Wh,
    useRef: $9e3d383a4c02c1e5$var$ji,
    useState: function() {
        return $9e3d383a4c02c1e5$var$Wh($9e3d383a4c02c1e5$var$Vh);
    },
    useDebugValue: $9e3d383a4c02c1e5$var$ri,
    useDeferredValue: function(a) {
        var b = $9e3d383a4c02c1e5$var$Uh();
        return $9e3d383a4c02c1e5$var$ui(b, $9e3d383a4c02c1e5$var$N.memoizedState, a);
    },
    useTransition: function() {
        var a = $9e3d383a4c02c1e5$var$Wh($9e3d383a4c02c1e5$var$Vh)[0], b = $9e3d383a4c02c1e5$var$Uh().memoizedState;
        return [
            a,
            b
        ];
    },
    useMutableSource: $9e3d383a4c02c1e5$var$Yh,
    useSyncExternalStore: $9e3d383a4c02c1e5$var$Zh,
    useId: $9e3d383a4c02c1e5$var$wi,
    unstable_isNewReconciler: !1
}, $9e3d383a4c02c1e5$var$Qh = {
    readContext: $9e3d383a4c02c1e5$var$eh,
    useCallback: $9e3d383a4c02c1e5$var$si,
    useContext: $9e3d383a4c02c1e5$var$eh,
    useEffect: $9e3d383a4c02c1e5$var$$h,
    useImperativeHandle: $9e3d383a4c02c1e5$var$qi,
    useInsertionEffect: $9e3d383a4c02c1e5$var$ni,
    useLayoutEffect: $9e3d383a4c02c1e5$var$oi,
    useMemo: $9e3d383a4c02c1e5$var$ti,
    useReducer: $9e3d383a4c02c1e5$var$Xh,
    useRef: $9e3d383a4c02c1e5$var$ji,
    useState: function() {
        return $9e3d383a4c02c1e5$var$Xh($9e3d383a4c02c1e5$var$Vh);
    },
    useDebugValue: $9e3d383a4c02c1e5$var$ri,
    useDeferredValue: function(a) {
        var b = $9e3d383a4c02c1e5$var$Uh();
        return null === $9e3d383a4c02c1e5$var$N ? b.memoizedState = a : $9e3d383a4c02c1e5$var$ui(b, $9e3d383a4c02c1e5$var$N.memoizedState, a);
    },
    useTransition: function() {
        var a = $9e3d383a4c02c1e5$var$Xh($9e3d383a4c02c1e5$var$Vh)[0], b = $9e3d383a4c02c1e5$var$Uh().memoizedState;
        return [
            a,
            b
        ];
    },
    useMutableSource: $9e3d383a4c02c1e5$var$Yh,
    useSyncExternalStore: $9e3d383a4c02c1e5$var$Zh,
    useId: $9e3d383a4c02c1e5$var$wi,
    unstable_isNewReconciler: !1
};
function $9e3d383a4c02c1e5$var$Ci(a, b) {
    if (a && a.defaultProps) {
        b = $9e3d383a4c02c1e5$var$A({}, b);
        a = a.defaultProps;
        for(var c in a)void 0 === b[c] && (b[c] = a[c]);
        return b;
    }
    return b;
}
function $9e3d383a4c02c1e5$var$Di(a, b, c, d) {
    b = a.memoizedState;
    c = c(d, b);
    c = null === c || void 0 === c ? b : $9e3d383a4c02c1e5$var$A({}, b, c);
    a.memoizedState = c;
    0 === a.lanes && (a.updateQueue.baseState = c);
}
var $9e3d383a4c02c1e5$var$Ei = {
    isMounted: function(a) {
        return (a = a._reactInternals) ? $9e3d383a4c02c1e5$var$Vb(a) === a : !1;
    },
    enqueueSetState: function(a, b, c) {
        a = a._reactInternals;
        var d = $9e3d383a4c02c1e5$var$R(), e = $9e3d383a4c02c1e5$var$yi(a), f = $9e3d383a4c02c1e5$var$mh(d, e);
        f.payload = b;
        void 0 !== c && null !== c && (f.callback = c);
        b = $9e3d383a4c02c1e5$var$nh(a, f, e);
        null !== b && ($9e3d383a4c02c1e5$var$gi(b, a, e, d), $9e3d383a4c02c1e5$var$oh(b, a, e));
    },
    enqueueReplaceState: function(a, b, c) {
        a = a._reactInternals;
        var d = $9e3d383a4c02c1e5$var$R(), e = $9e3d383a4c02c1e5$var$yi(a), f = $9e3d383a4c02c1e5$var$mh(d, e);
        f.tag = 1;
        f.payload = b;
        void 0 !== c && null !== c && (f.callback = c);
        b = $9e3d383a4c02c1e5$var$nh(a, f, e);
        null !== b && ($9e3d383a4c02c1e5$var$gi(b, a, e, d), $9e3d383a4c02c1e5$var$oh(b, a, e));
    },
    enqueueForceUpdate: function(a, b) {
        a = a._reactInternals;
        var c = $9e3d383a4c02c1e5$var$R(), d = $9e3d383a4c02c1e5$var$yi(a), e = $9e3d383a4c02c1e5$var$mh(c, d);
        e.tag = 2;
        void 0 !== b && null !== b && (e.callback = b);
        b = $9e3d383a4c02c1e5$var$nh(a, e, d);
        null !== b && ($9e3d383a4c02c1e5$var$gi(b, a, d, c), $9e3d383a4c02c1e5$var$oh(b, a, d));
    }
};
function $9e3d383a4c02c1e5$var$Fi(a, b, c, d, e, f, g) {
    a = a.stateNode;
    return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !$9e3d383a4c02c1e5$var$Ie(c, d) || !$9e3d383a4c02c1e5$var$Ie(e, f) : !0;
}
function $9e3d383a4c02c1e5$var$Gi(a, b, c) {
    var d = !1, e = $9e3d383a4c02c1e5$var$Vf;
    var f = b.contextType;
    "object" === typeof f && null !== f ? f = $9e3d383a4c02c1e5$var$eh(f) : (e = $9e3d383a4c02c1e5$var$Zf(b) ? $9e3d383a4c02c1e5$var$Xf : $9e3d383a4c02c1e5$var$H.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? $9e3d383a4c02c1e5$var$Yf(a, e) : $9e3d383a4c02c1e5$var$Vf);
    b = new b(c, f);
    a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
    b.updater = $9e3d383a4c02c1e5$var$Ei;
    a.stateNode = b;
    b._reactInternals = a;
    d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
    return b;
}
function $9e3d383a4c02c1e5$var$Hi(a, b, c, d) {
    a = b.state;
    "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
    "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
    b.state !== a && $9e3d383a4c02c1e5$var$Ei.enqueueReplaceState(b, b.state, null);
}
function $9e3d383a4c02c1e5$var$Ii(a, b, c, d) {
    var e = a.stateNode;
    e.props = c;
    e.state = a.memoizedState;
    e.refs = {};
    $9e3d383a4c02c1e5$var$kh(a);
    var f = b.contextType;
    "object" === typeof f && null !== f ? e.context = $9e3d383a4c02c1e5$var$eh(f) : (f = $9e3d383a4c02c1e5$var$Zf(b) ? $9e3d383a4c02c1e5$var$Xf : $9e3d383a4c02c1e5$var$H.current, e.context = $9e3d383a4c02c1e5$var$Yf(a, f));
    e.state = a.memoizedState;
    f = b.getDerivedStateFromProps;
    "function" === typeof f && ($9e3d383a4c02c1e5$var$Di(a, b, f, c), e.state = a.memoizedState);
    "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && $9e3d383a4c02c1e5$var$Ei.enqueueReplaceState(e, e.state, null), $9e3d383a4c02c1e5$var$qh(a, c, e, d), e.state = a.memoizedState);
    "function" === typeof e.componentDidMount && (a.flags |= 4194308);
}
function $9e3d383a4c02c1e5$var$Ji(a, b) {
    try {
        var c = "", d = b;
        do c += $9e3d383a4c02c1e5$var$Pa(d), d = d.return;
        while (d);
        var e = c;
    } catch (f) {
        e = "\nError generating stack: " + f.message + "\n" + f.stack;
    }
    return {
        value: a,
        source: b,
        stack: e,
        digest: null
    };
}
function $9e3d383a4c02c1e5$var$Ki(a, b, c) {
    return {
        value: a,
        source: null,
        stack: null != c ? c : null,
        digest: null != b ? b : null
    };
}
function $9e3d383a4c02c1e5$var$Li(a, b) {
    try {
        console.error(b.value);
    } catch (c) {
        setTimeout(function() {
            throw c;
        });
    }
}
var $9e3d383a4c02c1e5$var$Mi = "function" === typeof WeakMap ? WeakMap : Map;
function $9e3d383a4c02c1e5$var$Ni(a, b, c) {
    c = $9e3d383a4c02c1e5$var$mh(-1, c);
    c.tag = 3;
    c.payload = {
        element: null
    };
    var d = b.value;
    c.callback = function() {
        $9e3d383a4c02c1e5$var$Oi || ($9e3d383a4c02c1e5$var$Oi = !0, $9e3d383a4c02c1e5$var$Pi = d);
        $9e3d383a4c02c1e5$var$Li(a, b);
    };
    return c;
}
function $9e3d383a4c02c1e5$var$Qi(a, b, c) {
    c = $9e3d383a4c02c1e5$var$mh(-1, c);
    c.tag = 3;
    var d = a.type.getDerivedStateFromError;
    if ("function" === typeof d) {
        var e = b.value;
        c.payload = function() {
            return d(e);
        };
        c.callback = function() {
            $9e3d383a4c02c1e5$var$Li(a, b);
        };
    }
    var f = a.stateNode;
    null !== f && "function" === typeof f.componentDidCatch && (c.callback = function() {
        $9e3d383a4c02c1e5$var$Li(a, b);
        "function" !== typeof d && (null === $9e3d383a4c02c1e5$var$Ri ? $9e3d383a4c02c1e5$var$Ri = new Set([
            this
        ]) : $9e3d383a4c02c1e5$var$Ri.add(this));
        var c = b.stack;
        this.componentDidCatch(b.value, {
            componentStack: null !== c ? c : ""
        });
    });
    return c;
}
function $9e3d383a4c02c1e5$var$Si(a, b, c) {
    var d = a.pingCache;
    if (null === d) {
        d = a.pingCache = new $9e3d383a4c02c1e5$var$Mi;
        var e = new Set;
        d.set(b, e);
    } else e = d.get(b), void 0 === e && (e = new Set, d.set(b, e));
    e.has(c) || (e.add(c), a = $9e3d383a4c02c1e5$var$Ti.bind(null, a, b, c), b.then(a, a));
}
function $9e3d383a4c02c1e5$var$Ui(a) {
    do {
        var b;
        if (b = 13 === a.tag) b = a.memoizedState, b = null !== b ? null !== b.dehydrated ? !0 : !1 : !0;
        if (b) return a;
        a = a.return;
    }while (null !== a);
    return null;
}
function $9e3d383a4c02c1e5$var$Vi(a, b, c, d, e) {
    if (0 === (a.mode & 1)) return a === b ? a.flags |= 65536 : (a.flags |= 128, c.flags |= 131072, c.flags &= -52805, 1 === c.tag && (null === c.alternate ? c.tag = 17 : (b = $9e3d383a4c02c1e5$var$mh(-1, 1), b.tag = 2, $9e3d383a4c02c1e5$var$nh(c, b, 1))), c.lanes |= 1), a;
    a.flags |= 65536;
    a.lanes = e;
    return a;
}
var $9e3d383a4c02c1e5$var$Wi = $9e3d383a4c02c1e5$var$ua.ReactCurrentOwner, $9e3d383a4c02c1e5$var$dh = !1;
function $9e3d383a4c02c1e5$var$Xi(a, b, c, d) {
    b.child = null === a ? $9e3d383a4c02c1e5$var$Vg(b, null, c, d) : $9e3d383a4c02c1e5$var$Ug(b, a.child, c, d);
}
function $9e3d383a4c02c1e5$var$Yi(a, b, c, d, e) {
    c = c.render;
    var f = b.ref;
    $9e3d383a4c02c1e5$var$ch(b, e);
    d = $9e3d383a4c02c1e5$var$Nh(a, b, c, d, f, e);
    c = $9e3d383a4c02c1e5$var$Sh();
    if (null !== a && !$9e3d383a4c02c1e5$var$dh) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, $9e3d383a4c02c1e5$var$Zi(a, b, e);
    $9e3d383a4c02c1e5$var$I && c && $9e3d383a4c02c1e5$var$vg(b);
    b.flags |= 1;
    $9e3d383a4c02c1e5$var$Xi(a, b, d, e);
    return b.child;
}
function $9e3d383a4c02c1e5$var$$i(a, b, c, d, e) {
    if (null === a) {
        var f = c.type;
        if ("function" === typeof f && !$9e3d383a4c02c1e5$var$aj(f) && void 0 === f.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = f, $9e3d383a4c02c1e5$var$bj(a, b, f, d, e);
        a = $9e3d383a4c02c1e5$var$Rg(c.type, null, d, b, b.mode, e);
        a.ref = b.ref;
        a.return = b;
        return b.child = a;
    }
    f = a.child;
    if (0 === (a.lanes & e)) {
        var g = f.memoizedProps;
        c = c.compare;
        c = null !== c ? c : $9e3d383a4c02c1e5$var$Ie;
        if (c(g, d) && a.ref === b.ref) return $9e3d383a4c02c1e5$var$Zi(a, b, e);
    }
    b.flags |= 1;
    a = $9e3d383a4c02c1e5$var$Pg(f, d);
    a.ref = b.ref;
    a.return = b;
    return b.child = a;
}
function $9e3d383a4c02c1e5$var$bj(a, b, c, d, e) {
    if (null !== a) {
        var f = a.memoizedProps;
        if ($9e3d383a4c02c1e5$var$Ie(f, d) && a.ref === b.ref) {
            if ($9e3d383a4c02c1e5$var$dh = !1, b.pendingProps = d = f, 0 !== (a.lanes & e)) 0 !== (a.flags & 131072) && ($9e3d383a4c02c1e5$var$dh = !0);
            else return b.lanes = a.lanes, $9e3d383a4c02c1e5$var$Zi(a, b, e);
        }
    }
    return $9e3d383a4c02c1e5$var$cj(a, b, c, d, e);
}
function $9e3d383a4c02c1e5$var$dj(a, b, c) {
    var d = b.pendingProps, e = d.children, f = null !== a ? a.memoizedState : null;
    if ("hidden" === d.mode) {
        if (0 === (b.mode & 1)) b.memoizedState = {
            baseLanes: 0,
            cachePool: null,
            transitions: null
        }, $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$ej, $9e3d383a4c02c1e5$var$fj), $9e3d383a4c02c1e5$var$fj |= c;
        else {
            if (0 === (c & 1073741824)) return a = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = {
                baseLanes: a,
                cachePool: null,
                transitions: null
            }, b.updateQueue = null, $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$ej, $9e3d383a4c02c1e5$var$fj), $9e3d383a4c02c1e5$var$fj |= a, null;
            b.memoizedState = {
                baseLanes: 0,
                cachePool: null,
                transitions: null
            };
            d = null !== f ? f.baseLanes : c;
            $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$ej, $9e3d383a4c02c1e5$var$fj);
            $9e3d383a4c02c1e5$var$fj |= d;
        }
    } else null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$ej, $9e3d383a4c02c1e5$var$fj), $9e3d383a4c02c1e5$var$fj |= d;
    $9e3d383a4c02c1e5$var$Xi(a, b, e, c);
    return b.child;
}
function $9e3d383a4c02c1e5$var$gj(a, b) {
    var c = b.ref;
    if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 512, b.flags |= 2097152;
}
function $9e3d383a4c02c1e5$var$cj(a, b, c, d, e) {
    var f = $9e3d383a4c02c1e5$var$Zf(c) ? $9e3d383a4c02c1e5$var$Xf : $9e3d383a4c02c1e5$var$H.current;
    f = $9e3d383a4c02c1e5$var$Yf(b, f);
    $9e3d383a4c02c1e5$var$ch(b, e);
    c = $9e3d383a4c02c1e5$var$Nh(a, b, c, d, f, e);
    d = $9e3d383a4c02c1e5$var$Sh();
    if (null !== a && !$9e3d383a4c02c1e5$var$dh) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, $9e3d383a4c02c1e5$var$Zi(a, b, e);
    $9e3d383a4c02c1e5$var$I && d && $9e3d383a4c02c1e5$var$vg(b);
    b.flags |= 1;
    $9e3d383a4c02c1e5$var$Xi(a, b, c, e);
    return b.child;
}
function $9e3d383a4c02c1e5$var$hj(a, b, c, d, e) {
    if ($9e3d383a4c02c1e5$var$Zf(c)) {
        var f = !0;
        $9e3d383a4c02c1e5$var$cg(b);
    } else f = !1;
    $9e3d383a4c02c1e5$var$ch(b, e);
    if (null === b.stateNode) $9e3d383a4c02c1e5$var$ij(a, b), $9e3d383a4c02c1e5$var$Gi(b, c, d), $9e3d383a4c02c1e5$var$Ii(b, c, d, e), d = !0;
    else if (null === a) {
        var g = b.stateNode, h = b.memoizedProps;
        g.props = h;
        var k = g.context, l = c.contextType;
        "object" === typeof l && null !== l ? l = $9e3d383a4c02c1e5$var$eh(l) : (l = $9e3d383a4c02c1e5$var$Zf(c) ? $9e3d383a4c02c1e5$var$Xf : $9e3d383a4c02c1e5$var$H.current, l = $9e3d383a4c02c1e5$var$Yf(b, l));
        var m = c.getDerivedStateFromProps, q = "function" === typeof m || "function" === typeof g.getSnapshotBeforeUpdate;
        q || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && $9e3d383a4c02c1e5$var$Hi(b, g, d, l);
        $9e3d383a4c02c1e5$var$jh = !1;
        var r = b.memoizedState;
        g.state = r;
        $9e3d383a4c02c1e5$var$qh(b, d, g, e);
        k = b.memoizedState;
        h !== d || r !== k || $9e3d383a4c02c1e5$var$Wf.current || $9e3d383a4c02c1e5$var$jh ? ("function" === typeof m && ($9e3d383a4c02c1e5$var$Di(b, c, m, d), k = b.memoizedState), (h = $9e3d383a4c02c1e5$var$jh || $9e3d383a4c02c1e5$var$Fi(b, c, h, d, r, k, l)) ? (q || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4194308)) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), d = !1);
    } else {
        g = b.stateNode;
        $9e3d383a4c02c1e5$var$lh(a, b);
        h = b.memoizedProps;
        l = b.type === b.elementType ? h : $9e3d383a4c02c1e5$var$Ci(b.type, h);
        g.props = l;
        q = b.pendingProps;
        r = g.context;
        k = c.contextType;
        "object" === typeof k && null !== k ? k = $9e3d383a4c02c1e5$var$eh(k) : (k = $9e3d383a4c02c1e5$var$Zf(c) ? $9e3d383a4c02c1e5$var$Xf : $9e3d383a4c02c1e5$var$H.current, k = $9e3d383a4c02c1e5$var$Yf(b, k));
        var y = c.getDerivedStateFromProps;
        (m = "function" === typeof y || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== q || r !== k) && $9e3d383a4c02c1e5$var$Hi(b, g, d, k);
        $9e3d383a4c02c1e5$var$jh = !1;
        r = b.memoizedState;
        g.state = r;
        $9e3d383a4c02c1e5$var$qh(b, d, g, e);
        var n = b.memoizedState;
        h !== q || r !== n || $9e3d383a4c02c1e5$var$Wf.current || $9e3d383a4c02c1e5$var$jh ? ("function" === typeof y && ($9e3d383a4c02c1e5$var$Di(b, c, y, d), n = b.memoizedState), (l = $9e3d383a4c02c1e5$var$jh || $9e3d383a4c02c1e5$var$Fi(b, c, l, d, r, n, k) || !1) ? (m || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, n, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, n, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 1024)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), b.memoizedProps = d, b.memoizedState = n), g.props = d, g.state = n, g.context = k, d = l) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), d = !1);
    }
    return $9e3d383a4c02c1e5$var$jj(a, b, c, d, f, e);
}
function $9e3d383a4c02c1e5$var$jj(a, b, c, d, e, f) {
    $9e3d383a4c02c1e5$var$gj(a, b);
    var g = 0 !== (b.flags & 128);
    if (!d && !g) return e && $9e3d383a4c02c1e5$var$dg(b, c, !1), $9e3d383a4c02c1e5$var$Zi(a, b, f);
    d = b.stateNode;
    $9e3d383a4c02c1e5$var$Wi.current = b;
    var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
    b.flags |= 1;
    null !== a && g ? (b.child = $9e3d383a4c02c1e5$var$Ug(b, a.child, null, f), b.child = $9e3d383a4c02c1e5$var$Ug(b, null, h, f)) : $9e3d383a4c02c1e5$var$Xi(a, b, h, f);
    b.memoizedState = d.state;
    e && $9e3d383a4c02c1e5$var$dg(b, c, !0);
    return b.child;
}
function $9e3d383a4c02c1e5$var$kj(a) {
    var b = a.stateNode;
    b.pendingContext ? $9e3d383a4c02c1e5$var$ag(a, b.pendingContext, b.pendingContext !== b.context) : b.context && $9e3d383a4c02c1e5$var$ag(a, b.context, !1);
    $9e3d383a4c02c1e5$var$yh(a, b.containerInfo);
}
function $9e3d383a4c02c1e5$var$lj(a, b, c, d, e) {
    $9e3d383a4c02c1e5$var$Ig();
    $9e3d383a4c02c1e5$var$Jg(e);
    b.flags |= 256;
    $9e3d383a4c02c1e5$var$Xi(a, b, c, d);
    return b.child;
}
var $9e3d383a4c02c1e5$var$mj = {
    dehydrated: null,
    treeContext: null,
    retryLane: 0
};
function $9e3d383a4c02c1e5$var$nj(a) {
    return {
        baseLanes: a,
        cachePool: null,
        transitions: null
    };
}
function $9e3d383a4c02c1e5$var$oj(a, b, c) {
    var d = b.pendingProps, e = $9e3d383a4c02c1e5$var$L.current, f = !1, g = 0 !== (b.flags & 128), h;
    (h = g) || (h = null !== a && null === a.memoizedState ? !1 : 0 !== (e & 2));
    if (h) f = !0, b.flags &= -129;
    else if (null === a || null !== a.memoizedState) e |= 1;
    $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$L, e & 1);
    if (null === a) {
        $9e3d383a4c02c1e5$var$Eg(b);
        a = b.memoizedState;
        if (null !== a && (a = a.dehydrated, null !== a)) return 0 === (b.mode & 1) ? b.lanes = 1 : "$!" === a.data ? b.lanes = 8 : b.lanes = 1073741824, null;
        g = d.children;
        a = d.fallback;
        return f ? (d = b.mode, f = b.child, g = {
            mode: "hidden",
            children: g
        }, 0 === (d & 1) && null !== f ? (f.childLanes = 0, f.pendingProps = g) : f = $9e3d383a4c02c1e5$var$pj(g, d, 0, null), a = $9e3d383a4c02c1e5$var$Tg(a, d, c, null), f.return = b, a.return = b, f.sibling = a, b.child = f, b.child.memoizedState = $9e3d383a4c02c1e5$var$nj(c), b.memoizedState = $9e3d383a4c02c1e5$var$mj, a) : $9e3d383a4c02c1e5$var$qj(b, g);
    }
    e = a.memoizedState;
    if (null !== e && (h = e.dehydrated, null !== h)) return $9e3d383a4c02c1e5$var$rj(a, b, g, d, h, e, c);
    if (f) {
        f = d.fallback;
        g = b.mode;
        e = a.child;
        h = e.sibling;
        var k = {
            mode: "hidden",
            children: d.children
        };
        0 === (g & 1) && b.child !== e ? (d = b.child, d.childLanes = 0, d.pendingProps = k, b.deletions = null) : (d = $9e3d383a4c02c1e5$var$Pg(e, k), d.subtreeFlags = e.subtreeFlags & 14680064);
        null !== h ? f = $9e3d383a4c02c1e5$var$Pg(h, f) : (f = $9e3d383a4c02c1e5$var$Tg(f, g, c, null), f.flags |= 2);
        f.return = b;
        d.return = b;
        d.sibling = f;
        b.child = d;
        d = f;
        f = b.child;
        g = a.child.memoizedState;
        g = null === g ? $9e3d383a4c02c1e5$var$nj(c) : {
            baseLanes: g.baseLanes | c,
            cachePool: null,
            transitions: g.transitions
        };
        f.memoizedState = g;
        f.childLanes = a.childLanes & ~c;
        b.memoizedState = $9e3d383a4c02c1e5$var$mj;
        return d;
    }
    f = a.child;
    a = f.sibling;
    d = $9e3d383a4c02c1e5$var$Pg(f, {
        mode: "visible",
        children: d.children
    });
    0 === (b.mode & 1) && (d.lanes = c);
    d.return = b;
    d.sibling = null;
    null !== a && (c = b.deletions, null === c ? (b.deletions = [
        a
    ], b.flags |= 16) : c.push(a));
    b.child = d;
    b.memoizedState = null;
    return d;
}
function $9e3d383a4c02c1e5$var$qj(a, b) {
    b = $9e3d383a4c02c1e5$var$pj({
        mode: "visible",
        children: b
    }, a.mode, 0, null);
    b.return = a;
    return a.child = b;
}
function $9e3d383a4c02c1e5$var$sj(a, b, c, d) {
    null !== d && $9e3d383a4c02c1e5$var$Jg(d);
    $9e3d383a4c02c1e5$var$Ug(b, a.child, null, c);
    a = $9e3d383a4c02c1e5$var$qj(b, b.pendingProps.children);
    a.flags |= 2;
    b.memoizedState = null;
    return a;
}
function $9e3d383a4c02c1e5$var$rj(a, b, c, d, e, f, g) {
    if (c) {
        if (b.flags & 256) return b.flags &= -257, d = $9e3d383a4c02c1e5$var$Ki(Error($9e3d383a4c02c1e5$var$p(422))), $9e3d383a4c02c1e5$var$sj(a, b, g, d);
        if (null !== b.memoizedState) return b.child = a.child, b.flags |= 128, null;
        f = d.fallback;
        e = b.mode;
        d = $9e3d383a4c02c1e5$var$pj({
            mode: "visible",
            children: d.children
        }, e, 0, null);
        f = $9e3d383a4c02c1e5$var$Tg(f, e, g, null);
        f.flags |= 2;
        d.return = b;
        f.return = b;
        d.sibling = f;
        b.child = d;
        0 !== (b.mode & 1) && $9e3d383a4c02c1e5$var$Ug(b, a.child, null, g);
        b.child.memoizedState = $9e3d383a4c02c1e5$var$nj(g);
        b.memoizedState = $9e3d383a4c02c1e5$var$mj;
        return f;
    }
    if (0 === (b.mode & 1)) return $9e3d383a4c02c1e5$var$sj(a, b, g, null);
    if ("$!" === e.data) {
        d = e.nextSibling && e.nextSibling.dataset;
        if (d) var h = d.dgst;
        d = h;
        f = Error($9e3d383a4c02c1e5$var$p(419));
        d = $9e3d383a4c02c1e5$var$Ki(f, d, void 0);
        return $9e3d383a4c02c1e5$var$sj(a, b, g, d);
    }
    h = 0 !== (g & a.childLanes);
    if ($9e3d383a4c02c1e5$var$dh || h) {
        d = $9e3d383a4c02c1e5$var$Q;
        if (null !== d) {
            switch(g & -g){
                case 4:
                    e = 2;
                    break;
                case 16:
                    e = 8;
                    break;
                case 64:
                case 128:
                case 256:
                case 512:
                case 1024:
                case 2048:
                case 4096:
                case 8192:
                case 16384:
                case 32768:
                case 65536:
                case 131072:
                case 262144:
                case 524288:
                case 1048576:
                case 2097152:
                case 4194304:
                case 8388608:
                case 16777216:
                case 33554432:
                case 67108864:
                    e = 32;
                    break;
                case 536870912:
                    e = 268435456;
                    break;
                default:
                    e = 0;
            }
            e = 0 !== (e & (d.suspendedLanes | g)) ? 0 : e;
            0 !== e && e !== f.retryLane && (f.retryLane = e, $9e3d383a4c02c1e5$var$ih(a, e), $9e3d383a4c02c1e5$var$gi(d, a, e, -1));
        }
        $9e3d383a4c02c1e5$var$tj();
        d = $9e3d383a4c02c1e5$var$Ki(Error($9e3d383a4c02c1e5$var$p(421)));
        return $9e3d383a4c02c1e5$var$sj(a, b, g, d);
    }
    if ("$?" === e.data) return b.flags |= 128, b.child = a.child, b = $9e3d383a4c02c1e5$var$uj.bind(null, a), e._reactRetry = b, null;
    a = f.treeContext;
    $9e3d383a4c02c1e5$var$yg = $9e3d383a4c02c1e5$var$Lf(e.nextSibling);
    $9e3d383a4c02c1e5$var$xg = b;
    $9e3d383a4c02c1e5$var$I = !0;
    $9e3d383a4c02c1e5$var$zg = null;
    null !== a && ($9e3d383a4c02c1e5$var$og[$9e3d383a4c02c1e5$var$pg++] = $9e3d383a4c02c1e5$var$rg, $9e3d383a4c02c1e5$var$og[$9e3d383a4c02c1e5$var$pg++] = $9e3d383a4c02c1e5$var$sg, $9e3d383a4c02c1e5$var$og[$9e3d383a4c02c1e5$var$pg++] = $9e3d383a4c02c1e5$var$qg, $9e3d383a4c02c1e5$var$rg = a.id, $9e3d383a4c02c1e5$var$sg = a.overflow, $9e3d383a4c02c1e5$var$qg = b);
    b = $9e3d383a4c02c1e5$var$qj(b, d.children);
    b.flags |= 4096;
    return b;
}
function $9e3d383a4c02c1e5$var$vj(a, b, c) {
    a.lanes |= b;
    var d = a.alternate;
    null !== d && (d.lanes |= b);
    $9e3d383a4c02c1e5$var$bh(a.return, b, c);
}
function $9e3d383a4c02c1e5$var$wj(a, b, c, d, e) {
    var f = a.memoizedState;
    null === f ? a.memoizedState = {
        isBackwards: b,
        rendering: null,
        renderingStartTime: 0,
        last: d,
        tail: c,
        tailMode: e
    } : (f.isBackwards = b, f.rendering = null, f.renderingStartTime = 0, f.last = d, f.tail = c, f.tailMode = e);
}
function $9e3d383a4c02c1e5$var$xj(a, b, c) {
    var d = b.pendingProps, e = d.revealOrder, f = d.tail;
    $9e3d383a4c02c1e5$var$Xi(a, b, d.children, c);
    d = $9e3d383a4c02c1e5$var$L.current;
    if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 128;
    else {
        if (null !== a && 0 !== (a.flags & 128)) a: for(a = b.child; null !== a;){
            if (13 === a.tag) null !== a.memoizedState && $9e3d383a4c02c1e5$var$vj(a, c, b);
            else if (19 === a.tag) $9e3d383a4c02c1e5$var$vj(a, c, b);
            else if (null !== a.child) {
                a.child.return = a;
                a = a.child;
                continue;
            }
            if (a === b) break a;
            for(; null === a.sibling;){
                if (null === a.return || a.return === b) break a;
                a = a.return;
            }
            a.sibling.return = a.return;
            a = a.sibling;
        }
        d &= 1;
    }
    $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$L, d);
    if (0 === (b.mode & 1)) b.memoizedState = null;
    else switch(e){
        case "forwards":
            c = b.child;
            for(e = null; null !== c;)a = c.alternate, null !== a && null === $9e3d383a4c02c1e5$var$Ch(a) && (e = c), c = c.sibling;
            c = e;
            null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
            $9e3d383a4c02c1e5$var$wj(b, !1, e, c, f);
            break;
        case "backwards":
            c = null;
            e = b.child;
            for(b.child = null; null !== e;){
                a = e.alternate;
                if (null !== a && null === $9e3d383a4c02c1e5$var$Ch(a)) {
                    b.child = e;
                    break;
                }
                a = e.sibling;
                e.sibling = c;
                c = e;
                e = a;
            }
            $9e3d383a4c02c1e5$var$wj(b, !0, c, null, f);
            break;
        case "together":
            $9e3d383a4c02c1e5$var$wj(b, !1, null, null, void 0);
            break;
        default:
            b.memoizedState = null;
    }
    return b.child;
}
function $9e3d383a4c02c1e5$var$ij(a, b) {
    0 === (b.mode & 1) && null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
}
function $9e3d383a4c02c1e5$var$Zi(a, b, c) {
    null !== a && (b.dependencies = a.dependencies);
    $9e3d383a4c02c1e5$var$rh |= b.lanes;
    if (0 === (c & b.childLanes)) return null;
    if (null !== a && b.child !== a.child) throw Error($9e3d383a4c02c1e5$var$p(153));
    if (null !== b.child) {
        a = b.child;
        c = $9e3d383a4c02c1e5$var$Pg(a, a.pendingProps);
        b.child = c;
        for(c.return = b; null !== a.sibling;)a = a.sibling, c = c.sibling = $9e3d383a4c02c1e5$var$Pg(a, a.pendingProps), c.return = b;
        c.sibling = null;
    }
    return b.child;
}
function $9e3d383a4c02c1e5$var$yj(a, b, c) {
    switch(b.tag){
        case 3:
            $9e3d383a4c02c1e5$var$kj(b);
            $9e3d383a4c02c1e5$var$Ig();
            break;
        case 5:
            $9e3d383a4c02c1e5$var$Ah(b);
            break;
        case 1:
            $9e3d383a4c02c1e5$var$Zf(b.type) && $9e3d383a4c02c1e5$var$cg(b);
            break;
        case 4:
            $9e3d383a4c02c1e5$var$yh(b, b.stateNode.containerInfo);
            break;
        case 10:
            var d = b.type._context, e = b.memoizedProps.value;
            $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$Wg, d._currentValue);
            d._currentValue = e;
            break;
        case 13:
            d = b.memoizedState;
            if (null !== d) {
                if (null !== d.dehydrated) return $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$L, $9e3d383a4c02c1e5$var$L.current & 1), b.flags |= 128, null;
                if (0 !== (c & b.child.childLanes)) return $9e3d383a4c02c1e5$var$oj(a, b, c);
                $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$L, $9e3d383a4c02c1e5$var$L.current & 1);
                a = $9e3d383a4c02c1e5$var$Zi(a, b, c);
                return null !== a ? a.sibling : null;
            }
            $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$L, $9e3d383a4c02c1e5$var$L.current & 1);
            break;
        case 19:
            d = 0 !== (c & b.childLanes);
            if (0 !== (a.flags & 128)) {
                if (d) return $9e3d383a4c02c1e5$var$xj(a, b, c);
                b.flags |= 128;
            }
            e = b.memoizedState;
            null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
            $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$L, $9e3d383a4c02c1e5$var$L.current);
            if (d) break;
            else return null;
        case 22:
        case 23:
            return b.lanes = 0, $9e3d383a4c02c1e5$var$dj(a, b, c);
    }
    return $9e3d383a4c02c1e5$var$Zi(a, b, c);
}
var $9e3d383a4c02c1e5$var$zj, $9e3d383a4c02c1e5$var$Aj, $9e3d383a4c02c1e5$var$Bj, $9e3d383a4c02c1e5$var$Cj;
$9e3d383a4c02c1e5$var$zj = function(a, b) {
    for(var c = b.child; null !== c;){
        if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);
        else if (4 !== c.tag && null !== c.child) {
            c.child.return = c;
            c = c.child;
            continue;
        }
        if (c === b) break;
        for(; null === c.sibling;){
            if (null === c.return || c.return === b) return;
            c = c.return;
        }
        c.sibling.return = c.return;
        c = c.sibling;
    }
};
$9e3d383a4c02c1e5$var$Aj = function() {};
$9e3d383a4c02c1e5$var$Bj = function(a, b, c, d) {
    var e = a.memoizedProps;
    if (e !== d) {
        a = b.stateNode;
        $9e3d383a4c02c1e5$var$xh($9e3d383a4c02c1e5$var$uh.current);
        var f = null;
        switch(c){
            case "input":
                e = $9e3d383a4c02c1e5$var$Ya(a, e);
                d = $9e3d383a4c02c1e5$var$Ya(a, d);
                f = [];
                break;
            case "select":
                e = $9e3d383a4c02c1e5$var$A({}, e, {
                    value: void 0
                });
                d = $9e3d383a4c02c1e5$var$A({}, d, {
                    value: void 0
                });
                f = [];
                break;
            case "textarea":
                e = $9e3d383a4c02c1e5$var$gb(a, e);
                d = $9e3d383a4c02c1e5$var$gb(a, d);
                f = [];
                break;
            default:
                "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = $9e3d383a4c02c1e5$var$Bf);
        }
        $9e3d383a4c02c1e5$var$ub(c, d);
        var g;
        c = null;
        for(l in e)if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l]) {
            if ("style" === l) {
                var h = e[l];
                for(g in h)h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
            } else "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && ($9e3d383a4c02c1e5$var$ea.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));
        }
        for(l in d){
            var k = d[l];
            h = null != e ? e[l] : void 0;
            if (d.hasOwnProperty(l) && k !== h && (null != k || null != h)) {
                if ("style" === l) {
                    if (h) {
                        for(g in h)!h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");
                        for(g in k)k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);
                    } else c || (f || (f = []), f.push(l, c)), c = k;
                } else "dangerouslySetInnerHTML" === l ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, null != k && h !== k && (f = f || []).push(l, k)) : "children" === l ? "string" !== typeof k && "number" !== typeof k || (f = f || []).push(l, "" + k) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && ($9e3d383a4c02c1e5$var$ea.hasOwnProperty(l) ? (null != k && "onScroll" === l && $9e3d383a4c02c1e5$var$D("scroll", a), f || h === k || (f = [])) : (f = f || []).push(l, k));
            }
        }
        c && (f = f || []).push("style", c);
        var l = f;
        if (b.updateQueue = l) b.flags |= 4;
    }
};
$9e3d383a4c02c1e5$var$Cj = function(a, b, c, d) {
    c !== d && (b.flags |= 4);
};
function $9e3d383a4c02c1e5$var$Dj(a, b) {
    if (!$9e3d383a4c02c1e5$var$I) switch(a.tailMode){
        case "hidden":
            b = a.tail;
            for(var c = null; null !== b;)null !== b.alternate && (c = b), b = b.sibling;
            null === c ? a.tail = null : c.sibling = null;
            break;
        case "collapsed":
            c = a.tail;
            for(var d = null; null !== c;)null !== c.alternate && (d = c), c = c.sibling;
            null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
    }
}
function $9e3d383a4c02c1e5$var$S(a) {
    var b = null !== a.alternate && a.alternate.child === a.child, c = 0, d = 0;
    if (b) for(var e = a.child; null !== e;)c |= e.lanes | e.childLanes, d |= e.subtreeFlags & 14680064, d |= e.flags & 14680064, e.return = a, e = e.sibling;
    else for(e = a.child; null !== e;)c |= e.lanes | e.childLanes, d |= e.subtreeFlags, d |= e.flags, e.return = a, e = e.sibling;
    a.subtreeFlags |= d;
    a.childLanes = c;
    return b;
}
function $9e3d383a4c02c1e5$var$Ej(a, b, c) {
    var d = b.pendingProps;
    $9e3d383a4c02c1e5$var$wg(b);
    switch(b.tag){
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
            return $9e3d383a4c02c1e5$var$S(b), null;
        case 1:
            return $9e3d383a4c02c1e5$var$Zf(b.type) && $9e3d383a4c02c1e5$var$$f(), $9e3d383a4c02c1e5$var$S(b), null;
        case 3:
            d = b.stateNode;
            $9e3d383a4c02c1e5$var$zh();
            $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$Wf);
            $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$H);
            $9e3d383a4c02c1e5$var$Eh();
            d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);
            if (null === a || null === a.child) $9e3d383a4c02c1e5$var$Gg(b) ? b.flags |= 4 : null === a || a.memoizedState.isDehydrated && 0 === (b.flags & 256) || (b.flags |= 1024, null !== $9e3d383a4c02c1e5$var$zg && ($9e3d383a4c02c1e5$var$Fj($9e3d383a4c02c1e5$var$zg), $9e3d383a4c02c1e5$var$zg = null));
            $9e3d383a4c02c1e5$var$Aj(a, b);
            $9e3d383a4c02c1e5$var$S(b);
            return null;
        case 5:
            $9e3d383a4c02c1e5$var$Bh(b);
            var e = $9e3d383a4c02c1e5$var$xh($9e3d383a4c02c1e5$var$wh.current);
            c = b.type;
            if (null !== a && null != b.stateNode) $9e3d383a4c02c1e5$var$Bj(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 512, b.flags |= 2097152);
            else {
                if (!d) {
                    if (null === b.stateNode) throw Error($9e3d383a4c02c1e5$var$p(166));
                    $9e3d383a4c02c1e5$var$S(b);
                    return null;
                }
                a = $9e3d383a4c02c1e5$var$xh($9e3d383a4c02c1e5$var$uh.current);
                if ($9e3d383a4c02c1e5$var$Gg(b)) {
                    d = b.stateNode;
                    c = b.type;
                    var f = b.memoizedProps;
                    d[$9e3d383a4c02c1e5$var$Of] = b;
                    d[$9e3d383a4c02c1e5$var$Pf] = f;
                    a = 0 !== (b.mode & 1);
                    switch(c){
                        case "dialog":
                            $9e3d383a4c02c1e5$var$D("cancel", d);
                            $9e3d383a4c02c1e5$var$D("close", d);
                            break;
                        case "iframe":
                        case "object":
                        case "embed":
                            $9e3d383a4c02c1e5$var$D("load", d);
                            break;
                        case "video":
                        case "audio":
                            for(e = 0; e < $9e3d383a4c02c1e5$var$lf.length; e++)$9e3d383a4c02c1e5$var$D($9e3d383a4c02c1e5$var$lf[e], d);
                            break;
                        case "source":
                            $9e3d383a4c02c1e5$var$D("error", d);
                            break;
                        case "img":
                        case "image":
                        case "link":
                            $9e3d383a4c02c1e5$var$D("error", d);
                            $9e3d383a4c02c1e5$var$D("load", d);
                            break;
                        case "details":
                            $9e3d383a4c02c1e5$var$D("toggle", d);
                            break;
                        case "input":
                            $9e3d383a4c02c1e5$var$Za(d, f);
                            $9e3d383a4c02c1e5$var$D("invalid", d);
                            break;
                        case "select":
                            d._wrapperState = {
                                wasMultiple: !!f.multiple
                            };
                            $9e3d383a4c02c1e5$var$D("invalid", d);
                            break;
                        case "textarea":
                            $9e3d383a4c02c1e5$var$hb(d, f), $9e3d383a4c02c1e5$var$D("invalid", d);
                    }
                    $9e3d383a4c02c1e5$var$ub(c, f);
                    e = null;
                    for(var g in f)if (f.hasOwnProperty(g)) {
                        var h = f[g];
                        "children" === g ? "string" === typeof h ? d.textContent !== h && (!0 !== f.suppressHydrationWarning && $9e3d383a4c02c1e5$var$Af(d.textContent, h, a), e = [
                            "children",
                            h
                        ]) : "number" === typeof h && d.textContent !== "" + h && (!0 !== f.suppressHydrationWarning && $9e3d383a4c02c1e5$var$Af(d.textContent, h, a), e = [
                            "children",
                            "" + h
                        ]) : $9e3d383a4c02c1e5$var$ea.hasOwnProperty(g) && null != h && "onScroll" === g && $9e3d383a4c02c1e5$var$D("scroll", d);
                    }
                    switch(c){
                        case "input":
                            $9e3d383a4c02c1e5$var$Va(d);
                            $9e3d383a4c02c1e5$var$db(d, f, !0);
                            break;
                        case "textarea":
                            $9e3d383a4c02c1e5$var$Va(d);
                            $9e3d383a4c02c1e5$var$jb(d);
                            break;
                        case "select":
                        case "option":
                            break;
                        default:
                            "function" === typeof f.onClick && (d.onclick = $9e3d383a4c02c1e5$var$Bf);
                    }
                    d = e;
                    b.updateQueue = d;
                    null !== d && (b.flags |= 4);
                } else {
                    g = 9 === e.nodeType ? e : e.ownerDocument;
                    "http://www.w3.org/1999/xhtml" === a && (a = $9e3d383a4c02c1e5$var$kb(c));
                    "http://www.w3.org/1999/xhtml" === a ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script>\x3c/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, {
                        is: d.is
                    }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = !0 : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);
                    a[$9e3d383a4c02c1e5$var$Of] = b;
                    a[$9e3d383a4c02c1e5$var$Pf] = d;
                    $9e3d383a4c02c1e5$var$zj(a, b, !1, !1);
                    b.stateNode = a;
                    a: {
                        g = $9e3d383a4c02c1e5$var$vb(c, d);
                        switch(c){
                            case "dialog":
                                $9e3d383a4c02c1e5$var$D("cancel", a);
                                $9e3d383a4c02c1e5$var$D("close", a);
                                e = d;
                                break;
                            case "iframe":
                            case "object":
                            case "embed":
                                $9e3d383a4c02c1e5$var$D("load", a);
                                e = d;
                                break;
                            case "video":
                            case "audio":
                                for(e = 0; e < $9e3d383a4c02c1e5$var$lf.length; e++)$9e3d383a4c02c1e5$var$D($9e3d383a4c02c1e5$var$lf[e], a);
                                e = d;
                                break;
                            case "source":
                                $9e3d383a4c02c1e5$var$D("error", a);
                                e = d;
                                break;
                            case "img":
                            case "image":
                            case "link":
                                $9e3d383a4c02c1e5$var$D("error", a);
                                $9e3d383a4c02c1e5$var$D("load", a);
                                e = d;
                                break;
                            case "details":
                                $9e3d383a4c02c1e5$var$D("toggle", a);
                                e = d;
                                break;
                            case "input":
                                $9e3d383a4c02c1e5$var$Za(a, d);
                                e = $9e3d383a4c02c1e5$var$Ya(a, d);
                                $9e3d383a4c02c1e5$var$D("invalid", a);
                                break;
                            case "option":
                                e = d;
                                break;
                            case "select":
                                a._wrapperState = {
                                    wasMultiple: !!d.multiple
                                };
                                e = $9e3d383a4c02c1e5$var$A({}, d, {
                                    value: void 0
                                });
                                $9e3d383a4c02c1e5$var$D("invalid", a);
                                break;
                            case "textarea":
                                $9e3d383a4c02c1e5$var$hb(a, d);
                                e = $9e3d383a4c02c1e5$var$gb(a, d);
                                $9e3d383a4c02c1e5$var$D("invalid", a);
                                break;
                            default:
                                e = d;
                        }
                        $9e3d383a4c02c1e5$var$ub(c, e);
                        h = e;
                        for(f in h)if (h.hasOwnProperty(f)) {
                            var k = h[f];
                            "style" === f ? $9e3d383a4c02c1e5$var$sb(a, k) : "dangerouslySetInnerHTML" === f ? (k = k ? k.__html : void 0, null != k && $9e3d383a4c02c1e5$var$nb(a, k)) : "children" === f ? "string" === typeof k ? ("textarea" !== c || "" !== k) && $9e3d383a4c02c1e5$var$ob(a, k) : "number" === typeof k && $9e3d383a4c02c1e5$var$ob(a, "" + k) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && ($9e3d383a4c02c1e5$var$ea.hasOwnProperty(f) ? null != k && "onScroll" === f && $9e3d383a4c02c1e5$var$D("scroll", a) : null != k && $9e3d383a4c02c1e5$var$ta(a, f, k, g));
                        }
                        switch(c){
                            case "input":
                                $9e3d383a4c02c1e5$var$Va(a);
                                $9e3d383a4c02c1e5$var$db(a, d, !1);
                                break;
                            case "textarea":
                                $9e3d383a4c02c1e5$var$Va(a);
                                $9e3d383a4c02c1e5$var$jb(a);
                                break;
                            case "option":
                                null != d.value && a.setAttribute("value", "" + $9e3d383a4c02c1e5$var$Sa(d.value));
                                break;
                            case "select":
                                a.multiple = !!d.multiple;
                                f = d.value;
                                null != f ? $9e3d383a4c02c1e5$var$fb(a, !!d.multiple, f, !1) : null != d.defaultValue && $9e3d383a4c02c1e5$var$fb(a, !!d.multiple, d.defaultValue, !0);
                                break;
                            default:
                                "function" === typeof e.onClick && (a.onclick = $9e3d383a4c02c1e5$var$Bf);
                        }
                        switch(c){
                            case "button":
                            case "input":
                            case "select":
                            case "textarea":
                                d = !!d.autoFocus;
                                break a;
                            case "img":
                                d = !0;
                                break a;
                            default:
                                d = !1;
                        }
                    }
                    d && (b.flags |= 4);
                }
                null !== b.ref && (b.flags |= 512, b.flags |= 2097152);
            }
            $9e3d383a4c02c1e5$var$S(b);
            return null;
        case 6:
            if (a && null != b.stateNode) $9e3d383a4c02c1e5$var$Cj(a, b, a.memoizedProps, d);
            else {
                if ("string" !== typeof d && null === b.stateNode) throw Error($9e3d383a4c02c1e5$var$p(166));
                c = $9e3d383a4c02c1e5$var$xh($9e3d383a4c02c1e5$var$wh.current);
                $9e3d383a4c02c1e5$var$xh($9e3d383a4c02c1e5$var$uh.current);
                if ($9e3d383a4c02c1e5$var$Gg(b)) {
                    d = b.stateNode;
                    c = b.memoizedProps;
                    d[$9e3d383a4c02c1e5$var$Of] = b;
                    if (f = d.nodeValue !== c) {
                        if (a = $9e3d383a4c02c1e5$var$xg, null !== a) switch(a.tag){
                            case 3:
                                $9e3d383a4c02c1e5$var$Af(d.nodeValue, c, 0 !== (a.mode & 1));
                                break;
                            case 5:
                                !0 !== a.memoizedProps.suppressHydrationWarning && $9e3d383a4c02c1e5$var$Af(d.nodeValue, c, 0 !== (a.mode & 1));
                        }
                    }
                    f && (b.flags |= 4);
                } else d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[$9e3d383a4c02c1e5$var$Of] = b, b.stateNode = d;
            }
            $9e3d383a4c02c1e5$var$S(b);
            return null;
        case 13:
            $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$L);
            d = b.memoizedState;
            if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {
                if ($9e3d383a4c02c1e5$var$I && null !== $9e3d383a4c02c1e5$var$yg && 0 !== (b.mode & 1) && 0 === (b.flags & 128)) $9e3d383a4c02c1e5$var$Hg(), $9e3d383a4c02c1e5$var$Ig(), b.flags |= 98560, f = !1;
                else if (f = $9e3d383a4c02c1e5$var$Gg(b), null !== d && null !== d.dehydrated) {
                    if (null === a) {
                        if (!f) throw Error($9e3d383a4c02c1e5$var$p(318));
                        f = b.memoizedState;
                        f = null !== f ? f.dehydrated : null;
                        if (!f) throw Error($9e3d383a4c02c1e5$var$p(317));
                        f[$9e3d383a4c02c1e5$var$Of] = b;
                    } else $9e3d383a4c02c1e5$var$Ig(), 0 === (b.flags & 128) && (b.memoizedState = null), b.flags |= 4;
                    $9e3d383a4c02c1e5$var$S(b);
                    f = !1;
                } else null !== $9e3d383a4c02c1e5$var$zg && ($9e3d383a4c02c1e5$var$Fj($9e3d383a4c02c1e5$var$zg), $9e3d383a4c02c1e5$var$zg = null), f = !0;
                if (!f) return b.flags & 65536 ? b : null;
            }
            if (0 !== (b.flags & 128)) return b.lanes = c, b;
            d = null !== d;
            d !== (null !== a && null !== a.memoizedState) && d && (b.child.flags |= 8192, 0 !== (b.mode & 1) && (null === a || 0 !== ($9e3d383a4c02c1e5$var$L.current & 1) ? 0 === $9e3d383a4c02c1e5$var$T && ($9e3d383a4c02c1e5$var$T = 3) : $9e3d383a4c02c1e5$var$tj()));
            null !== b.updateQueue && (b.flags |= 4);
            $9e3d383a4c02c1e5$var$S(b);
            return null;
        case 4:
            return $9e3d383a4c02c1e5$var$zh(), $9e3d383a4c02c1e5$var$Aj(a, b), null === a && $9e3d383a4c02c1e5$var$sf(b.stateNode.containerInfo), $9e3d383a4c02c1e5$var$S(b), null;
        case 10:
            return $9e3d383a4c02c1e5$var$ah(b.type._context), $9e3d383a4c02c1e5$var$S(b), null;
        case 17:
            return $9e3d383a4c02c1e5$var$Zf(b.type) && $9e3d383a4c02c1e5$var$$f(), $9e3d383a4c02c1e5$var$S(b), null;
        case 19:
            $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$L);
            f = b.memoizedState;
            if (null === f) return $9e3d383a4c02c1e5$var$S(b), null;
            d = 0 !== (b.flags & 128);
            g = f.rendering;
            if (null === g) {
                if (d) $9e3d383a4c02c1e5$var$Dj(f, !1);
                else {
                    if (0 !== $9e3d383a4c02c1e5$var$T || null !== a && 0 !== (a.flags & 128)) for(a = b.child; null !== a;){
                        g = $9e3d383a4c02c1e5$var$Ch(a);
                        if (null !== g) {
                            b.flags |= 128;
                            $9e3d383a4c02c1e5$var$Dj(f, !1);
                            d = g.updateQueue;
                            null !== d && (b.updateQueue = d, b.flags |= 4);
                            b.subtreeFlags = 0;
                            d = c;
                            for(c = b.child; null !== c;)f = c, a = d, f.flags &= 14680066, g = f.alternate, null === g ? (f.childLanes = 0, f.lanes = a, f.child = null, f.subtreeFlags = 0, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.subtreeFlags = 0, f.deletions = null, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = null === a ? null : {
                                lanes: a.lanes,
                                firstContext: a.firstContext
                            }), c = c.sibling;
                            $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$L, $9e3d383a4c02c1e5$var$L.current & 1 | 2);
                            return b.child;
                        }
                        a = a.sibling;
                    }
                    null !== f.tail && $9e3d383a4c02c1e5$var$B() > $9e3d383a4c02c1e5$var$Gj && (b.flags |= 128, d = !0, $9e3d383a4c02c1e5$var$Dj(f, !1), b.lanes = 4194304);
                }
            } else {
                if (!d) {
                    if (a = $9e3d383a4c02c1e5$var$Ch(g), null !== a) {
                        if (b.flags |= 128, d = !0, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), $9e3d383a4c02c1e5$var$Dj(f, !0), null === f.tail && "hidden" === f.tailMode && !g.alternate && !$9e3d383a4c02c1e5$var$I) return $9e3d383a4c02c1e5$var$S(b), null;
                    } else 2 * $9e3d383a4c02c1e5$var$B() - f.renderingStartTime > $9e3d383a4c02c1e5$var$Gj && 1073741824 !== c && (b.flags |= 128, d = !0, $9e3d383a4c02c1e5$var$Dj(f, !1), b.lanes = 4194304);
                }
                f.isBackwards ? (g.sibling = b.child, b.child = g) : (c = f.last, null !== c ? c.sibling = g : b.child = g, f.last = g);
            }
            if (null !== f.tail) return b = f.tail, f.rendering = b, f.tail = b.sibling, f.renderingStartTime = $9e3d383a4c02c1e5$var$B(), b.sibling = null, c = $9e3d383a4c02c1e5$var$L.current, $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$L, d ? c & 1 | 2 : c & 1), b;
            $9e3d383a4c02c1e5$var$S(b);
            return null;
        case 22:
        case 23:
            return $9e3d383a4c02c1e5$var$Hj(), d = null !== b.memoizedState, null !== a && null !== a.memoizedState !== d && (b.flags |= 8192), d && 0 !== (b.mode & 1) ? 0 !== ($9e3d383a4c02c1e5$var$fj & 1073741824) && ($9e3d383a4c02c1e5$var$S(b), b.subtreeFlags & 6 && (b.flags |= 8192)) : $9e3d383a4c02c1e5$var$S(b), null;
        case 24:
            return null;
        case 25:
            return null;
    }
    throw Error($9e3d383a4c02c1e5$var$p(156, b.tag));
}
function $9e3d383a4c02c1e5$var$Ij(a, b) {
    $9e3d383a4c02c1e5$var$wg(b);
    switch(b.tag){
        case 1:
            return $9e3d383a4c02c1e5$var$Zf(b.type) && $9e3d383a4c02c1e5$var$$f(), a = b.flags, a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
        case 3:
            return $9e3d383a4c02c1e5$var$zh(), $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$Wf), $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$H), $9e3d383a4c02c1e5$var$Eh(), a = b.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b.flags = a & -65537 | 128, b) : null;
        case 5:
            return $9e3d383a4c02c1e5$var$Bh(b), null;
        case 13:
            $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$L);
            a = b.memoizedState;
            if (null !== a && null !== a.dehydrated) {
                if (null === b.alternate) throw Error($9e3d383a4c02c1e5$var$p(340));
                $9e3d383a4c02c1e5$var$Ig();
            }
            a = b.flags;
            return a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
        case 19:
            return $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$L), null;
        case 4:
            return $9e3d383a4c02c1e5$var$zh(), null;
        case 10:
            return $9e3d383a4c02c1e5$var$ah(b.type._context), null;
        case 22:
        case 23:
            return $9e3d383a4c02c1e5$var$Hj(), null;
        case 24:
            return null;
        default:
            return null;
    }
}
var $9e3d383a4c02c1e5$var$Jj = !1, $9e3d383a4c02c1e5$var$U = !1, $9e3d383a4c02c1e5$var$Kj = "function" === typeof WeakSet ? WeakSet : Set, $9e3d383a4c02c1e5$var$V = null;
function $9e3d383a4c02c1e5$var$Lj(a, b) {
    var c = a.ref;
    if (null !== c) {
        if ("function" === typeof c) try {
            c(null);
        } catch (d) {
            $9e3d383a4c02c1e5$var$W(a, b, d);
        }
        else c.current = null;
    }
}
function $9e3d383a4c02c1e5$var$Mj(a, b, c) {
    try {
        c();
    } catch (d) {
        $9e3d383a4c02c1e5$var$W(a, b, d);
    }
}
var $9e3d383a4c02c1e5$var$Nj = !1;
function $9e3d383a4c02c1e5$var$Oj(a, b) {
    $9e3d383a4c02c1e5$var$Cf = $9e3d383a4c02c1e5$var$dd;
    a = $9e3d383a4c02c1e5$var$Me();
    if ($9e3d383a4c02c1e5$var$Ne(a)) {
        if ("selectionStart" in a) var c = {
            start: a.selectionStart,
            end: a.selectionEnd
        };
        else a: {
            c = (c = a.ownerDocument) && c.defaultView || window;
            var d = c.getSelection && c.getSelection();
            if (d && 0 !== d.rangeCount) {
                c = d.anchorNode;
                var e = d.anchorOffset, f = d.focusNode;
                d = d.focusOffset;
                try {
                    c.nodeType, f.nodeType;
                } catch (F) {
                    c = null;
                    break a;
                }
                var g = 0, h = -1, k = -1, l = 0, m = 0, q = a, r = null;
                b: for(;;){
                    for(var y;;){
                        q !== c || 0 !== e && 3 !== q.nodeType || (h = g + e);
                        q !== f || 0 !== d && 3 !== q.nodeType || (k = g + d);
                        3 === q.nodeType && (g += q.nodeValue.length);
                        if (null === (y = q.firstChild)) break;
                        r = q;
                        q = y;
                    }
                    for(;;){
                        if (q === a) break b;
                        r === c && ++l === e && (h = g);
                        r === f && ++m === d && (k = g);
                        if (null !== (y = q.nextSibling)) break;
                        q = r;
                        r = q.parentNode;
                    }
                    q = y;
                }
                c = -1 === h || -1 === k ? null : {
                    start: h,
                    end: k
                };
            } else c = null;
        }
        c = c || {
            start: 0,
            end: 0
        };
    } else c = null;
    $9e3d383a4c02c1e5$var$Df = {
        focusedElem: a,
        selectionRange: c
    };
    $9e3d383a4c02c1e5$var$dd = !1;
    for($9e3d383a4c02c1e5$var$V = b; null !== $9e3d383a4c02c1e5$var$V;)if (b = $9e3d383a4c02c1e5$var$V, a = b.child, 0 !== (b.subtreeFlags & 1028) && null !== a) a.return = b, $9e3d383a4c02c1e5$var$V = a;
    else for(; null !== $9e3d383a4c02c1e5$var$V;){
        b = $9e3d383a4c02c1e5$var$V;
        try {
            var n = b.alternate;
            if (0 !== (b.flags & 1024)) switch(b.tag){
                case 0:
                case 11:
                case 15:
                    break;
                case 1:
                    if (null !== n) {
                        var t = n.memoizedProps, J = n.memoizedState, x = b.stateNode, w = x.getSnapshotBeforeUpdate(b.elementType === b.type ? t : $9e3d383a4c02c1e5$var$Ci(b.type, t), J);
                        x.__reactInternalSnapshotBeforeUpdate = w;
                    }
                    break;
                case 3:
                    var u = b.stateNode.containerInfo;
                    1 === u.nodeType ? u.textContent = "" : 9 === u.nodeType && u.documentElement && u.removeChild(u.documentElement);
                    break;
                case 5:
                case 6:
                case 4:
                case 17:
                    break;
                default:
                    throw Error($9e3d383a4c02c1e5$var$p(163));
            }
        } catch (F) {
            $9e3d383a4c02c1e5$var$W(b, b.return, F);
        }
        a = b.sibling;
        if (null !== a) {
            a.return = b.return;
            $9e3d383a4c02c1e5$var$V = a;
            break;
        }
        $9e3d383a4c02c1e5$var$V = b.return;
    }
    n = $9e3d383a4c02c1e5$var$Nj;
    $9e3d383a4c02c1e5$var$Nj = !1;
    return n;
}
function $9e3d383a4c02c1e5$var$Pj(a, b, c) {
    var d = b.updateQueue;
    d = null !== d ? d.lastEffect : null;
    if (null !== d) {
        var e = d = d.next;
        do {
            if ((e.tag & a) === a) {
                var f = e.destroy;
                e.destroy = void 0;
                void 0 !== f && $9e3d383a4c02c1e5$var$Mj(b, c, f);
            }
            e = e.next;
        }while (e !== d);
    }
}
function $9e3d383a4c02c1e5$var$Qj(a, b) {
    b = b.updateQueue;
    b = null !== b ? b.lastEffect : null;
    if (null !== b) {
        var c = b = b.next;
        do {
            if ((c.tag & a) === a) {
                var d = c.create;
                c.destroy = d();
            }
            c = c.next;
        }while (c !== b);
    }
}
function $9e3d383a4c02c1e5$var$Rj(a) {
    var b = a.ref;
    if (null !== b) {
        var c = a.stateNode;
        switch(a.tag){
            case 5:
                a = c;
                break;
            default:
                a = c;
        }
        "function" === typeof b ? b(a) : b.current = a;
    }
}
function $9e3d383a4c02c1e5$var$Sj(a) {
    var b = a.alternate;
    null !== b && (a.alternate = null, $9e3d383a4c02c1e5$var$Sj(b));
    a.child = null;
    a.deletions = null;
    a.sibling = null;
    5 === a.tag && (b = a.stateNode, null !== b && (delete b[$9e3d383a4c02c1e5$var$Of], delete b[$9e3d383a4c02c1e5$var$Pf], delete b[$9e3d383a4c02c1e5$var$of], delete b[$9e3d383a4c02c1e5$var$Qf], delete b[$9e3d383a4c02c1e5$var$Rf]));
    a.stateNode = null;
    a.return = null;
    a.dependencies = null;
    a.memoizedProps = null;
    a.memoizedState = null;
    a.pendingProps = null;
    a.stateNode = null;
    a.updateQueue = null;
}
function $9e3d383a4c02c1e5$var$Tj(a) {
    return 5 === a.tag || 3 === a.tag || 4 === a.tag;
}
function $9e3d383a4c02c1e5$var$Uj(a) {
    a: for(;;){
        for(; null === a.sibling;){
            if (null === a.return || $9e3d383a4c02c1e5$var$Tj(a.return)) return null;
            a = a.return;
        }
        a.sibling.return = a.return;
        for(a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag;){
            if (a.flags & 2) continue a;
            if (null === a.child || 4 === a.tag) continue a;
            else a.child.return = a, a = a.child;
        }
        if (!(a.flags & 2)) return a.stateNode;
    }
}
function $9e3d383a4c02c1e5$var$Vj(a, b, c) {
    var d = a.tag;
    if (5 === d || 6 === d) a = a.stateNode, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = $9e3d383a4c02c1e5$var$Bf));
    else if (4 !== d && (a = a.child, null !== a)) for($9e3d383a4c02c1e5$var$Vj(a, b, c), a = a.sibling; null !== a;)$9e3d383a4c02c1e5$var$Vj(a, b, c), a = a.sibling;
}
function $9e3d383a4c02c1e5$var$Wj(a, b, c) {
    var d = a.tag;
    if (5 === d || 6 === d) a = a.stateNode, b ? c.insertBefore(a, b) : c.appendChild(a);
    else if (4 !== d && (a = a.child, null !== a)) for($9e3d383a4c02c1e5$var$Wj(a, b, c), a = a.sibling; null !== a;)$9e3d383a4c02c1e5$var$Wj(a, b, c), a = a.sibling;
}
var $9e3d383a4c02c1e5$var$X = null, $9e3d383a4c02c1e5$var$Xj = !1;
function $9e3d383a4c02c1e5$var$Yj(a, b, c) {
    for(c = c.child; null !== c;)$9e3d383a4c02c1e5$var$Zj(a, b, c), c = c.sibling;
}
function $9e3d383a4c02c1e5$var$Zj(a, b, c) {
    if ($9e3d383a4c02c1e5$var$lc && "function" === typeof $9e3d383a4c02c1e5$var$lc.onCommitFiberUnmount) try {
        $9e3d383a4c02c1e5$var$lc.onCommitFiberUnmount($9e3d383a4c02c1e5$var$kc, c);
    } catch (h) {}
    switch(c.tag){
        case 5:
            $9e3d383a4c02c1e5$var$U || $9e3d383a4c02c1e5$var$Lj(c, b);
        case 6:
            var d = $9e3d383a4c02c1e5$var$X, e = $9e3d383a4c02c1e5$var$Xj;
            $9e3d383a4c02c1e5$var$X = null;
            $9e3d383a4c02c1e5$var$Yj(a, b, c);
            $9e3d383a4c02c1e5$var$X = d;
            $9e3d383a4c02c1e5$var$Xj = e;
            null !== $9e3d383a4c02c1e5$var$X && ($9e3d383a4c02c1e5$var$Xj ? (a = $9e3d383a4c02c1e5$var$X, c = c.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c) : a.removeChild(c)) : $9e3d383a4c02c1e5$var$X.removeChild(c.stateNode));
            break;
        case 18:
            null !== $9e3d383a4c02c1e5$var$X && ($9e3d383a4c02c1e5$var$Xj ? (a = $9e3d383a4c02c1e5$var$X, c = c.stateNode, 8 === a.nodeType ? $9e3d383a4c02c1e5$var$Kf(a.parentNode, c) : 1 === a.nodeType && $9e3d383a4c02c1e5$var$Kf(a, c), $9e3d383a4c02c1e5$var$bd(a)) : $9e3d383a4c02c1e5$var$Kf($9e3d383a4c02c1e5$var$X, c.stateNode));
            break;
        case 4:
            d = $9e3d383a4c02c1e5$var$X;
            e = $9e3d383a4c02c1e5$var$Xj;
            $9e3d383a4c02c1e5$var$X = c.stateNode.containerInfo;
            $9e3d383a4c02c1e5$var$Xj = !0;
            $9e3d383a4c02c1e5$var$Yj(a, b, c);
            $9e3d383a4c02c1e5$var$X = d;
            $9e3d383a4c02c1e5$var$Xj = e;
            break;
        case 0:
        case 11:
        case 14:
        case 15:
            if (!$9e3d383a4c02c1e5$var$U && (d = c.updateQueue, null !== d && (d = d.lastEffect, null !== d))) {
                e = d = d.next;
                do {
                    var f = e, g = f.destroy;
                    f = f.tag;
                    void 0 !== g && (0 !== (f & 2) ? $9e3d383a4c02c1e5$var$Mj(c, b, g) : 0 !== (f & 4) && $9e3d383a4c02c1e5$var$Mj(c, b, g));
                    e = e.next;
                }while (e !== d);
            }
            $9e3d383a4c02c1e5$var$Yj(a, b, c);
            break;
        case 1:
            if (!$9e3d383a4c02c1e5$var$U && ($9e3d383a4c02c1e5$var$Lj(c, b), d = c.stateNode, "function" === typeof d.componentWillUnmount)) try {
                d.props = c.memoizedProps, d.state = c.memoizedState, d.componentWillUnmount();
            } catch (h) {
                $9e3d383a4c02c1e5$var$W(c, b, h);
            }
            $9e3d383a4c02c1e5$var$Yj(a, b, c);
            break;
        case 21:
            $9e3d383a4c02c1e5$var$Yj(a, b, c);
            break;
        case 22:
            c.mode & 1 ? ($9e3d383a4c02c1e5$var$U = (d = $9e3d383a4c02c1e5$var$U) || null !== c.memoizedState, $9e3d383a4c02c1e5$var$Yj(a, b, c), $9e3d383a4c02c1e5$var$U = d) : $9e3d383a4c02c1e5$var$Yj(a, b, c);
            break;
        default:
            $9e3d383a4c02c1e5$var$Yj(a, b, c);
    }
}
function $9e3d383a4c02c1e5$var$ak(a) {
    var b = a.updateQueue;
    if (null !== b) {
        a.updateQueue = null;
        var c = a.stateNode;
        null === c && (c = a.stateNode = new $9e3d383a4c02c1e5$var$Kj);
        b.forEach(function(b) {
            var d = $9e3d383a4c02c1e5$var$bk.bind(null, a, b);
            c.has(b) || (c.add(b), b.then(d, d));
        });
    }
}
function $9e3d383a4c02c1e5$var$ck(a, b) {
    var c = b.deletions;
    if (null !== c) for(var d = 0; d < c.length; d++){
        var e = c[d];
        try {
            var f = a, g = b, h = g;
            a: for(; null !== h;){
                switch(h.tag){
                    case 5:
                        $9e3d383a4c02c1e5$var$X = h.stateNode;
                        $9e3d383a4c02c1e5$var$Xj = !1;
                        break a;
                    case 3:
                        $9e3d383a4c02c1e5$var$X = h.stateNode.containerInfo;
                        $9e3d383a4c02c1e5$var$Xj = !0;
                        break a;
                    case 4:
                        $9e3d383a4c02c1e5$var$X = h.stateNode.containerInfo;
                        $9e3d383a4c02c1e5$var$Xj = !0;
                        break a;
                }
                h = h.return;
            }
            if (null === $9e3d383a4c02c1e5$var$X) throw Error($9e3d383a4c02c1e5$var$p(160));
            $9e3d383a4c02c1e5$var$Zj(f, g, e);
            $9e3d383a4c02c1e5$var$X = null;
            $9e3d383a4c02c1e5$var$Xj = !1;
            var k = e.alternate;
            null !== k && (k.return = null);
            e.return = null;
        } catch (l) {
            $9e3d383a4c02c1e5$var$W(e, b, l);
        }
    }
    if (b.subtreeFlags & 12854) for(b = b.child; null !== b;)$9e3d383a4c02c1e5$var$dk(b, a), b = b.sibling;
}
function $9e3d383a4c02c1e5$var$dk(a, b) {
    var c = a.alternate, d = a.flags;
    switch(a.tag){
        case 0:
        case 11:
        case 14:
        case 15:
            $9e3d383a4c02c1e5$var$ck(b, a);
            $9e3d383a4c02c1e5$var$ek(a);
            if (d & 4) {
                try {
                    $9e3d383a4c02c1e5$var$Pj(3, a, a.return), $9e3d383a4c02c1e5$var$Qj(3, a);
                } catch (t) {
                    $9e3d383a4c02c1e5$var$W(a, a.return, t);
                }
                try {
                    $9e3d383a4c02c1e5$var$Pj(5, a, a.return);
                } catch (t) {
                    $9e3d383a4c02c1e5$var$W(a, a.return, t);
                }
            }
            break;
        case 1:
            $9e3d383a4c02c1e5$var$ck(b, a);
            $9e3d383a4c02c1e5$var$ek(a);
            d & 512 && null !== c && $9e3d383a4c02c1e5$var$Lj(c, c.return);
            break;
        case 5:
            $9e3d383a4c02c1e5$var$ck(b, a);
            $9e3d383a4c02c1e5$var$ek(a);
            d & 512 && null !== c && $9e3d383a4c02c1e5$var$Lj(c, c.return);
            if (a.flags & 32) {
                var e = a.stateNode;
                try {
                    $9e3d383a4c02c1e5$var$ob(e, "");
                } catch (t) {
                    $9e3d383a4c02c1e5$var$W(a, a.return, t);
                }
            }
            if (d & 4 && (e = a.stateNode, null != e)) {
                var f = a.memoizedProps, g = null !== c ? c.memoizedProps : f, h = a.type, k = a.updateQueue;
                a.updateQueue = null;
                if (null !== k) try {
                    "input" === h && "radio" === f.type && null != f.name && $9e3d383a4c02c1e5$var$ab(e, f);
                    $9e3d383a4c02c1e5$var$vb(h, g);
                    var l = $9e3d383a4c02c1e5$var$vb(h, f);
                    for(g = 0; g < k.length; g += 2){
                        var m = k[g], q = k[g + 1];
                        "style" === m ? $9e3d383a4c02c1e5$var$sb(e, q) : "dangerouslySetInnerHTML" === m ? $9e3d383a4c02c1e5$var$nb(e, q) : "children" === m ? $9e3d383a4c02c1e5$var$ob(e, q) : $9e3d383a4c02c1e5$var$ta(e, m, q, l);
                    }
                    switch(h){
                        case "input":
                            $9e3d383a4c02c1e5$var$bb(e, f);
                            break;
                        case "textarea":
                            $9e3d383a4c02c1e5$var$ib(e, f);
                            break;
                        case "select":
                            var r = e._wrapperState.wasMultiple;
                            e._wrapperState.wasMultiple = !!f.multiple;
                            var y = f.value;
                            null != y ? $9e3d383a4c02c1e5$var$fb(e, !!f.multiple, y, !1) : r !== !!f.multiple && (null != f.defaultValue ? $9e3d383a4c02c1e5$var$fb(e, !!f.multiple, f.defaultValue, !0) : $9e3d383a4c02c1e5$var$fb(e, !!f.multiple, f.multiple ? [] : "", !1));
                    }
                    e[$9e3d383a4c02c1e5$var$Pf] = f;
                } catch (t) {
                    $9e3d383a4c02c1e5$var$W(a, a.return, t);
                }
            }
            break;
        case 6:
            $9e3d383a4c02c1e5$var$ck(b, a);
            $9e3d383a4c02c1e5$var$ek(a);
            if (d & 4) {
                if (null === a.stateNode) throw Error($9e3d383a4c02c1e5$var$p(162));
                e = a.stateNode;
                f = a.memoizedProps;
                try {
                    e.nodeValue = f;
                } catch (t) {
                    $9e3d383a4c02c1e5$var$W(a, a.return, t);
                }
            }
            break;
        case 3:
            $9e3d383a4c02c1e5$var$ck(b, a);
            $9e3d383a4c02c1e5$var$ek(a);
            if (d & 4 && null !== c && c.memoizedState.isDehydrated) try {
                $9e3d383a4c02c1e5$var$bd(b.containerInfo);
            } catch (t) {
                $9e3d383a4c02c1e5$var$W(a, a.return, t);
            }
            break;
        case 4:
            $9e3d383a4c02c1e5$var$ck(b, a);
            $9e3d383a4c02c1e5$var$ek(a);
            break;
        case 13:
            $9e3d383a4c02c1e5$var$ck(b, a);
            $9e3d383a4c02c1e5$var$ek(a);
            e = a.child;
            e.flags & 8192 && (f = null !== e.memoizedState, e.stateNode.isHidden = f, !f || null !== e.alternate && null !== e.alternate.memoizedState || ($9e3d383a4c02c1e5$var$fk = $9e3d383a4c02c1e5$var$B()));
            d & 4 && $9e3d383a4c02c1e5$var$ak(a);
            break;
        case 22:
            m = null !== c && null !== c.memoizedState;
            a.mode & 1 ? ($9e3d383a4c02c1e5$var$U = (l = $9e3d383a4c02c1e5$var$U) || m, $9e3d383a4c02c1e5$var$ck(b, a), $9e3d383a4c02c1e5$var$U = l) : $9e3d383a4c02c1e5$var$ck(b, a);
            $9e3d383a4c02c1e5$var$ek(a);
            if (d & 8192) {
                l = null !== a.memoizedState;
                if ((a.stateNode.isHidden = l) && !m && 0 !== (a.mode & 1)) for($9e3d383a4c02c1e5$var$V = a, m = a.child; null !== m;){
                    for(q = $9e3d383a4c02c1e5$var$V = m; null !== $9e3d383a4c02c1e5$var$V;){
                        r = $9e3d383a4c02c1e5$var$V;
                        y = r.child;
                        switch(r.tag){
                            case 0:
                            case 11:
                            case 14:
                            case 15:
                                $9e3d383a4c02c1e5$var$Pj(4, r, r.return);
                                break;
                            case 1:
                                $9e3d383a4c02c1e5$var$Lj(r, r.return);
                                var n = r.stateNode;
                                if ("function" === typeof n.componentWillUnmount) {
                                    d = r;
                                    c = r.return;
                                    try {
                                        b = d, n.props = b.memoizedProps, n.state = b.memoizedState, n.componentWillUnmount();
                                    } catch (t) {
                                        $9e3d383a4c02c1e5$var$W(d, c, t);
                                    }
                                }
                                break;
                            case 5:
                                $9e3d383a4c02c1e5$var$Lj(r, r.return);
                                break;
                            case 22:
                                if (null !== r.memoizedState) {
                                    $9e3d383a4c02c1e5$var$gk(q);
                                    continue;
                                }
                        }
                        null !== y ? (y.return = r, $9e3d383a4c02c1e5$var$V = y) : $9e3d383a4c02c1e5$var$gk(q);
                    }
                    m = m.sibling;
                }
                a: for(m = null, q = a;;){
                    if (5 === q.tag) {
                        if (null === m) {
                            m = q;
                            try {
                                e = q.stateNode, l ? (f = e.style, "function" === typeof f.setProperty ? f.setProperty("display", "none", "important") : f.display = "none") : (h = q.stateNode, k = q.memoizedProps.style, g = void 0 !== k && null !== k && k.hasOwnProperty("display") ? k.display : null, h.style.display = $9e3d383a4c02c1e5$var$rb("display", g));
                            } catch (t) {
                                $9e3d383a4c02c1e5$var$W(a, a.return, t);
                            }
                        }
                    } else if (6 === q.tag) {
                        if (null === m) try {
                            q.stateNode.nodeValue = l ? "" : q.memoizedProps;
                        } catch (t) {
                            $9e3d383a4c02c1e5$var$W(a, a.return, t);
                        }
                    } else if ((22 !== q.tag && 23 !== q.tag || null === q.memoizedState || q === a) && null !== q.child) {
                        q.child.return = q;
                        q = q.child;
                        continue;
                    }
                    if (q === a) break a;
                    for(; null === q.sibling;){
                        if (null === q.return || q.return === a) break a;
                        m === q && (m = null);
                        q = q.return;
                    }
                    m === q && (m = null);
                    q.sibling.return = q.return;
                    q = q.sibling;
                }
            }
            break;
        case 19:
            $9e3d383a4c02c1e5$var$ck(b, a);
            $9e3d383a4c02c1e5$var$ek(a);
            d & 4 && $9e3d383a4c02c1e5$var$ak(a);
            break;
        case 21:
            break;
        default:
            $9e3d383a4c02c1e5$var$ck(b, a), $9e3d383a4c02c1e5$var$ek(a);
    }
}
function $9e3d383a4c02c1e5$var$ek(a) {
    var b = a.flags;
    if (b & 2) {
        try {
            a: {
                for(var c = a.return; null !== c;){
                    if ($9e3d383a4c02c1e5$var$Tj(c)) {
                        var d = c;
                        break a;
                    }
                    c = c.return;
                }
                throw Error($9e3d383a4c02c1e5$var$p(160));
            }
            switch(d.tag){
                case 5:
                    var e = d.stateNode;
                    d.flags & 32 && ($9e3d383a4c02c1e5$var$ob(e, ""), d.flags &= -33);
                    var f = $9e3d383a4c02c1e5$var$Uj(a);
                    $9e3d383a4c02c1e5$var$Wj(a, f, e);
                    break;
                case 3:
                case 4:
                    var g = d.stateNode.containerInfo, h = $9e3d383a4c02c1e5$var$Uj(a);
                    $9e3d383a4c02c1e5$var$Vj(a, h, g);
                    break;
                default:
                    throw Error($9e3d383a4c02c1e5$var$p(161));
            }
        } catch (k) {
            $9e3d383a4c02c1e5$var$W(a, a.return, k);
        }
        a.flags &= -3;
    }
    b & 4096 && (a.flags &= -4097);
}
function $9e3d383a4c02c1e5$var$hk(a, b, c) {
    $9e3d383a4c02c1e5$var$V = a;
    $9e3d383a4c02c1e5$var$ik(a, b, c);
}
function $9e3d383a4c02c1e5$var$ik(a, b, c) {
    for(var d = 0 !== (a.mode & 1); null !== $9e3d383a4c02c1e5$var$V;){
        var e = $9e3d383a4c02c1e5$var$V, f = e.child;
        if (22 === e.tag && d) {
            var g = null !== e.memoizedState || $9e3d383a4c02c1e5$var$Jj;
            if (!g) {
                var h = e.alternate, k = null !== h && null !== h.memoizedState || $9e3d383a4c02c1e5$var$U;
                h = $9e3d383a4c02c1e5$var$Jj;
                var l = $9e3d383a4c02c1e5$var$U;
                $9e3d383a4c02c1e5$var$Jj = g;
                if (($9e3d383a4c02c1e5$var$U = k) && !l) for($9e3d383a4c02c1e5$var$V = e; null !== $9e3d383a4c02c1e5$var$V;)g = $9e3d383a4c02c1e5$var$V, k = g.child, 22 === g.tag && null !== g.memoizedState ? $9e3d383a4c02c1e5$var$jk(e) : null !== k ? (k.return = g, $9e3d383a4c02c1e5$var$V = k) : $9e3d383a4c02c1e5$var$jk(e);
                for(; null !== f;)$9e3d383a4c02c1e5$var$V = f, $9e3d383a4c02c1e5$var$ik(f, b, c), f = f.sibling;
                $9e3d383a4c02c1e5$var$V = e;
                $9e3d383a4c02c1e5$var$Jj = h;
                $9e3d383a4c02c1e5$var$U = l;
            }
            $9e3d383a4c02c1e5$var$kk(a, b, c);
        } else 0 !== (e.subtreeFlags & 8772) && null !== f ? (f.return = e, $9e3d383a4c02c1e5$var$V = f) : $9e3d383a4c02c1e5$var$kk(a, b, c);
    }
}
function $9e3d383a4c02c1e5$var$kk(a) {
    for(; null !== $9e3d383a4c02c1e5$var$V;){
        var b = $9e3d383a4c02c1e5$var$V;
        if (0 !== (b.flags & 8772)) {
            var c = b.alternate;
            try {
                if (0 !== (b.flags & 8772)) switch(b.tag){
                    case 0:
                    case 11:
                    case 15:
                        $9e3d383a4c02c1e5$var$U || $9e3d383a4c02c1e5$var$Qj(5, b);
                        break;
                    case 1:
                        var d = b.stateNode;
                        if (b.flags & 4 && !$9e3d383a4c02c1e5$var$U) {
                            if (null === c) d.componentDidMount();
                            else {
                                var e = b.elementType === b.type ? c.memoizedProps : $9e3d383a4c02c1e5$var$Ci(b.type, c.memoizedProps);
                                d.componentDidUpdate(e, c.memoizedState, d.__reactInternalSnapshotBeforeUpdate);
                            }
                        }
                        var f = b.updateQueue;
                        null !== f && $9e3d383a4c02c1e5$var$sh(b, f, d);
                        break;
                    case 3:
                        var g = b.updateQueue;
                        if (null !== g) {
                            c = null;
                            if (null !== b.child) switch(b.child.tag){
                                case 5:
                                    c = b.child.stateNode;
                                    break;
                                case 1:
                                    c = b.child.stateNode;
                            }
                            $9e3d383a4c02c1e5$var$sh(b, g, c);
                        }
                        break;
                    case 5:
                        var h = b.stateNode;
                        if (null === c && b.flags & 4) {
                            c = h;
                            var k = b.memoizedProps;
                            switch(b.type){
                                case "button":
                                case "input":
                                case "select":
                                case "textarea":
                                    k.autoFocus && c.focus();
                                    break;
                                case "img":
                                    k.src && (c.src = k.src);
                            }
                        }
                        break;
                    case 6:
                        break;
                    case 4:
                        break;
                    case 12:
                        break;
                    case 13:
                        if (null === b.memoizedState) {
                            var l = b.alternate;
                            if (null !== l) {
                                var m = l.memoizedState;
                                if (null !== m) {
                                    var q = m.dehydrated;
                                    null !== q && $9e3d383a4c02c1e5$var$bd(q);
                                }
                            }
                        }
                        break;
                    case 19:
                    case 17:
                    case 21:
                    case 22:
                    case 23:
                    case 25:
                        break;
                    default:
                        throw Error($9e3d383a4c02c1e5$var$p(163));
                }
                $9e3d383a4c02c1e5$var$U || b.flags & 512 && $9e3d383a4c02c1e5$var$Rj(b);
            } catch (r) {
                $9e3d383a4c02c1e5$var$W(b, b.return, r);
            }
        }
        if (b === a) {
            $9e3d383a4c02c1e5$var$V = null;
            break;
        }
        c = b.sibling;
        if (null !== c) {
            c.return = b.return;
            $9e3d383a4c02c1e5$var$V = c;
            break;
        }
        $9e3d383a4c02c1e5$var$V = b.return;
    }
}
function $9e3d383a4c02c1e5$var$gk(a) {
    for(; null !== $9e3d383a4c02c1e5$var$V;){
        var b = $9e3d383a4c02c1e5$var$V;
        if (b === a) {
            $9e3d383a4c02c1e5$var$V = null;
            break;
        }
        var c = b.sibling;
        if (null !== c) {
            c.return = b.return;
            $9e3d383a4c02c1e5$var$V = c;
            break;
        }
        $9e3d383a4c02c1e5$var$V = b.return;
    }
}
function $9e3d383a4c02c1e5$var$jk(a) {
    for(; null !== $9e3d383a4c02c1e5$var$V;){
        var b = $9e3d383a4c02c1e5$var$V;
        try {
            switch(b.tag){
                case 0:
                case 11:
                case 15:
                    var c = b.return;
                    try {
                        $9e3d383a4c02c1e5$var$Qj(4, b);
                    } catch (k) {
                        $9e3d383a4c02c1e5$var$W(b, c, k);
                    }
                    break;
                case 1:
                    var d = b.stateNode;
                    if ("function" === typeof d.componentDidMount) {
                        var e = b.return;
                        try {
                            d.componentDidMount();
                        } catch (k) {
                            $9e3d383a4c02c1e5$var$W(b, e, k);
                        }
                    }
                    var f = b.return;
                    try {
                        $9e3d383a4c02c1e5$var$Rj(b);
                    } catch (k) {
                        $9e3d383a4c02c1e5$var$W(b, f, k);
                    }
                    break;
                case 5:
                    var g = b.return;
                    try {
                        $9e3d383a4c02c1e5$var$Rj(b);
                    } catch (k) {
                        $9e3d383a4c02c1e5$var$W(b, g, k);
                    }
            }
        } catch (k) {
            $9e3d383a4c02c1e5$var$W(b, b.return, k);
        }
        if (b === a) {
            $9e3d383a4c02c1e5$var$V = null;
            break;
        }
        var h = b.sibling;
        if (null !== h) {
            h.return = b.return;
            $9e3d383a4c02c1e5$var$V = h;
            break;
        }
        $9e3d383a4c02c1e5$var$V = b.return;
    }
}
var $9e3d383a4c02c1e5$var$lk = Math.ceil, $9e3d383a4c02c1e5$var$mk = $9e3d383a4c02c1e5$var$ua.ReactCurrentDispatcher, $9e3d383a4c02c1e5$var$nk = $9e3d383a4c02c1e5$var$ua.ReactCurrentOwner, $9e3d383a4c02c1e5$var$ok = $9e3d383a4c02c1e5$var$ua.ReactCurrentBatchConfig, $9e3d383a4c02c1e5$var$K = 0, $9e3d383a4c02c1e5$var$Q = null, $9e3d383a4c02c1e5$var$Y = null, $9e3d383a4c02c1e5$var$Z = 0, $9e3d383a4c02c1e5$var$fj = 0, $9e3d383a4c02c1e5$var$ej = $9e3d383a4c02c1e5$var$Uf(0), $9e3d383a4c02c1e5$var$T = 0, $9e3d383a4c02c1e5$var$pk = null, $9e3d383a4c02c1e5$var$rh = 0, $9e3d383a4c02c1e5$var$qk = 0, $9e3d383a4c02c1e5$var$rk = 0, $9e3d383a4c02c1e5$var$sk = null, $9e3d383a4c02c1e5$var$tk = null, $9e3d383a4c02c1e5$var$fk = 0, $9e3d383a4c02c1e5$var$Gj = Infinity, $9e3d383a4c02c1e5$var$uk = null, $9e3d383a4c02c1e5$var$Oi = !1, $9e3d383a4c02c1e5$var$Pi = null, $9e3d383a4c02c1e5$var$Ri = null, $9e3d383a4c02c1e5$var$vk = !1, $9e3d383a4c02c1e5$var$wk = null, $9e3d383a4c02c1e5$var$xk = 0, $9e3d383a4c02c1e5$var$yk = 0, $9e3d383a4c02c1e5$var$zk = null, $9e3d383a4c02c1e5$var$Ak = -1, $9e3d383a4c02c1e5$var$Bk = 0;
function $9e3d383a4c02c1e5$var$R() {
    return 0 !== ($9e3d383a4c02c1e5$var$K & 6) ? $9e3d383a4c02c1e5$var$B() : -1 !== $9e3d383a4c02c1e5$var$Ak ? $9e3d383a4c02c1e5$var$Ak : $9e3d383a4c02c1e5$var$Ak = $9e3d383a4c02c1e5$var$B();
}
function $9e3d383a4c02c1e5$var$yi(a) {
    if (0 === (a.mode & 1)) return 1;
    if (0 !== ($9e3d383a4c02c1e5$var$K & 2) && 0 !== $9e3d383a4c02c1e5$var$Z) return $9e3d383a4c02c1e5$var$Z & -$9e3d383a4c02c1e5$var$Z;
    if (null !== $9e3d383a4c02c1e5$var$Kg.transition) return 0 === $9e3d383a4c02c1e5$var$Bk && ($9e3d383a4c02c1e5$var$Bk = $9e3d383a4c02c1e5$var$yc()), $9e3d383a4c02c1e5$var$Bk;
    a = $9e3d383a4c02c1e5$var$C;
    if (0 !== a) return a;
    a = window.event;
    a = void 0 === a ? 16 : $9e3d383a4c02c1e5$var$jd(a.type);
    return a;
}
function $9e3d383a4c02c1e5$var$gi(a, b, c, d) {
    if (50 < $9e3d383a4c02c1e5$var$yk) throw $9e3d383a4c02c1e5$var$yk = 0, $9e3d383a4c02c1e5$var$zk = null, Error($9e3d383a4c02c1e5$var$p(185));
    $9e3d383a4c02c1e5$var$Ac(a, c, d);
    if (0 === ($9e3d383a4c02c1e5$var$K & 2) || a !== $9e3d383a4c02c1e5$var$Q) a === $9e3d383a4c02c1e5$var$Q && (0 === ($9e3d383a4c02c1e5$var$K & 2) && ($9e3d383a4c02c1e5$var$qk |= c), 4 === $9e3d383a4c02c1e5$var$T && $9e3d383a4c02c1e5$var$Ck(a, $9e3d383a4c02c1e5$var$Z)), $9e3d383a4c02c1e5$var$Dk(a, d), 1 === c && 0 === $9e3d383a4c02c1e5$var$K && 0 === (b.mode & 1) && ($9e3d383a4c02c1e5$var$Gj = $9e3d383a4c02c1e5$var$B() + 500, $9e3d383a4c02c1e5$var$fg && $9e3d383a4c02c1e5$var$jg());
}
function $9e3d383a4c02c1e5$var$Dk(a, b) {
    var c = a.callbackNode;
    $9e3d383a4c02c1e5$var$wc(a, b);
    var d = $9e3d383a4c02c1e5$var$uc(a, a === $9e3d383a4c02c1e5$var$Q ? $9e3d383a4c02c1e5$var$Z : 0);
    if (0 === d) null !== c && $9e3d383a4c02c1e5$var$bc(c), a.callbackNode = null, a.callbackPriority = 0;
    else if (b = d & -d, a.callbackPriority !== b) {
        null != c && $9e3d383a4c02c1e5$var$bc(c);
        if (1 === b) 0 === a.tag ? $9e3d383a4c02c1e5$var$ig($9e3d383a4c02c1e5$var$Ek.bind(null, a)) : $9e3d383a4c02c1e5$var$hg($9e3d383a4c02c1e5$var$Ek.bind(null, a)), $9e3d383a4c02c1e5$var$Jf(function() {
            0 === ($9e3d383a4c02c1e5$var$K & 6) && $9e3d383a4c02c1e5$var$jg();
        }), c = null;
        else {
            switch($9e3d383a4c02c1e5$var$Dc(d)){
                case 1:
                    c = $9e3d383a4c02c1e5$var$fc;
                    break;
                case 4:
                    c = $9e3d383a4c02c1e5$var$gc;
                    break;
                case 16:
                    c = $9e3d383a4c02c1e5$var$hc;
                    break;
                case 536870912:
                    c = $9e3d383a4c02c1e5$var$jc;
                    break;
                default:
                    c = $9e3d383a4c02c1e5$var$hc;
            }
            c = $9e3d383a4c02c1e5$var$Fk(c, $9e3d383a4c02c1e5$var$Gk.bind(null, a));
        }
        a.callbackPriority = b;
        a.callbackNode = c;
    }
}
function $9e3d383a4c02c1e5$var$Gk(a, b) {
    $9e3d383a4c02c1e5$var$Ak = -1;
    $9e3d383a4c02c1e5$var$Bk = 0;
    if (0 !== ($9e3d383a4c02c1e5$var$K & 6)) throw Error($9e3d383a4c02c1e5$var$p(327));
    var c = a.callbackNode;
    if ($9e3d383a4c02c1e5$var$Hk() && a.callbackNode !== c) return null;
    var d = $9e3d383a4c02c1e5$var$uc(a, a === $9e3d383a4c02c1e5$var$Q ? $9e3d383a4c02c1e5$var$Z : 0);
    if (0 === d) return null;
    if (0 !== (d & 30) || 0 !== (d & a.expiredLanes) || b) b = $9e3d383a4c02c1e5$var$Ik(a, d);
    else {
        b = d;
        var e = $9e3d383a4c02c1e5$var$K;
        $9e3d383a4c02c1e5$var$K |= 2;
        var f = $9e3d383a4c02c1e5$var$Jk();
        if ($9e3d383a4c02c1e5$var$Q !== a || $9e3d383a4c02c1e5$var$Z !== b) $9e3d383a4c02c1e5$var$uk = null, $9e3d383a4c02c1e5$var$Gj = $9e3d383a4c02c1e5$var$B() + 500, $9e3d383a4c02c1e5$var$Kk(a, b);
        for(;;)try {
            $9e3d383a4c02c1e5$var$Lk();
            break;
        } catch (h) {
            $9e3d383a4c02c1e5$var$Mk(a, h);
        }
        $9e3d383a4c02c1e5$var$$g();
        $9e3d383a4c02c1e5$var$mk.current = f;
        $9e3d383a4c02c1e5$var$K = e;
        null !== $9e3d383a4c02c1e5$var$Y ? b = 0 : ($9e3d383a4c02c1e5$var$Q = null, $9e3d383a4c02c1e5$var$Z = 0, b = $9e3d383a4c02c1e5$var$T);
    }
    if (0 !== b) {
        2 === b && (e = $9e3d383a4c02c1e5$var$xc(a), 0 !== e && (d = e, b = $9e3d383a4c02c1e5$var$Nk(a, e)));
        if (1 === b) throw c = $9e3d383a4c02c1e5$var$pk, $9e3d383a4c02c1e5$var$Kk(a, 0), $9e3d383a4c02c1e5$var$Ck(a, d), $9e3d383a4c02c1e5$var$Dk(a, $9e3d383a4c02c1e5$var$B()), c;
        if (6 === b) $9e3d383a4c02c1e5$var$Ck(a, d);
        else {
            e = a.current.alternate;
            if (0 === (d & 30) && !$9e3d383a4c02c1e5$var$Ok(e) && (b = $9e3d383a4c02c1e5$var$Ik(a, d), 2 === b && (f = $9e3d383a4c02c1e5$var$xc(a), 0 !== f && (d = f, b = $9e3d383a4c02c1e5$var$Nk(a, f))), 1 === b)) throw c = $9e3d383a4c02c1e5$var$pk, $9e3d383a4c02c1e5$var$Kk(a, 0), $9e3d383a4c02c1e5$var$Ck(a, d), $9e3d383a4c02c1e5$var$Dk(a, $9e3d383a4c02c1e5$var$B()), c;
            a.finishedWork = e;
            a.finishedLanes = d;
            switch(b){
                case 0:
                case 1:
                    throw Error($9e3d383a4c02c1e5$var$p(345));
                case 2:
                    $9e3d383a4c02c1e5$var$Pk(a, $9e3d383a4c02c1e5$var$tk, $9e3d383a4c02c1e5$var$uk);
                    break;
                case 3:
                    $9e3d383a4c02c1e5$var$Ck(a, d);
                    if ((d & 130023424) === d && (b = $9e3d383a4c02c1e5$var$fk + 500 - $9e3d383a4c02c1e5$var$B(), 10 < b)) {
                        if (0 !== $9e3d383a4c02c1e5$var$uc(a, 0)) break;
                        e = a.suspendedLanes;
                        if ((e & d) !== d) {
                            $9e3d383a4c02c1e5$var$R();
                            a.pingedLanes |= a.suspendedLanes & e;
                            break;
                        }
                        a.timeoutHandle = $9e3d383a4c02c1e5$var$Ff($9e3d383a4c02c1e5$var$Pk.bind(null, a, $9e3d383a4c02c1e5$var$tk, $9e3d383a4c02c1e5$var$uk), b);
                        break;
                    }
                    $9e3d383a4c02c1e5$var$Pk(a, $9e3d383a4c02c1e5$var$tk, $9e3d383a4c02c1e5$var$uk);
                    break;
                case 4:
                    $9e3d383a4c02c1e5$var$Ck(a, d);
                    if ((d & 4194240) === d) break;
                    b = a.eventTimes;
                    for(e = -1; 0 < d;){
                        var g = 31 - $9e3d383a4c02c1e5$var$oc(d);
                        f = 1 << g;
                        g = b[g];
                        g > e && (e = g);
                        d &= ~f;
                    }
                    d = e;
                    d = $9e3d383a4c02c1e5$var$B() - d;
                    d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3E3 > d ? 3E3 : 4320 > d ? 4320 : 1960 * $9e3d383a4c02c1e5$var$lk(d / 1960)) - d;
                    if (10 < d) {
                        a.timeoutHandle = $9e3d383a4c02c1e5$var$Ff($9e3d383a4c02c1e5$var$Pk.bind(null, a, $9e3d383a4c02c1e5$var$tk, $9e3d383a4c02c1e5$var$uk), d);
                        break;
                    }
                    $9e3d383a4c02c1e5$var$Pk(a, $9e3d383a4c02c1e5$var$tk, $9e3d383a4c02c1e5$var$uk);
                    break;
                case 5:
                    $9e3d383a4c02c1e5$var$Pk(a, $9e3d383a4c02c1e5$var$tk, $9e3d383a4c02c1e5$var$uk);
                    break;
                default:
                    throw Error($9e3d383a4c02c1e5$var$p(329));
            }
        }
    }
    $9e3d383a4c02c1e5$var$Dk(a, $9e3d383a4c02c1e5$var$B());
    return a.callbackNode === c ? $9e3d383a4c02c1e5$var$Gk.bind(null, a) : null;
}
function $9e3d383a4c02c1e5$var$Nk(a, b) {
    var c = $9e3d383a4c02c1e5$var$sk;
    a.current.memoizedState.isDehydrated && ($9e3d383a4c02c1e5$var$Kk(a, b).flags |= 256);
    a = $9e3d383a4c02c1e5$var$Ik(a, b);
    2 !== a && (b = $9e3d383a4c02c1e5$var$tk, $9e3d383a4c02c1e5$var$tk = c, null !== b && $9e3d383a4c02c1e5$var$Fj(b));
    return a;
}
function $9e3d383a4c02c1e5$var$Fj(a) {
    null === $9e3d383a4c02c1e5$var$tk ? $9e3d383a4c02c1e5$var$tk = a : $9e3d383a4c02c1e5$var$tk.push.apply($9e3d383a4c02c1e5$var$tk, a);
}
function $9e3d383a4c02c1e5$var$Ok(a) {
    for(var b = a;;){
        if (b.flags & 16384) {
            var c = b.updateQueue;
            if (null !== c && (c = c.stores, null !== c)) for(var d = 0; d < c.length; d++){
                var e = c[d], f = e.getSnapshot;
                e = e.value;
                try {
                    if (!$9e3d383a4c02c1e5$var$He(f(), e)) return !1;
                } catch (g) {
                    return !1;
                }
            }
        }
        c = b.child;
        if (b.subtreeFlags & 16384 && null !== c) c.return = b, b = c;
        else {
            if (b === a) break;
            for(; null === b.sibling;){
                if (null === b.return || b.return === a) return !0;
                b = b.return;
            }
            b.sibling.return = b.return;
            b = b.sibling;
        }
    }
    return !0;
}
function $9e3d383a4c02c1e5$var$Ck(a, b) {
    b &= ~$9e3d383a4c02c1e5$var$rk;
    b &= ~$9e3d383a4c02c1e5$var$qk;
    a.suspendedLanes |= b;
    a.pingedLanes &= ~b;
    for(a = a.expirationTimes; 0 < b;){
        var c = 31 - $9e3d383a4c02c1e5$var$oc(b), d = 1 << c;
        a[c] = -1;
        b &= ~d;
    }
}
function $9e3d383a4c02c1e5$var$Ek(a) {
    if (0 !== ($9e3d383a4c02c1e5$var$K & 6)) throw Error($9e3d383a4c02c1e5$var$p(327));
    $9e3d383a4c02c1e5$var$Hk();
    var b = $9e3d383a4c02c1e5$var$uc(a, 0);
    if (0 === (b & 1)) return $9e3d383a4c02c1e5$var$Dk(a, $9e3d383a4c02c1e5$var$B()), null;
    var c = $9e3d383a4c02c1e5$var$Ik(a, b);
    if (0 !== a.tag && 2 === c) {
        var d = $9e3d383a4c02c1e5$var$xc(a);
        0 !== d && (b = d, c = $9e3d383a4c02c1e5$var$Nk(a, d));
    }
    if (1 === c) throw c = $9e3d383a4c02c1e5$var$pk, $9e3d383a4c02c1e5$var$Kk(a, 0), $9e3d383a4c02c1e5$var$Ck(a, b), $9e3d383a4c02c1e5$var$Dk(a, $9e3d383a4c02c1e5$var$B()), c;
    if (6 === c) throw Error($9e3d383a4c02c1e5$var$p(345));
    a.finishedWork = a.current.alternate;
    a.finishedLanes = b;
    $9e3d383a4c02c1e5$var$Pk(a, $9e3d383a4c02c1e5$var$tk, $9e3d383a4c02c1e5$var$uk);
    $9e3d383a4c02c1e5$var$Dk(a, $9e3d383a4c02c1e5$var$B());
    return null;
}
function $9e3d383a4c02c1e5$var$Qk(a, b) {
    var c = $9e3d383a4c02c1e5$var$K;
    $9e3d383a4c02c1e5$var$K |= 1;
    try {
        return a(b);
    } finally{
        $9e3d383a4c02c1e5$var$K = c, 0 === $9e3d383a4c02c1e5$var$K && ($9e3d383a4c02c1e5$var$Gj = $9e3d383a4c02c1e5$var$B() + 500, $9e3d383a4c02c1e5$var$fg && $9e3d383a4c02c1e5$var$jg());
    }
}
function $9e3d383a4c02c1e5$var$Rk(a) {
    null !== $9e3d383a4c02c1e5$var$wk && 0 === $9e3d383a4c02c1e5$var$wk.tag && 0 === ($9e3d383a4c02c1e5$var$K & 6) && $9e3d383a4c02c1e5$var$Hk();
    var b = $9e3d383a4c02c1e5$var$K;
    $9e3d383a4c02c1e5$var$K |= 1;
    var c = $9e3d383a4c02c1e5$var$ok.transition, d = $9e3d383a4c02c1e5$var$C;
    try {
        if ($9e3d383a4c02c1e5$var$ok.transition = null, $9e3d383a4c02c1e5$var$C = 1, a) return a();
    } finally{
        $9e3d383a4c02c1e5$var$C = d, $9e3d383a4c02c1e5$var$ok.transition = c, $9e3d383a4c02c1e5$var$K = b, 0 === ($9e3d383a4c02c1e5$var$K & 6) && $9e3d383a4c02c1e5$var$jg();
    }
}
function $9e3d383a4c02c1e5$var$Hj() {
    $9e3d383a4c02c1e5$var$fj = $9e3d383a4c02c1e5$var$ej.current;
    $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$ej);
}
function $9e3d383a4c02c1e5$var$Kk(a, b) {
    a.finishedWork = null;
    a.finishedLanes = 0;
    var c = a.timeoutHandle;
    -1 !== c && (a.timeoutHandle = -1, $9e3d383a4c02c1e5$var$Gf(c));
    if (null !== $9e3d383a4c02c1e5$var$Y) for(c = $9e3d383a4c02c1e5$var$Y.return; null !== c;){
        var d = c;
        $9e3d383a4c02c1e5$var$wg(d);
        switch(d.tag){
            case 1:
                d = d.type.childContextTypes;
                null !== d && void 0 !== d && $9e3d383a4c02c1e5$var$$f();
                break;
            case 3:
                $9e3d383a4c02c1e5$var$zh();
                $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$Wf);
                $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$H);
                $9e3d383a4c02c1e5$var$Eh();
                break;
            case 5:
                $9e3d383a4c02c1e5$var$Bh(d);
                break;
            case 4:
                $9e3d383a4c02c1e5$var$zh();
                break;
            case 13:
                $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$L);
                break;
            case 19:
                $9e3d383a4c02c1e5$var$E($9e3d383a4c02c1e5$var$L);
                break;
            case 10:
                $9e3d383a4c02c1e5$var$ah(d.type._context);
                break;
            case 22:
            case 23:
                $9e3d383a4c02c1e5$var$Hj();
        }
        c = c.return;
    }
    $9e3d383a4c02c1e5$var$Q = a;
    $9e3d383a4c02c1e5$var$Y = a = $9e3d383a4c02c1e5$var$Pg(a.current, null);
    $9e3d383a4c02c1e5$var$Z = $9e3d383a4c02c1e5$var$fj = b;
    $9e3d383a4c02c1e5$var$T = 0;
    $9e3d383a4c02c1e5$var$pk = null;
    $9e3d383a4c02c1e5$var$rk = $9e3d383a4c02c1e5$var$qk = $9e3d383a4c02c1e5$var$rh = 0;
    $9e3d383a4c02c1e5$var$tk = $9e3d383a4c02c1e5$var$sk = null;
    if (null !== $9e3d383a4c02c1e5$var$fh) {
        for(b = 0; b < $9e3d383a4c02c1e5$var$fh.length; b++)if (c = $9e3d383a4c02c1e5$var$fh[b], d = c.interleaved, null !== d) {
            c.interleaved = null;
            var e = d.next, f = c.pending;
            if (null !== f) {
                var g = f.next;
                f.next = e;
                d.next = g;
            }
            c.pending = d;
        }
        $9e3d383a4c02c1e5$var$fh = null;
    }
    return a;
}
function $9e3d383a4c02c1e5$var$Mk(a, b) {
    do {
        var c = $9e3d383a4c02c1e5$var$Y;
        try {
            $9e3d383a4c02c1e5$var$$g();
            $9e3d383a4c02c1e5$var$Fh.current = $9e3d383a4c02c1e5$var$Rh;
            if ($9e3d383a4c02c1e5$var$Ih) {
                for(var d = $9e3d383a4c02c1e5$var$M.memoizedState; null !== d;){
                    var e = d.queue;
                    null !== e && (e.pending = null);
                    d = d.next;
                }
                $9e3d383a4c02c1e5$var$Ih = !1;
            }
            $9e3d383a4c02c1e5$var$Hh = 0;
            $9e3d383a4c02c1e5$var$O = $9e3d383a4c02c1e5$var$N = $9e3d383a4c02c1e5$var$M = null;
            $9e3d383a4c02c1e5$var$Jh = !1;
            $9e3d383a4c02c1e5$var$Kh = 0;
            $9e3d383a4c02c1e5$var$nk.current = null;
            if (null === c || null === c.return) {
                $9e3d383a4c02c1e5$var$T = 1;
                $9e3d383a4c02c1e5$var$pk = b;
                $9e3d383a4c02c1e5$var$Y = null;
                break;
            }
            a: {
                var f = a, g = c.return, h = c, k = b;
                b = $9e3d383a4c02c1e5$var$Z;
                h.flags |= 32768;
                if (null !== k && "object" === typeof k && "function" === typeof k.then) {
                    var l = k, m = h, q = m.tag;
                    if (0 === (m.mode & 1) && (0 === q || 11 === q || 15 === q)) {
                        var r = m.alternate;
                        r ? (m.updateQueue = r.updateQueue, m.memoizedState = r.memoizedState, m.lanes = r.lanes) : (m.updateQueue = null, m.memoizedState = null);
                    }
                    var y = $9e3d383a4c02c1e5$var$Ui(g);
                    if (null !== y) {
                        y.flags &= -257;
                        $9e3d383a4c02c1e5$var$Vi(y, g, h, f, b);
                        y.mode & 1 && $9e3d383a4c02c1e5$var$Si(f, l, b);
                        b = y;
                        k = l;
                        var n = b.updateQueue;
                        if (null === n) {
                            var t = new Set;
                            t.add(k);
                            b.updateQueue = t;
                        } else n.add(k);
                        break a;
                    } else {
                        if (0 === (b & 1)) {
                            $9e3d383a4c02c1e5$var$Si(f, l, b);
                            $9e3d383a4c02c1e5$var$tj();
                            break a;
                        }
                        k = Error($9e3d383a4c02c1e5$var$p(426));
                    }
                } else if ($9e3d383a4c02c1e5$var$I && h.mode & 1) {
                    var J = $9e3d383a4c02c1e5$var$Ui(g);
                    if (null !== J) {
                        0 === (J.flags & 65536) && (J.flags |= 256);
                        $9e3d383a4c02c1e5$var$Vi(J, g, h, f, b);
                        $9e3d383a4c02c1e5$var$Jg($9e3d383a4c02c1e5$var$Ji(k, h));
                        break a;
                    }
                }
                f = k = $9e3d383a4c02c1e5$var$Ji(k, h);
                4 !== $9e3d383a4c02c1e5$var$T && ($9e3d383a4c02c1e5$var$T = 2);
                null === $9e3d383a4c02c1e5$var$sk ? $9e3d383a4c02c1e5$var$sk = [
                    f
                ] : $9e3d383a4c02c1e5$var$sk.push(f);
                f = g;
                do {
                    switch(f.tag){
                        case 3:
                            f.flags |= 65536;
                            b &= -b;
                            f.lanes |= b;
                            var x = $9e3d383a4c02c1e5$var$Ni(f, k, b);
                            $9e3d383a4c02c1e5$var$ph(f, x);
                            break a;
                        case 1:
                            h = k;
                            var w = f.type, u = f.stateNode;
                            if (0 === (f.flags & 128) && ("function" === typeof w.getDerivedStateFromError || null !== u && "function" === typeof u.componentDidCatch && (null === $9e3d383a4c02c1e5$var$Ri || !$9e3d383a4c02c1e5$var$Ri.has(u)))) {
                                f.flags |= 65536;
                                b &= -b;
                                f.lanes |= b;
                                var F = $9e3d383a4c02c1e5$var$Qi(f, h, b);
                                $9e3d383a4c02c1e5$var$ph(f, F);
                                break a;
                            }
                    }
                    f = f.return;
                }while (null !== f);
            }
            $9e3d383a4c02c1e5$var$Sk(c);
        } catch (na) {
            b = na;
            $9e3d383a4c02c1e5$var$Y === c && null !== c && ($9e3d383a4c02c1e5$var$Y = c = c.return);
            continue;
        }
        break;
    }while (1);
}
function $9e3d383a4c02c1e5$var$Jk() {
    var a = $9e3d383a4c02c1e5$var$mk.current;
    $9e3d383a4c02c1e5$var$mk.current = $9e3d383a4c02c1e5$var$Rh;
    return null === a ? $9e3d383a4c02c1e5$var$Rh : a;
}
function $9e3d383a4c02c1e5$var$tj() {
    if (0 === $9e3d383a4c02c1e5$var$T || 3 === $9e3d383a4c02c1e5$var$T || 2 === $9e3d383a4c02c1e5$var$T) $9e3d383a4c02c1e5$var$T = 4;
    null === $9e3d383a4c02c1e5$var$Q || 0 === ($9e3d383a4c02c1e5$var$rh & 268435455) && 0 === ($9e3d383a4c02c1e5$var$qk & 268435455) || $9e3d383a4c02c1e5$var$Ck($9e3d383a4c02c1e5$var$Q, $9e3d383a4c02c1e5$var$Z);
}
function $9e3d383a4c02c1e5$var$Ik(a, b) {
    var c = $9e3d383a4c02c1e5$var$K;
    $9e3d383a4c02c1e5$var$K |= 2;
    var d = $9e3d383a4c02c1e5$var$Jk();
    if ($9e3d383a4c02c1e5$var$Q !== a || $9e3d383a4c02c1e5$var$Z !== b) $9e3d383a4c02c1e5$var$uk = null, $9e3d383a4c02c1e5$var$Kk(a, b);
    for(;;)try {
        $9e3d383a4c02c1e5$var$Tk();
        break;
    } catch (e) {
        $9e3d383a4c02c1e5$var$Mk(a, e);
    }
    $9e3d383a4c02c1e5$var$$g();
    $9e3d383a4c02c1e5$var$K = c;
    $9e3d383a4c02c1e5$var$mk.current = d;
    if (null !== $9e3d383a4c02c1e5$var$Y) throw Error($9e3d383a4c02c1e5$var$p(261));
    $9e3d383a4c02c1e5$var$Q = null;
    $9e3d383a4c02c1e5$var$Z = 0;
    return $9e3d383a4c02c1e5$var$T;
}
function $9e3d383a4c02c1e5$var$Tk() {
    for(; null !== $9e3d383a4c02c1e5$var$Y;)$9e3d383a4c02c1e5$var$Uk($9e3d383a4c02c1e5$var$Y);
}
function $9e3d383a4c02c1e5$var$Lk() {
    for(; null !== $9e3d383a4c02c1e5$var$Y && !$9e3d383a4c02c1e5$var$cc();)$9e3d383a4c02c1e5$var$Uk($9e3d383a4c02c1e5$var$Y);
}
function $9e3d383a4c02c1e5$var$Uk(a) {
    var b = $9e3d383a4c02c1e5$var$Vk(a.alternate, a, $9e3d383a4c02c1e5$var$fj);
    a.memoizedProps = a.pendingProps;
    null === b ? $9e3d383a4c02c1e5$var$Sk(a) : $9e3d383a4c02c1e5$var$Y = b;
    $9e3d383a4c02c1e5$var$nk.current = null;
}
function $9e3d383a4c02c1e5$var$Sk(a) {
    var b = a;
    do {
        var c = b.alternate;
        a = b.return;
        if (0 === (b.flags & 32768)) {
            if (c = $9e3d383a4c02c1e5$var$Ej(c, b, $9e3d383a4c02c1e5$var$fj), null !== c) {
                $9e3d383a4c02c1e5$var$Y = c;
                return;
            }
        } else {
            c = $9e3d383a4c02c1e5$var$Ij(c, b);
            if (null !== c) {
                c.flags &= 32767;
                $9e3d383a4c02c1e5$var$Y = c;
                return;
            }
            if (null !== a) a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;
            else {
                $9e3d383a4c02c1e5$var$T = 6;
                $9e3d383a4c02c1e5$var$Y = null;
                return;
            }
        }
        b = b.sibling;
        if (null !== b) {
            $9e3d383a4c02c1e5$var$Y = b;
            return;
        }
        $9e3d383a4c02c1e5$var$Y = b = a;
    }while (null !== b);
    0 === $9e3d383a4c02c1e5$var$T && ($9e3d383a4c02c1e5$var$T = 5);
}
function $9e3d383a4c02c1e5$var$Pk(a, b, c) {
    var d = $9e3d383a4c02c1e5$var$C, e = $9e3d383a4c02c1e5$var$ok.transition;
    try {
        $9e3d383a4c02c1e5$var$ok.transition = null, $9e3d383a4c02c1e5$var$C = 1, $9e3d383a4c02c1e5$var$Wk(a, b, c, d);
    } finally{
        $9e3d383a4c02c1e5$var$ok.transition = e, $9e3d383a4c02c1e5$var$C = d;
    }
    return null;
}
function $9e3d383a4c02c1e5$var$Wk(a, b, c, d) {
    do $9e3d383a4c02c1e5$var$Hk();
    while (null !== $9e3d383a4c02c1e5$var$wk);
    if (0 !== ($9e3d383a4c02c1e5$var$K & 6)) throw Error($9e3d383a4c02c1e5$var$p(327));
    c = a.finishedWork;
    var e = a.finishedLanes;
    if (null === c) return null;
    a.finishedWork = null;
    a.finishedLanes = 0;
    if (c === a.current) throw Error($9e3d383a4c02c1e5$var$p(177));
    a.callbackNode = null;
    a.callbackPriority = 0;
    var f = c.lanes | c.childLanes;
    $9e3d383a4c02c1e5$var$Bc(a, f);
    a === $9e3d383a4c02c1e5$var$Q && ($9e3d383a4c02c1e5$var$Y = $9e3d383a4c02c1e5$var$Q = null, $9e3d383a4c02c1e5$var$Z = 0);
    0 === (c.subtreeFlags & 2064) && 0 === (c.flags & 2064) || $9e3d383a4c02c1e5$var$vk || ($9e3d383a4c02c1e5$var$vk = !0, $9e3d383a4c02c1e5$var$Fk($9e3d383a4c02c1e5$var$hc, function() {
        $9e3d383a4c02c1e5$var$Hk();
        return null;
    }));
    f = 0 !== (c.flags & 15990);
    if (0 !== (c.subtreeFlags & 15990) || f) {
        f = $9e3d383a4c02c1e5$var$ok.transition;
        $9e3d383a4c02c1e5$var$ok.transition = null;
        var g = $9e3d383a4c02c1e5$var$C;
        $9e3d383a4c02c1e5$var$C = 1;
        var h = $9e3d383a4c02c1e5$var$K;
        $9e3d383a4c02c1e5$var$K |= 4;
        $9e3d383a4c02c1e5$var$nk.current = null;
        $9e3d383a4c02c1e5$var$Oj(a, c);
        $9e3d383a4c02c1e5$var$dk(c, a);
        $9e3d383a4c02c1e5$var$Oe($9e3d383a4c02c1e5$var$Df);
        $9e3d383a4c02c1e5$var$dd = !!$9e3d383a4c02c1e5$var$Cf;
        $9e3d383a4c02c1e5$var$Df = $9e3d383a4c02c1e5$var$Cf = null;
        a.current = c;
        $9e3d383a4c02c1e5$var$hk(c, a, e);
        $9e3d383a4c02c1e5$var$dc();
        $9e3d383a4c02c1e5$var$K = h;
        $9e3d383a4c02c1e5$var$C = g;
        $9e3d383a4c02c1e5$var$ok.transition = f;
    } else a.current = c;
    $9e3d383a4c02c1e5$var$vk && ($9e3d383a4c02c1e5$var$vk = !1, $9e3d383a4c02c1e5$var$wk = a, $9e3d383a4c02c1e5$var$xk = e);
    f = a.pendingLanes;
    0 === f && ($9e3d383a4c02c1e5$var$Ri = null);
    $9e3d383a4c02c1e5$var$mc(c.stateNode, d);
    $9e3d383a4c02c1e5$var$Dk(a, $9e3d383a4c02c1e5$var$B());
    if (null !== b) for(d = a.onRecoverableError, c = 0; c < b.length; c++)e = b[c], d(e.value, {
        componentStack: e.stack,
        digest: e.digest
    });
    if ($9e3d383a4c02c1e5$var$Oi) throw $9e3d383a4c02c1e5$var$Oi = !1, a = $9e3d383a4c02c1e5$var$Pi, $9e3d383a4c02c1e5$var$Pi = null, a;
    0 !== ($9e3d383a4c02c1e5$var$xk & 1) && 0 !== a.tag && $9e3d383a4c02c1e5$var$Hk();
    f = a.pendingLanes;
    0 !== (f & 1) ? a === $9e3d383a4c02c1e5$var$zk ? $9e3d383a4c02c1e5$var$yk++ : ($9e3d383a4c02c1e5$var$yk = 0, $9e3d383a4c02c1e5$var$zk = a) : $9e3d383a4c02c1e5$var$yk = 0;
    $9e3d383a4c02c1e5$var$jg();
    return null;
}
function $9e3d383a4c02c1e5$var$Hk() {
    if (null !== $9e3d383a4c02c1e5$var$wk) {
        var a = $9e3d383a4c02c1e5$var$Dc($9e3d383a4c02c1e5$var$xk), b = $9e3d383a4c02c1e5$var$ok.transition, c = $9e3d383a4c02c1e5$var$C;
        try {
            $9e3d383a4c02c1e5$var$ok.transition = null;
            $9e3d383a4c02c1e5$var$C = 16 > a ? 16 : a;
            if (null === $9e3d383a4c02c1e5$var$wk) var d = !1;
            else {
                a = $9e3d383a4c02c1e5$var$wk;
                $9e3d383a4c02c1e5$var$wk = null;
                $9e3d383a4c02c1e5$var$xk = 0;
                if (0 !== ($9e3d383a4c02c1e5$var$K & 6)) throw Error($9e3d383a4c02c1e5$var$p(331));
                var e = $9e3d383a4c02c1e5$var$K;
                $9e3d383a4c02c1e5$var$K |= 4;
                for($9e3d383a4c02c1e5$var$V = a.current; null !== $9e3d383a4c02c1e5$var$V;){
                    var f = $9e3d383a4c02c1e5$var$V, g = f.child;
                    if (0 !== ($9e3d383a4c02c1e5$var$V.flags & 16)) {
                        var h = f.deletions;
                        if (null !== h) {
                            for(var k = 0; k < h.length; k++){
                                var l = h[k];
                                for($9e3d383a4c02c1e5$var$V = l; null !== $9e3d383a4c02c1e5$var$V;){
                                    var m = $9e3d383a4c02c1e5$var$V;
                                    switch(m.tag){
                                        case 0:
                                        case 11:
                                        case 15:
                                            $9e3d383a4c02c1e5$var$Pj(8, m, f);
                                    }
                                    var q = m.child;
                                    if (null !== q) q.return = m, $9e3d383a4c02c1e5$var$V = q;
                                    else for(; null !== $9e3d383a4c02c1e5$var$V;){
                                        m = $9e3d383a4c02c1e5$var$V;
                                        var r = m.sibling, y = m.return;
                                        $9e3d383a4c02c1e5$var$Sj(m);
                                        if (m === l) {
                                            $9e3d383a4c02c1e5$var$V = null;
                                            break;
                                        }
                                        if (null !== r) {
                                            r.return = y;
                                            $9e3d383a4c02c1e5$var$V = r;
                                            break;
                                        }
                                        $9e3d383a4c02c1e5$var$V = y;
                                    }
                                }
                            }
                            var n = f.alternate;
                            if (null !== n) {
                                var t = n.child;
                                if (null !== t) {
                                    n.child = null;
                                    do {
                                        var J = t.sibling;
                                        t.sibling = null;
                                        t = J;
                                    }while (null !== t);
                                }
                            }
                            $9e3d383a4c02c1e5$var$V = f;
                        }
                    }
                    if (0 !== (f.subtreeFlags & 2064) && null !== g) g.return = f, $9e3d383a4c02c1e5$var$V = g;
                    else b: for(; null !== $9e3d383a4c02c1e5$var$V;){
                        f = $9e3d383a4c02c1e5$var$V;
                        if (0 !== (f.flags & 2048)) switch(f.tag){
                            case 0:
                            case 11:
                            case 15:
                                $9e3d383a4c02c1e5$var$Pj(9, f, f.return);
                        }
                        var x = f.sibling;
                        if (null !== x) {
                            x.return = f.return;
                            $9e3d383a4c02c1e5$var$V = x;
                            break b;
                        }
                        $9e3d383a4c02c1e5$var$V = f.return;
                    }
                }
                var w = a.current;
                for($9e3d383a4c02c1e5$var$V = w; null !== $9e3d383a4c02c1e5$var$V;){
                    g = $9e3d383a4c02c1e5$var$V;
                    var u = g.child;
                    if (0 !== (g.subtreeFlags & 2064) && null !== u) u.return = g, $9e3d383a4c02c1e5$var$V = u;
                    else b: for(g = w; null !== $9e3d383a4c02c1e5$var$V;){
                        h = $9e3d383a4c02c1e5$var$V;
                        if (0 !== (h.flags & 2048)) try {
                            switch(h.tag){
                                case 0:
                                case 11:
                                case 15:
                                    $9e3d383a4c02c1e5$var$Qj(9, h);
                            }
                        } catch (na) {
                            $9e3d383a4c02c1e5$var$W(h, h.return, na);
                        }
                        if (h === g) {
                            $9e3d383a4c02c1e5$var$V = null;
                            break b;
                        }
                        var F = h.sibling;
                        if (null !== F) {
                            F.return = h.return;
                            $9e3d383a4c02c1e5$var$V = F;
                            break b;
                        }
                        $9e3d383a4c02c1e5$var$V = h.return;
                    }
                }
                $9e3d383a4c02c1e5$var$K = e;
                $9e3d383a4c02c1e5$var$jg();
                if ($9e3d383a4c02c1e5$var$lc && "function" === typeof $9e3d383a4c02c1e5$var$lc.onPostCommitFiberRoot) try {
                    $9e3d383a4c02c1e5$var$lc.onPostCommitFiberRoot($9e3d383a4c02c1e5$var$kc, a);
                } catch (na) {}
                d = !0;
            }
            return d;
        } finally{
            $9e3d383a4c02c1e5$var$C = c, $9e3d383a4c02c1e5$var$ok.transition = b;
        }
    }
    return !1;
}
function $9e3d383a4c02c1e5$var$Xk(a, b, c) {
    b = $9e3d383a4c02c1e5$var$Ji(c, b);
    b = $9e3d383a4c02c1e5$var$Ni(a, b, 1);
    a = $9e3d383a4c02c1e5$var$nh(a, b, 1);
    b = $9e3d383a4c02c1e5$var$R();
    null !== a && ($9e3d383a4c02c1e5$var$Ac(a, 1, b), $9e3d383a4c02c1e5$var$Dk(a, b));
}
function $9e3d383a4c02c1e5$var$W(a, b, c) {
    if (3 === a.tag) $9e3d383a4c02c1e5$var$Xk(a, a, c);
    else for(; null !== b;){
        if (3 === b.tag) {
            $9e3d383a4c02c1e5$var$Xk(b, a, c);
            break;
        } else if (1 === b.tag) {
            var d = b.stateNode;
            if ("function" === typeof b.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === $9e3d383a4c02c1e5$var$Ri || !$9e3d383a4c02c1e5$var$Ri.has(d))) {
                a = $9e3d383a4c02c1e5$var$Ji(c, a);
                a = $9e3d383a4c02c1e5$var$Qi(b, a, 1);
                b = $9e3d383a4c02c1e5$var$nh(b, a, 1);
                a = $9e3d383a4c02c1e5$var$R();
                null !== b && ($9e3d383a4c02c1e5$var$Ac(b, 1, a), $9e3d383a4c02c1e5$var$Dk(b, a));
                break;
            }
        }
        b = b.return;
    }
}
function $9e3d383a4c02c1e5$var$Ti(a, b, c) {
    var d = a.pingCache;
    null !== d && d.delete(b);
    b = $9e3d383a4c02c1e5$var$R();
    a.pingedLanes |= a.suspendedLanes & c;
    $9e3d383a4c02c1e5$var$Q === a && ($9e3d383a4c02c1e5$var$Z & c) === c && (4 === $9e3d383a4c02c1e5$var$T || 3 === $9e3d383a4c02c1e5$var$T && ($9e3d383a4c02c1e5$var$Z & 130023424) === $9e3d383a4c02c1e5$var$Z && 500 > $9e3d383a4c02c1e5$var$B() - $9e3d383a4c02c1e5$var$fk ? $9e3d383a4c02c1e5$var$Kk(a, 0) : $9e3d383a4c02c1e5$var$rk |= c);
    $9e3d383a4c02c1e5$var$Dk(a, b);
}
function $9e3d383a4c02c1e5$var$Yk(a, b) {
    0 === b && (0 === (a.mode & 1) ? b = 1 : (b = $9e3d383a4c02c1e5$var$sc, $9e3d383a4c02c1e5$var$sc <<= 1, 0 === ($9e3d383a4c02c1e5$var$sc & 130023424) && ($9e3d383a4c02c1e5$var$sc = 4194304)));
    var c = $9e3d383a4c02c1e5$var$R();
    a = $9e3d383a4c02c1e5$var$ih(a, b);
    null !== a && ($9e3d383a4c02c1e5$var$Ac(a, b, c), $9e3d383a4c02c1e5$var$Dk(a, c));
}
function $9e3d383a4c02c1e5$var$uj(a) {
    var b = a.memoizedState, c = 0;
    null !== b && (c = b.retryLane);
    $9e3d383a4c02c1e5$var$Yk(a, c);
}
function $9e3d383a4c02c1e5$var$bk(a, b) {
    var c = 0;
    switch(a.tag){
        case 13:
            var d = a.stateNode;
            var e = a.memoizedState;
            null !== e && (c = e.retryLane);
            break;
        case 19:
            d = a.stateNode;
            break;
        default:
            throw Error($9e3d383a4c02c1e5$var$p(314));
    }
    null !== d && d.delete(b);
    $9e3d383a4c02c1e5$var$Yk(a, c);
}
var $9e3d383a4c02c1e5$var$Vk;
$9e3d383a4c02c1e5$var$Vk = function(a, b, c) {
    if (null !== a) {
        if (a.memoizedProps !== b.pendingProps || $9e3d383a4c02c1e5$var$Wf.current) $9e3d383a4c02c1e5$var$dh = !0;
        else {
            if (0 === (a.lanes & c) && 0 === (b.flags & 128)) return $9e3d383a4c02c1e5$var$dh = !1, $9e3d383a4c02c1e5$var$yj(a, b, c);
            $9e3d383a4c02c1e5$var$dh = 0 !== (a.flags & 131072) ? !0 : !1;
        }
    } else $9e3d383a4c02c1e5$var$dh = !1, $9e3d383a4c02c1e5$var$I && 0 !== (b.flags & 1048576) && $9e3d383a4c02c1e5$var$ug(b, $9e3d383a4c02c1e5$var$ng, b.index);
    b.lanes = 0;
    switch(b.tag){
        case 2:
            var d = b.type;
            $9e3d383a4c02c1e5$var$ij(a, b);
            a = b.pendingProps;
            var e = $9e3d383a4c02c1e5$var$Yf(b, $9e3d383a4c02c1e5$var$H.current);
            $9e3d383a4c02c1e5$var$ch(b, c);
            e = $9e3d383a4c02c1e5$var$Nh(null, b, d, a, e, c);
            var f = $9e3d383a4c02c1e5$var$Sh();
            b.flags |= 1;
            "object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof ? (b.tag = 1, b.memoizedState = null, b.updateQueue = null, $9e3d383a4c02c1e5$var$Zf(d) ? (f = !0, $9e3d383a4c02c1e5$var$cg(b)) : f = !1, b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, $9e3d383a4c02c1e5$var$kh(b), e.updater = $9e3d383a4c02c1e5$var$Ei, b.stateNode = e, e._reactInternals = b, $9e3d383a4c02c1e5$var$Ii(b, d, a, c), b = $9e3d383a4c02c1e5$var$jj(null, b, d, !0, f, c)) : (b.tag = 0, $9e3d383a4c02c1e5$var$I && f && $9e3d383a4c02c1e5$var$vg(b), $9e3d383a4c02c1e5$var$Xi(null, b, e, c), b = b.child);
            return b;
        case 16:
            d = b.elementType;
            a: {
                $9e3d383a4c02c1e5$var$ij(a, b);
                a = b.pendingProps;
                e = d._init;
                d = e(d._payload);
                b.type = d;
                e = b.tag = $9e3d383a4c02c1e5$var$Zk(d);
                a = $9e3d383a4c02c1e5$var$Ci(d, a);
                switch(e){
                    case 0:
                        b = $9e3d383a4c02c1e5$var$cj(null, b, d, a, c);
                        break a;
                    case 1:
                        b = $9e3d383a4c02c1e5$var$hj(null, b, d, a, c);
                        break a;
                    case 11:
                        b = $9e3d383a4c02c1e5$var$Yi(null, b, d, a, c);
                        break a;
                    case 14:
                        b = $9e3d383a4c02c1e5$var$$i(null, b, d, $9e3d383a4c02c1e5$var$Ci(d.type, a), c);
                        break a;
                }
                throw Error($9e3d383a4c02c1e5$var$p(306, d, ""));
            }
            return b;
        case 0:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : $9e3d383a4c02c1e5$var$Ci(d, e), $9e3d383a4c02c1e5$var$cj(a, b, d, e, c);
        case 1:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : $9e3d383a4c02c1e5$var$Ci(d, e), $9e3d383a4c02c1e5$var$hj(a, b, d, e, c);
        case 3:
            a: {
                $9e3d383a4c02c1e5$var$kj(b);
                if (null === a) throw Error($9e3d383a4c02c1e5$var$p(387));
                d = b.pendingProps;
                f = b.memoizedState;
                e = f.element;
                $9e3d383a4c02c1e5$var$lh(a, b);
                $9e3d383a4c02c1e5$var$qh(b, d, null, c);
                var g = b.memoizedState;
                d = g.element;
                if (f.isDehydrated) {
                    if (f = {
                        element: d,
                        isDehydrated: !1,
                        cache: g.cache,
                        pendingSuspenseBoundaries: g.pendingSuspenseBoundaries,
                        transitions: g.transitions
                    }, b.updateQueue.baseState = f, b.memoizedState = f, b.flags & 256) {
                        e = $9e3d383a4c02c1e5$var$Ji(Error($9e3d383a4c02c1e5$var$p(423)), b);
                        b = $9e3d383a4c02c1e5$var$lj(a, b, d, c, e);
                        break a;
                    } else if (d !== e) {
                        e = $9e3d383a4c02c1e5$var$Ji(Error($9e3d383a4c02c1e5$var$p(424)), b);
                        b = $9e3d383a4c02c1e5$var$lj(a, b, d, c, e);
                        break a;
                    } else for($9e3d383a4c02c1e5$var$yg = $9e3d383a4c02c1e5$var$Lf(b.stateNode.containerInfo.firstChild), $9e3d383a4c02c1e5$var$xg = b, $9e3d383a4c02c1e5$var$I = !0, $9e3d383a4c02c1e5$var$zg = null, c = $9e3d383a4c02c1e5$var$Vg(b, null, d, c), b.child = c; c;)c.flags = c.flags & -3 | 4096, c = c.sibling;
                } else {
                    $9e3d383a4c02c1e5$var$Ig();
                    if (d === e) {
                        b = $9e3d383a4c02c1e5$var$Zi(a, b, c);
                        break a;
                    }
                    $9e3d383a4c02c1e5$var$Xi(a, b, d, c);
                }
                b = b.child;
            }
            return b;
        case 5:
            return $9e3d383a4c02c1e5$var$Ah(b), null === a && $9e3d383a4c02c1e5$var$Eg(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, $9e3d383a4c02c1e5$var$Ef(d, e) ? g = null : null !== f && $9e3d383a4c02c1e5$var$Ef(d, f) && (b.flags |= 32), $9e3d383a4c02c1e5$var$gj(a, b), $9e3d383a4c02c1e5$var$Xi(a, b, g, c), b.child;
        case 6:
            return null === a && $9e3d383a4c02c1e5$var$Eg(b), null;
        case 13:
            return $9e3d383a4c02c1e5$var$oj(a, b, c);
        case 4:
            return $9e3d383a4c02c1e5$var$yh(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = $9e3d383a4c02c1e5$var$Ug(b, null, d, c) : $9e3d383a4c02c1e5$var$Xi(a, b, d, c), b.child;
        case 11:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : $9e3d383a4c02c1e5$var$Ci(d, e), $9e3d383a4c02c1e5$var$Yi(a, b, d, e, c);
        case 7:
            return $9e3d383a4c02c1e5$var$Xi(a, b, b.pendingProps, c), b.child;
        case 8:
            return $9e3d383a4c02c1e5$var$Xi(a, b, b.pendingProps.children, c), b.child;
        case 12:
            return $9e3d383a4c02c1e5$var$Xi(a, b, b.pendingProps.children, c), b.child;
        case 10:
            a: {
                d = b.type._context;
                e = b.pendingProps;
                f = b.memoizedProps;
                g = e.value;
                $9e3d383a4c02c1e5$var$G($9e3d383a4c02c1e5$var$Wg, d._currentValue);
                d._currentValue = g;
                if (null !== f) {
                    if ($9e3d383a4c02c1e5$var$He(f.value, g)) {
                        if (f.children === e.children && !$9e3d383a4c02c1e5$var$Wf.current) {
                            b = $9e3d383a4c02c1e5$var$Zi(a, b, c);
                            break a;
                        }
                    } else for(f = b.child, null !== f && (f.return = b); null !== f;){
                        var h = f.dependencies;
                        if (null !== h) {
                            g = f.child;
                            for(var k = h.firstContext; null !== k;){
                                if (k.context === d) {
                                    if (1 === f.tag) {
                                        k = $9e3d383a4c02c1e5$var$mh(-1, c & -c);
                                        k.tag = 2;
                                        var l = f.updateQueue;
                                        if (null !== l) {
                                            l = l.shared;
                                            var m = l.pending;
                                            null === m ? k.next = k : (k.next = m.next, m.next = k);
                                            l.pending = k;
                                        }
                                    }
                                    f.lanes |= c;
                                    k = f.alternate;
                                    null !== k && (k.lanes |= c);
                                    $9e3d383a4c02c1e5$var$bh(f.return, c, b);
                                    h.lanes |= c;
                                    break;
                                }
                                k = k.next;
                            }
                        } else if (10 === f.tag) g = f.type === b.type ? null : f.child;
                        else if (18 === f.tag) {
                            g = f.return;
                            if (null === g) throw Error($9e3d383a4c02c1e5$var$p(341));
                            g.lanes |= c;
                            h = g.alternate;
                            null !== h && (h.lanes |= c);
                            $9e3d383a4c02c1e5$var$bh(g, c, b);
                            g = f.sibling;
                        } else g = f.child;
                        if (null !== g) g.return = f;
                        else for(g = f; null !== g;){
                            if (g === b) {
                                g = null;
                                break;
                            }
                            f = g.sibling;
                            if (null !== f) {
                                f.return = g.return;
                                g = f;
                                break;
                            }
                            g = g.return;
                        }
                        f = g;
                    }
                }
                $9e3d383a4c02c1e5$var$Xi(a, b, e.children, c);
                b = b.child;
            }
            return b;
        case 9:
            return e = b.type, d = b.pendingProps.children, $9e3d383a4c02c1e5$var$ch(b, c), e = $9e3d383a4c02c1e5$var$eh(e), d = d(e), b.flags |= 1, $9e3d383a4c02c1e5$var$Xi(a, b, d, c), b.child;
        case 14:
            return d = b.type, e = $9e3d383a4c02c1e5$var$Ci(d, b.pendingProps), e = $9e3d383a4c02c1e5$var$Ci(d.type, e), $9e3d383a4c02c1e5$var$$i(a, b, d, e, c);
        case 15:
            return $9e3d383a4c02c1e5$var$bj(a, b, b.type, b.pendingProps, c);
        case 17:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : $9e3d383a4c02c1e5$var$Ci(d, e), $9e3d383a4c02c1e5$var$ij(a, b), b.tag = 1, $9e3d383a4c02c1e5$var$Zf(d) ? (a = !0, $9e3d383a4c02c1e5$var$cg(b)) : a = !1, $9e3d383a4c02c1e5$var$ch(b, c), $9e3d383a4c02c1e5$var$Gi(b, d, e), $9e3d383a4c02c1e5$var$Ii(b, d, e, c), $9e3d383a4c02c1e5$var$jj(null, b, d, !0, a, c);
        case 19:
            return $9e3d383a4c02c1e5$var$xj(a, b, c);
        case 22:
            return $9e3d383a4c02c1e5$var$dj(a, b, c);
    }
    throw Error($9e3d383a4c02c1e5$var$p(156, b.tag));
};
function $9e3d383a4c02c1e5$var$Fk(a, b) {
    return $9e3d383a4c02c1e5$var$ac(a, b);
}
function $9e3d383a4c02c1e5$var$$k(a, b, c, d) {
    this.tag = a;
    this.key = c;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = b;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = d;
    this.subtreeFlags = this.flags = 0;
    this.deletions = null;
    this.childLanes = this.lanes = 0;
    this.alternate = null;
}
function $9e3d383a4c02c1e5$var$Bg(a, b, c, d) {
    return new $9e3d383a4c02c1e5$var$$k(a, b, c, d);
}
function $9e3d383a4c02c1e5$var$aj(a) {
    a = a.prototype;
    return !(!a || !a.isReactComponent);
}
function $9e3d383a4c02c1e5$var$Zk(a) {
    if ("function" === typeof a) return $9e3d383a4c02c1e5$var$aj(a) ? 1 : 0;
    if (void 0 !== a && null !== a) {
        a = a.$$typeof;
        if (a === $9e3d383a4c02c1e5$var$Da) return 11;
        if (a === $9e3d383a4c02c1e5$var$Ga) return 14;
    }
    return 2;
}
function $9e3d383a4c02c1e5$var$Pg(a, b) {
    var c = a.alternate;
    null === c ? (c = $9e3d383a4c02c1e5$var$Bg(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null);
    c.flags = a.flags & 14680064;
    c.childLanes = a.childLanes;
    c.lanes = a.lanes;
    c.child = a.child;
    c.memoizedProps = a.memoizedProps;
    c.memoizedState = a.memoizedState;
    c.updateQueue = a.updateQueue;
    b = a.dependencies;
    c.dependencies = null === b ? null : {
        lanes: b.lanes,
        firstContext: b.firstContext
    };
    c.sibling = a.sibling;
    c.index = a.index;
    c.ref = a.ref;
    return c;
}
function $9e3d383a4c02c1e5$var$Rg(a, b, c, d, e, f) {
    var g = 2;
    d = a;
    if ("function" === typeof a) $9e3d383a4c02c1e5$var$aj(a) && (g = 1);
    else if ("string" === typeof a) g = 5;
    else a: switch(a){
        case $9e3d383a4c02c1e5$var$ya:
            return $9e3d383a4c02c1e5$var$Tg(c.children, e, f, b);
        case $9e3d383a4c02c1e5$var$za:
            g = 8;
            e |= 8;
            break;
        case $9e3d383a4c02c1e5$var$Aa:
            return a = $9e3d383a4c02c1e5$var$Bg(12, c, b, e | 2), a.elementType = $9e3d383a4c02c1e5$var$Aa, a.lanes = f, a;
        case $9e3d383a4c02c1e5$var$Ea:
            return a = $9e3d383a4c02c1e5$var$Bg(13, c, b, e), a.elementType = $9e3d383a4c02c1e5$var$Ea, a.lanes = f, a;
        case $9e3d383a4c02c1e5$var$Fa:
            return a = $9e3d383a4c02c1e5$var$Bg(19, c, b, e), a.elementType = $9e3d383a4c02c1e5$var$Fa, a.lanes = f, a;
        case $9e3d383a4c02c1e5$var$Ia:
            return $9e3d383a4c02c1e5$var$pj(c, e, f, b);
        default:
            if ("object" === typeof a && null !== a) switch(a.$$typeof){
                case $9e3d383a4c02c1e5$var$Ba:
                    g = 10;
                    break a;
                case $9e3d383a4c02c1e5$var$Ca:
                    g = 9;
                    break a;
                case $9e3d383a4c02c1e5$var$Da:
                    g = 11;
                    break a;
                case $9e3d383a4c02c1e5$var$Ga:
                    g = 14;
                    break a;
                case $9e3d383a4c02c1e5$var$Ha:
                    g = 16;
                    d = null;
                    break a;
            }
            throw Error($9e3d383a4c02c1e5$var$p(130, null == a ? a : typeof a, ""));
    }
    b = $9e3d383a4c02c1e5$var$Bg(g, c, b, e);
    b.elementType = a;
    b.type = d;
    b.lanes = f;
    return b;
}
function $9e3d383a4c02c1e5$var$Tg(a, b, c, d) {
    a = $9e3d383a4c02c1e5$var$Bg(7, a, d, b);
    a.lanes = c;
    return a;
}
function $9e3d383a4c02c1e5$var$pj(a, b, c, d) {
    a = $9e3d383a4c02c1e5$var$Bg(22, a, d, b);
    a.elementType = $9e3d383a4c02c1e5$var$Ia;
    a.lanes = c;
    a.stateNode = {
        isHidden: !1
    };
    return a;
}
function $9e3d383a4c02c1e5$var$Qg(a, b, c) {
    a = $9e3d383a4c02c1e5$var$Bg(6, a, null, b);
    a.lanes = c;
    return a;
}
function $9e3d383a4c02c1e5$var$Sg(a, b, c) {
    b = $9e3d383a4c02c1e5$var$Bg(4, null !== a.children ? a.children : [], a.key, b);
    b.lanes = c;
    b.stateNode = {
        containerInfo: a.containerInfo,
        pendingChildren: null,
        implementation: a.implementation
    };
    return b;
}
function $9e3d383a4c02c1e5$var$al(a, b, c, d, e) {
    this.tag = b;
    this.containerInfo = a;
    this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
    this.timeoutHandle = -1;
    this.callbackNode = this.pendingContext = this.context = null;
    this.callbackPriority = 0;
    this.eventTimes = $9e3d383a4c02c1e5$var$zc(0);
    this.expirationTimes = $9e3d383a4c02c1e5$var$zc(-1);
    this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
    this.entanglements = $9e3d383a4c02c1e5$var$zc(0);
    this.identifierPrefix = d;
    this.onRecoverableError = e;
    this.mutableSourceEagerHydrationData = null;
}
function $9e3d383a4c02c1e5$var$bl(a, b, c, d, e, f, g, h, k) {
    a = new $9e3d383a4c02c1e5$var$al(a, b, c, h, k);
    1 === b ? (b = 1, !0 === f && (b |= 8)) : b = 0;
    f = $9e3d383a4c02c1e5$var$Bg(3, null, null, b);
    a.current = f;
    f.stateNode = a;
    f.memoizedState = {
        element: d,
        isDehydrated: c,
        cache: null,
        transitions: null,
        pendingSuspenseBoundaries: null
    };
    $9e3d383a4c02c1e5$var$kh(f);
    return a;
}
function $9e3d383a4c02c1e5$var$cl(a, b, c) {
    var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return {
        $$typeof: $9e3d383a4c02c1e5$var$wa,
        key: null == d ? null : "" + d,
        children: a,
        containerInfo: b,
        implementation: c
    };
}
function $9e3d383a4c02c1e5$var$dl(a) {
    if (!a) return $9e3d383a4c02c1e5$var$Vf;
    a = a._reactInternals;
    a: {
        if ($9e3d383a4c02c1e5$var$Vb(a) !== a || 1 !== a.tag) throw Error($9e3d383a4c02c1e5$var$p(170));
        var b = a;
        do {
            switch(b.tag){
                case 3:
                    b = b.stateNode.context;
                    break a;
                case 1:
                    if ($9e3d383a4c02c1e5$var$Zf(b.type)) {
                        b = b.stateNode.__reactInternalMemoizedMergedChildContext;
                        break a;
                    }
            }
            b = b.return;
        }while (null !== b);
        throw Error($9e3d383a4c02c1e5$var$p(171));
    }
    if (1 === a.tag) {
        var c = a.type;
        if ($9e3d383a4c02c1e5$var$Zf(c)) return $9e3d383a4c02c1e5$var$bg(a, c, b);
    }
    return b;
}
function $9e3d383a4c02c1e5$var$el(a, b, c, d, e, f, g, h, k) {
    a = $9e3d383a4c02c1e5$var$bl(c, d, !0, a, e, f, g, h, k);
    a.context = $9e3d383a4c02c1e5$var$dl(null);
    c = a.current;
    d = $9e3d383a4c02c1e5$var$R();
    e = $9e3d383a4c02c1e5$var$yi(c);
    f = $9e3d383a4c02c1e5$var$mh(d, e);
    f.callback = void 0 !== b && null !== b ? b : null;
    $9e3d383a4c02c1e5$var$nh(c, f, e);
    a.current.lanes = e;
    $9e3d383a4c02c1e5$var$Ac(a, e, d);
    $9e3d383a4c02c1e5$var$Dk(a, d);
    return a;
}
function $9e3d383a4c02c1e5$var$fl(a, b, c, d) {
    var e = b.current, f = $9e3d383a4c02c1e5$var$R(), g = $9e3d383a4c02c1e5$var$yi(e);
    c = $9e3d383a4c02c1e5$var$dl(c);
    null === b.context ? b.context = c : b.pendingContext = c;
    b = $9e3d383a4c02c1e5$var$mh(f, g);
    b.payload = {
        element: a
    };
    d = void 0 === d ? null : d;
    null !== d && (b.callback = d);
    a = $9e3d383a4c02c1e5$var$nh(e, b, g);
    null !== a && ($9e3d383a4c02c1e5$var$gi(a, e, g, f), $9e3d383a4c02c1e5$var$oh(a, e, g));
    return g;
}
function $9e3d383a4c02c1e5$var$gl(a) {
    a = a.current;
    if (!a.child) return null;
    switch(a.child.tag){
        case 5:
            return a.child.stateNode;
        default:
            return a.child.stateNode;
    }
}
function $9e3d383a4c02c1e5$var$hl(a, b) {
    a = a.memoizedState;
    if (null !== a && null !== a.dehydrated) {
        var c = a.retryLane;
        a.retryLane = 0 !== c && c < b ? c : b;
    }
}
function $9e3d383a4c02c1e5$var$il(a, b) {
    $9e3d383a4c02c1e5$var$hl(a, b);
    (a = a.alternate) && $9e3d383a4c02c1e5$var$hl(a, b);
}
function $9e3d383a4c02c1e5$var$jl() {
    return null;
}
var $9e3d383a4c02c1e5$var$kl = "function" === typeof reportError ? reportError : function(a) {
    console.error(a);
};
function $9e3d383a4c02c1e5$var$ll(a) {
    this._internalRoot = a;
}
$9e3d383a4c02c1e5$var$ml.prototype.render = $9e3d383a4c02c1e5$var$ll.prototype.render = function(a) {
    var b = this._internalRoot;
    if (null === b) throw Error($9e3d383a4c02c1e5$var$p(409));
    $9e3d383a4c02c1e5$var$fl(a, b, null, null);
};
$9e3d383a4c02c1e5$var$ml.prototype.unmount = $9e3d383a4c02c1e5$var$ll.prototype.unmount = function() {
    var a = this._internalRoot;
    if (null !== a) {
        this._internalRoot = null;
        var b = a.containerInfo;
        $9e3d383a4c02c1e5$var$Rk(function() {
            $9e3d383a4c02c1e5$var$fl(null, a, null, null);
        });
        b[$9e3d383a4c02c1e5$var$uf] = null;
    }
};
function $9e3d383a4c02c1e5$var$ml(a) {
    this._internalRoot = a;
}
$9e3d383a4c02c1e5$var$ml.prototype.unstable_scheduleHydration = function(a) {
    if (a) {
        var b = $9e3d383a4c02c1e5$var$Hc();
        a = {
            blockedOn: null,
            target: a,
            priority: b
        };
        for(var c = 0; c < $9e3d383a4c02c1e5$var$Qc.length && 0 !== b && b < $9e3d383a4c02c1e5$var$Qc[c].priority; c++);
        $9e3d383a4c02c1e5$var$Qc.splice(c, 0, a);
        0 === c && $9e3d383a4c02c1e5$var$Vc(a);
    }
};
function $9e3d383a4c02c1e5$var$nl(a) {
    return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);
}
function $9e3d383a4c02c1e5$var$ol(a) {
    return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
}
function $9e3d383a4c02c1e5$var$pl() {}
function $9e3d383a4c02c1e5$var$ql(a, b, c, d, e) {
    if (e) {
        if ("function" === typeof d) {
            var f = d;
            d = function() {
                var a = $9e3d383a4c02c1e5$var$gl(g);
                f.call(a);
            };
        }
        var g = $9e3d383a4c02c1e5$var$el(b, d, a, 0, null, !1, !1, "", $9e3d383a4c02c1e5$var$pl);
        a._reactRootContainer = g;
        a[$9e3d383a4c02c1e5$var$uf] = g.current;
        $9e3d383a4c02c1e5$var$sf(8 === a.nodeType ? a.parentNode : a);
        $9e3d383a4c02c1e5$var$Rk();
        return g;
    }
    for(; e = a.lastChild;)a.removeChild(e);
    if ("function" === typeof d) {
        var h = d;
        d = function() {
            var a = $9e3d383a4c02c1e5$var$gl(k);
            h.call(a);
        };
    }
    var k = $9e3d383a4c02c1e5$var$bl(a, 0, !1, null, null, !1, !1, "", $9e3d383a4c02c1e5$var$pl);
    a._reactRootContainer = k;
    a[$9e3d383a4c02c1e5$var$uf] = k.current;
    $9e3d383a4c02c1e5$var$sf(8 === a.nodeType ? a.parentNode : a);
    $9e3d383a4c02c1e5$var$Rk(function() {
        $9e3d383a4c02c1e5$var$fl(b, k, c, d);
    });
    return k;
}
function $9e3d383a4c02c1e5$var$rl(a, b, c, d, e) {
    var f = c._reactRootContainer;
    if (f) {
        var g = f;
        if ("function" === typeof e) {
            var h = e;
            e = function() {
                var a = $9e3d383a4c02c1e5$var$gl(g);
                h.call(a);
            };
        }
        $9e3d383a4c02c1e5$var$fl(b, g, a, e);
    } else g = $9e3d383a4c02c1e5$var$ql(c, b, a, e, d);
    return $9e3d383a4c02c1e5$var$gl(g);
}
$9e3d383a4c02c1e5$var$Ec = function(a) {
    switch(a.tag){
        case 3:
            var b = a.stateNode;
            if (b.current.memoizedState.isDehydrated) {
                var c = $9e3d383a4c02c1e5$var$tc(b.pendingLanes);
                0 !== c && ($9e3d383a4c02c1e5$var$Cc(b, c | 1), $9e3d383a4c02c1e5$var$Dk(b, $9e3d383a4c02c1e5$var$B()), 0 === ($9e3d383a4c02c1e5$var$K & 6) && ($9e3d383a4c02c1e5$var$Gj = $9e3d383a4c02c1e5$var$B() + 500, $9e3d383a4c02c1e5$var$jg()));
            }
            break;
        case 13:
            $9e3d383a4c02c1e5$var$Rk(function() {
                var b = $9e3d383a4c02c1e5$var$ih(a, 1);
                if (null !== b) {
                    var c = $9e3d383a4c02c1e5$var$R();
                    $9e3d383a4c02c1e5$var$gi(b, a, 1, c);
                }
            }), $9e3d383a4c02c1e5$var$il(a, 1);
    }
};
$9e3d383a4c02c1e5$var$Fc = function(a) {
    if (13 === a.tag) {
        var b = $9e3d383a4c02c1e5$var$ih(a, 134217728);
        if (null !== b) {
            var c = $9e3d383a4c02c1e5$var$R();
            $9e3d383a4c02c1e5$var$gi(b, a, 134217728, c);
        }
        $9e3d383a4c02c1e5$var$il(a, 134217728);
    }
};
$9e3d383a4c02c1e5$var$Gc = function(a) {
    if (13 === a.tag) {
        var b = $9e3d383a4c02c1e5$var$yi(a), c = $9e3d383a4c02c1e5$var$ih(a, b);
        if (null !== c) {
            var d = $9e3d383a4c02c1e5$var$R();
            $9e3d383a4c02c1e5$var$gi(c, a, b, d);
        }
        $9e3d383a4c02c1e5$var$il(a, b);
    }
};
$9e3d383a4c02c1e5$var$Hc = function() {
    return $9e3d383a4c02c1e5$var$C;
};
$9e3d383a4c02c1e5$var$Ic = function(a, b) {
    var c = $9e3d383a4c02c1e5$var$C;
    try {
        return $9e3d383a4c02c1e5$var$C = a, b();
    } finally{
        $9e3d383a4c02c1e5$var$C = c;
    }
};
$9e3d383a4c02c1e5$var$yb = function(a, b, c) {
    switch(b){
        case "input":
            $9e3d383a4c02c1e5$var$bb(a, c);
            b = c.name;
            if ("radio" === c.type && null != b) {
                for(c = a; c.parentNode;)c = c.parentNode;
                c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');
                for(b = 0; b < c.length; b++){
                    var d = c[b];
                    if (d !== a && d.form === a.form) {
                        var e = $9e3d383a4c02c1e5$var$Db(d);
                        if (!e) throw Error($9e3d383a4c02c1e5$var$p(90));
                        $9e3d383a4c02c1e5$var$Wa(d);
                        $9e3d383a4c02c1e5$var$bb(d, e);
                    }
                }
            }
            break;
        case "textarea":
            $9e3d383a4c02c1e5$var$ib(a, c);
            break;
        case "select":
            b = c.value, null != b && $9e3d383a4c02c1e5$var$fb(a, !!c.multiple, b, !1);
    }
};
$9e3d383a4c02c1e5$var$Gb = $9e3d383a4c02c1e5$var$Qk;
$9e3d383a4c02c1e5$var$Hb = $9e3d383a4c02c1e5$var$Rk;
var $9e3d383a4c02c1e5$var$sl = {
    usingClientEntryPoint: !1,
    Events: [
        $9e3d383a4c02c1e5$var$Cb,
        $9e3d383a4c02c1e5$var$ue,
        $9e3d383a4c02c1e5$var$Db,
        $9e3d383a4c02c1e5$var$Eb,
        $9e3d383a4c02c1e5$var$Fb,
        $9e3d383a4c02c1e5$var$Qk
    ]
}, $9e3d383a4c02c1e5$var$tl = {
    findFiberByHostInstance: $9e3d383a4c02c1e5$var$Wc,
    bundleType: 0,
    version: "18.3.1",
    rendererPackageName: "react-dom"
};
var $9e3d383a4c02c1e5$var$ul = {
    bundleType: $9e3d383a4c02c1e5$var$tl.bundleType,
    version: $9e3d383a4c02c1e5$var$tl.version,
    rendererPackageName: $9e3d383a4c02c1e5$var$tl.rendererPackageName,
    rendererConfig: $9e3d383a4c02c1e5$var$tl.rendererConfig,
    overrideHookState: null,
    overrideHookStateDeletePath: null,
    overrideHookStateRenamePath: null,
    overrideProps: null,
    overridePropsDeletePath: null,
    overridePropsRenamePath: null,
    setErrorHandler: null,
    setSuspenseHandler: null,
    scheduleUpdate: null,
    currentDispatcherRef: $9e3d383a4c02c1e5$var$ua.ReactCurrentDispatcher,
    findHostInstanceByFiber: function(a) {
        a = $9e3d383a4c02c1e5$var$Zb(a);
        return null === a ? null : a.stateNode;
    },
    findFiberByHostInstance: $9e3d383a4c02c1e5$var$tl.findFiberByHostInstance || $9e3d383a4c02c1e5$var$jl,
    findHostInstancesForRefresh: null,
    scheduleRefresh: null,
    scheduleRoot: null,
    setRefreshHandler: null,
    getCurrentFiber: null,
    reconcilerVersion: "18.3.1-next-f1338f8080-20240426"
};
if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
    var $9e3d383a4c02c1e5$var$vl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!$9e3d383a4c02c1e5$var$vl.isDisabled && $9e3d383a4c02c1e5$var$vl.supportsFiber) try {
        $9e3d383a4c02c1e5$var$kc = $9e3d383a4c02c1e5$var$vl.inject($9e3d383a4c02c1e5$var$ul), $9e3d383a4c02c1e5$var$lc = $9e3d383a4c02c1e5$var$vl;
    } catch (a) {}
}
$9e3d383a4c02c1e5$export$ae55be85d98224ed = $9e3d383a4c02c1e5$var$sl;
$9e3d383a4c02c1e5$export$d39a5bbd09211389 = function(a, b) {
    var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
    if (!$9e3d383a4c02c1e5$var$nl(b)) throw Error($9e3d383a4c02c1e5$var$p(200));
    return $9e3d383a4c02c1e5$var$cl(a, b, null, c);
};
$9e3d383a4c02c1e5$export$882461b6382ed46c = function(a, b) {
    if (!$9e3d383a4c02c1e5$var$nl(a)) throw Error($9e3d383a4c02c1e5$var$p(299));
    var c = !1, d = "", e = $9e3d383a4c02c1e5$var$kl;
    null !== b && void 0 !== b && (!0 === b.unstable_strictMode && (c = !0), void 0 !== b.identifierPrefix && (d = b.identifierPrefix), void 0 !== b.onRecoverableError && (e = b.onRecoverableError));
    b = $9e3d383a4c02c1e5$var$bl(a, 1, !1, null, null, c, !1, d, e);
    a[$9e3d383a4c02c1e5$var$uf] = b.current;
    $9e3d383a4c02c1e5$var$sf(8 === a.nodeType ? a.parentNode : a);
    return new $9e3d383a4c02c1e5$var$ll(b);
};
$9e3d383a4c02c1e5$export$466bfc07425424d5 = function(a) {
    if (null == a) return null;
    if (1 === a.nodeType) return a;
    var b = a._reactInternals;
    if (void 0 === b) {
        if ("function" === typeof a.render) throw Error($9e3d383a4c02c1e5$var$p(188));
        a = Object.keys(a).join(",");
        throw Error($9e3d383a4c02c1e5$var$p(268, a));
    }
    a = $9e3d383a4c02c1e5$var$Zb(b);
    a = null === a ? null : a.stateNode;
    return a;
};
$9e3d383a4c02c1e5$export$cd75ccfd720a3cd4 = function(a) {
    return $9e3d383a4c02c1e5$var$Rk(a);
};
$9e3d383a4c02c1e5$export$fa8d919ba61d84db = function(a, b, c) {
    if (!$9e3d383a4c02c1e5$var$ol(b)) throw Error($9e3d383a4c02c1e5$var$p(200));
    return $9e3d383a4c02c1e5$var$rl(null, a, b, !0, c);
};
$9e3d383a4c02c1e5$export$757ceba2d55c277e = function(a, b, c) {
    if (!$9e3d383a4c02c1e5$var$nl(a)) throw Error($9e3d383a4c02c1e5$var$p(405));
    var d = null != c && c.hydratedSources || null, e = !1, f = "", g = $9e3d383a4c02c1e5$var$kl;
    null !== c && void 0 !== c && (!0 === c.unstable_strictMode && (e = !0), void 0 !== c.identifierPrefix && (f = c.identifierPrefix), void 0 !== c.onRecoverableError && (g = c.onRecoverableError));
    b = $9e3d383a4c02c1e5$var$el(b, null, a, 1, null != c ? c : null, e, !1, f, g);
    a[$9e3d383a4c02c1e5$var$uf] = b.current;
    $9e3d383a4c02c1e5$var$sf(a);
    if (d) for(a = 0; a < d.length; a++)c = d[a], e = c._getVersion, e = e(c._source), null == b.mutableSourceEagerHydrationData ? b.mutableSourceEagerHydrationData = [
        c,
        e
    ] : b.mutableSourceEagerHydrationData.push(c, e);
    return new $9e3d383a4c02c1e5$var$ml(b);
};
$9e3d383a4c02c1e5$export$b3890eb0ae9dca99 = function(a, b, c) {
    if (!$9e3d383a4c02c1e5$var$ol(b)) throw Error($9e3d383a4c02c1e5$var$p(200));
    return $9e3d383a4c02c1e5$var$rl(null, a, b, !1, c);
};
$9e3d383a4c02c1e5$export$502457920280e6be = function(a) {
    if (!$9e3d383a4c02c1e5$var$ol(a)) throw Error($9e3d383a4c02c1e5$var$p(40));
    return a._reactRootContainer ? ($9e3d383a4c02c1e5$var$Rk(function() {
        $9e3d383a4c02c1e5$var$rl(null, null, a, !1, function() {
            a._reactRootContainer = null;
            a[$9e3d383a4c02c1e5$var$uf] = null;
        });
    }), !0) : !1;
};
$9e3d383a4c02c1e5$export$c78a37762a8d58e1 = $9e3d383a4c02c1e5$var$Qk;
$9e3d383a4c02c1e5$export$dc54d992c10e8a18 = function(a, b, c, d) {
    if (!$9e3d383a4c02c1e5$var$ol(c)) throw Error($9e3d383a4c02c1e5$var$p(200));
    if (null == a || void 0 === a._reactInternals) throw Error($9e3d383a4c02c1e5$var$p(38));
    return $9e3d383a4c02c1e5$var$rl(a, b, c, !1, d);
};
$9e3d383a4c02c1e5$export$83d89fbfd8236492 = "18.3.1-next-f1338f8080-20240426";

});
parcelRegister("lnQPQ", function(module, exports) {
'use strict';

module.exports = (parcelRequire("9YI8a"));

});
parcelRegister("9YI8a", function(module, exports) {

$parcel$export(module.exports, "unstable_now", () => $743bf31a975ecad6$export$c4744153514ff05d, (v) => $743bf31a975ecad6$export$c4744153514ff05d = v);
$parcel$export(module.exports, "unstable_IdlePriority", () => $743bf31a975ecad6$export$3e506c1ccc9cc1a7, (v) => $743bf31a975ecad6$export$3e506c1ccc9cc1a7 = v);
$parcel$export(module.exports, "unstable_ImmediatePriority", () => $743bf31a975ecad6$export$e26fe2ed2fa76875, (v) => $743bf31a975ecad6$export$e26fe2ed2fa76875 = v);
$parcel$export(module.exports, "unstable_LowPriority", () => $743bf31a975ecad6$export$502329bbf4b505b1, (v) => $743bf31a975ecad6$export$502329bbf4b505b1 = v);
$parcel$export(module.exports, "unstable_NormalPriority", () => $743bf31a975ecad6$export$6e3807111c4874c4, (v) => $743bf31a975ecad6$export$6e3807111c4874c4 = v);
$parcel$export(module.exports, "unstable_Profiling", () => $743bf31a975ecad6$export$c27134553091fb3a, (v) => $743bf31a975ecad6$export$c27134553091fb3a = v);
$parcel$export(module.exports, "unstable_UserBlockingPriority", () => $743bf31a975ecad6$export$33ee1acdc04fd2a2, (v) => $743bf31a975ecad6$export$33ee1acdc04fd2a2 = v);
$parcel$export(module.exports, "unstable_cancelCallback", () => $743bf31a975ecad6$export$b00a404bbd5edef2, (v) => $743bf31a975ecad6$export$b00a404bbd5edef2 = v);
$parcel$export(module.exports, "unstable_continueExecution", () => $743bf31a975ecad6$export$8352ce38b91d0c62, (v) => $743bf31a975ecad6$export$8352ce38b91d0c62 = v);
$parcel$export(module.exports, "unstable_forceFrameRate", () => $743bf31a975ecad6$export$d66a1c1c77bd778b, (v) => $743bf31a975ecad6$export$d66a1c1c77bd778b = v);
$parcel$export(module.exports, "unstable_getCurrentPriorityLevel", () => $743bf31a975ecad6$export$d3dfb8e4810cb555, (v) => $743bf31a975ecad6$export$d3dfb8e4810cb555 = v);
$parcel$export(module.exports, "unstable_getFirstCallbackNode", () => $743bf31a975ecad6$export$839f9183b0465a69, (v) => $743bf31a975ecad6$export$839f9183b0465a69 = v);
$parcel$export(module.exports, "unstable_next", () => $743bf31a975ecad6$export$72fdf0e06517287b, (v) => $743bf31a975ecad6$export$72fdf0e06517287b = v);
$parcel$export(module.exports, "unstable_pauseExecution", () => $743bf31a975ecad6$export$4b844e58a3e414b4, (v) => $743bf31a975ecad6$export$4b844e58a3e414b4 = v);
$parcel$export(module.exports, "unstable_requestPaint", () => $743bf31a975ecad6$export$816d2913ae6b83b1, (v) => $743bf31a975ecad6$export$816d2913ae6b83b1 = v);
$parcel$export(module.exports, "unstable_runWithPriority", () => $743bf31a975ecad6$export$61bcfe829111a1d0, (v) => $743bf31a975ecad6$export$61bcfe829111a1d0 = v);
$parcel$export(module.exports, "unstable_scheduleCallback", () => $743bf31a975ecad6$export$7ee8c9beb337bc3f, (v) => $743bf31a975ecad6$export$7ee8c9beb337bc3f = v);
$parcel$export(module.exports, "unstable_shouldYield", () => $743bf31a975ecad6$export$b5836b71941fa3ed, (v) => $743bf31a975ecad6$export$b5836b71941fa3ed = v);
$parcel$export(module.exports, "unstable_wrapCallback", () => $743bf31a975ecad6$export$cf845f2c119da08a, (v) => $743bf31a975ecad6$export$cf845f2c119da08a = v);
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var $743bf31a975ecad6$export$c4744153514ff05d;
var $743bf31a975ecad6$export$3e506c1ccc9cc1a7;
var $743bf31a975ecad6$export$e26fe2ed2fa76875;
var $743bf31a975ecad6$export$502329bbf4b505b1;
var $743bf31a975ecad6$export$6e3807111c4874c4;
var $743bf31a975ecad6$export$c27134553091fb3a;
var $743bf31a975ecad6$export$33ee1acdc04fd2a2;
var $743bf31a975ecad6$export$b00a404bbd5edef2;
var $743bf31a975ecad6$export$8352ce38b91d0c62;
var $743bf31a975ecad6$export$d66a1c1c77bd778b;
var $743bf31a975ecad6$export$d3dfb8e4810cb555;
var $743bf31a975ecad6$export$839f9183b0465a69;
var $743bf31a975ecad6$export$72fdf0e06517287b;
var $743bf31a975ecad6$export$4b844e58a3e414b4;
var $743bf31a975ecad6$export$816d2913ae6b83b1;
var $743bf31a975ecad6$export$61bcfe829111a1d0;
var $743bf31a975ecad6$export$7ee8c9beb337bc3f;
var $743bf31a975ecad6$export$b5836b71941fa3ed;
var $743bf31a975ecad6$export$cf845f2c119da08a;
'use strict';
function $743bf31a975ecad6$var$f(a, b) {
    var c = a.length;
    a.push(b);
    a: for(; 0 < c;){
        var d = c - 1 >>> 1, e = a[d];
        if (0 < $743bf31a975ecad6$var$g(e, b)) a[d] = b, a[c] = e, c = d;
        else break a;
    }
}
function $743bf31a975ecad6$var$h(a) {
    return 0 === a.length ? null : a[0];
}
function $743bf31a975ecad6$var$k(a) {
    if (0 === a.length) return null;
    var b = a[0], c = a.pop();
    if (c !== b) {
        a[0] = c;
        a: for(var d = 0, e = a.length, w = e >>> 1; d < w;){
            var m = 2 * (d + 1) - 1, C = a[m], n = m + 1, x = a[n];
            if (0 > $743bf31a975ecad6$var$g(C, c)) n < e && 0 > $743bf31a975ecad6$var$g(x, C) ? (a[d] = x, a[n] = c, d = n) : (a[d] = C, a[m] = c, d = m);
            else if (n < e && 0 > $743bf31a975ecad6$var$g(x, c)) a[d] = x, a[n] = c, d = n;
            else break a;
        }
    }
    return b;
}
function $743bf31a975ecad6$var$g(a, b) {
    var c = a.sortIndex - b.sortIndex;
    return 0 !== c ? c : a.id - b.id;
}
if ("object" === typeof performance && "function" === typeof performance.now) {
    var $743bf31a975ecad6$var$l = performance;
    $743bf31a975ecad6$export$c4744153514ff05d = function() {
        return $743bf31a975ecad6$var$l.now();
    };
} else {
    var $743bf31a975ecad6$var$p = Date, $743bf31a975ecad6$var$q = $743bf31a975ecad6$var$p.now();
    $743bf31a975ecad6$export$c4744153514ff05d = function() {
        return $743bf31a975ecad6$var$p.now() - $743bf31a975ecad6$var$q;
    };
}
var $743bf31a975ecad6$var$r = [], $743bf31a975ecad6$var$t = [], $743bf31a975ecad6$var$u = 1, $743bf31a975ecad6$var$v = null, $743bf31a975ecad6$var$y = 3, $743bf31a975ecad6$var$z = !1, $743bf31a975ecad6$var$A = !1, $743bf31a975ecad6$var$B = !1, $743bf31a975ecad6$var$D = "function" === typeof setTimeout ? setTimeout : null, $743bf31a975ecad6$var$E = "function" === typeof clearTimeout ? clearTimeout : null, $743bf31a975ecad6$var$F = "undefined" !== typeof setImmediate ? setImmediate : null;
"undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
function $743bf31a975ecad6$var$G(a) {
    for(var b = $743bf31a975ecad6$var$h($743bf31a975ecad6$var$t); null !== b;){
        if (null === b.callback) $743bf31a975ecad6$var$k($743bf31a975ecad6$var$t);
        else if (b.startTime <= a) $743bf31a975ecad6$var$k($743bf31a975ecad6$var$t), b.sortIndex = b.expirationTime, $743bf31a975ecad6$var$f($743bf31a975ecad6$var$r, b);
        else break;
        b = $743bf31a975ecad6$var$h($743bf31a975ecad6$var$t);
    }
}
function $743bf31a975ecad6$var$H(a) {
    $743bf31a975ecad6$var$B = !1;
    $743bf31a975ecad6$var$G(a);
    if (!$743bf31a975ecad6$var$A) {
        if (null !== $743bf31a975ecad6$var$h($743bf31a975ecad6$var$r)) $743bf31a975ecad6$var$A = !0, $743bf31a975ecad6$var$I($743bf31a975ecad6$var$J);
        else {
            var b = $743bf31a975ecad6$var$h($743bf31a975ecad6$var$t);
            null !== b && $743bf31a975ecad6$var$K($743bf31a975ecad6$var$H, b.startTime - a);
        }
    }
}
function $743bf31a975ecad6$var$J(a, b) {
    $743bf31a975ecad6$var$A = !1;
    $743bf31a975ecad6$var$B && ($743bf31a975ecad6$var$B = !1, $743bf31a975ecad6$var$E($743bf31a975ecad6$var$L), $743bf31a975ecad6$var$L = -1);
    $743bf31a975ecad6$var$z = !0;
    var c = $743bf31a975ecad6$var$y;
    try {
        $743bf31a975ecad6$var$G(b);
        for($743bf31a975ecad6$var$v = $743bf31a975ecad6$var$h($743bf31a975ecad6$var$r); null !== $743bf31a975ecad6$var$v && (!($743bf31a975ecad6$var$v.expirationTime > b) || a && !$743bf31a975ecad6$var$M());){
            var d = $743bf31a975ecad6$var$v.callback;
            if ("function" === typeof d) {
                $743bf31a975ecad6$var$v.callback = null;
                $743bf31a975ecad6$var$y = $743bf31a975ecad6$var$v.priorityLevel;
                var e = d($743bf31a975ecad6$var$v.expirationTime <= b);
                b = $743bf31a975ecad6$export$c4744153514ff05d();
                "function" === typeof e ? $743bf31a975ecad6$var$v.callback = e : $743bf31a975ecad6$var$v === $743bf31a975ecad6$var$h($743bf31a975ecad6$var$r) && $743bf31a975ecad6$var$k($743bf31a975ecad6$var$r);
                $743bf31a975ecad6$var$G(b);
            } else $743bf31a975ecad6$var$k($743bf31a975ecad6$var$r);
            $743bf31a975ecad6$var$v = $743bf31a975ecad6$var$h($743bf31a975ecad6$var$r);
        }
        if (null !== $743bf31a975ecad6$var$v) var w = !0;
        else {
            var m = $743bf31a975ecad6$var$h($743bf31a975ecad6$var$t);
            null !== m && $743bf31a975ecad6$var$K($743bf31a975ecad6$var$H, m.startTime - b);
            w = !1;
        }
        return w;
    } finally{
        $743bf31a975ecad6$var$v = null, $743bf31a975ecad6$var$y = c, $743bf31a975ecad6$var$z = !1;
    }
}
var $743bf31a975ecad6$var$N = !1, $743bf31a975ecad6$var$O = null, $743bf31a975ecad6$var$L = -1, $743bf31a975ecad6$var$P = 5, $743bf31a975ecad6$var$Q = -1;
function $743bf31a975ecad6$var$M() {
    return $743bf31a975ecad6$export$c4744153514ff05d() - $743bf31a975ecad6$var$Q < $743bf31a975ecad6$var$P ? !1 : !0;
}
function $743bf31a975ecad6$var$R() {
    if (null !== $743bf31a975ecad6$var$O) {
        var a = $743bf31a975ecad6$export$c4744153514ff05d();
        $743bf31a975ecad6$var$Q = a;
        var b = !0;
        try {
            b = $743bf31a975ecad6$var$O(!0, a);
        } finally{
            b ? $743bf31a975ecad6$var$S() : ($743bf31a975ecad6$var$N = !1, $743bf31a975ecad6$var$O = null);
        }
    } else $743bf31a975ecad6$var$N = !1;
}
var $743bf31a975ecad6$var$S;
if ("function" === typeof $743bf31a975ecad6$var$F) $743bf31a975ecad6$var$S = function() {
    $743bf31a975ecad6$var$F($743bf31a975ecad6$var$R);
};
else if ("undefined" !== typeof MessageChannel) {
    var $743bf31a975ecad6$var$T = new MessageChannel, $743bf31a975ecad6$var$U = $743bf31a975ecad6$var$T.port2;
    $743bf31a975ecad6$var$T.port1.onmessage = $743bf31a975ecad6$var$R;
    $743bf31a975ecad6$var$S = function() {
        $743bf31a975ecad6$var$U.postMessage(null);
    };
} else $743bf31a975ecad6$var$S = function() {
    $743bf31a975ecad6$var$D($743bf31a975ecad6$var$R, 0);
};
function $743bf31a975ecad6$var$I(a) {
    $743bf31a975ecad6$var$O = a;
    $743bf31a975ecad6$var$N || ($743bf31a975ecad6$var$N = !0, $743bf31a975ecad6$var$S());
}
function $743bf31a975ecad6$var$K(a, b) {
    $743bf31a975ecad6$var$L = $743bf31a975ecad6$var$D(function() {
        a($743bf31a975ecad6$export$c4744153514ff05d());
    }, b);
}
$743bf31a975ecad6$export$3e506c1ccc9cc1a7 = 5;
$743bf31a975ecad6$export$e26fe2ed2fa76875 = 1;
$743bf31a975ecad6$export$502329bbf4b505b1 = 4;
$743bf31a975ecad6$export$6e3807111c4874c4 = 3;
$743bf31a975ecad6$export$c27134553091fb3a = null;
$743bf31a975ecad6$export$33ee1acdc04fd2a2 = 2;
$743bf31a975ecad6$export$b00a404bbd5edef2 = function(a) {
    a.callback = null;
};
$743bf31a975ecad6$export$8352ce38b91d0c62 = function() {
    $743bf31a975ecad6$var$A || $743bf31a975ecad6$var$z || ($743bf31a975ecad6$var$A = !0, $743bf31a975ecad6$var$I($743bf31a975ecad6$var$J));
};
$743bf31a975ecad6$export$d66a1c1c77bd778b = function(a) {
    0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : $743bf31a975ecad6$var$P = 0 < a ? Math.floor(1E3 / a) : 5;
};
$743bf31a975ecad6$export$d3dfb8e4810cb555 = function() {
    return $743bf31a975ecad6$var$y;
};
$743bf31a975ecad6$export$839f9183b0465a69 = function() {
    return $743bf31a975ecad6$var$h($743bf31a975ecad6$var$r);
};
$743bf31a975ecad6$export$72fdf0e06517287b = function(a) {
    switch($743bf31a975ecad6$var$y){
        case 1:
        case 2:
        case 3:
            var b = 3;
            break;
        default:
            b = $743bf31a975ecad6$var$y;
    }
    var c = $743bf31a975ecad6$var$y;
    $743bf31a975ecad6$var$y = b;
    try {
        return a();
    } finally{
        $743bf31a975ecad6$var$y = c;
    }
};
$743bf31a975ecad6$export$4b844e58a3e414b4 = function() {};
$743bf31a975ecad6$export$816d2913ae6b83b1 = function() {};
$743bf31a975ecad6$export$61bcfe829111a1d0 = function(a, b) {
    switch(a){
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
            break;
        default:
            a = 3;
    }
    var c = $743bf31a975ecad6$var$y;
    $743bf31a975ecad6$var$y = a;
    try {
        return b();
    } finally{
        $743bf31a975ecad6$var$y = c;
    }
};
$743bf31a975ecad6$export$7ee8c9beb337bc3f = function(a, b, c) {
    var d = $743bf31a975ecad6$export$c4744153514ff05d();
    "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;
    switch(a){
        case 1:
            var e = -1;
            break;
        case 2:
            e = 250;
            break;
        case 5:
            e = 1073741823;
            break;
        case 4:
            e = 1E4;
            break;
        default:
            e = 5E3;
    }
    e = c + e;
    a = {
        id: $743bf31a975ecad6$var$u++,
        callback: b,
        priorityLevel: a,
        startTime: c,
        expirationTime: e,
        sortIndex: -1
    };
    c > d ? (a.sortIndex = c, $743bf31a975ecad6$var$f($743bf31a975ecad6$var$t, a), null === $743bf31a975ecad6$var$h($743bf31a975ecad6$var$r) && a === $743bf31a975ecad6$var$h($743bf31a975ecad6$var$t) && ($743bf31a975ecad6$var$B ? ($743bf31a975ecad6$var$E($743bf31a975ecad6$var$L), $743bf31a975ecad6$var$L = -1) : $743bf31a975ecad6$var$B = !0, $743bf31a975ecad6$var$K($743bf31a975ecad6$var$H, c - d))) : (a.sortIndex = e, $743bf31a975ecad6$var$f($743bf31a975ecad6$var$r, a), $743bf31a975ecad6$var$A || $743bf31a975ecad6$var$z || ($743bf31a975ecad6$var$A = !0, $743bf31a975ecad6$var$I($743bf31a975ecad6$var$J)));
    return a;
};
$743bf31a975ecad6$export$b5836b71941fa3ed = $743bf31a975ecad6$var$M;
$743bf31a975ecad6$export$cf845f2c119da08a = function(a) {
    var b = $743bf31a975ecad6$var$y;
    return function() {
        var c = $743bf31a975ecad6$var$y;
        $743bf31a975ecad6$var$y = b;
        try {
            return a.apply(this, arguments);
        } finally{
            $743bf31a975ecad6$var$y = c;
        }
    };
};

});



/**
 * Startpunkten för hela appen 🚀
 *
 * Väntar på att sidan laddats klart innan React tar över.
 * Som att vänta på att kaffet bryggts innan man häller upp.
 */ var $0cca9a328bcd4540$exports = {};
'use strict';

$0cca9a328bcd4540$exports = (parcelRequire("2u1j3"));


parcelRequire("7p28Q");
var $39d35cf54bfead1a$export$882461b6382ed46c;
var $39d35cf54bfead1a$export$757ceba2d55c277e;
'use strict';
var $b939d40a1c9f6035$exports = {};
'use strict';
function $b939d40a1c9f6035$var$checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') return;
    try {
        // Verify that the code above has been dead code eliminated (DCE'd).
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE($b939d40a1c9f6035$var$checkDCE);
    } catch (err) {
        // DevTools shouldn't crash React, no matter what.
        // We should still report in case we break this code.
        console.error(err);
    }
}
// DCE check should happen before ReactDOM bundle executes so that
// DevTools can report bad minification during injection.
$b939d40a1c9f6035$var$checkDCE();

$b939d40a1c9f6035$exports = (parcelRequire("dAiNB"));


var $39d35cf54bfead1a$var$i;
$39d35cf54bfead1a$export$882461b6382ed46c = $b939d40a1c9f6035$exports.createRoot;
$39d35cf54bfead1a$export$757ceba2d55c277e = $b939d40a1c9f6035$exports.hydrateRoot;



// src/App.jsx
/**
 * Appens huvudkomponent 🎼
 *
 * Styr routing och navigation.
 * Tre sidor: inloggning, startsida och 404.
 */ 
parcelRequire("7p28Q");
/**
 * React Router DOM v6.30.1
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */ 
var $7p28Q = parcelRequire("7p28Q");

/**
 * @remix-run/router v1.23.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */ function $48f15048fc5d75eb$var$_extends() {
    $48f15048fc5d75eb$var$_extends = Object.assign ? Object.assign.bind() : function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return $48f15048fc5d75eb$var$_extends.apply(this, arguments);
}
////////////////////////////////////////////////////////////////////////////////
//#region Types and Constants
////////////////////////////////////////////////////////////////////////////////
/**
 * Actions represent the type of change to a location value.
 */ var $48f15048fc5d75eb$export$e19cd5f9376f8cee;
(function(Action) {
    /**
   * A POP indicates a change to an arbitrary index in the history stack, such
   * as a back or forward navigation. It does not describe the direction of the
   * navigation, only that the current index changed.
   *
   * Note: This is the default action for newly created history objects.
   */ Action["Pop"] = "POP";
    /**
   * A PUSH indicates a new entry being added to the history stack, such as when
   * a link is clicked and a new page loads. When this happens, all subsequent
   * entries in the stack are lost.
   */ Action["Push"] = "PUSH";
    /**
   * A REPLACE indicates the entry at the current index in the history stack
   * being replaced by a new one.
   */ Action["Replace"] = "REPLACE";
})($48f15048fc5d75eb$export$e19cd5f9376f8cee || ($48f15048fc5d75eb$export$e19cd5f9376f8cee = {}));
const $48f15048fc5d75eb$var$PopStateEventType = "popstate";
/**
 * Memory history stores the current location in memory. It is designed for use
 * in stateful non-browser environments like tests and React Native.
 */ function $48f15048fc5d75eb$export$2b76ad033c6e6d08(options) {
    if (options === void 0) options = {};
    let { initialEntries: initialEntries = [
        "/"
    ], initialIndex: initialIndex, v5Compat: v5Compat = false } = options;
    let entries; // Declare so we can access from createMemoryLocation
    entries = initialEntries.map((entry, index)=>createMemoryLocation(entry, typeof entry === "string" ? null : entry.state, index === 0 ? "default" : undefined));
    let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);
    let action = $48f15048fc5d75eb$export$e19cd5f9376f8cee.Pop;
    let listener = null;
    function clampIndex(n) {
        return Math.min(Math.max(n, 0), entries.length - 1);
    }
    function getCurrentLocation() {
        return entries[index];
    }
    function createMemoryLocation(to, state, key) {
        if (state === void 0) state = null;
        let location = $48f15048fc5d75eb$var$createLocation(entries ? getCurrentLocation().pathname : "/", to, state, key);
        $48f15048fc5d75eb$export$c0e02632e14916fd(location.pathname.charAt(0) === "/", "relative pathnames are not supported in memory history: " + JSON.stringify(to));
        return location;
    }
    function createHref(to) {
        return typeof to === "string" ? to : $48f15048fc5d75eb$export$fe53371bee54353d(to);
    }
    let history = {
        get index () {
            return index;
        },
        get action () {
            return action;
        },
        get location () {
            return getCurrentLocation();
        },
        createHref: createHref,
        createURL (to) {
            return new URL(createHref(to), "http://localhost");
        },
        encodeLocation (to) {
            let path = typeof to === "string" ? $48f15048fc5d75eb$export$8ccf933b0513f8d0(to) : to;
            return {
                pathname: path.pathname || "",
                search: path.search || "",
                hash: path.hash || ""
            };
        },
        push (to, state) {
            action = $48f15048fc5d75eb$export$e19cd5f9376f8cee.Push;
            let nextLocation = createMemoryLocation(to, state);
            index += 1;
            entries.splice(index, entries.length, nextLocation);
            if (v5Compat && listener) listener({
                action: action,
                location: nextLocation,
                delta: 1
            });
        },
        replace (to, state) {
            action = $48f15048fc5d75eb$export$e19cd5f9376f8cee.Replace;
            let nextLocation = createMemoryLocation(to, state);
            entries[index] = nextLocation;
            if (v5Compat && listener) listener({
                action: action,
                location: nextLocation,
                delta: 0
            });
        },
        go (delta) {
            action = $48f15048fc5d75eb$export$e19cd5f9376f8cee.Pop;
            let nextIndex = clampIndex(index + delta);
            let nextLocation = entries[nextIndex];
            index = nextIndex;
            if (listener) listener({
                action: action,
                location: nextLocation,
                delta: delta
            });
        },
        listen (fn) {
            listener = fn;
            return ()=>{
                listener = null;
            };
        }
    };
    return history;
}
/**
 * Browser history stores the location in regular URLs. This is the standard for
 * most web apps, but it requires some configuration on the server to ensure you
 * serve the same app at multiple URLs.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory
 */ function $48f15048fc5d75eb$export$719fc203c4e16dee(options) {
    if (options === void 0) options = {};
    function createBrowserLocation(window1, globalHistory) {
        let { pathname: pathname, search: search, hash: hash } = window1.location;
        return $48f15048fc5d75eb$var$createLocation("", {
            pathname: pathname,
            search: search,
            hash: hash
        }, // state defaults to `null` because `window.history.state` does
        globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || "default");
    }
    function createBrowserHref(window1, to) {
        return typeof to === "string" ? to : $48f15048fc5d75eb$export$fe53371bee54353d(to);
    }
    return $48f15048fc5d75eb$var$getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
}
/**
 * Hash history stores the location in window.location.hash. This makes it ideal
 * for situations where you don't want to send the location to the server for
 * some reason, either because you do cannot configure it or the URL space is
 * reserved for something else.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory
 */ function $48f15048fc5d75eb$export$b71fdd3798280242(options) {
    if (options === void 0) options = {};
    function createHashLocation(window1, globalHistory) {
        let { pathname: pathname = "/", search: search = "", hash: hash = "" } = $48f15048fc5d75eb$export$8ccf933b0513f8d0(window1.location.hash.substr(1));
        // Hash URL should always have a leading / just like window.location.pathname
        // does, so if an app ends up at a route like /#something then we add a
        // leading slash so all of our path-matching behaves the same as if it would
        // in a browser router.  This is particularly important when there exists a
        // root splat route (<Route path="*">) since that matches internally against
        // "/*" and we'd expect /#something to 404 in a hash router app.
        if (!pathname.startsWith("/") && !pathname.startsWith(".")) pathname = "/" + pathname;
        return $48f15048fc5d75eb$var$createLocation("", {
            pathname: pathname,
            search: search,
            hash: hash
        }, // state defaults to `null` because `window.history.state` does
        globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || "default");
    }
    function createHashHref(window1, to) {
        let base = window1.document.querySelector("base");
        let href = "";
        if (base && base.getAttribute("href")) {
            let url = window1.location.href;
            let hashIndex = url.indexOf("#");
            href = hashIndex === -1 ? url : url.slice(0, hashIndex);
        }
        return href + "#" + (typeof to === "string" ? to : $48f15048fc5d75eb$export$fe53371bee54353d(to));
    }
    function validateHashLocation(location, to) {
        $48f15048fc5d75eb$export$c0e02632e14916fd(location.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(to) + ")");
    }
    return $48f15048fc5d75eb$var$getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);
}
function $48f15048fc5d75eb$export$3e9cee6b33872309(value, message) {
    if (value === false || value === null || typeof value === "undefined") throw new Error(message);
}
function $48f15048fc5d75eb$export$c0e02632e14916fd(cond, message) {
    if (!cond) {
        // eslint-disable-next-line no-console
        if (typeof console !== "undefined") console.warn(message);
        try {
            // Welcome to debugging history!
            //
            // This error is thrown as a convenience, so you can more easily
            // find the source for a warning that appears in the console by
            // enabling "pause on exceptions" in your JavaScript debugger.
            throw new Error(message);
        // eslint-disable-next-line no-empty
        } catch (e) {}
    }
}
function $48f15048fc5d75eb$var$createKey() {
    return Math.random().toString(36).substr(2, 8);
}
/**
 * For browser-based histories, we combine the state and key into an object
 */ function $48f15048fc5d75eb$var$getHistoryState(location, index) {
    return {
        usr: location.state,
        key: location.key,
        idx: index
    };
}
/**
 * Creates a Location object with a unique key from the given Path
 */ function $48f15048fc5d75eb$var$createLocation(current, to, state, key) {
    if (state === void 0) state = null;
    let location = $48f15048fc5d75eb$var$_extends({
        pathname: typeof current === "string" ? current : current.pathname,
        search: "",
        hash: ""
    }, typeof to === "string" ? $48f15048fc5d75eb$export$8ccf933b0513f8d0(to) : to, {
        state: state,
        // TODO: This could be cleaned up.  push/replace should probably just take
        // full Locations now and avoid the need to run through this flow at all
        // But that's a pretty big refactor to the current test suite so going to
        // keep as is for the time being and just let any incoming keys take precedence
        key: to && to.key || key || $48f15048fc5d75eb$var$createKey()
    });
    return location;
}
/**
 * Creates a string URL path from the given pathname, search, and hash components.
 */ function $48f15048fc5d75eb$export$fe53371bee54353d(_ref) {
    let { pathname: pathname = "/", search: search = "", hash: hash = "" } = _ref;
    if (search && search !== "?") pathname += search.charAt(0) === "?" ? search : "?" + search;
    if (hash && hash !== "#") pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
    return pathname;
}
/**
 * Parses a string URL path into its separate pathname, search, and hash components.
 */ function $48f15048fc5d75eb$export$8ccf933b0513f8d0(path) {
    let parsedPath = {};
    if (path) {
        let hashIndex = path.indexOf("#");
        if (hashIndex >= 0) {
            parsedPath.hash = path.substr(hashIndex);
            path = path.substr(0, hashIndex);
        }
        let searchIndex = path.indexOf("?");
        if (searchIndex >= 0) {
            parsedPath.search = path.substr(searchIndex);
            path = path.substr(0, searchIndex);
        }
        if (path) parsedPath.pathname = path;
    }
    return parsedPath;
}
function $48f15048fc5d75eb$var$getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
    if (options === void 0) options = {};
    let { window: window1 = document.defaultView, v5Compat: v5Compat = false } = options;
    let globalHistory = window1.history;
    let action = $48f15048fc5d75eb$export$e19cd5f9376f8cee.Pop;
    let listener = null;
    let index = getIndex();
    // Index should only be null when we initialize. If not, it's because the
    // user called history.pushState or history.replaceState directly, in which
    // case we should log a warning as it will result in bugs.
    if (index == null) {
        index = 0;
        globalHistory.replaceState($48f15048fc5d75eb$var$_extends({}, globalHistory.state, {
            idx: index
        }), "");
    }
    function getIndex() {
        let state = globalHistory.state || {
            idx: null
        };
        return state.idx;
    }
    function handlePop() {
        action = $48f15048fc5d75eb$export$e19cd5f9376f8cee.Pop;
        let nextIndex = getIndex();
        let delta = nextIndex == null ? null : nextIndex - index;
        index = nextIndex;
        if (listener) listener({
            action: action,
            location: history.location,
            delta: delta
        });
    }
    function push(to, state) {
        action = $48f15048fc5d75eb$export$e19cd5f9376f8cee.Push;
        let location = $48f15048fc5d75eb$var$createLocation(history.location, to, state);
        if (validateLocation) validateLocation(location, to);
        index = getIndex() + 1;
        let historyState = $48f15048fc5d75eb$var$getHistoryState(location, index);
        let url = history.createHref(location);
        // try...catch because iOS limits us to 100 pushState calls :/
        try {
            globalHistory.pushState(historyState, "", url);
        } catch (error) {
            // If the exception is because `state` can't be serialized, let that throw
            // outwards just like a replace call would so the dev knows the cause
            // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps
            // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal
            if (error instanceof DOMException && error.name === "DataCloneError") throw error;
            // They are going to lose state here, but there is no real
            // way to warn them about it since the page will refresh...
            window1.location.assign(url);
        }
        if (v5Compat && listener) listener({
            action: action,
            location: history.location,
            delta: 1
        });
    }
    function replace(to, state) {
        action = $48f15048fc5d75eb$export$e19cd5f9376f8cee.Replace;
        let location = $48f15048fc5d75eb$var$createLocation(history.location, to, state);
        if (validateLocation) validateLocation(location, to);
        index = getIndex();
        let historyState = $48f15048fc5d75eb$var$getHistoryState(location, index);
        let url = history.createHref(location);
        globalHistory.replaceState(historyState, "", url);
        if (v5Compat && listener) listener({
            action: action,
            location: history.location,
            delta: 0
        });
    }
    function createURL(to) {
        // window.location.origin is "null" (the literal string value) in Firefox
        // under certain conditions, notably when serving from a local HTML file
        // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297
        let base = window1.location.origin !== "null" ? window1.location.origin : window1.location.href;
        let href = typeof to === "string" ? to : $48f15048fc5d75eb$export$fe53371bee54353d(to);
        // Treating this as a full URL will strip any trailing spaces so we need to
        // pre-encode them since they might be part of a matching splat param from
        // an ancestor route
        href = href.replace(/ $/, "%20");
        $48f15048fc5d75eb$export$3e9cee6b33872309(base, "No window.location.(origin|href) available to create URL for href: " + href);
        return new URL(href, base);
    }
    let history = {
        get action () {
            return action;
        },
        get location () {
            return getLocation(window1, globalHistory);
        },
        listen (fn) {
            if (listener) throw new Error("A history only accepts one active listener");
            window1.addEventListener($48f15048fc5d75eb$var$PopStateEventType, handlePop);
            listener = fn;
            return ()=>{
                window1.removeEventListener($48f15048fc5d75eb$var$PopStateEventType, handlePop);
                listener = null;
            };
        },
        createHref (to) {
            return createHref(window1, to);
        },
        createURL: createURL,
        encodeLocation (to) {
            // Encode a Location the same way window.location would
            let url = createURL(to);
            return {
                pathname: url.pathname,
                search: url.search,
                hash: url.hash
            };
        },
        push: push,
        replace: replace,
        go (n) {
            return globalHistory.go(n);
        }
    };
    return history;
}
//#endregion
var $48f15048fc5d75eb$var$ResultType;
(function(ResultType) {
    ResultType["data"] = "data";
    ResultType["deferred"] = "deferred";
    ResultType["redirect"] = "redirect";
    ResultType["error"] = "error";
})($48f15048fc5d75eb$var$ResultType || ($48f15048fc5d75eb$var$ResultType = {}));
const $48f15048fc5d75eb$var$immutableRouteKeys = new Set([
    "lazy",
    "caseSensitive",
    "path",
    "id",
    "index",
    "children"
]);
function $48f15048fc5d75eb$var$isIndexRoute(route) {
    return route.index === true;
}
// Walk the route tree generating unique IDs where necessary, so we are working
// solely with AgnosticDataRouteObject's within the Router
function $48f15048fc5d75eb$export$4a6d22b32134ea5d(routes, mapRouteProperties, parentPath, manifest) {
    if (parentPath === void 0) parentPath = [];
    if (manifest === void 0) manifest = {};
    return routes.map((route, index)=>{
        let treePath = [
            ...parentPath,
            String(index)
        ];
        let id = typeof route.id === "string" ? route.id : treePath.join("-");
        $48f15048fc5d75eb$export$3e9cee6b33872309(route.index !== true || !route.children, "Cannot specify children on an index route");
        $48f15048fc5d75eb$export$3e9cee6b33872309(!manifest[id], "Found a route id collision on id \"" + id + "\".  Route " + "id's must be globally unique within Data Router usages");
        if ($48f15048fc5d75eb$var$isIndexRoute(route)) {
            let indexRoute = $48f15048fc5d75eb$var$_extends({}, route, mapRouteProperties(route), {
                id: id
            });
            manifest[id] = indexRoute;
            return indexRoute;
        } else {
            let pathOrLayoutRoute = $48f15048fc5d75eb$var$_extends({}, route, mapRouteProperties(route), {
                id: id,
                children: undefined
            });
            manifest[id] = pathOrLayoutRoute;
            if (route.children) pathOrLayoutRoute.children = $48f15048fc5d75eb$export$4a6d22b32134ea5d(route.children, mapRouteProperties, treePath, manifest);
            return pathOrLayoutRoute;
        }
    });
}
/**
 * Matches the given routes to a location and returns the match data.
 *
 * @see https://reactrouter.com/v6/utils/match-routes
 */ function $48f15048fc5d75eb$export$2708184779ceb39d(routes, locationArg, basename) {
    if (basename === void 0) basename = "/";
    return $48f15048fc5d75eb$var$matchRoutesImpl(routes, locationArg, basename, false);
}
function $48f15048fc5d75eb$var$matchRoutesImpl(routes, locationArg, basename, allowPartial) {
    let location = typeof locationArg === "string" ? $48f15048fc5d75eb$export$8ccf933b0513f8d0(locationArg) : locationArg;
    let pathname = $48f15048fc5d75eb$export$b69e3301ce081aa3(location.pathname || "/", basename);
    if (pathname == null) return null;
    let branches = $48f15048fc5d75eb$var$flattenRoutes(routes);
    $48f15048fc5d75eb$var$rankRouteBranches(branches);
    let matches = null;
    for(let i = 0; matches == null && i < branches.length; ++i){
        // Incoming pathnames are generally encoded from either window.location
        // or from router.navigate, but we want to match against the unencoded
        // paths in the route definitions.  Memory router locations won't be
        // encoded here but there also shouldn't be anything to decode so this
        // should be a safe operation.  This avoids needing matchRoutes to be
        // history-aware.
        let decoded = $48f15048fc5d75eb$export$30d21fd6d7295f52(pathname);
        matches = $48f15048fc5d75eb$var$matchRouteBranch(branches[i], decoded, allowPartial);
    }
    return matches;
}
function $48f15048fc5d75eb$export$b3fac024fad9e8ff(match, loaderData) {
    let { route: route, pathname: pathname, params: params } = match;
    return {
        id: route.id,
        pathname: pathname,
        params: params,
        data: loaderData[route.id],
        handle: route.handle
    };
}
function $48f15048fc5d75eb$var$flattenRoutes(routes, branches, parentsMeta, parentPath) {
    if (branches === void 0) branches = [];
    if (parentsMeta === void 0) parentsMeta = [];
    if (parentPath === void 0) parentPath = "";
    let flattenRoute = (route, index, relativePath)=>{
        let meta = {
            relativePath: relativePath === undefined ? route.path || "" : relativePath,
            caseSensitive: route.caseSensitive === true,
            childrenIndex: index,
            route: route
        };
        if (meta.relativePath.startsWith("/")) {
            $48f15048fc5d75eb$export$3e9cee6b33872309(meta.relativePath.startsWith(parentPath), "Absolute route path \"" + meta.relativePath + "\" nested under path " + ("\"" + parentPath + "\" is not valid. An absolute child route path ") + "must start with the combined path of all its parent routes.");
            meta.relativePath = meta.relativePath.slice(parentPath.length);
        }
        let path = $48f15048fc5d75eb$export$86d9a7913e44197e([
            parentPath,
            meta.relativePath
        ]);
        let routesMeta = parentsMeta.concat(meta);
        // Add the children before adding this route to the array, so we traverse the
        // route tree depth-first and child routes appear before their parents in
        // the "flattened" version.
        if (route.children && route.children.length > 0) {
            $48f15048fc5d75eb$export$3e9cee6b33872309(// Our types know better, but runtime JS may not!
            // @ts-expect-error
            route.index !== true, "Index routes must not have child routes. Please remove " + ("all child routes from route path \"" + path + "\"."));
            $48f15048fc5d75eb$var$flattenRoutes(route.children, branches, routesMeta, path);
        }
        // Routes without a path shouldn't ever match by themselves unless they are
        // index routes, so don't add them to the list of possible branches.
        if (route.path == null && !route.index) return;
        branches.push({
            path: path,
            score: $48f15048fc5d75eb$var$computeScore(path, route.index),
            routesMeta: routesMeta
        });
    };
    routes.forEach((route, index)=>{
        var _route$path;
        // coarse-grain check for optional params
        if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) flattenRoute(route, index);
        else for (let exploded of $48f15048fc5d75eb$var$explodeOptionalSegments(route.path))flattenRoute(route, index, exploded);
    });
    return branches;
}
/**
 * Computes all combinations of optional path segments for a given path,
 * excluding combinations that are ambiguous and of lower priority.
 *
 * For example, `/one/:two?/three/:four?/:five?` explodes to:
 * - `/one/three`
 * - `/one/:two/three`
 * - `/one/three/:four`
 * - `/one/three/:five`
 * - `/one/:two/three/:four`
 * - `/one/:two/three/:five`
 * - `/one/three/:four/:five`
 * - `/one/:two/three/:four/:five`
 */ function $48f15048fc5d75eb$var$explodeOptionalSegments(path) {
    let segments = path.split("/");
    if (segments.length === 0) return [];
    let [first, ...rest] = segments;
    // Optional path segments are denoted by a trailing `?`
    let isOptional = first.endsWith("?");
    // Compute the corresponding required segment: `foo?` -> `foo`
    let required = first.replace(/\?$/, "");
    if (rest.length === 0) // Intepret empty string as omitting an optional segment
    // `["one", "", "three"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`
    return isOptional ? [
        required,
        ""
    ] : [
        required
    ];
    let restExploded = $48f15048fc5d75eb$var$explodeOptionalSegments(rest.join("/"));
    let result = [];
    // All child paths with the prefix.  Do this for all children before the
    // optional version for all children, so we get consistent ordering where the
    // parent optional aspect is preferred as required.  Otherwise, we can get
    // child sections interspersed where deeper optional segments are higher than
    // parent optional segments, where for example, /:two would explode _earlier_
    // then /:one.  By always including the parent as required _for all children_
    // first, we avoid this issue
    result.push(...restExploded.map((subpath)=>subpath === "" ? required : [
            required,
            subpath
        ].join("/")));
    // Then, if this is an optional value, add all child versions without
    if (isOptional) result.push(...restExploded);
    // for absolute paths, ensure `/` instead of empty segment
    return result.map((exploded)=>path.startsWith("/") && exploded === "" ? "/" : exploded);
}
function $48f15048fc5d75eb$var$rankRouteBranches(branches) {
    branches.sort((a, b)=>a.score !== b.score ? b.score - a.score // Higher score first
         : $48f15048fc5d75eb$var$compareIndexes(a.routesMeta.map((meta)=>meta.childrenIndex), b.routesMeta.map((meta)=>meta.childrenIndex)));
}
const $48f15048fc5d75eb$var$paramRe = /^:[\w-]+$/;
const $48f15048fc5d75eb$var$dynamicSegmentValue = 3;
const $48f15048fc5d75eb$var$indexRouteValue = 2;
const $48f15048fc5d75eb$var$emptySegmentValue = 1;
const $48f15048fc5d75eb$var$staticSegmentValue = 10;
const $48f15048fc5d75eb$var$splatPenalty = -2;
const $48f15048fc5d75eb$var$isSplat = (s)=>s === "*";
function $48f15048fc5d75eb$var$computeScore(path, index) {
    let segments = path.split("/");
    let initialScore = segments.length;
    if (segments.some($48f15048fc5d75eb$var$isSplat)) initialScore += $48f15048fc5d75eb$var$splatPenalty;
    if (index) initialScore += $48f15048fc5d75eb$var$indexRouteValue;
    return segments.filter((s)=>!$48f15048fc5d75eb$var$isSplat(s)).reduce((score, segment)=>score + ($48f15048fc5d75eb$var$paramRe.test(segment) ? $48f15048fc5d75eb$var$dynamicSegmentValue : segment === "" ? $48f15048fc5d75eb$var$emptySegmentValue : $48f15048fc5d75eb$var$staticSegmentValue), initialScore);
}
function $48f15048fc5d75eb$var$compareIndexes(a, b) {
    let siblings = a.length === b.length && a.slice(0, -1).every((n, i)=>n === b[i]);
    return siblings ? // If two routes are siblings, we should try to match the earlier sibling
    // first. This allows people to have fine-grained control over the matching
    // behavior by simply putting routes with identical paths in the order they
    // want them tried.
    a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,
    // so they sort equally.
    0;
}
function $48f15048fc5d75eb$var$matchRouteBranch(branch, pathname, allowPartial) {
    if (allowPartial === void 0) allowPartial = false;
    let { routesMeta: routesMeta } = branch;
    let matchedParams = {};
    let matchedPathname = "/";
    let matches = [];
    for(let i = 0; i < routesMeta.length; ++i){
        let meta = routesMeta[i];
        let end = i === routesMeta.length - 1;
        let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
        let match = $48f15048fc5d75eb$export$81336c211d5ff295({
            path: meta.relativePath,
            caseSensitive: meta.caseSensitive,
            end: end
        }, remainingPathname);
        let route = meta.route;
        if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) match = $48f15048fc5d75eb$export$81336c211d5ff295({
            path: meta.relativePath,
            caseSensitive: meta.caseSensitive,
            end: false
        }, remainingPathname);
        if (!match) return null;
        Object.assign(matchedParams, match.params);
        matches.push({
            // TODO: Can this as be avoided?
            params: matchedParams,
            pathname: $48f15048fc5d75eb$export$86d9a7913e44197e([
                matchedPathname,
                match.pathname
            ]),
            pathnameBase: $48f15048fc5d75eb$export$a5c6d149b50c1d86($48f15048fc5d75eb$export$86d9a7913e44197e([
                matchedPathname,
                match.pathnameBase
            ])),
            route: route
        });
        if (match.pathnameBase !== "/") matchedPathname = $48f15048fc5d75eb$export$86d9a7913e44197e([
            matchedPathname,
            match.pathnameBase
        ]);
    }
    return matches;
}
/**
 * Returns a path with params interpolated.
 *
 * @see https://reactrouter.com/v6/utils/generate-path
 */ function $48f15048fc5d75eb$export$82476f982757e71e(originalPath, params) {
    if (params === void 0) params = {};
    let path = originalPath;
    if (path.endsWith("*") && path !== "*" && !path.endsWith("/*")) {
        $48f15048fc5d75eb$export$c0e02632e14916fd(false, "Route path \"" + path + "\" will be treated as if it were " + ("\"" + path.replace(/\*$/, "/*") + "\" because the `*` character must ") + "always follow a `/` in the pattern. To get rid of this warning, " + ("please change the route path to \"" + path.replace(/\*$/, "/*") + "\"."));
        path = path.replace(/\*$/, "/*");
    }
    // ensure `/` is added at the beginning if the path is absolute
    const prefix = path.startsWith("/") ? "/" : "";
    const stringify = (p)=>p == null ? "" : typeof p === "string" ? p : String(p);
    const segments = path.split(/\/+/).map((segment, index, array)=>{
        const isLastSegment = index === array.length - 1;
        // only apply the splat if it's the last segment
        if (isLastSegment && segment === "*") {
            const star = "*";
            // Apply the splat
            return stringify(params[star]);
        }
        const keyMatch = segment.match(/^:([\w-]+)(\??)$/);
        if (keyMatch) {
            const [, key, optional] = keyMatch;
            let param = params[key];
            $48f15048fc5d75eb$export$3e9cee6b33872309(optional === "?" || param != null, "Missing \":" + key + "\" param");
            return stringify(param);
        }
        // Remove any optional markers from optional static segments
        return segment.replace(/\?$/g, "");
    })// Remove empty segments
    .filter((segment)=>!!segment);
    return prefix + segments.join("/");
}
/**
 * Performs pattern matching on a URL pathname and returns information about
 * the match.
 *
 * @see https://reactrouter.com/v6/utils/match-path
 */ function $48f15048fc5d75eb$export$81336c211d5ff295(pattern, pathname) {
    if (typeof pattern === "string") pattern = {
        path: pattern,
        caseSensitive: false,
        end: true
    };
    let [matcher, compiledParams] = $48f15048fc5d75eb$var$compilePath(pattern.path, pattern.caseSensitive, pattern.end);
    let match = pathname.match(matcher);
    if (!match) return null;
    let matchedPathname = match[0];
    let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
    let captureGroups = match.slice(1);
    let params = compiledParams.reduce((memo, _ref, index)=>{
        let { paramName: paramName, isOptional: isOptional } = _ref;
        // We need to compute the pathnameBase here using the raw splat value
        // instead of using params["*"] later because it will be decoded then
        if (paramName === "*") {
            let splatValue = captureGroups[index] || "";
            pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
        }
        const value = captureGroups[index];
        if (isOptional && !value) memo[paramName] = undefined;
        else memo[paramName] = (value || "").replace(/%2F/g, "/");
        return memo;
    }, {});
    return {
        params: params,
        pathname: matchedPathname,
        pathnameBase: pathnameBase,
        pattern: pattern
    };
}
function $48f15048fc5d75eb$var$compilePath(path, caseSensitive, end) {
    if (caseSensitive === void 0) caseSensitive = false;
    if (end === void 0) end = true;
    $48f15048fc5d75eb$export$c0e02632e14916fd(path === "*" || !path.endsWith("*") || path.endsWith("/*"), "Route path \"" + path + "\" will be treated as if it were " + ("\"" + path.replace(/\*$/, "/*") + "\" because the `*` character must ") + "always follow a `/` in the pattern. To get rid of this warning, " + ("please change the route path to \"" + path.replace(/\*$/, "/*") + "\"."));
    let params = [];
    let regexpSource = "^" + path.replace(/\/*\*?$/, "") // Ignore trailing / and /*, we'll handle it below
    .replace(/^\/*/, "/") // Make sure it has a leading /
    .replace(/[\\.*+^${}|()[\]]/g, "\\$&") // Escape special regex chars
    .replace(/\/:([\w-]+)(\?)?/g, (_, paramName, isOptional)=>{
        params.push({
            paramName: paramName,
            isOptional: isOptional != null
        });
        return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
    });
    if (path.endsWith("*")) {
        params.push({
            paramName: "*"
        });
        regexpSource += path === "*" || path === "/*" ? "(.*)$" // Already matched the initial /, just match the rest
         : "(?:\\/(.+)|\\/*)$"; // Don't include the / in params["*"]
    } else if (end) // When matching to the end, ignore trailing slashes
    regexpSource += "\\/*$";
    else if (path !== "" && path !== "/") // If our path is non-empty and contains anything beyond an initial slash,
    // then we have _some_ form of path in our regex, so we should expect to
    // match only if we find the end of this path segment.  Look for an optional
    // non-captured trailing slash (to match a portion of the URL) or the end
    // of the path (if we've matched to the end).  We used to do this with a
    // word boundary but that gives false positives on routes like
    // /user-preferences since `-` counts as a word boundary.
    regexpSource += "(?:(?=\\/|$))";
    let matcher = new RegExp(regexpSource, caseSensitive ? undefined : "i");
    return [
        matcher,
        params
    ];
}
function $48f15048fc5d75eb$export$30d21fd6d7295f52(value) {
    try {
        return value.split("/").map((v)=>decodeURIComponent(v).replace(/\//g, "%2F")).join("/");
    } catch (error) {
        $48f15048fc5d75eb$export$c0e02632e14916fd(false, "The URL path \"" + value + "\" could not be decoded because it is is a " + "malformed URL segment. This is probably due to a bad percent " + ("encoding (" + error + ")."));
        return value;
    }
}
/**
 * @private
 */ function $48f15048fc5d75eb$export$b69e3301ce081aa3(pathname, basename) {
    if (basename === "/") return pathname;
    if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) return null;
    // We want to leave trailing slash behavior in the user's control, so if they
    // specify a basename with a trailing slash, we should support it
    let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
    let nextChar = pathname.charAt(startIndex);
    if (nextChar && nextChar !== "/") // pathname does not start with basename/
    return null;
    return pathname.slice(startIndex) || "/";
}
/**
 * Returns a resolved path object relative to the given pathname.
 *
 * @see https://reactrouter.com/v6/utils/resolve-path
 */ function $48f15048fc5d75eb$export$b09f2ff0bbcb43c7(to, fromPathname) {
    if (fromPathname === void 0) fromPathname = "/";
    let { pathname: toPathname, search: search = "", hash: hash = "" } = typeof to === "string" ? $48f15048fc5d75eb$export$8ccf933b0513f8d0(to) : to;
    let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : $48f15048fc5d75eb$var$resolvePathname(toPathname, fromPathname) : fromPathname;
    return {
        pathname: pathname,
        search: $48f15048fc5d75eb$var$normalizeSearch(search),
        hash: $48f15048fc5d75eb$var$normalizeHash(hash)
    };
}
function $48f15048fc5d75eb$var$resolvePathname(relativePath, fromPathname) {
    let segments = fromPathname.replace(/\/+$/, "").split("/");
    let relativeSegments = relativePath.split("/");
    relativeSegments.forEach((segment)=>{
        if (segment === "..") // Keep the root "" segment so the pathname starts at /
        {
            if (segments.length > 1) segments.pop();
        } else if (segment !== ".") segments.push(segment);
    });
    return segments.length > 1 ? segments.join("/") : "/";
}
function $48f15048fc5d75eb$var$getInvalidPathError(char, field, dest, path) {
    return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + "a string in <Link to=\"...\"> and the router will parse it for you.";
}
/**
 * @private
 *
 * When processing relative navigation we want to ignore ancestor routes that
 * do not contribute to the path, such that index/pathless layout routes don't
 * interfere.
 *
 * For example, when moving a route element into an index route and/or a
 * pathless layout route, relative link behavior contained within should stay
 * the same.  Both of the following examples should link back to the root:
 *
 *   <Route path="/">
 *     <Route path="accounts" element={<Link to=".."}>
 *   </Route>
 *
 *   <Route path="/">
 *     <Route path="accounts">
 *       <Route element={<AccountsLayout />}>       // <-- Does not contribute
 *         <Route index element={<Link to=".."} />  // <-- Does not contribute
 *       </Route
 *     </Route>
 *   </Route>
 */ function $48f15048fc5d75eb$var$getPathContributingMatches(matches) {
    return matches.filter((match, index)=>index === 0 || match.route.path && match.route.path.length > 0);
}
// Return the array of pathnames for the current route matches - used to
// generate the routePathnames input for resolveTo()
function $48f15048fc5d75eb$export$a5784978eca585fa(matches, v7_relativeSplatPath) {
    let pathMatches = $48f15048fc5d75eb$var$getPathContributingMatches(matches);
    // When v7_relativeSplatPath is enabled, use the full pathname for the leaf
    // match so we include splat values for "." links.  See:
    // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329
    if (v7_relativeSplatPath) return pathMatches.map((match, idx)=>idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase);
    return pathMatches.map((match)=>match.pathnameBase);
}
/**
 * @private
 */ function $48f15048fc5d75eb$export$cae722b0cc860f13(toArg, routePathnames, locationPathname, isPathRelative) {
    if (isPathRelative === void 0) isPathRelative = false;
    let to;
    if (typeof toArg === "string") to = $48f15048fc5d75eb$export$8ccf933b0513f8d0(toArg);
    else {
        to = $48f15048fc5d75eb$var$_extends({}, toArg);
        $48f15048fc5d75eb$export$3e9cee6b33872309(!to.pathname || !to.pathname.includes("?"), $48f15048fc5d75eb$var$getInvalidPathError("?", "pathname", "search", to));
        $48f15048fc5d75eb$export$3e9cee6b33872309(!to.pathname || !to.pathname.includes("#"), $48f15048fc5d75eb$var$getInvalidPathError("#", "pathname", "hash", to));
        $48f15048fc5d75eb$export$3e9cee6b33872309(!to.search || !to.search.includes("#"), $48f15048fc5d75eb$var$getInvalidPathError("#", "search", "hash", to));
    }
    let isEmptyPath = toArg === "" || to.pathname === "";
    let toPathname = isEmptyPath ? "/" : to.pathname;
    let from;
    // Routing is relative to the current pathname if explicitly requested.
    //
    // If a pathname is explicitly provided in `to`, it should be relative to the
    // route context. This is explained in `Note on `<Link to>` values` in our
    // migration guide from v5 as a means of disambiguation between `to` values
    // that begin with `/` and those that do not. However, this is problematic for
    // `to` values that do not provide a pathname. `to` can simply be a search or
    // hash string, in which case we should assume that the navigation is relative
    // to the current location's pathname and *not* the route pathname.
    if (toPathname == null) from = locationPathname;
    else {
        let routePathnameIndex = routePathnames.length - 1;
        // With relative="route" (the default), each leading .. segment means
        // "go up one route" instead of "go up one URL segment".  This is a key
        // difference from how <a href> works and a major reason we call this a
        // "to" value instead of a "href".
        if (!isPathRelative && toPathname.startsWith("..")) {
            let toSegments = toPathname.split("/");
            while(toSegments[0] === ".."){
                toSegments.shift();
                routePathnameIndex -= 1;
            }
            to.pathname = toSegments.join("/");
        }
        from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
    }
    let path = $48f15048fc5d75eb$export$b09f2ff0bbcb43c7(to, from);
    // Ensure the pathname has a trailing slash if the original "to" had one
    let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
    // Or if this was a link to the current path which has a trailing slash
    let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
    if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) path.pathname += "/";
    return path;
}
/**
 * @private
 */ function $48f15048fc5d75eb$export$f5655dfea9d981c7(to) {
    // Empty strings should be treated the same as / paths
    return to === "" || to.pathname === "" ? "/" : typeof to === "string" ? $48f15048fc5d75eb$export$8ccf933b0513f8d0(to).pathname : to.pathname;
}
/**
 * @private
 */ const $48f15048fc5d75eb$export$86d9a7913e44197e = (paths)=>paths.join("/").replace(/\/\/+/g, "/");
/**
 * @private
 */ const $48f15048fc5d75eb$export$a5c6d149b50c1d86 = (pathname)=>pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
/**
 * @private
 */ const $48f15048fc5d75eb$var$normalizeSearch = (search)=>!search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
/**
 * @private
 */ const $48f15048fc5d75eb$var$normalizeHash = (hash)=>!hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
/**
 * This is a shortcut for creating `application/json` responses. Converts `data`
 * to JSON and sets the `Content-Type` header.
 *
 * @deprecated The `json` method is deprecated in favor of returning raw objects.
 * This method will be removed in v7.
 */ const $48f15048fc5d75eb$export$7b419323e6ed4f31 = function json(data, init) {
    if (init === void 0) init = {};
    let responseInit = typeof init === "number" ? {
        status: init
    } : init;
    let headers = new Headers(responseInit.headers);
    if (!headers.has("Content-Type")) headers.set("Content-Type", "application/json; charset=utf-8");
    return new Response(JSON.stringify(data), $48f15048fc5d75eb$var$_extends({}, responseInit, {
        headers: headers
    }));
};
class $48f15048fc5d75eb$var$DataWithResponseInit {
    constructor(data, init){
        this.type = "DataWithResponseInit";
        this.data = data;
        this.init = init || null;
    }
}
/**
 * Create "responses" that contain `status`/`headers` without forcing
 * serialization into an actual `Response` - used by Remix single fetch
 */ function $48f15048fc5d75eb$export$4051a07651545597(data, init) {
    return new $48f15048fc5d75eb$var$DataWithResponseInit(data, typeof init === "number" ? {
        status: init
    } : init);
}
class $48f15048fc5d75eb$export$42a99a7a4bc0e76a extends Error {
}
class $48f15048fc5d75eb$export$61d759255b4eec65 {
    constructor(data, responseInit){
        this.pendingKeysSet = new Set();
        this.subscribers = new Set();
        this.deferredKeys = [];
        $48f15048fc5d75eb$export$3e9cee6b33872309(data && typeof data === "object" && !Array.isArray(data), "defer() only accepts plain objects");
        // Set up an AbortController + Promise we can race against to exit early
        // cancellation
        let reject;
        this.abortPromise = new Promise((_, r)=>reject = r);
        this.controller = new AbortController();
        let onAbort = ()=>reject(new $48f15048fc5d75eb$export$42a99a7a4bc0e76a("Deferred data aborted"));
        this.unlistenAbortSignal = ()=>this.controller.signal.removeEventListener("abort", onAbort);
        this.controller.signal.addEventListener("abort", onAbort);
        this.data = Object.entries(data).reduce((acc, _ref2)=>{
            let [key, value] = _ref2;
            return Object.assign(acc, {
                [key]: this.trackPromise(key, value)
            });
        }, {});
        if (this.done) // All incoming values were resolved
        this.unlistenAbortSignal();
        this.init = responseInit;
    }
    trackPromise(key, value) {
        if (!(value instanceof Promise)) return value;
        this.deferredKeys.push(key);
        this.pendingKeysSet.add(key);
        // We store a little wrapper promise that will be extended with
        // _data/_error props upon resolve/reject
        let promise = Promise.race([
            value,
            this.abortPromise
        ]).then((data)=>this.onSettle(promise, key, undefined, data), (error)=>this.onSettle(promise, key, error));
        // Register rejection listeners to avoid uncaught promise rejections on
        // errors or aborted deferred values
        promise.catch(()=>{});
        Object.defineProperty(promise, "_tracked", {
            get: ()=>true
        });
        return promise;
    }
    onSettle(promise, key, error, data) {
        if (this.controller.signal.aborted && error instanceof $48f15048fc5d75eb$export$42a99a7a4bc0e76a) {
            this.unlistenAbortSignal();
            Object.defineProperty(promise, "_error", {
                get: ()=>error
            });
            return Promise.reject(error);
        }
        this.pendingKeysSet.delete(key);
        if (this.done) // Nothing left to abort!
        this.unlistenAbortSignal();
        // If the promise was resolved/rejected with undefined, we'll throw an error as you
        // should always resolve with a value or null
        if (error === undefined && data === undefined) {
            let undefinedError = new Error("Deferred data for key \"" + key + "\" resolved/rejected with `undefined`, " + "you must resolve/reject with a value or `null`.");
            Object.defineProperty(promise, "_error", {
                get: ()=>undefinedError
            });
            this.emit(false, key);
            return Promise.reject(undefinedError);
        }
        if (data === undefined) {
            Object.defineProperty(promise, "_error", {
                get: ()=>error
            });
            this.emit(false, key);
            return Promise.reject(error);
        }
        Object.defineProperty(promise, "_data", {
            get: ()=>data
        });
        this.emit(false, key);
        return data;
    }
    emit(aborted, settledKey) {
        this.subscribers.forEach((subscriber)=>subscriber(aborted, settledKey));
    }
    subscribe(fn) {
        this.subscribers.add(fn);
        return ()=>this.subscribers.delete(fn);
    }
    cancel() {
        this.controller.abort();
        this.pendingKeysSet.forEach((v, k)=>this.pendingKeysSet.delete(k));
        this.emit(true);
    }
    async resolveData(signal) {
        let aborted = false;
        if (!this.done) {
            let onAbort = ()=>this.cancel();
            signal.addEventListener("abort", onAbort);
            aborted = await new Promise((resolve)=>{
                this.subscribe((aborted)=>{
                    signal.removeEventListener("abort", onAbort);
                    if (aborted || this.done) resolve(aborted);
                });
            });
        }
        return aborted;
    }
    get done() {
        return this.pendingKeysSet.size === 0;
    }
    get unwrappedData() {
        $48f15048fc5d75eb$export$3e9cee6b33872309(this.data !== null && this.done, "Can only unwrap data on initialized and settled deferreds");
        return Object.entries(this.data).reduce((acc, _ref3)=>{
            let [key, value] = _ref3;
            return Object.assign(acc, {
                [key]: $48f15048fc5d75eb$var$unwrapTrackedPromise(value)
            });
        }, {});
    }
    get pendingKeys() {
        return Array.from(this.pendingKeysSet);
    }
}
function $48f15048fc5d75eb$var$isTrackedPromise(value) {
    return value instanceof Promise && value._tracked === true;
}
function $48f15048fc5d75eb$var$unwrapTrackedPromise(value) {
    if (!$48f15048fc5d75eb$var$isTrackedPromise(value)) return value;
    if (value._error) throw value._error;
    return value._data;
}
/**
 * @deprecated The `defer` method is deprecated in favor of returning raw
 * objects. This method will be removed in v7.
 */ const $48f15048fc5d75eb$export$260e5c0943f31606 = function defer(data, init) {
    if (init === void 0) init = {};
    let responseInit = typeof init === "number" ? {
        status: init
    } : init;
    return new $48f15048fc5d75eb$export$61d759255b4eec65(data, responseInit);
};
/**
 * A redirect response. Sets the status code and the `Location` header.
 * Defaults to "302 Found".
 */ const $48f15048fc5d75eb$export$89e12c5b50f7529d = function redirect(url, init) {
    if (init === void 0) init = 302;
    let responseInit = init;
    if (typeof responseInit === "number") responseInit = {
        status: responseInit
    };
    else if (typeof responseInit.status === "undefined") responseInit.status = 302;
    let headers = new Headers(responseInit.headers);
    headers.set("Location", url);
    return new Response(null, $48f15048fc5d75eb$var$_extends({}, responseInit, {
        headers: headers
    }));
};
/**
 * A redirect response that will force a document reload to the new location.
 * Sets the status code and the `Location` header.
 * Defaults to "302 Found".
 */ const $48f15048fc5d75eb$export$a6cd19cd1951a23c = (url, init)=>{
    let response = $48f15048fc5d75eb$export$89e12c5b50f7529d(url, init);
    response.headers.set("X-Remix-Reload-Document", "true");
    return response;
};
/**
 * A redirect response that will perform a `history.replaceState` instead of a
 * `history.pushState` for client-side navigation redirects.
 * Sets the status code and the `Location` header.
 * Defaults to "302 Found".
 */ const $48f15048fc5d75eb$export$77ad94ebf1c2b9ed = (url, init)=>{
    let response = $48f15048fc5d75eb$export$89e12c5b50f7529d(url, init);
    response.headers.set("X-Remix-Replace", "true");
    return response;
};
/**
 * @private
 * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies
 *
 * We don't export the class for public use since it's an implementation
 * detail, but we export the interface above so folks can build their own
 * abstractions around instances via isRouteErrorResponse()
 */ class $48f15048fc5d75eb$export$6c6580e81da25755 {
    constructor(status, statusText, data, internal){
        if (internal === void 0) internal = false;
        this.status = status;
        this.statusText = statusText || "";
        this.internal = internal;
        if (data instanceof Error) {
            this.data = data.toString();
            this.error = data;
        } else this.data = data;
    }
}
/**
 * Check if the given error is an ErrorResponse generated from a 4xx/5xx
 * Response thrown from an action/loader
 */ function $48f15048fc5d75eb$export$972111febbeef05b(error) {
    return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
}
const $48f15048fc5d75eb$var$validMutationMethodsArr = [
    "post",
    "put",
    "patch",
    "delete"
];
const $48f15048fc5d75eb$var$validMutationMethods = new Set($48f15048fc5d75eb$var$validMutationMethodsArr);
const $48f15048fc5d75eb$var$validRequestMethodsArr = [
    "get",
    ...$48f15048fc5d75eb$var$validMutationMethodsArr
];
const $48f15048fc5d75eb$var$validRequestMethods = new Set($48f15048fc5d75eb$var$validRequestMethodsArr);
const $48f15048fc5d75eb$var$redirectStatusCodes = new Set([
    301,
    302,
    303,
    307,
    308
]);
const $48f15048fc5d75eb$var$redirectPreserveMethodStatusCodes = new Set([
    307,
    308
]);
const $48f15048fc5d75eb$export$ed3e14b2f9e105d0 = {
    state: "idle",
    location: undefined,
    formMethod: undefined,
    formAction: undefined,
    formEncType: undefined,
    formData: undefined,
    json: undefined,
    text: undefined
};
const $48f15048fc5d75eb$export$52eace9c284d3585 = {
    state: "idle",
    data: undefined,
    formMethod: undefined,
    formAction: undefined,
    formEncType: undefined,
    formData: undefined,
    json: undefined,
    text: undefined
};
const $48f15048fc5d75eb$export$386d57f03f0b2883 = {
    state: "unblocked",
    proceed: undefined,
    reset: undefined,
    location: undefined
};
const $48f15048fc5d75eb$var$ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
const $48f15048fc5d75eb$var$defaultMapRouteProperties = (route)=>({
        hasErrorBoundary: Boolean(route.hasErrorBoundary)
    });
const $48f15048fc5d75eb$var$TRANSITIONS_STORAGE_KEY = "remix-router-transitions";
//#endregion
////////////////////////////////////////////////////////////////////////////////
//#region createRouter
////////////////////////////////////////////////////////////////////////////////
/**
 * Create a router and listen to history POP navigations
 */ function $48f15048fc5d75eb$export$baddd0131ee8c05b(init) {
    const routerWindow = init.window ? init.window : typeof window !== "undefined" ? window : undefined;
    const isBrowser = typeof routerWindow !== "undefined" && typeof routerWindow.document !== "undefined" && typeof routerWindow.document.createElement !== "undefined";
    const isServer = !isBrowser;
    $48f15048fc5d75eb$export$3e9cee6b33872309(init.routes.length > 0, "You must provide a non-empty routes array to createRouter");
    let mapRouteProperties;
    if (init.mapRouteProperties) mapRouteProperties = init.mapRouteProperties;
    else if (init.detectErrorBoundary) {
        // If they are still using the deprecated version, wrap it with the new API
        let detectErrorBoundary = init.detectErrorBoundary;
        mapRouteProperties = (route)=>({
                hasErrorBoundary: detectErrorBoundary(route)
            });
    } else mapRouteProperties = $48f15048fc5d75eb$var$defaultMapRouteProperties;
    // Routes keyed by ID
    let manifest = {};
    // Routes in tree format for matching
    let dataRoutes = $48f15048fc5d75eb$export$4a6d22b32134ea5d(init.routes, mapRouteProperties, undefined, manifest);
    let inFlightDataRoutes;
    let basename = init.basename || "/";
    let dataStrategyImpl = init.dataStrategy || $48f15048fc5d75eb$var$defaultDataStrategy;
    let patchRoutesOnNavigationImpl = init.patchRoutesOnNavigation;
    // Config driven behavior flags
    let future = $48f15048fc5d75eb$var$_extends({
        v7_fetcherPersist: false,
        v7_normalizeFormMethod: false,
        v7_partialHydration: false,
        v7_prependBasename: false,
        v7_relativeSplatPath: false,
        v7_skipActionErrorRevalidation: false
    }, init.future);
    // Cleanup function for history
    let unlistenHistory = null;
    // Externally-provided functions to call on all state changes
    let subscribers = new Set();
    // Externally-provided object to hold scroll restoration locations during routing
    let savedScrollPositions = null;
    // Externally-provided function to get scroll restoration keys
    let getScrollRestorationKey = null;
    // Externally-provided function to get current scroll position
    let getScrollPosition = null;
    // One-time flag to control the initial hydration scroll restoration.  Because
    // we don't get the saved positions from <ScrollRestoration /> until _after_
    // the initial render, we need to manually trigger a separate updateState to
    // send along the restoreScrollPosition
    // Set to true if we have `hydrationData` since we assume we were SSR'd and that
    // SSR did the initial scroll restoration.
    let initialScrollRestored = init.hydrationData != null;
    let initialMatches = $48f15048fc5d75eb$export$2708184779ceb39d(dataRoutes, init.history.location, basename);
    let initialMatchesIsFOW = false;
    let initialErrors = null;
    if (initialMatches == null && !patchRoutesOnNavigationImpl) {
        // If we do not match a user-provided-route, fall back to the root
        // to allow the error boundary to take over
        let error = $48f15048fc5d75eb$var$getInternalRouterError(404, {
            pathname: init.history.location.pathname
        });
        let { matches: matches, route: route } = $48f15048fc5d75eb$var$getShortCircuitMatches(dataRoutes);
        initialMatches = matches;
        initialErrors = {
            [route.id]: error
        };
    }
    // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and
    // our initial match is a splat route, clear them out so we run through lazy
    // discovery on hydration in case there's a more accurate lazy route match.
    // In SSR apps (with `hydrationData`), we expect that the server will send
    // up the proper matched routes so we don't want to run lazy discovery on
    // initial hydration and want to hydrate into the splat route.
    if (initialMatches && !init.hydrationData) {
        let fogOfWar = checkFogOfWar(initialMatches, dataRoutes, init.history.location.pathname);
        if (fogOfWar.active) initialMatches = null;
    }
    let initialized;
    if (!initialMatches) {
        initialized = false;
        initialMatches = [];
        // If partial hydration and fog of war is enabled, we will be running
        // `patchRoutesOnNavigation` during hydration so include any partial matches as
        // the initial matches so we can properly render `HydrateFallback`'s
        if (future.v7_partialHydration) {
            let fogOfWar = checkFogOfWar(null, dataRoutes, init.history.location.pathname);
            if (fogOfWar.active && fogOfWar.matches) {
                initialMatchesIsFOW = true;
                initialMatches = fogOfWar.matches;
            }
        }
    } else if (initialMatches.some((m)=>m.route.lazy)) // All initialMatches need to be loaded before we're ready.  If we have lazy
    // functions around still then we'll need to run them in initialize()
    initialized = false;
    else if (!initialMatches.some((m)=>m.route.loader)) // If we've got no loaders to run, then we're good to go
    initialized = true;
    else if (future.v7_partialHydration) {
        // If partial hydration is enabled, we're initialized so long as we were
        // provided with hydrationData for every route with a loader, and no loaders
        // were marked for explicit hydration
        let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;
        let errors = init.hydrationData ? init.hydrationData.errors : null;
        // If errors exist, don't consider routes below the boundary
        if (errors) {
            let idx = initialMatches.findIndex((m)=>errors[m.route.id] !== undefined);
            initialized = initialMatches.slice(0, idx + 1).every((m)=>!$48f15048fc5d75eb$var$shouldLoadRouteOnHydration(m.route, loaderData, errors));
        } else initialized = initialMatches.every((m)=>!$48f15048fc5d75eb$var$shouldLoadRouteOnHydration(m.route, loaderData, errors));
    } else // Without partial hydration - we're initialized if we were provided any
    // hydrationData - which is expected to be complete
    initialized = init.hydrationData != null;
    let router;
    let state = {
        historyAction: init.history.action,
        location: init.history.location,
        matches: initialMatches,
        initialized: initialized,
        navigation: $48f15048fc5d75eb$export$ed3e14b2f9e105d0,
        // Don't restore on initial updateState() if we were SSR'd
        restoreScrollPosition: init.hydrationData != null ? false : null,
        preventScrollReset: false,
        revalidation: "idle",
        loaderData: init.hydrationData && init.hydrationData.loaderData || {},
        actionData: init.hydrationData && init.hydrationData.actionData || null,
        errors: init.hydrationData && init.hydrationData.errors || initialErrors,
        fetchers: new Map(),
        blockers: new Map()
    };
    // -- Stateful internal variables to manage navigations --
    // Current navigation in progress (to be committed in completeNavigation)
    let pendingAction = $48f15048fc5d75eb$export$e19cd5f9376f8cee.Pop;
    // Should the current navigation prevent the scroll reset if scroll cannot
    // be restored?
    let pendingPreventScrollReset = false;
    // AbortController for the active navigation
    let pendingNavigationController;
    // Should the current navigation enable document.startViewTransition?
    let pendingViewTransitionEnabled = false;
    // Store applied view transitions so we can apply them on POP
    let appliedViewTransitions = new Map();
    // Cleanup function for persisting applied transitions to sessionStorage
    let removePageHideEventListener = null;
    // We use this to avoid touching history in completeNavigation if a
    // revalidation is entirely uninterrupted
    let isUninterruptedRevalidation = false;
    // Use this internal flag to force revalidation of all loaders:
    //  - submissions (completed or interrupted)
    //  - useRevalidator()
    //  - X-Remix-Revalidate (from redirect)
    let isRevalidationRequired = false;
    // Use this internal array to capture routes that require revalidation due
    // to a cancelled deferred on action submission
    let cancelledDeferredRoutes = [];
    // Use this internal array to capture fetcher loads that were cancelled by an
    // action navigation and require revalidation
    let cancelledFetcherLoads = new Set();
    // AbortControllers for any in-flight fetchers
    let fetchControllers = new Map();
    // Track loads based on the order in which they started
    let incrementingLoadId = 0;
    // Track the outstanding pending navigation data load to be compared against
    // the globally incrementing load when a fetcher load lands after a completed
    // navigation
    let pendingNavigationLoadId = -1;
    // Fetchers that triggered data reloads as a result of their actions
    let fetchReloadIds = new Map();
    // Fetchers that triggered redirect navigations
    let fetchRedirectIds = new Set();
    // Most recent href/match for fetcher.load calls for fetchers
    let fetchLoadMatches = new Map();
    // Ref-count mounted fetchers so we know when it's ok to clean them up
    let activeFetchers = new Map();
    // Fetchers that have requested a delete when using v7_fetcherPersist,
    // they'll be officially removed after they return to idle
    let deletedFetchers = new Set();
    // Store DeferredData instances for active route matches.  When a
    // route loader returns defer() we stick one in here.  Then, when a nested
    // promise resolves we update loaderData.  If a new navigation starts we
    // cancel active deferreds for eliminated routes.
    let activeDeferreds = new Map();
    // Store blocker functions in a separate Map outside of router state since
    // we don't need to update UI state if they change
    let blockerFunctions = new Map();
    // Flag to ignore the next history update, so we can revert the URL change on
    // a POP navigation that was blocked by the user without touching router state
    let unblockBlockerHistoryUpdate = undefined;
    // Initialize the router, all side effects should be kicked off from here.
    // Implemented as a Fluent API for ease of:
    //   let router = createRouter(init).initialize();
    function initialize() {
        // If history informs us of a POP navigation, start the navigation but do not update
        // state.  We'll update our own state once the navigation completes
        unlistenHistory = init.history.listen((_ref)=>{
            let { action: historyAction, location: location, delta: delta } = _ref;
            // Ignore this event if it was just us resetting the URL from a
            // blocked POP navigation
            if (unblockBlockerHistoryUpdate) {
                unblockBlockerHistoryUpdate();
                unblockBlockerHistoryUpdate = undefined;
                return;
            }
            $48f15048fc5d75eb$export$c0e02632e14916fd(blockerFunctions.size === 0 || delta != null, "You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");
            let blockerKey = shouldBlockNavigation({
                currentLocation: state.location,
                nextLocation: location,
                historyAction: historyAction
            });
            if (blockerKey && delta != null) {
                // Restore the URL to match the current UI, but don't update router state
                let nextHistoryUpdatePromise = new Promise((resolve)=>{
                    unblockBlockerHistoryUpdate = resolve;
                });
                init.history.go(delta * -1);
                // Put the blocker into a blocked state
                updateBlocker(blockerKey, {
                    state: "blocked",
                    location: location,
                    proceed () {
                        updateBlocker(blockerKey, {
                            state: "proceeding",
                            proceed: undefined,
                            reset: undefined,
                            location: location
                        });
                        // Re-do the same POP navigation we just blocked, after the url
                        // restoration is also complete.  See:
                        // https://github.com/remix-run/react-router/issues/11613
                        nextHistoryUpdatePromise.then(()=>init.history.go(delta));
                    },
                    reset () {
                        let blockers = new Map(state.blockers);
                        blockers.set(blockerKey, $48f15048fc5d75eb$export$386d57f03f0b2883);
                        updateState({
                            blockers: blockers
                        });
                    }
                });
                return;
            }
            return startNavigation(historyAction, location);
        });
        if (isBrowser) {
            // FIXME: This feels gross.  How can we cleanup the lines between
            // scrollRestoration/appliedTransitions persistance?
            $48f15048fc5d75eb$var$restoreAppliedTransitions(routerWindow, appliedViewTransitions);
            let _saveAppliedTransitions = ()=>$48f15048fc5d75eb$var$persistAppliedTransitions(routerWindow, appliedViewTransitions);
            routerWindow.addEventListener("pagehide", _saveAppliedTransitions);
            removePageHideEventListener = ()=>routerWindow.removeEventListener("pagehide", _saveAppliedTransitions);
        }
        // Kick off initial data load if needed.  Use Pop to avoid modifying history
        // Note we don't do any handling of lazy here.  For SPA's it'll get handled
        // in the normal navigation flow.  For SSR it's expected that lazy modules are
        // resolved prior to router creation since we can't go into a fallbackElement
        // UI for SSR'd apps
        if (!state.initialized) startNavigation($48f15048fc5d75eb$export$e19cd5f9376f8cee.Pop, state.location, {
            initialHydration: true
        });
        return router;
    }
    // Clean up a router and it's side effects
    function dispose() {
        if (unlistenHistory) unlistenHistory();
        if (removePageHideEventListener) removePageHideEventListener();
        subscribers.clear();
        pendingNavigationController && pendingNavigationController.abort();
        state.fetchers.forEach((_, key)=>deleteFetcher(key));
        state.blockers.forEach((_, key)=>deleteBlocker(key));
    }
    // Subscribe to state updates for the router
    function subscribe(fn) {
        subscribers.add(fn);
        return ()=>subscribers.delete(fn);
    }
    // Update our state and notify the calling context of the change
    function updateState(newState, opts) {
        if (opts === void 0) opts = {};
        state = $48f15048fc5d75eb$var$_extends({}, state, newState);
        // Prep fetcher cleanup so we can tell the UI which fetcher data entries
        // can be removed
        let completedFetchers = [];
        let deletedFetchersKeys = [];
        if (future.v7_fetcherPersist) state.fetchers.forEach((fetcher, key)=>{
            if (fetcher.state === "idle") {
                if (deletedFetchers.has(key)) // Unmounted from the UI and can be totally removed
                deletedFetchersKeys.push(key);
                else // Returned to idle but still mounted in the UI, so semi-remains for
                // revalidations and such
                completedFetchers.push(key);
            }
        });
        // Remove any lingering deleted fetchers that have already been removed
        // from state.fetchers
        deletedFetchers.forEach((key)=>{
            if (!state.fetchers.has(key) && !fetchControllers.has(key)) deletedFetchersKeys.push(key);
        });
        // Iterate over a local copy so that if flushSync is used and we end up
        // removing and adding a new subscriber due to the useCallback dependencies,
        // we don't get ourselves into a loop calling the new subscriber immediately
        [
            ...subscribers
        ].forEach((subscriber)=>subscriber(state, {
                deletedFetchers: deletedFetchersKeys,
                viewTransitionOpts: opts.viewTransitionOpts,
                flushSync: opts.flushSync === true
            }));
        // Remove idle fetchers from state since we only care about in-flight fetchers.
        if (future.v7_fetcherPersist) {
            completedFetchers.forEach((key)=>state.fetchers.delete(key));
            deletedFetchersKeys.forEach((key)=>deleteFetcher(key));
        } else // We already called deleteFetcher() on these, can remove them from this
        // Set now that we've handed the keys off to the data layer
        deletedFetchersKeys.forEach((key)=>deletedFetchers.delete(key));
    }
    // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION
    // and setting state.[historyAction/location/matches] to the new route.
    // - Location is a required param
    // - Navigation will always be set to IDLE_NAVIGATION
    // - Can pass any other state in newState
    function completeNavigation(location, newState, _temp) {
        var _location$state, _location$state2;
        let { flushSync: flushSync } = _temp === void 0 ? {} : _temp;
        // Deduce if we're in a loading/actionReload state:
        // - We have committed actionData in the store
        // - The current navigation was a mutation submission
        // - We're past the submitting state and into the loading state
        // - The location being loaded is not the result of a redirect
        let isActionReload = state.actionData != null && state.navigation.formMethod != null && $48f15048fc5d75eb$var$isMutationMethod(state.navigation.formMethod) && state.navigation.state === "loading" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;
        let actionData;
        if (newState.actionData) {
            if (Object.keys(newState.actionData).length > 0) actionData = newState.actionData;
            else // Empty actionData -> clear prior actionData due to an action error
            actionData = null;
        } else if (isActionReload) // Keep the current data if we're wrapping up the action reload
        actionData = state.actionData;
        else // Clear actionData on any other completed navigations
        actionData = null;
        // Always preserve any existing loaderData from re-used routes
        let loaderData = newState.loaderData ? $48f15048fc5d75eb$var$mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;
        // On a successful navigation we can assume we got through all blockers
        // so we can start fresh
        let blockers = state.blockers;
        if (blockers.size > 0) {
            blockers = new Map(blockers);
            blockers.forEach((_, k)=>blockers.set(k, $48f15048fc5d75eb$export$386d57f03f0b2883));
        }
        // Always respect the user flag.  Otherwise don't reset on mutation
        // submission navigations unless they redirect
        let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && $48f15048fc5d75eb$var$isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;
        // Commit any in-flight routes at the end of the HMR revalidation "navigation"
        if (inFlightDataRoutes) {
            dataRoutes = inFlightDataRoutes;
            inFlightDataRoutes = undefined;
        }
        if (isUninterruptedRevalidation) ;
        else if (pendingAction === $48f15048fc5d75eb$export$e19cd5f9376f8cee.Pop) ;
        else if (pendingAction === $48f15048fc5d75eb$export$e19cd5f9376f8cee.Push) init.history.push(location, location.state);
        else if (pendingAction === $48f15048fc5d75eb$export$e19cd5f9376f8cee.Replace) init.history.replace(location, location.state);
        let viewTransitionOpts;
        // On POP, enable transitions if they were enabled on the original navigation
        if (pendingAction === $48f15048fc5d75eb$export$e19cd5f9376f8cee.Pop) {
            // Forward takes precedence so they behave like the original navigation
            let priorPaths = appliedViewTransitions.get(state.location.pathname);
            if (priorPaths && priorPaths.has(location.pathname)) viewTransitionOpts = {
                currentLocation: state.location,
                nextLocation: location
            };
            else if (appliedViewTransitions.has(location.pathname)) // If we don't have a previous forward nav, assume we're popping back to
            // the new location and enable if that location previously enabled
            viewTransitionOpts = {
                currentLocation: location,
                nextLocation: state.location
            };
        } else if (pendingViewTransitionEnabled) {
            // Store the applied transition on PUSH/REPLACE
            let toPaths = appliedViewTransitions.get(state.location.pathname);
            if (toPaths) toPaths.add(location.pathname);
            else {
                toPaths = new Set([
                    location.pathname
                ]);
                appliedViewTransitions.set(state.location.pathname, toPaths);
            }
            viewTransitionOpts = {
                currentLocation: state.location,
                nextLocation: location
            };
        }
        updateState($48f15048fc5d75eb$var$_extends({}, newState, {
            actionData: actionData,
            loaderData: loaderData,
            historyAction: pendingAction,
            location: location,
            initialized: true,
            navigation: $48f15048fc5d75eb$export$ed3e14b2f9e105d0,
            revalidation: "idle",
            restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),
            preventScrollReset: preventScrollReset,
            blockers: blockers
        }), {
            viewTransitionOpts: viewTransitionOpts,
            flushSync: flushSync === true
        });
        // Reset stateful navigation vars
        pendingAction = $48f15048fc5d75eb$export$e19cd5f9376f8cee.Pop;
        pendingPreventScrollReset = false;
        pendingViewTransitionEnabled = false;
        isUninterruptedRevalidation = false;
        isRevalidationRequired = false;
        cancelledDeferredRoutes = [];
    }
    // Trigger a navigation event, which can either be a numerical POP or a PUSH
    // replace with an optional submission
    async function navigate(to, opts) {
        if (typeof to === "number") {
            init.history.go(to);
            return;
        }
        let normalizedPath = $48f15048fc5d75eb$var$normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);
        let { path: path, submission: submission, error: error } = $48f15048fc5d75eb$var$normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);
        let currentLocation = state.location;
        let nextLocation = $48f15048fc5d75eb$var$createLocation(state.location, path, opts && opts.state);
        // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded
        // URL from window.location, so we need to encode it here so the behavior
        // remains the same as POP and non-data-router usages.  new URL() does all
        // the same encoding we'd get from a history.pushState/window.location read
        // without having to touch history
        nextLocation = $48f15048fc5d75eb$var$_extends({}, nextLocation, init.history.encodeLocation(nextLocation));
        let userReplace = opts && opts.replace != null ? opts.replace : undefined;
        let historyAction = $48f15048fc5d75eb$export$e19cd5f9376f8cee.Push;
        if (userReplace === true) historyAction = $48f15048fc5d75eb$export$e19cd5f9376f8cee.Replace;
        else if (userReplace === false) ;
        else if (submission != null && $48f15048fc5d75eb$var$isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) // By default on submissions to the current location we REPLACE so that
        // users don't have to double-click the back button to get to the prior
        // location.  If the user redirects to a different location from the
        // action/loader this will be ignored and the redirect will be a PUSH
        historyAction = $48f15048fc5d75eb$export$e19cd5f9376f8cee.Replace;
        let preventScrollReset = opts && "preventScrollReset" in opts ? opts.preventScrollReset === true : undefined;
        let flushSync = (opts && opts.flushSync) === true;
        let blockerKey = shouldBlockNavigation({
            currentLocation: currentLocation,
            nextLocation: nextLocation,
            historyAction: historyAction
        });
        if (blockerKey) {
            // Put the blocker into a blocked state
            updateBlocker(blockerKey, {
                state: "blocked",
                location: nextLocation,
                proceed () {
                    updateBlocker(blockerKey, {
                        state: "proceeding",
                        proceed: undefined,
                        reset: undefined,
                        location: nextLocation
                    });
                    // Send the same navigation through
                    navigate(to, opts);
                },
                reset () {
                    let blockers = new Map(state.blockers);
                    blockers.set(blockerKey, $48f15048fc5d75eb$export$386d57f03f0b2883);
                    updateState({
                        blockers: blockers
                    });
                }
            });
            return;
        }
        return await startNavigation(historyAction, nextLocation, {
            submission: submission,
            // Send through the formData serialization error if we have one so we can
            // render at the right error boundary after we match routes
            pendingError: error,
            preventScrollReset: preventScrollReset,
            replace: opts && opts.replace,
            enableViewTransition: opts && opts.viewTransition,
            flushSync: flushSync
        });
    }
    // Revalidate all current loaders.  If a navigation is in progress or if this
    // is interrupted by a navigation, allow this to "succeed" by calling all
    // loaders during the next loader round
    function revalidate() {
        interruptActiveLoads();
        updateState({
            revalidation: "loading"
        });
        // If we're currently submitting an action, we don't need to start a new
        // navigation, we'll just let the follow up loader execution call all loaders
        if (state.navigation.state === "submitting") return;
        // If we're currently in an idle state, start a new navigation for the current
        // action/location and mark it as uninterrupted, which will skip the history
        // update in completeNavigation
        if (state.navigation.state === "idle") {
            startNavigation(state.historyAction, state.location, {
                startUninterruptedRevalidation: true
            });
            return;
        }
        // Otherwise, if we're currently in a loading state, just start a new
        // navigation to the navigation.location but do not trigger an uninterrupted
        // revalidation so that history correctly updates once the navigation completes
        startNavigation(pendingAction || state.historyAction, state.navigation.location, {
            overrideNavigation: state.navigation,
            // Proxy through any rending view transition
            enableViewTransition: pendingViewTransitionEnabled === true
        });
    }
    // Start a navigation to the given action/location.  Can optionally provide a
    // overrideNavigation which will override the normalLoad in the case of a redirect
    // navigation
    async function startNavigation(historyAction, location, opts) {
        // Abort any in-progress navigations and start a new one. Unset any ongoing
        // uninterrupted revalidations unless told otherwise, since we want this
        // new navigation to update history normally
        pendingNavigationController && pendingNavigationController.abort();
        pendingNavigationController = null;
        pendingAction = historyAction;
        isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;
        // Save the current scroll position every time we start a new navigation,
        // and track whether we should reset scroll on completion
        saveScrollPosition(state.location, state.matches);
        pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
        pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let loadingNavigation = opts && opts.overrideNavigation;
        let matches = opts != null && opts.initialHydration && state.matches && state.matches.length > 0 && !initialMatchesIsFOW ? // `matchRoutes()` has already been called if we're in here via `router.initialize()`
        state.matches : $48f15048fc5d75eb$export$2708184779ceb39d(routesToUse, location, basename);
        let flushSync = (opts && opts.flushSync) === true;
        // Short circuit if it's only a hash change and not a revalidation or
        // mutation submission.
        //
        // Ignore on initial page loads because since the initial hydration will always
        // be "same hash".  For example, on /page#hash and submit a <Form method="post">
        // which will default to a navigation to /page
        if (matches && state.initialized && !isRevalidationRequired && $48f15048fc5d75eb$var$isHashChangeOnly(state.location, location) && !(opts && opts.submission && $48f15048fc5d75eb$var$isMutationMethod(opts.submission.formMethod))) {
            completeNavigation(location, {
                matches: matches
            }, {
                flushSync: flushSync
            });
            return;
        }
        let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);
        if (fogOfWar.active && fogOfWar.matches) matches = fogOfWar.matches;
        // Short circuit with a 404 on the root error boundary if we match nothing
        if (!matches) {
            let { error: error, notFoundMatches: notFoundMatches, route: route } = handleNavigational404(location.pathname);
            completeNavigation(location, {
                matches: notFoundMatches,
                loaderData: {},
                errors: {
                    [route.id]: error
                }
            }, {
                flushSync: flushSync
            });
            return;
        }
        // Create a controller/Request for this navigation
        pendingNavigationController = new AbortController();
        let request = $48f15048fc5d75eb$var$createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);
        let pendingActionResult;
        if (opts && opts.pendingError) // If we have a pendingError, it means the user attempted a GET submission
        // with binary FormData so assign here and skip to handleLoaders.  That
        // way we handle calling loaders above the boundary etc.  It's not really
        // different from an actionError in that sense.
        pendingActionResult = [
            $48f15048fc5d75eb$var$findNearestBoundary(matches).route.id,
            {
                type: $48f15048fc5d75eb$var$ResultType.error,
                error: opts.pendingError
            }
        ];
        else if (opts && opts.submission && $48f15048fc5d75eb$var$isMutationMethod(opts.submission.formMethod)) {
            // Call action if we received an action submission
            let actionResult = await handleAction(request, location, opts.submission, matches, fogOfWar.active, {
                replace: opts.replace,
                flushSync: flushSync
            });
            if (actionResult.shortCircuited) return;
            // If we received a 404 from handleAction, it's because we couldn't lazily
            // discover the destination route so we don't want to call loaders
            if (actionResult.pendingActionResult) {
                let [routeId, result] = actionResult.pendingActionResult;
                if ($48f15048fc5d75eb$var$isErrorResult(result) && $48f15048fc5d75eb$export$972111febbeef05b(result.error) && result.error.status === 404) {
                    pendingNavigationController = null;
                    completeNavigation(location, {
                        matches: actionResult.matches,
                        loaderData: {},
                        errors: {
                            [routeId]: result.error
                        }
                    });
                    return;
                }
            }
            matches = actionResult.matches || matches;
            pendingActionResult = actionResult.pendingActionResult;
            loadingNavigation = $48f15048fc5d75eb$var$getLoadingNavigation(location, opts.submission);
            flushSync = false;
            // No need to do fog of war matching again on loader execution
            fogOfWar.active = false;
            // Create a GET request for the loaders
            request = $48f15048fc5d75eb$var$createClientSideRequest(init.history, request.url, request.signal);
        }
        // Call loaders
        let { shortCircuited: shortCircuited, matches: updatedMatches, loaderData: loaderData, errors: errors } = await handleLoaders(request, location, matches, fogOfWar.active, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);
        if (shortCircuited) return;
        // Clean up now that the action/loaders have completed.  Don't clean up if
        // we short circuited because pendingNavigationController will have already
        // been assigned to a new controller for the next navigation
        pendingNavigationController = null;
        completeNavigation(location, $48f15048fc5d75eb$var$_extends({
            matches: updatedMatches || matches
        }, $48f15048fc5d75eb$var$getActionDataForCommit(pendingActionResult), {
            loaderData: loaderData,
            errors: errors
        }));
    }
    // Call the action matched by the leaf route for this navigation and handle
    // redirects/errors
    async function handleAction(request, location, submission, matches, isFogOfWar, opts) {
        if (opts === void 0) opts = {};
        interruptActiveLoads();
        // Put us in a submitting state
        let navigation = $48f15048fc5d75eb$var$getSubmittingNavigation(location, submission);
        updateState({
            navigation: navigation
        }, {
            flushSync: opts.flushSync === true
        });
        if (isFogOfWar) {
            let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);
            if (discoverResult.type === "aborted") return {
                shortCircuited: true
            };
            else if (discoverResult.type === "error") {
                let boundaryId = $48f15048fc5d75eb$var$findNearestBoundary(discoverResult.partialMatches).route.id;
                return {
                    matches: discoverResult.partialMatches,
                    pendingActionResult: [
                        boundaryId,
                        {
                            type: $48f15048fc5d75eb$var$ResultType.error,
                            error: discoverResult.error
                        }
                    ]
                };
            } else if (!discoverResult.matches) {
                let { notFoundMatches: notFoundMatches, error: error, route: route } = handleNavigational404(location.pathname);
                return {
                    matches: notFoundMatches,
                    pendingActionResult: [
                        route.id,
                        {
                            type: $48f15048fc5d75eb$var$ResultType.error,
                            error: error
                        }
                    ]
                };
            } else matches = discoverResult.matches;
        }
        // Call our action and get the result
        let result;
        let actionMatch = $48f15048fc5d75eb$var$getTargetMatch(matches, location);
        if (!actionMatch.route.action && !actionMatch.route.lazy) result = {
            type: $48f15048fc5d75eb$var$ResultType.error,
            error: $48f15048fc5d75eb$var$getInternalRouterError(405, {
                method: request.method,
                pathname: location.pathname,
                routeId: actionMatch.route.id
            })
        };
        else {
            let results = await callDataStrategy("action", state, request, [
                actionMatch
            ], matches, null);
            result = results[actionMatch.route.id];
            if (request.signal.aborted) return {
                shortCircuited: true
            };
        }
        if ($48f15048fc5d75eb$var$isRedirectResult(result)) {
            let replace;
            if (opts && opts.replace != null) replace = opts.replace;
            else {
                // If the user didn't explicity indicate replace behavior, replace if
                // we redirected to the exact same location we're currently at to avoid
                // double back-buttons
                let location = $48f15048fc5d75eb$var$normalizeRedirectLocation(result.response.headers.get("Location"), new URL(request.url), basename);
                replace = location === state.location.pathname + state.location.search;
            }
            await startRedirectNavigation(request, result, true, {
                submission: submission,
                replace: replace
            });
            return {
                shortCircuited: true
            };
        }
        if ($48f15048fc5d75eb$var$isDeferredResult(result)) throw $48f15048fc5d75eb$var$getInternalRouterError(400, {
            type: "defer-action"
        });
        if ($48f15048fc5d75eb$var$isErrorResult(result)) {
            // Store off the pending error - we use it to determine which loaders
            // to call and will commit it when we complete the navigation
            let boundaryMatch = $48f15048fc5d75eb$var$findNearestBoundary(matches, actionMatch.route.id);
            // By default, all submissions to the current location are REPLACE
            // navigations, but if the action threw an error that'll be rendered in
            // an errorElement, we fall back to PUSH so that the user can use the
            // back button to get back to the pre-submission form location to try
            // again
            if ((opts && opts.replace) !== true) pendingAction = $48f15048fc5d75eb$export$e19cd5f9376f8cee.Push;
            return {
                matches: matches,
                pendingActionResult: [
                    boundaryMatch.route.id,
                    result
                ]
            };
        }
        return {
            matches: matches,
            pendingActionResult: [
                actionMatch.route.id,
                result
            ]
        };
    }
    // Call all applicable loaders for the given matches, handling redirects,
    // errors, etc.
    async function handleLoaders(request, location, matches, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionResult) {
        // Figure out the right navigation we want to use for data loading
        let loadingNavigation = overrideNavigation || $48f15048fc5d75eb$var$getLoadingNavigation(location, submission);
        // If this was a redirect from an action we don't have a "submission" but
        // we have it on the loading navigation so use that if available
        let activeSubmission = submission || fetcherSubmission || $48f15048fc5d75eb$var$getSubmissionFromNavigation(loadingNavigation);
        // If this is an uninterrupted revalidation, we remain in our current idle
        // state.  If not, we need to switch to our loading state and load data,
        // preserving any new action data or existing action data (in the case of
        // a revalidation interrupting an actionReload)
        // If we have partialHydration enabled, then don't update the state for the
        // initial data load since it's not a "navigation"
        let shouldUpdateNavigationState = !isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration);
        // When fog of war is enabled, we enter our `loading` state earlier so we
        // can discover new routes during the `loading` state.  We skip this if
        // we've already run actions since we would have done our matching already.
        // If the children() function threw then, we want to proceed with the
        // partial matches it discovered.
        if (isFogOfWar) {
            if (shouldUpdateNavigationState) {
                let actionData = getUpdatedActionData(pendingActionResult);
                updateState($48f15048fc5d75eb$var$_extends({
                    navigation: loadingNavigation
                }, actionData !== undefined ? {
                    actionData: actionData
                } : {}), {
                    flushSync: flushSync
                });
            }
            let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);
            if (discoverResult.type === "aborted") return {
                shortCircuited: true
            };
            else if (discoverResult.type === "error") {
                let boundaryId = $48f15048fc5d75eb$var$findNearestBoundary(discoverResult.partialMatches).route.id;
                return {
                    matches: discoverResult.partialMatches,
                    loaderData: {},
                    errors: {
                        [boundaryId]: discoverResult.error
                    }
                };
            } else if (!discoverResult.matches) {
                let { error: error, notFoundMatches: notFoundMatches, route: route } = handleNavigational404(location.pathname);
                return {
                    matches: notFoundMatches,
                    loaderData: {},
                    errors: {
                        [route.id]: error
                    }
                };
            } else matches = discoverResult.matches;
        }
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let [matchesToLoad, revalidatingFetchers] = $48f15048fc5d75eb$var$getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult);
        // Cancel pending deferreds for no-longer-matched routes or routes we're
        // about to reload.  Note that if this is an action reload we would have
        // already cancelled all pending deferreds so this would be a no-op
        cancelActiveDeferreds((routeId)=>!(matches && matches.some((m)=>m.route.id === routeId)) || matchesToLoad && matchesToLoad.some((m)=>m.route.id === routeId));
        pendingNavigationLoadId = ++incrementingLoadId;
        // Short circuit if we have no loaders to run
        if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {
            let updatedFetchers = markFetchRedirectsDone();
            completeNavigation(location, $48f15048fc5d75eb$var$_extends({
                matches: matches,
                loaderData: {},
                // Commit pending error if we're short circuiting
                errors: pendingActionResult && $48f15048fc5d75eb$var$isErrorResult(pendingActionResult[1]) ? {
                    [pendingActionResult[0]]: pendingActionResult[1].error
                } : null
            }, $48f15048fc5d75eb$var$getActionDataForCommit(pendingActionResult), updatedFetchers ? {
                fetchers: new Map(state.fetchers)
            } : {}), {
                flushSync: flushSync
            });
            return {
                shortCircuited: true
            };
        }
        if (shouldUpdateNavigationState) {
            let updates = {};
            if (!isFogOfWar) {
                // Only update navigation/actionNData if we didn't already do it above
                updates.navigation = loadingNavigation;
                let actionData = getUpdatedActionData(pendingActionResult);
                if (actionData !== undefined) updates.actionData = actionData;
            }
            if (revalidatingFetchers.length > 0) updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);
            updateState(updates, {
                flushSync: flushSync
            });
        }
        revalidatingFetchers.forEach((rf)=>{
            abortFetcher(rf.key);
            if (rf.controller) // Fetchers use an independent AbortController so that aborting a fetcher
            // (via deleteFetcher) does not abort the triggering navigation that
            // triggered the revalidation
            fetchControllers.set(rf.key, rf.controller);
        });
        // Proxy navigation abort through to revalidation fetchers
        let abortPendingFetchRevalidations = ()=>revalidatingFetchers.forEach((f)=>abortFetcher(f.key));
        if (pendingNavigationController) pendingNavigationController.signal.addEventListener("abort", abortPendingFetchRevalidations);
        let { loaderResults: loaderResults, fetcherResults: fetcherResults } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, request);
        if (request.signal.aborted) return {
            shortCircuited: true
        };
        // Clean up _after_ loaders have completed.  Don't clean up if we short
        // circuited because fetchControllers would have been aborted and
        // reassigned to new controllers for the next navigation
        if (pendingNavigationController) pendingNavigationController.signal.removeEventListener("abort", abortPendingFetchRevalidations);
        revalidatingFetchers.forEach((rf)=>fetchControllers.delete(rf.key));
        // If any loaders returned a redirect Response, start a new REPLACE navigation
        let redirect = $48f15048fc5d75eb$var$findRedirect(loaderResults);
        if (redirect) {
            await startRedirectNavigation(request, redirect.result, true, {
                replace: replace
            });
            return {
                shortCircuited: true
            };
        }
        redirect = $48f15048fc5d75eb$var$findRedirect(fetcherResults);
        if (redirect) {
            // If this redirect came from a fetcher make sure we mark it in
            // fetchRedirectIds so it doesn't get revalidated on the next set of
            // loader executions
            fetchRedirectIds.add(redirect.key);
            await startRedirectNavigation(request, redirect.result, true, {
                replace: replace
            });
            return {
                shortCircuited: true
            };
        }
        // Process and commit output from loaders
        let { loaderData: loaderData, errors: errors } = $48f15048fc5d75eb$var$processLoaderData(state, matches, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds);
        // Wire up subscribers to update loaderData as promises settle
        activeDeferreds.forEach((deferredData, routeId)=>{
            deferredData.subscribe((aborted)=>{
                // Note: No need to updateState here since the TrackedPromise on
                // loaderData is stable across resolve/reject
                // Remove this instance if we were aborted or if promises have settled
                if (aborted || deferredData.done) activeDeferreds.delete(routeId);
            });
        });
        // Preserve SSR errors during partial hydration
        if (future.v7_partialHydration && initialHydration && state.errors) errors = $48f15048fc5d75eb$var$_extends({}, state.errors, errors);
        let updatedFetchers = markFetchRedirectsDone();
        let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);
        let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;
        return $48f15048fc5d75eb$var$_extends({
            matches: matches,
            loaderData: loaderData,
            errors: errors
        }, shouldUpdateFetchers ? {
            fetchers: new Map(state.fetchers)
        } : {});
    }
    function getUpdatedActionData(pendingActionResult) {
        if (pendingActionResult && !$48f15048fc5d75eb$var$isErrorResult(pendingActionResult[1])) // This is cast to `any` currently because `RouteData`uses any and it
        // would be a breaking change to use any.
        // TODO: v7 - change `RouteData` to use `unknown` instead of `any`
        return {
            [pendingActionResult[0]]: pendingActionResult[1].data
        };
        else if (state.actionData) {
            if (Object.keys(state.actionData).length === 0) return null;
            else return state.actionData;
        }
    }
    function getUpdatedRevalidatingFetchers(revalidatingFetchers) {
        revalidatingFetchers.forEach((rf)=>{
            let fetcher = state.fetchers.get(rf.key);
            let revalidatingFetcher = $48f15048fc5d75eb$var$getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);
            state.fetchers.set(rf.key, revalidatingFetcher);
        });
        return new Map(state.fetchers);
    }
    // Trigger a fetcher load/submit for the given fetcher key
    function fetch(key, routeId, href, opts) {
        if (isServer) throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");
        abortFetcher(key);
        let flushSync = (opts && opts.flushSync) === true;
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let normalizedPath = $48f15048fc5d75eb$var$normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);
        let matches = $48f15048fc5d75eb$export$2708184779ceb39d(routesToUse, normalizedPath, basename);
        let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);
        if (fogOfWar.active && fogOfWar.matches) matches = fogOfWar.matches;
        if (!matches) {
            setFetcherError(key, routeId, $48f15048fc5d75eb$var$getInternalRouterError(404, {
                pathname: normalizedPath
            }), {
                flushSync: flushSync
            });
            return;
        }
        let { path: path, submission: submission, error: error } = $48f15048fc5d75eb$var$normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);
        if (error) {
            setFetcherError(key, routeId, error, {
                flushSync: flushSync
            });
            return;
        }
        let match = $48f15048fc5d75eb$var$getTargetMatch(matches, path);
        let preventScrollReset = (opts && opts.preventScrollReset) === true;
        if (submission && $48f15048fc5d75eb$var$isMutationMethod(submission.formMethod)) {
            handleFetcherAction(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);
            return;
        }
        // Store off the match so we can call it's shouldRevalidate on subsequent
        // revalidations
        fetchLoadMatches.set(key, {
            routeId: routeId,
            path: path
        });
        handleFetcherLoader(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);
    }
    // Call the action for the matched fetcher.submit(), and then handle redirects,
    // errors, and revalidation
    async function handleFetcherAction(key, routeId, path, match, requestMatches, isFogOfWar, flushSync, preventScrollReset, submission) {
        interruptActiveLoads();
        fetchLoadMatches.delete(key);
        function detectAndHandle405Error(m) {
            if (!m.route.action && !m.route.lazy) {
                let error = $48f15048fc5d75eb$var$getInternalRouterError(405, {
                    method: submission.formMethod,
                    pathname: path,
                    routeId: routeId
                });
                setFetcherError(key, routeId, error, {
                    flushSync: flushSync
                });
                return true;
            }
            return false;
        }
        if (!isFogOfWar && detectAndHandle405Error(match)) return;
        // Put this fetcher into it's submitting state
        let existingFetcher = state.fetchers.get(key);
        updateFetcherState(key, $48f15048fc5d75eb$var$getSubmittingFetcher(submission, existingFetcher), {
            flushSync: flushSync
        });
        let abortController = new AbortController();
        let fetchRequest = $48f15048fc5d75eb$var$createClientSideRequest(init.history, path, abortController.signal, submission);
        if (isFogOfWar) {
            let discoverResult = await discoverRoutes(requestMatches, new URL(fetchRequest.url).pathname, fetchRequest.signal, key);
            if (discoverResult.type === "aborted") return;
            else if (discoverResult.type === "error") {
                setFetcherError(key, routeId, discoverResult.error, {
                    flushSync: flushSync
                });
                return;
            } else if (!discoverResult.matches) {
                setFetcherError(key, routeId, $48f15048fc5d75eb$var$getInternalRouterError(404, {
                    pathname: path
                }), {
                    flushSync: flushSync
                });
                return;
            } else {
                requestMatches = discoverResult.matches;
                match = $48f15048fc5d75eb$var$getTargetMatch(requestMatches, path);
                if (detectAndHandle405Error(match)) return;
            }
        }
        // Call the action for the fetcher
        fetchControllers.set(key, abortController);
        let originatingLoadId = incrementingLoadId;
        let actionResults = await callDataStrategy("action", state, fetchRequest, [
            match
        ], requestMatches, key);
        let actionResult = actionResults[match.route.id];
        if (fetchRequest.signal.aborted) {
            // We can delete this so long as we weren't aborted by our own fetcher
            // re-submit which would have put _new_ controller is in fetchControllers
            if (fetchControllers.get(key) === abortController) fetchControllers.delete(key);
            return;
        }
        // When using v7_fetcherPersist, we don't want errors bubbling up to the UI
        // or redirects processed for unmounted fetchers so we just revert them to
        // idle
        if (future.v7_fetcherPersist && deletedFetchers.has(key)) {
            if ($48f15048fc5d75eb$var$isRedirectResult(actionResult) || $48f15048fc5d75eb$var$isErrorResult(actionResult)) {
                updateFetcherState(key, $48f15048fc5d75eb$var$getDoneFetcher(undefined));
                return;
            }
        } else {
            if ($48f15048fc5d75eb$var$isRedirectResult(actionResult)) {
                fetchControllers.delete(key);
                if (pendingNavigationLoadId > originatingLoadId) {
                    // A new navigation was kicked off after our action started, so that
                    // should take precedence over this redirect navigation.  We already
                    // set isRevalidationRequired so all loaders for the new route should
                    // fire unless opted out via shouldRevalidate
                    updateFetcherState(key, $48f15048fc5d75eb$var$getDoneFetcher(undefined));
                    return;
                } else {
                    fetchRedirectIds.add(key);
                    updateFetcherState(key, $48f15048fc5d75eb$var$getLoadingFetcher(submission));
                    return startRedirectNavigation(fetchRequest, actionResult, false, {
                        fetcherSubmission: submission,
                        preventScrollReset: preventScrollReset
                    });
                }
            }
            // Process any non-redirect errors thrown
            if ($48f15048fc5d75eb$var$isErrorResult(actionResult)) {
                setFetcherError(key, routeId, actionResult.error);
                return;
            }
        }
        if ($48f15048fc5d75eb$var$isDeferredResult(actionResult)) throw $48f15048fc5d75eb$var$getInternalRouterError(400, {
            type: "defer-action"
        });
        // Start the data load for current matches, or the next location if we're
        // in the middle of a navigation
        let nextLocation = state.navigation.location || state.location;
        let revalidationRequest = $48f15048fc5d75eb$var$createClientSideRequest(init.history, nextLocation, abortController.signal);
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let matches = state.navigation.state !== "idle" ? $48f15048fc5d75eb$export$2708184779ceb39d(routesToUse, state.navigation.location, basename) : state.matches;
        $48f15048fc5d75eb$export$3e9cee6b33872309(matches, "Didn't find any matches after fetcher action");
        let loadId = ++incrementingLoadId;
        fetchReloadIds.set(key, loadId);
        let loadFetcher = $48f15048fc5d75eb$var$getLoadingFetcher(submission, actionResult.data);
        state.fetchers.set(key, loadFetcher);
        let [matchesToLoad, revalidatingFetchers] = $48f15048fc5d75eb$var$getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [
            match.route.id,
            actionResult
        ]);
        // Put all revalidating fetchers into the loading state, except for the
        // current fetcher which we want to keep in it's current loading state which
        // contains it's action submission info + action data
        revalidatingFetchers.filter((rf)=>rf.key !== key).forEach((rf)=>{
            let staleKey = rf.key;
            let existingFetcher = state.fetchers.get(staleKey);
            let revalidatingFetcher = $48f15048fc5d75eb$var$getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);
            state.fetchers.set(staleKey, revalidatingFetcher);
            abortFetcher(staleKey);
            if (rf.controller) fetchControllers.set(staleKey, rf.controller);
        });
        updateState({
            fetchers: new Map(state.fetchers)
        });
        let abortPendingFetchRevalidations = ()=>revalidatingFetchers.forEach((rf)=>abortFetcher(rf.key));
        abortController.signal.addEventListener("abort", abortPendingFetchRevalidations);
        let { loaderResults: loaderResults, fetcherResults: fetcherResults } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);
        if (abortController.signal.aborted) return;
        abortController.signal.removeEventListener("abort", abortPendingFetchRevalidations);
        fetchReloadIds.delete(key);
        fetchControllers.delete(key);
        revalidatingFetchers.forEach((r)=>fetchControllers.delete(r.key));
        let redirect = $48f15048fc5d75eb$var$findRedirect(loaderResults);
        if (redirect) return startRedirectNavigation(revalidationRequest, redirect.result, false, {
            preventScrollReset: preventScrollReset
        });
        redirect = $48f15048fc5d75eb$var$findRedirect(fetcherResults);
        if (redirect) {
            // If this redirect came from a fetcher make sure we mark it in
            // fetchRedirectIds so it doesn't get revalidated on the next set of
            // loader executions
            fetchRedirectIds.add(redirect.key);
            return startRedirectNavigation(revalidationRequest, redirect.result, false, {
                preventScrollReset: preventScrollReset
            });
        }
        // Process and commit output from loaders
        let { loaderData: loaderData, errors: errors } = $48f15048fc5d75eb$var$processLoaderData(state, matches, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);
        // Since we let revalidations complete even if the submitting fetcher was
        // deleted, only put it back to idle if it hasn't been deleted
        if (state.fetchers.has(key)) {
            let doneFetcher = $48f15048fc5d75eb$var$getDoneFetcher(actionResult.data);
            state.fetchers.set(key, doneFetcher);
        }
        abortStaleFetchLoads(loadId);
        // If we are currently in a navigation loading state and this fetcher is
        // more recent than the navigation, we want the newer data so abort the
        // navigation and complete it with the fetcher data
        if (state.navigation.state === "loading" && loadId > pendingNavigationLoadId) {
            $48f15048fc5d75eb$export$3e9cee6b33872309(pendingAction, "Expected pending action");
            pendingNavigationController && pendingNavigationController.abort();
            completeNavigation(state.navigation.location, {
                matches: matches,
                loaderData: loaderData,
                errors: errors,
                fetchers: new Map(state.fetchers)
            });
        } else {
            // otherwise just update with the fetcher data, preserving any existing
            // loaderData for loaders that did not need to reload.  We have to
            // manually merge here since we aren't going through completeNavigation
            updateState({
                errors: errors,
                loaderData: $48f15048fc5d75eb$var$mergeLoaderData(state.loaderData, loaderData, matches, errors),
                fetchers: new Map(state.fetchers)
            });
            isRevalidationRequired = false;
        }
    }
    // Call the matched loader for fetcher.load(), handling redirects, errors, etc.
    async function handleFetcherLoader(key, routeId, path, match, matches, isFogOfWar, flushSync, preventScrollReset, submission) {
        let existingFetcher = state.fetchers.get(key);
        updateFetcherState(key, $48f15048fc5d75eb$var$getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {
            flushSync: flushSync
        });
        let abortController = new AbortController();
        let fetchRequest = $48f15048fc5d75eb$var$createClientSideRequest(init.history, path, abortController.signal);
        if (isFogOfWar) {
            let discoverResult = await discoverRoutes(matches, new URL(fetchRequest.url).pathname, fetchRequest.signal, key);
            if (discoverResult.type === "aborted") return;
            else if (discoverResult.type === "error") {
                setFetcherError(key, routeId, discoverResult.error, {
                    flushSync: flushSync
                });
                return;
            } else if (!discoverResult.matches) {
                setFetcherError(key, routeId, $48f15048fc5d75eb$var$getInternalRouterError(404, {
                    pathname: path
                }), {
                    flushSync: flushSync
                });
                return;
            } else {
                matches = discoverResult.matches;
                match = $48f15048fc5d75eb$var$getTargetMatch(matches, path);
            }
        }
        // Call the loader for this fetcher route match
        fetchControllers.set(key, abortController);
        let originatingLoadId = incrementingLoadId;
        let results = await callDataStrategy("loader", state, fetchRequest, [
            match
        ], matches, key);
        let result = results[match.route.id];
        // Deferred isn't supported for fetcher loads, await everything and treat it
        // as a normal load.  resolveDeferredData will return undefined if this
        // fetcher gets aborted, so we just leave result untouched and short circuit
        // below if that happens
        if ($48f15048fc5d75eb$var$isDeferredResult(result)) result = await $48f15048fc5d75eb$var$resolveDeferredData(result, fetchRequest.signal, true) || result;
        // We can delete this so long as we weren't aborted by our our own fetcher
        // re-load which would have put _new_ controller is in fetchControllers
        if (fetchControllers.get(key) === abortController) fetchControllers.delete(key);
        if (fetchRequest.signal.aborted) return;
        // We don't want errors bubbling up or redirects followed for unmounted
        // fetchers, so short circuit here if it was removed from the UI
        if (deletedFetchers.has(key)) {
            updateFetcherState(key, $48f15048fc5d75eb$var$getDoneFetcher(undefined));
            return;
        }
        // If the loader threw a redirect Response, start a new REPLACE navigation
        if ($48f15048fc5d75eb$var$isRedirectResult(result)) {
            if (pendingNavigationLoadId > originatingLoadId) {
                // A new navigation was kicked off after our loader started, so that
                // should take precedence over this redirect navigation
                updateFetcherState(key, $48f15048fc5d75eb$var$getDoneFetcher(undefined));
                return;
            } else {
                fetchRedirectIds.add(key);
                await startRedirectNavigation(fetchRequest, result, false, {
                    preventScrollReset: preventScrollReset
                });
                return;
            }
        }
        // Process any non-redirect errors thrown
        if ($48f15048fc5d75eb$var$isErrorResult(result)) {
            setFetcherError(key, routeId, result.error);
            return;
        }
        $48f15048fc5d75eb$export$3e9cee6b33872309(!$48f15048fc5d75eb$var$isDeferredResult(result), "Unhandled fetcher deferred data");
        // Put the fetcher back into an idle state
        updateFetcherState(key, $48f15048fc5d75eb$var$getDoneFetcher(result.data));
    }
    /**
   * Utility function to handle redirects returned from an action or loader.
   * Normally, a redirect "replaces" the navigation that triggered it.  So, for
   * example:
   *
   *  - user is on /a
   *  - user clicks a link to /b
   *  - loader for /b redirects to /c
   *
   * In a non-JS app the browser would track the in-flight navigation to /b and
   * then replace it with /c when it encountered the redirect response.  In
   * the end it would only ever update the URL bar with /c.
   *
   * In client-side routing using pushState/replaceState, we aim to emulate
   * this behavior and we also do not update history until the end of the
   * navigation (including processed redirects).  This means that we never
   * actually touch history until we've processed redirects, so we just use
   * the history action from the original navigation (PUSH or REPLACE).
   */ async function startRedirectNavigation(request, redirect, isNavigation, _temp2) {
        let { submission: submission, fetcherSubmission: fetcherSubmission, preventScrollReset: preventScrollReset, replace: replace } = _temp2 === void 0 ? {} : _temp2;
        if (redirect.response.headers.has("X-Remix-Revalidate")) isRevalidationRequired = true;
        let location = redirect.response.headers.get("Location");
        $48f15048fc5d75eb$export$3e9cee6b33872309(location, "Expected a Location header on the redirect Response");
        location = $48f15048fc5d75eb$var$normalizeRedirectLocation(location, new URL(request.url), basename);
        let redirectLocation = $48f15048fc5d75eb$var$createLocation(state.location, location, {
            _isRedirect: true
        });
        if (isBrowser) {
            let isDocumentReload = false;
            if (redirect.response.headers.has("X-Remix-Reload-Document")) // Hard reload if the response contained X-Remix-Reload-Document
            isDocumentReload = true;
            else if ($48f15048fc5d75eb$var$ABSOLUTE_URL_REGEX.test(location)) {
                const url = init.history.createURL(location);
                isDocumentReload = // Hard reload if it's an absolute URL to a new origin
                url.origin !== routerWindow.location.origin || // Hard reload if it's an absolute URL that does not match our basename
                $48f15048fc5d75eb$export$b69e3301ce081aa3(url.pathname, basename) == null;
            }
            if (isDocumentReload) {
                if (replace) routerWindow.location.replace(location);
                else routerWindow.location.assign(location);
                return;
            }
        }
        // There's no need to abort on redirects, since we don't detect the
        // redirect until the action/loaders have settled
        pendingNavigationController = null;
        let redirectHistoryAction = replace === true || redirect.response.headers.has("X-Remix-Replace") ? $48f15048fc5d75eb$export$e19cd5f9376f8cee.Replace : $48f15048fc5d75eb$export$e19cd5f9376f8cee.Push;
        // Use the incoming submission if provided, fallback on the active one in
        // state.navigation
        let { formMethod: formMethod, formAction: formAction, formEncType: formEncType } = state.navigation;
        if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) submission = $48f15048fc5d75eb$var$getSubmissionFromNavigation(state.navigation);
        // If this was a 307/308 submission we want to preserve the HTTP method and
        // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the
        // redirected location
        let activeSubmission = submission || fetcherSubmission;
        if ($48f15048fc5d75eb$var$redirectPreserveMethodStatusCodes.has(redirect.response.status) && activeSubmission && $48f15048fc5d75eb$var$isMutationMethod(activeSubmission.formMethod)) await startNavigation(redirectHistoryAction, redirectLocation, {
            submission: $48f15048fc5d75eb$var$_extends({}, activeSubmission, {
                formAction: location
            }),
            // Preserve these flags across redirects
            preventScrollReset: preventScrollReset || pendingPreventScrollReset,
            enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined
        });
        else {
            // If we have a navigation submission, we will preserve it through the
            // redirect navigation
            let overrideNavigation = $48f15048fc5d75eb$var$getLoadingNavigation(redirectLocation, submission);
            await startNavigation(redirectHistoryAction, redirectLocation, {
                overrideNavigation: overrideNavigation,
                fetcherSubmission: // Send fetcher submissions through for shouldRevalidate
                fetcherSubmission,
                // Preserve these flags across redirects
                preventScrollReset: preventScrollReset || pendingPreventScrollReset,
                enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined
            });
        }
    }
    // Utility wrapper for calling dataStrategy client-side without having to
    // pass around the manifest, mapRouteProperties, etc.
    async function callDataStrategy(type, state, request, matchesToLoad, matches, fetcherKey) {
        let results;
        let dataResults = {};
        try {
            results = await $48f15048fc5d75eb$var$callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties);
        } catch (e) {
            // If the outer dataStrategy method throws, just return the error for all
            // matches - and it'll naturally bubble to the root
            matchesToLoad.forEach((m)=>{
                dataResults[m.route.id] = {
                    type: $48f15048fc5d75eb$var$ResultType.error,
                    error: e
                };
            });
            return dataResults;
        }
        for (let [routeId, result] of Object.entries(results))if ($48f15048fc5d75eb$var$isRedirectDataStrategyResultResult(result)) {
            let response = result.result;
            dataResults[routeId] = {
                type: $48f15048fc5d75eb$var$ResultType.redirect,
                response: $48f15048fc5d75eb$var$normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, future.v7_relativeSplatPath)
            };
        } else dataResults[routeId] = await $48f15048fc5d75eb$var$convertDataStrategyResultToDataResult(result);
        return dataResults;
    }
    async function callLoadersAndMaybeResolveData(state, matches, matchesToLoad, fetchersToLoad, request) {
        let currentMatches = state.matches;
        // Kick off loaders and fetchers in parallel
        let loaderResultsPromise = callDataStrategy("loader", state, request, matchesToLoad, matches, null);
        let fetcherResultsPromise = Promise.all(fetchersToLoad.map(async (f)=>{
            if (f.matches && f.match && f.controller) {
                let results = await callDataStrategy("loader", state, $48f15048fc5d75eb$var$createClientSideRequest(init.history, f.path, f.controller.signal), [
                    f.match
                ], f.matches, f.key);
                let result = results[f.match.route.id];
                // Fetcher results are keyed by fetcher key from here on out, not routeId
                return {
                    [f.key]: result
                };
            } else return Promise.resolve({
                [f.key]: {
                    type: $48f15048fc5d75eb$var$ResultType.error,
                    error: $48f15048fc5d75eb$var$getInternalRouterError(404, {
                        pathname: f.path
                    })
                }
            });
        }));
        let loaderResults = await loaderResultsPromise;
        let fetcherResults = (await fetcherResultsPromise).reduce((acc, r)=>Object.assign(acc, r), {});
        await Promise.all([
            $48f15048fc5d75eb$var$resolveNavigationDeferredResults(matches, loaderResults, request.signal, currentMatches, state.loaderData),
            $48f15048fc5d75eb$var$resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad)
        ]);
        return {
            loaderResults: loaderResults,
            fetcherResults: fetcherResults
        };
    }
    function interruptActiveLoads() {
        // Every interruption triggers a revalidation
        isRevalidationRequired = true;
        // Cancel pending route-level deferreds and mark cancelled routes for
        // revalidation
        cancelledDeferredRoutes.push(...cancelActiveDeferreds());
        // Abort in-flight fetcher loads
        fetchLoadMatches.forEach((_, key)=>{
            if (fetchControllers.has(key)) cancelledFetcherLoads.add(key);
            abortFetcher(key);
        });
    }
    function updateFetcherState(key, fetcher, opts) {
        if (opts === void 0) opts = {};
        state.fetchers.set(key, fetcher);
        updateState({
            fetchers: new Map(state.fetchers)
        }, {
            flushSync: (opts && opts.flushSync) === true
        });
    }
    function setFetcherError(key, routeId, error, opts) {
        if (opts === void 0) opts = {};
        let boundaryMatch = $48f15048fc5d75eb$var$findNearestBoundary(state.matches, routeId);
        deleteFetcher(key);
        updateState({
            errors: {
                [boundaryMatch.route.id]: error
            },
            fetchers: new Map(state.fetchers)
        }, {
            flushSync: (opts && opts.flushSync) === true
        });
    }
    function getFetcher(key) {
        activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);
        // If this fetcher was previously marked for deletion, unmark it since we
        // have a new instance
        if (deletedFetchers.has(key)) deletedFetchers.delete(key);
        return state.fetchers.get(key) || $48f15048fc5d75eb$export$52eace9c284d3585;
    }
    function deleteFetcher(key) {
        let fetcher = state.fetchers.get(key);
        // Don't abort the controller if this is a deletion of a fetcher.submit()
        // in it's loading phase since - we don't want to abort the corresponding
        // revalidation and want them to complete and land
        if (fetchControllers.has(key) && !(fetcher && fetcher.state === "loading" && fetchReloadIds.has(key))) abortFetcher(key);
        fetchLoadMatches.delete(key);
        fetchReloadIds.delete(key);
        fetchRedirectIds.delete(key);
        // If we opted into the flag we can clear this now since we're calling
        // deleteFetcher() at the end of updateState() and we've already handed the
        // deleted fetcher keys off to the data layer.
        // If not, we're eagerly calling deleteFetcher() and we need to keep this
        // Set populated until the next updateState call, and we'll clear
        // `deletedFetchers` then
        if (future.v7_fetcherPersist) deletedFetchers.delete(key);
        cancelledFetcherLoads.delete(key);
        state.fetchers.delete(key);
    }
    function deleteFetcherAndUpdateState(key) {
        let count = (activeFetchers.get(key) || 0) - 1;
        if (count <= 0) {
            activeFetchers.delete(key);
            deletedFetchers.add(key);
            if (!future.v7_fetcherPersist) deleteFetcher(key);
        } else activeFetchers.set(key, count);
        updateState({
            fetchers: new Map(state.fetchers)
        });
    }
    function abortFetcher(key) {
        let controller = fetchControllers.get(key);
        if (controller) {
            controller.abort();
            fetchControllers.delete(key);
        }
    }
    function markFetchersDone(keys) {
        for (let key of keys){
            let fetcher = getFetcher(key);
            let doneFetcher = $48f15048fc5d75eb$var$getDoneFetcher(fetcher.data);
            state.fetchers.set(key, doneFetcher);
        }
    }
    function markFetchRedirectsDone() {
        let doneKeys = [];
        let updatedFetchers = false;
        for (let key of fetchRedirectIds){
            let fetcher = state.fetchers.get(key);
            $48f15048fc5d75eb$export$3e9cee6b33872309(fetcher, "Expected fetcher: " + key);
            if (fetcher.state === "loading") {
                fetchRedirectIds.delete(key);
                doneKeys.push(key);
                updatedFetchers = true;
            }
        }
        markFetchersDone(doneKeys);
        return updatedFetchers;
    }
    function abortStaleFetchLoads(landedId) {
        let yeetedKeys = [];
        for (let [key, id] of fetchReloadIds)if (id < landedId) {
            let fetcher = state.fetchers.get(key);
            $48f15048fc5d75eb$export$3e9cee6b33872309(fetcher, "Expected fetcher: " + key);
            if (fetcher.state === "loading") {
                abortFetcher(key);
                fetchReloadIds.delete(key);
                yeetedKeys.push(key);
            }
        }
        markFetchersDone(yeetedKeys);
        return yeetedKeys.length > 0;
    }
    function getBlocker(key, fn) {
        let blocker = state.blockers.get(key) || $48f15048fc5d75eb$export$386d57f03f0b2883;
        if (blockerFunctions.get(key) !== fn) blockerFunctions.set(key, fn);
        return blocker;
    }
    function deleteBlocker(key) {
        state.blockers.delete(key);
        blockerFunctions.delete(key);
    }
    // Utility function to update blockers, ensuring valid state transitions
    function updateBlocker(key, newBlocker) {
        let blocker = state.blockers.get(key) || $48f15048fc5d75eb$export$386d57f03f0b2883;
        // Poor mans state machine :)
        // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM
        $48f15048fc5d75eb$export$3e9cee6b33872309(blocker.state === "unblocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "proceeding" || blocker.state === "blocked" && newBlocker.state === "unblocked" || blocker.state === "proceeding" && newBlocker.state === "unblocked", "Invalid blocker state transition: " + blocker.state + " -> " + newBlocker.state);
        let blockers = new Map(state.blockers);
        blockers.set(key, newBlocker);
        updateState({
            blockers: blockers
        });
    }
    function shouldBlockNavigation(_ref2) {
        let { currentLocation: currentLocation, nextLocation: nextLocation, historyAction: historyAction } = _ref2;
        if (blockerFunctions.size === 0) return;
        // We ony support a single active blocker at the moment since we don't have
        // any compelling use cases for multi-blocker yet
        if (blockerFunctions.size > 1) $48f15048fc5d75eb$export$c0e02632e14916fd(false, "A router only supports one blocker at a time");
        let entries = Array.from(blockerFunctions.entries());
        let [blockerKey, blockerFunction] = entries[entries.length - 1];
        let blocker = state.blockers.get(blockerKey);
        if (blocker && blocker.state === "proceeding") // If the blocker is currently proceeding, we don't need to re-check
        // it and can let this navigation continue
        return;
        // At this point, we know we're unblocked/blocked so we need to check the
        // user-provided blocker function
        if (blockerFunction({
            currentLocation: currentLocation,
            nextLocation: nextLocation,
            historyAction: historyAction
        })) return blockerKey;
    }
    function handleNavigational404(pathname) {
        let error = $48f15048fc5d75eb$var$getInternalRouterError(404, {
            pathname: pathname
        });
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let { matches: matches, route: route } = $48f15048fc5d75eb$var$getShortCircuitMatches(routesToUse);
        // Cancel all pending deferred on 404s since we don't keep any routes
        cancelActiveDeferreds();
        return {
            notFoundMatches: matches,
            route: route,
            error: error
        };
    }
    function cancelActiveDeferreds(predicate) {
        let cancelledRouteIds = [];
        activeDeferreds.forEach((dfd, routeId)=>{
            if (!predicate || predicate(routeId)) {
                // Cancel the deferred - but do not remove from activeDeferreds here -
                // we rely on the subscribers to do that so our tests can assert proper
                // cleanup via _internalActiveDeferreds
                dfd.cancel();
                cancelledRouteIds.push(routeId);
                activeDeferreds.delete(routeId);
            }
        });
        return cancelledRouteIds;
    }
    // Opt in to capturing and reporting scroll positions during navigations,
    // used by the <ScrollRestoration> component
    function enableScrollRestoration(positions, getPosition, getKey) {
        savedScrollPositions = positions;
        getScrollPosition = getPosition;
        getScrollRestorationKey = getKey || null;
        // Perform initial hydration scroll restoration, since we miss the boat on
        // the initial updateState() because we've not yet rendered <ScrollRestoration/>
        // and therefore have no savedScrollPositions available
        if (!initialScrollRestored && state.navigation === $48f15048fc5d75eb$export$ed3e14b2f9e105d0) {
            initialScrollRestored = true;
            let y = getSavedScrollPosition(state.location, state.matches);
            if (y != null) updateState({
                restoreScrollPosition: y
            });
        }
        return ()=>{
            savedScrollPositions = null;
            getScrollPosition = null;
            getScrollRestorationKey = null;
        };
    }
    function getScrollKey(location, matches) {
        if (getScrollRestorationKey) {
            let key = getScrollRestorationKey(location, matches.map((m)=>$48f15048fc5d75eb$export$b3fac024fad9e8ff(m, state.loaderData)));
            return key || location.key;
        }
        return location.key;
    }
    function saveScrollPosition(location, matches) {
        if (savedScrollPositions && getScrollPosition) {
            let key = getScrollKey(location, matches);
            savedScrollPositions[key] = getScrollPosition();
        }
    }
    function getSavedScrollPosition(location, matches) {
        if (savedScrollPositions) {
            let key = getScrollKey(location, matches);
            let y = savedScrollPositions[key];
            if (typeof y === "number") return y;
        }
        return null;
    }
    function checkFogOfWar(matches, routesToUse, pathname) {
        if (patchRoutesOnNavigationImpl) {
            if (!matches) {
                let fogMatches = $48f15048fc5d75eb$var$matchRoutesImpl(routesToUse, pathname, basename, true);
                return {
                    active: true,
                    matches: fogMatches || []
                };
            } else if (Object.keys(matches[0].params).length > 0) {
                // If we matched a dynamic param or a splat, it might only be because
                // we haven't yet discovered other routes that would match with a
                // higher score.  Call patchRoutesOnNavigation just to be sure
                let partialMatches = $48f15048fc5d75eb$var$matchRoutesImpl(routesToUse, pathname, basename, true);
                return {
                    active: true,
                    matches: partialMatches
                };
            }
        }
        return {
            active: false,
            matches: null
        };
    }
    async function discoverRoutes(matches, pathname, signal, fetcherKey) {
        if (!patchRoutesOnNavigationImpl) return {
            type: "success",
            matches: matches
        };
        let partialMatches = matches;
        while(true){
            let isNonHMR = inFlightDataRoutes == null;
            let routesToUse = inFlightDataRoutes || dataRoutes;
            let localManifest = manifest;
            try {
                await patchRoutesOnNavigationImpl({
                    signal: signal,
                    path: pathname,
                    matches: partialMatches,
                    fetcherKey: fetcherKey,
                    patch: (routeId, children)=>{
                        if (signal.aborted) return;
                        $48f15048fc5d75eb$var$patchRoutesImpl(routeId, children, routesToUse, localManifest, mapRouteProperties);
                    }
                });
            } catch (e) {
                return {
                    type: "error",
                    error: e,
                    partialMatches: partialMatches
                };
            } finally{
                // If we are not in the middle of an HMR revalidation and we changed the
                // routes, provide a new identity so when we `updateState` at the end of
                // this navigation/fetch `router.routes` will be a new identity and
                // trigger a re-run of memoized `router.routes` dependencies.
                // HMR will already update the identity and reflow when it lands
                // `inFlightDataRoutes` in `completeNavigation`
                if (isNonHMR && !signal.aborted) dataRoutes = [
                    ...dataRoutes
                ];
            }
            if (signal.aborted) return {
                type: "aborted"
            };
            let newMatches = $48f15048fc5d75eb$export$2708184779ceb39d(routesToUse, pathname, basename);
            if (newMatches) return {
                type: "success",
                matches: newMatches
            };
            let newPartialMatches = $48f15048fc5d75eb$var$matchRoutesImpl(routesToUse, pathname, basename, true);
            // Avoid loops if the second pass results in the same partial matches
            if (!newPartialMatches || partialMatches.length === newPartialMatches.length && partialMatches.every((m, i)=>m.route.id === newPartialMatches[i].route.id)) return {
                type: "success",
                matches: null
            };
            partialMatches = newPartialMatches;
        }
    }
    function _internalSetRoutes(newRoutes) {
        manifest = {};
        inFlightDataRoutes = $48f15048fc5d75eb$export$4a6d22b32134ea5d(newRoutes, mapRouteProperties, undefined, manifest);
    }
    function patchRoutes(routeId, children) {
        let isNonHMR = inFlightDataRoutes == null;
        let routesToUse = inFlightDataRoutes || dataRoutes;
        $48f15048fc5d75eb$var$patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties);
        // If we are not in the middle of an HMR revalidation and we changed the
        // routes, provide a new identity and trigger a reflow via `updateState`
        // to re-run memoized `router.routes` dependencies.
        // HMR will already update the identity and reflow when it lands
        // `inFlightDataRoutes` in `completeNavigation`
        if (isNonHMR) {
            dataRoutes = [
                ...dataRoutes
            ];
            updateState({});
        }
    }
    router = {
        get basename () {
            return basename;
        },
        get future () {
            return future;
        },
        get state () {
            return state;
        },
        get routes () {
            return dataRoutes;
        },
        get window () {
            return routerWindow;
        },
        initialize: initialize,
        subscribe: subscribe,
        enableScrollRestoration: enableScrollRestoration,
        navigate: navigate,
        fetch: fetch,
        revalidate: revalidate,
        // Passthrough to history-aware createHref used by useHref so we get proper
        // hash-aware URLs in DOM paths
        createHref: (to)=>init.history.createHref(to),
        encodeLocation: (to)=>init.history.encodeLocation(to),
        getFetcher: getFetcher,
        deleteFetcher: deleteFetcherAndUpdateState,
        dispose: dispose,
        getBlocker: getBlocker,
        deleteBlocker: deleteBlocker,
        patchRoutes: patchRoutes,
        _internalFetchControllers: fetchControllers,
        _internalActiveDeferreds: activeDeferreds,
        _internalSetRoutes: // TODO: Remove setRoutes, it's temporary to avoid dealing with
        // updating the tree while validating the update algorithm.
        _internalSetRoutes
    };
    return router;
}
//#endregion
////////////////////////////////////////////////////////////////////////////////
//#region createStaticHandler
////////////////////////////////////////////////////////////////////////////////
const $48f15048fc5d75eb$export$4d0306f8f6a4585b = Symbol("deferred");
function $48f15048fc5d75eb$export$3336b097a6fbc59a(routes, opts) {
    $48f15048fc5d75eb$export$3e9cee6b33872309(routes.length > 0, "You must provide a non-empty routes array to createStaticHandler");
    let manifest = {};
    let basename = (opts ? opts.basename : null) || "/";
    let mapRouteProperties;
    if (opts != null && opts.mapRouteProperties) mapRouteProperties = opts.mapRouteProperties;
    else if (opts != null && opts.detectErrorBoundary) {
        // If they are still using the deprecated version, wrap it with the new API
        let detectErrorBoundary = opts.detectErrorBoundary;
        mapRouteProperties = (route)=>({
                hasErrorBoundary: detectErrorBoundary(route)
            });
    } else mapRouteProperties = $48f15048fc5d75eb$var$defaultMapRouteProperties;
    // Config driven behavior flags
    let future = $48f15048fc5d75eb$var$_extends({
        v7_relativeSplatPath: false,
        v7_throwAbortReason: false
    }, opts ? opts.future : null);
    let dataRoutes = $48f15048fc5d75eb$export$4a6d22b32134ea5d(routes, mapRouteProperties, undefined, manifest);
    /**
   * The query() method is intended for document requests, in which we want to
   * call an optional action and potentially multiple loaders for all nested
   * routes.  It returns a StaticHandlerContext object, which is very similar
   * to the router state (location, loaderData, actionData, errors, etc.) and
   * also adds SSR-specific information such as the statusCode and headers
   * from action/loaders Responses.
   *
   * It _should_ never throw and should report all errors through the
   * returned context.errors object, properly associating errors to their error
   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be
   * used to emulate React error boundaries during SSr by performing a second
   * pass only down to the boundaryId.
   *
   * The one exception where we do not return a StaticHandlerContext is when a
   * redirect response is returned or thrown from any action/loader.  We
   * propagate that out and return the raw Response so the HTTP server can
   * return it directly.
   *
   * - `opts.requestContext` is an optional server context that will be passed
   *   to actions/loaders in the `context` parameter
   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent
   *   the bubbling of errors which allows single-fetch-type implementations
   *   where the client will handle the bubbling and we may need to return data
   *   for the handling route
   */ async function query(request, _temp3) {
        let { requestContext: requestContext, skipLoaderErrorBubbling: skipLoaderErrorBubbling, dataStrategy: dataStrategy } = _temp3 === void 0 ? {} : _temp3;
        let url = new URL(request.url);
        let method = request.method;
        let location = $48f15048fc5d75eb$var$createLocation("", $48f15048fc5d75eb$export$fe53371bee54353d(url), null, "default");
        let matches = $48f15048fc5d75eb$export$2708184779ceb39d(dataRoutes, location, basename);
        // SSR supports HEAD requests while SPA doesn't
        if (!$48f15048fc5d75eb$var$isValidMethod(method) && method !== "HEAD") {
            let error = $48f15048fc5d75eb$var$getInternalRouterError(405, {
                method: method
            });
            let { matches: methodNotAllowedMatches, route: route } = $48f15048fc5d75eb$var$getShortCircuitMatches(dataRoutes);
            return {
                basename: basename,
                location: location,
                matches: methodNotAllowedMatches,
                loaderData: {},
                actionData: null,
                errors: {
                    [route.id]: error
                },
                statusCode: error.status,
                loaderHeaders: {},
                actionHeaders: {},
                activeDeferreds: null
            };
        } else if (!matches) {
            let error = $48f15048fc5d75eb$var$getInternalRouterError(404, {
                pathname: location.pathname
            });
            let { matches: notFoundMatches, route: route } = $48f15048fc5d75eb$var$getShortCircuitMatches(dataRoutes);
            return {
                basename: basename,
                location: location,
                matches: notFoundMatches,
                loaderData: {},
                actionData: null,
                errors: {
                    [route.id]: error
                },
                statusCode: error.status,
                loaderHeaders: {},
                actionHeaders: {},
                activeDeferreds: null
            };
        }
        let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, skipLoaderErrorBubbling === true, null);
        if ($48f15048fc5d75eb$var$isResponse(result)) return result;
        // When returning StaticHandlerContext, we patch back in the location here
        // since we need it for React Context.  But this helps keep our submit and
        // loadRouteData operating on a Request instead of a Location
        return $48f15048fc5d75eb$var$_extends({
            location: location,
            basename: basename
        }, result);
    }
    /**
   * The queryRoute() method is intended for targeted route requests, either
   * for fetch ?_data requests or resource route requests.  In this case, we
   * are only ever calling a single action or loader, and we are returning the
   * returned value directly.  In most cases, this will be a Response returned
   * from the action/loader, but it may be a primitive or other value as well -
   * and in such cases the calling context should handle that accordingly.
   *
   * We do respect the throw/return differentiation, so if an action/loader
   * throws, then this method will throw the value.  This is important so we
   * can do proper boundary identification in Remix where a thrown Response
   * must go to the Catch Boundary but a returned Response is happy-path.
   *
   * One thing to note is that any Router-initiated Errors that make sense
   * to associate with a status code will be thrown as an ErrorResponse
   * instance which include the raw Error, such that the calling context can
   * serialize the error as they see fit while including the proper response
   * code.  Examples here are 404 and 405 errors that occur prior to reaching
   * any user-defined loaders.
   *
   * - `opts.routeId` allows you to specify the specific route handler to call.
   *   If not provided the handler will determine the proper route by matching
   *   against `request.url`
   * - `opts.requestContext` is an optional server context that will be passed
   *    to actions/loaders in the `context` parameter
   */ async function queryRoute(request, _temp4) {
        let { routeId: routeId, requestContext: requestContext, dataStrategy: dataStrategy } = _temp4 === void 0 ? {} : _temp4;
        let url = new URL(request.url);
        let method = request.method;
        let location = $48f15048fc5d75eb$var$createLocation("", $48f15048fc5d75eb$export$fe53371bee54353d(url), null, "default");
        let matches = $48f15048fc5d75eb$export$2708184779ceb39d(dataRoutes, location, basename);
        // SSR supports HEAD requests while SPA doesn't
        if (!$48f15048fc5d75eb$var$isValidMethod(method) && method !== "HEAD" && method !== "OPTIONS") throw $48f15048fc5d75eb$var$getInternalRouterError(405, {
            method: method
        });
        else if (!matches) throw $48f15048fc5d75eb$var$getInternalRouterError(404, {
            pathname: location.pathname
        });
        let match = routeId ? matches.find((m)=>m.route.id === routeId) : $48f15048fc5d75eb$var$getTargetMatch(matches, location);
        if (routeId && !match) throw $48f15048fc5d75eb$var$getInternalRouterError(403, {
            pathname: location.pathname,
            routeId: routeId
        });
        else if (!match) // This should never hit I don't think?
        throw $48f15048fc5d75eb$var$getInternalRouterError(404, {
            pathname: location.pathname
        });
        let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, false, match);
        if ($48f15048fc5d75eb$var$isResponse(result)) return result;
        let error = result.errors ? Object.values(result.errors)[0] : undefined;
        if (error !== undefined) // If we got back result.errors, that means the loader/action threw
        // _something_ that wasn't a Response, but it's not guaranteed/required
        // to be an `instanceof Error` either, so we have to use throw here to
        // preserve the "error" state outside of queryImpl.
        throw error;
        // Pick off the right state value to return
        if (result.actionData) return Object.values(result.actionData)[0];
        if (result.loaderData) {
            var _result$activeDeferre;
            let data = Object.values(result.loaderData)[0];
            if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) data[$48f15048fc5d75eb$export$4d0306f8f6a4585b] = result.activeDeferreds[match.route.id];
            return data;
        }
        return undefined;
    }
    async function queryImpl(request, location, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch) {
        $48f15048fc5d75eb$export$3e9cee6b33872309(request.signal, "query()/queryRoute() requests must contain an AbortController signal");
        try {
            if ($48f15048fc5d75eb$var$isMutationMethod(request.method.toLowerCase())) {
                let result = await submit(request, matches, routeMatch || $48f15048fc5d75eb$var$getTargetMatch(matches, location), requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch != null);
                return result;
            }
            let result = await loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch);
            return $48f15048fc5d75eb$var$isResponse(result) ? result : $48f15048fc5d75eb$var$_extends({}, result, {
                actionData: null,
                actionHeaders: {}
            });
        } catch (e) {
            // If the user threw/returned a Response in callLoaderOrAction for a
            // `queryRoute` call, we throw the `DataStrategyResult` to bail out early
            // and then return or throw the raw Response here accordingly
            if ($48f15048fc5d75eb$var$isDataStrategyResult(e) && $48f15048fc5d75eb$var$isResponse(e.result)) {
                if (e.type === $48f15048fc5d75eb$var$ResultType.error) throw e.result;
                return e.result;
            }
            // Redirects are always returned since they don't propagate to catch
            // boundaries
            if ($48f15048fc5d75eb$var$isRedirectResponse(e)) return e;
            throw e;
        }
    }
    async function submit(request, matches, actionMatch, requestContext, dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {
        let result;
        if (!actionMatch.route.action && !actionMatch.route.lazy) {
            let error = $48f15048fc5d75eb$var$getInternalRouterError(405, {
                method: request.method,
                pathname: new URL(request.url).pathname,
                routeId: actionMatch.route.id
            });
            if (isRouteRequest) throw error;
            result = {
                type: $48f15048fc5d75eb$var$ResultType.error,
                error: error
            };
        } else {
            let results = await callDataStrategy("action", request, [
                actionMatch
            ], matches, isRouteRequest, requestContext, dataStrategy);
            result = results[actionMatch.route.id];
            if (request.signal.aborted) $48f15048fc5d75eb$var$throwStaticHandlerAbortedError(request, isRouteRequest, future);
        }
        if ($48f15048fc5d75eb$var$isRedirectResult(result)) // Uhhhh - this should never happen, we should always throw these from
        // callLoaderOrAction, but the type narrowing here keeps TS happy and we
        // can get back on the "throw all redirect responses" train here should
        // this ever happen :/
        throw new Response(null, {
            status: result.response.status,
            headers: {
                Location: result.response.headers.get("Location")
            }
        });
        if ($48f15048fc5d75eb$var$isDeferredResult(result)) {
            let error = $48f15048fc5d75eb$var$getInternalRouterError(400, {
                type: "defer-action"
            });
            if (isRouteRequest) throw error;
            result = {
                type: $48f15048fc5d75eb$var$ResultType.error,
                error: error
            };
        }
        if (isRouteRequest) {
            // Note: This should only be non-Response values if we get here, since
            // isRouteRequest should throw any Response received in callLoaderOrAction
            if ($48f15048fc5d75eb$var$isErrorResult(result)) throw result.error;
            return {
                matches: [
                    actionMatch
                ],
                loaderData: {},
                actionData: {
                    [actionMatch.route.id]: result.data
                },
                errors: null,
                // Note: statusCode + headers are unused here since queryRoute will
                // return the raw Response or value
                statusCode: 200,
                loaderHeaders: {},
                actionHeaders: {},
                activeDeferreds: null
            };
        }
        // Create a GET request for the loaders
        let loaderRequest = new Request(request.url, {
            headers: request.headers,
            redirect: request.redirect,
            signal: request.signal
        });
        if ($48f15048fc5d75eb$var$isErrorResult(result)) {
            // Store off the pending error - we use it to determine which loaders
            // to call and will commit it when we complete the navigation
            let boundaryMatch = skipLoaderErrorBubbling ? actionMatch : $48f15048fc5d75eb$var$findNearestBoundary(matches, actionMatch.route.id);
            let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null, [
                boundaryMatch.route.id,
                result
            ]);
            // action status codes take precedence over loader status codes
            return $48f15048fc5d75eb$var$_extends({}, context, {
                statusCode: $48f15048fc5d75eb$export$972111febbeef05b(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,
                actionData: null,
                actionHeaders: $48f15048fc5d75eb$var$_extends({}, result.headers ? {
                    [actionMatch.route.id]: result.headers
                } : {})
            });
        }
        let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null);
        return $48f15048fc5d75eb$var$_extends({}, context, {
            actionData: {
                [actionMatch.route.id]: result.data
            }
        }, result.statusCode ? {
            statusCode: result.statusCode
        } : {}, {
            actionHeaders: result.headers ? {
                [actionMatch.route.id]: result.headers
            } : {}
        });
    }
    async function loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {
        let isRouteRequest = routeMatch != null;
        // Short circuit if we have no loaders to run (queryRoute())
        if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) throw $48f15048fc5d75eb$var$getInternalRouterError(400, {
            method: request.method,
            pathname: new URL(request.url).pathname,
            routeId: routeMatch == null ? void 0 : routeMatch.route.id
        });
        let requestMatches = routeMatch ? [
            routeMatch
        ] : pendingActionResult && $48f15048fc5d75eb$var$isErrorResult(pendingActionResult[1]) ? $48f15048fc5d75eb$var$getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;
        let matchesToLoad = requestMatches.filter((m)=>m.route.loader || m.route.lazy);
        // Short circuit if we have no loaders to run (query())
        if (matchesToLoad.length === 0) return {
            matches: matches,
            // Add a null for all matched routes for proper revalidation on the client
            loaderData: matches.reduce((acc, m)=>Object.assign(acc, {
                    [m.route.id]: null
                }), {}),
            errors: pendingActionResult && $48f15048fc5d75eb$var$isErrorResult(pendingActionResult[1]) ? {
                [pendingActionResult[0]]: pendingActionResult[1].error
            } : null,
            statusCode: 200,
            loaderHeaders: {},
            activeDeferreds: null
        };
        let results = await callDataStrategy("loader", request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy);
        if (request.signal.aborted) $48f15048fc5d75eb$var$throwStaticHandlerAbortedError(request, isRouteRequest, future);
        // Process and commit output from loaders
        let activeDeferreds = new Map();
        let context = $48f15048fc5d75eb$var$processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling);
        // Add a null for any non-loader matches for proper revalidation on the client
        let executedLoaders = new Set(matchesToLoad.map((match)=>match.route.id));
        matches.forEach((match)=>{
            if (!executedLoaders.has(match.route.id)) context.loaderData[match.route.id] = null;
        });
        return $48f15048fc5d75eb$var$_extends({}, context, {
            matches: matches,
            activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null
        });
    }
    // Utility wrapper for calling dataStrategy server-side without having to
    // pass around the manifest, mapRouteProperties, etc.
    async function callDataStrategy(type, request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy) {
        let results = await $48f15048fc5d75eb$var$callDataStrategyImpl(dataStrategy || $48f15048fc5d75eb$var$defaultDataStrategy, type, null, request, matchesToLoad, matches, null, manifest, mapRouteProperties, requestContext);
        let dataResults = {};
        await Promise.all(matches.map(async (match)=>{
            if (!(match.route.id in results)) return;
            let result = results[match.route.id];
            if ($48f15048fc5d75eb$var$isRedirectDataStrategyResultResult(result)) {
                let response = result.result;
                // Throw redirects and let the server handle them with an HTTP redirect
                throw $48f15048fc5d75eb$var$normalizeRelativeRoutingRedirectResponse(response, request, match.route.id, matches, basename, future.v7_relativeSplatPath);
            }
            if ($48f15048fc5d75eb$var$isResponse(result.result) && isRouteRequest) // For SSR single-route requests, we want to hand Responses back
            // directly without unwrapping
            throw result;
            dataResults[match.route.id] = await $48f15048fc5d75eb$var$convertDataStrategyResultToDataResult(result);
        }));
        return dataResults;
    }
    return {
        dataRoutes: dataRoutes,
        query: query,
        queryRoute: queryRoute
    };
}
//#endregion
////////////////////////////////////////////////////////////////////////////////
//#region Helpers
////////////////////////////////////////////////////////////////////////////////
/**
 * Given an existing StaticHandlerContext and an error thrown at render time,
 * provide an updated StaticHandlerContext suitable for a second SSR render
 */ function $48f15048fc5d75eb$export$fec11da027c70692(routes, context, error) {
    let newContext = $48f15048fc5d75eb$var$_extends({}, context, {
        statusCode: $48f15048fc5d75eb$export$972111febbeef05b(error) ? error.status : 500,
        errors: {
            [context._deepestRenderedBoundaryId || routes[0].id]: error
        }
    });
    return newContext;
}
function $48f15048fc5d75eb$var$throwStaticHandlerAbortedError(request, isRouteRequest, future) {
    if (future.v7_throwAbortReason && request.signal.reason !== undefined) throw request.signal.reason;
    let method = isRouteRequest ? "queryRoute" : "query";
    throw new Error(method + "() call aborted: " + request.method + " " + request.url);
}
function $48f15048fc5d75eb$var$isSubmissionNavigation(opts) {
    return opts != null && ("formData" in opts && opts.formData != null || "body" in opts && opts.body !== undefined);
}
function $48f15048fc5d75eb$var$normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {
    let contextualMatches;
    let activeRouteMatch;
    if (fromRouteId) {
        // Grab matches up to the calling route so our route-relative logic is
        // relative to the correct source route
        contextualMatches = [];
        for (let match of matches){
            contextualMatches.push(match);
            if (match.route.id === fromRouteId) {
                activeRouteMatch = match;
                break;
            }
        }
    } else {
        contextualMatches = matches;
        activeRouteMatch = matches[matches.length - 1];
    }
    // Resolve the relative path
    let path = $48f15048fc5d75eb$export$cae722b0cc860f13(to ? to : ".", $48f15048fc5d75eb$export$a5784978eca585fa(contextualMatches, v7_relativeSplatPath), $48f15048fc5d75eb$export$b69e3301ce081aa3(location.pathname, basename) || location.pathname, relative === "path");
    // When `to` is not specified we inherit search/hash from the current
    // location, unlike when to="." and we just inherit the path.
    // See https://github.com/remix-run/remix/issues/927
    if (to == null) {
        path.search = location.search;
        path.hash = location.hash;
    }
    // Account for `?index` params when routing to the current location
    if ((to == null || to === "" || to === ".") && activeRouteMatch) {
        let nakedIndex = $48f15048fc5d75eb$var$hasNakedIndexQuery(path.search);
        if (activeRouteMatch.route.index && !nakedIndex) // Add one when we're targeting an index route
        path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
        else if (!activeRouteMatch.route.index && nakedIndex) {
            // Remove existing ones when we're not
            let params = new URLSearchParams(path.search);
            let indexValues = params.getAll("index");
            params.delete("index");
            indexValues.filter((v)=>v).forEach((v)=>params.append("index", v));
            let qs = params.toString();
            path.search = qs ? "?" + qs : "";
        }
    }
    // If we're operating within a basename, prepend it to the pathname.  If
    // this is a root navigation, then just use the raw basename which allows
    // the basename to have full control over the presence of a trailing slash
    // on root actions
    if (prependBasename && basename !== "/") path.pathname = path.pathname === "/" ? basename : $48f15048fc5d75eb$export$86d9a7913e44197e([
        basename,
        path.pathname
    ]);
    return $48f15048fc5d75eb$export$fe53371bee54353d(path);
}
// Normalize navigation options by converting formMethod=GET formData objects to
// URLSearchParams so they behave identically to links with query params
function $48f15048fc5d75eb$var$normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {
    // Return location verbatim on non-submission navigations
    if (!opts || !$48f15048fc5d75eb$var$isSubmissionNavigation(opts)) return {
        path: path
    };
    if (opts.formMethod && !$48f15048fc5d75eb$var$isValidMethod(opts.formMethod)) return {
        path: path,
        error: $48f15048fc5d75eb$var$getInternalRouterError(405, {
            method: opts.formMethod
        })
    };
    let getInvalidBodyError = ()=>({
            path: path,
            error: $48f15048fc5d75eb$var$getInternalRouterError(400, {
                type: "invalid-body"
            })
        });
    // Create a Submission on non-GET navigations
    let rawFormMethod = opts.formMethod || "get";
    let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();
    let formAction = $48f15048fc5d75eb$var$stripHashFromPath(path);
    if (opts.body !== undefined) {
        if (opts.formEncType === "text/plain") {
            // text only support POST/PUT/PATCH/DELETE submissions
            if (!$48f15048fc5d75eb$var$isMutationMethod(formMethod)) return getInvalidBodyError();
            let text = typeof opts.body === "string" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data
            Array.from(opts.body.entries()).reduce((acc, _ref3)=>{
                let [name, value] = _ref3;
                return "" + acc + name + "=" + value + "\n";
            }, "") : String(opts.body);
            return {
                path: path,
                submission: {
                    formMethod: formMethod,
                    formAction: formAction,
                    formEncType: opts.formEncType,
                    formData: undefined,
                    json: undefined,
                    text: text
                }
            };
        } else if (opts.formEncType === "application/json") {
            // json only supports POST/PUT/PATCH/DELETE submissions
            if (!$48f15048fc5d75eb$var$isMutationMethod(formMethod)) return getInvalidBodyError();
            try {
                let json = typeof opts.body === "string" ? JSON.parse(opts.body) : opts.body;
                return {
                    path: path,
                    submission: {
                        formMethod: formMethod,
                        formAction: formAction,
                        formEncType: opts.formEncType,
                        formData: undefined,
                        json: json,
                        text: undefined
                    }
                };
            } catch (e) {
                return getInvalidBodyError();
            }
        }
    }
    $48f15048fc5d75eb$export$3e9cee6b33872309(typeof FormData === "function", "FormData is not available in this environment");
    let searchParams;
    let formData;
    if (opts.formData) {
        searchParams = $48f15048fc5d75eb$var$convertFormDataToSearchParams(opts.formData);
        formData = opts.formData;
    } else if (opts.body instanceof FormData) {
        searchParams = $48f15048fc5d75eb$var$convertFormDataToSearchParams(opts.body);
        formData = opts.body;
    } else if (opts.body instanceof URLSearchParams) {
        searchParams = opts.body;
        formData = $48f15048fc5d75eb$var$convertSearchParamsToFormData(searchParams);
    } else if (opts.body == null) {
        searchParams = new URLSearchParams();
        formData = new FormData();
    } else try {
        searchParams = new URLSearchParams(opts.body);
        formData = $48f15048fc5d75eb$var$convertSearchParamsToFormData(searchParams);
    } catch (e) {
        return getInvalidBodyError();
    }
    let submission = {
        formMethod: formMethod,
        formAction: formAction,
        formEncType: opts && opts.formEncType || "application/x-www-form-urlencoded",
        formData: formData,
        json: undefined,
        text: undefined
    };
    if ($48f15048fc5d75eb$var$isMutationMethod(submission.formMethod)) return {
        path: path,
        submission: submission
    };
    // Flatten submission onto URLSearchParams for GET submissions
    let parsedPath = $48f15048fc5d75eb$export$8ccf933b0513f8d0(path);
    // On GET navigation submissions we can drop the ?index param from the
    // resulting location since all loaders will run.  But fetcher GET submissions
    // only run a single loader so we need to preserve any incoming ?index params
    if (isFetcher && parsedPath.search && $48f15048fc5d75eb$var$hasNakedIndexQuery(parsedPath.search)) searchParams.append("index", "");
    parsedPath.search = "?" + searchParams;
    return {
        path: $48f15048fc5d75eb$export$fe53371bee54353d(parsedPath),
        submission: submission
    };
}
// Filter out all routes at/below any caught error as they aren't going to
// render so we don't need to load them
function $48f15048fc5d75eb$var$getLoaderMatchesUntilBoundary(matches, boundaryId, includeBoundary) {
    if (includeBoundary === void 0) includeBoundary = false;
    let index = matches.findIndex((m)=>m.route.id === boundaryId);
    if (index >= 0) return matches.slice(0, includeBoundary ? index + 1 : index);
    return matches;
}
function $48f15048fc5d75eb$var$getMatchesToLoad(history, state, matches, submission, location, initialHydration, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {
    let actionResult = pendingActionResult ? $48f15048fc5d75eb$var$isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : undefined;
    let currentUrl = history.createURL(state.location);
    let nextUrl = history.createURL(location);
    // Pick navigation matches that are net-new or qualify for revalidation
    let boundaryMatches = matches;
    if (initialHydration && state.errors) // On initial hydration, only consider matches up to _and including_ the boundary.
    // This is inclusive to handle cases where a server loader ran successfully,
    // a child server loader bubbled up to this route, but this route has
    // `clientLoader.hydrate` so we want to still run the `clientLoader` so that
    // we have a complete version of `loaderData`
    boundaryMatches = $48f15048fc5d75eb$var$getLoaderMatchesUntilBoundary(matches, Object.keys(state.errors)[0], true);
    else if (pendingActionResult && $48f15048fc5d75eb$var$isErrorResult(pendingActionResult[1])) // If an action threw an error, we call loaders up to, but not including the
    // boundary
    boundaryMatches = $48f15048fc5d75eb$var$getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]);
    // Don't revalidate loaders by default after action 4xx/5xx responses
    // when the flag is enabled.  They can still opt-into revalidation via
    // `shouldRevalidate` via `actionResult`
    let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;
    let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;
    let navigationMatches = boundaryMatches.filter((match, index)=>{
        let { route: route } = match;
        if (route.lazy) // We haven't loaded this route yet so we don't know if it's got a loader!
        return true;
        if (route.loader == null) return false;
        if (initialHydration) return $48f15048fc5d75eb$var$shouldLoadRouteOnHydration(route, state.loaderData, state.errors);
        // Always call the loader on new route instances and pending defer cancellations
        if ($48f15048fc5d75eb$var$isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some((id)=>id === match.route.id)) return true;
        // This is the default implementation for when we revalidate.  If the route
        // provides it's own implementation, then we give them full control but
        // provide this value so they can leverage it if needed after they check
        // their own specific use cases
        let currentRouteMatch = state.matches[index];
        let nextRouteMatch = match;
        return $48f15048fc5d75eb$var$shouldRevalidateLoader(match, $48f15048fc5d75eb$var$_extends({
            currentUrl: currentUrl,
            currentParams: currentRouteMatch.params,
            nextUrl: nextUrl,
            nextParams: nextRouteMatch.params
        }, submission, {
            actionResult: actionResult,
            actionStatus: actionStatus,
            defaultShouldRevalidate: shouldSkipRevalidation ? false : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate
            isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders
            currentUrl.search !== nextUrl.search || $48f15048fc5d75eb$var$isNewRouteInstance(currentRouteMatch, nextRouteMatch)
        }));
    });
    // Pick fetcher.loads that need to be revalidated
    let revalidatingFetchers = [];
    fetchLoadMatches.forEach((f, key)=>{
        // Don't revalidate:
        //  - on initial hydration (shouldn't be any fetchers then anyway)
        //  - if fetcher won't be present in the subsequent render
        //    - no longer matches the URL (v7_fetcherPersist=false)
        //    - was unmounted but persisted due to v7_fetcherPersist=true
        if (initialHydration || !matches.some((m)=>m.route.id === f.routeId) || deletedFetchers.has(key)) return;
        let fetcherMatches = $48f15048fc5d75eb$export$2708184779ceb39d(routesToUse, f.path, basename);
        // If the fetcher path no longer matches, push it in with null matches so
        // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is
        // currently only a use-case for Remix HMR where the route tree can change
        // at runtime and remove a route previously loaded via a fetcher
        if (!fetcherMatches) {
            revalidatingFetchers.push({
                key: key,
                routeId: f.routeId,
                path: f.path,
                matches: null,
                match: null,
                controller: null
            });
            return;
        }
        // Revalidating fetchers are decoupled from the route matches since they
        // load from a static href.  They revalidate based on explicit revalidation
        // (submission, useRevalidator, or X-Remix-Revalidate)
        let fetcher = state.fetchers.get(key);
        let fetcherMatch = $48f15048fc5d75eb$var$getTargetMatch(fetcherMatches, f.path);
        let shouldRevalidate = false;
        if (fetchRedirectIds.has(key)) // Never trigger a revalidation of an actively redirecting fetcher
        shouldRevalidate = false;
        else if (cancelledFetcherLoads.has(key)) {
            // Always mark for revalidation if the fetcher was cancelled
            cancelledFetcherLoads.delete(key);
            shouldRevalidate = true;
        } else if (fetcher && fetcher.state !== "idle" && fetcher.data === undefined) // If the fetcher hasn't ever completed loading yet, then this isn't a
        // revalidation, it would just be a brand new load if an explicit
        // revalidation is required
        shouldRevalidate = isRevalidationRequired;
        else // Otherwise fall back on any user-defined shouldRevalidate, defaulting
        // to explicit revalidations only
        shouldRevalidate = $48f15048fc5d75eb$var$shouldRevalidateLoader(fetcherMatch, $48f15048fc5d75eb$var$_extends({
            currentUrl: currentUrl,
            currentParams: state.matches[state.matches.length - 1].params,
            nextUrl: nextUrl,
            nextParams: matches[matches.length - 1].params
        }, submission, {
            actionResult: actionResult,
            actionStatus: actionStatus,
            defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired
        }));
        if (shouldRevalidate) revalidatingFetchers.push({
            key: key,
            routeId: f.routeId,
            path: f.path,
            matches: fetcherMatches,
            match: fetcherMatch,
            controller: new AbortController()
        });
    });
    return [
        navigationMatches,
        revalidatingFetchers
    ];
}
function $48f15048fc5d75eb$var$shouldLoadRouteOnHydration(route, loaderData, errors) {
    // We dunno if we have a loader - gotta find out!
    if (route.lazy) return true;
    // No loader, nothing to initialize
    if (!route.loader) return false;
    let hasData = loaderData != null && loaderData[route.id] !== undefined;
    let hasError = errors != null && errors[route.id] !== undefined;
    // Don't run if we error'd during SSR
    if (!hasData && hasError) return false;
    // Explicitly opting-in to running on hydration
    if (typeof route.loader === "function" && route.loader.hydrate === true) return true;
    // Otherwise, run if we're not yet initialized with anything
    return !hasData && !hasError;
}
function $48f15048fc5d75eb$var$isNewLoader(currentLoaderData, currentMatch, match) {
    let isNew = // [a] -> [a, b]
    !currentMatch || // [a, b] -> [a, c]
    match.route.id !== currentMatch.route.id;
    // Handle the case that we don't have data for a re-used route, potentially
    // from a prior error or from a cancelled pending deferred
    let isMissingData = currentLoaderData[match.route.id] === undefined;
    // Always load if this is a net-new route or we don't yet have data
    return isNew || isMissingData;
}
function $48f15048fc5d75eb$var$isNewRouteInstance(currentMatch, match) {
    let currentPath = currentMatch.route.path;
    return(// param change for this match, /users/123 -> /users/456
    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path
    // e.g. /files/images/avatar.jpg -> files/finances.xls
    currentPath != null && currentPath.endsWith("*") && currentMatch.params["*"] !== match.params["*"]);
}
function $48f15048fc5d75eb$var$shouldRevalidateLoader(loaderMatch, arg) {
    if (loaderMatch.route.shouldRevalidate) {
        let routeChoice = loaderMatch.route.shouldRevalidate(arg);
        if (typeof routeChoice === "boolean") return routeChoice;
    }
    return arg.defaultShouldRevalidate;
}
function $48f15048fc5d75eb$var$patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties) {
    var _childrenToPatch;
    let childrenToPatch;
    if (routeId) {
        let route = manifest[routeId];
        $48f15048fc5d75eb$export$3e9cee6b33872309(route, "No route found to patch children into: routeId = " + routeId);
        if (!route.children) route.children = [];
        childrenToPatch = route.children;
    } else childrenToPatch = routesToUse;
    // Don't patch in routes we already know about so that `patch` is idempotent
    // to simplify user-land code. This is useful because we re-call the
    // `patchRoutesOnNavigation` function for matched routes with params.
    let uniqueChildren = children.filter((newRoute)=>!childrenToPatch.some((existingRoute)=>$48f15048fc5d75eb$var$isSameRoute(newRoute, existingRoute)));
    let newRoutes = $48f15048fc5d75eb$export$4a6d22b32134ea5d(uniqueChildren, mapRouteProperties, [
        routeId || "_",
        "patch",
        String(((_childrenToPatch = childrenToPatch) == null ? void 0 : _childrenToPatch.length) || "0")
    ], manifest);
    childrenToPatch.push(...newRoutes);
}
function $48f15048fc5d75eb$var$isSameRoute(newRoute, existingRoute) {
    // Most optimal check is by id
    if ("id" in newRoute && "id" in existingRoute && newRoute.id === existingRoute.id) return true;
    // Second is by pathing differences
    if (!(newRoute.index === existingRoute.index && newRoute.path === existingRoute.path && newRoute.caseSensitive === existingRoute.caseSensitive)) return false;
    // Pathless layout routes are trickier since we need to check children.
    // If they have no children then they're the same as far as we can tell
    if ((!newRoute.children || newRoute.children.length === 0) && (!existingRoute.children || existingRoute.children.length === 0)) return true;
    // Otherwise, we look to see if every child in the new route is already
    // represented in the existing route's children
    return newRoute.children.every((aChild, i)=>{
        var _existingRoute$childr;
        return (_existingRoute$childr = existingRoute.children) == null ? void 0 : _existingRoute$childr.some((bChild)=>$48f15048fc5d75eb$var$isSameRoute(aChild, bChild));
    });
}
/**
 * Execute route.lazy() methods to lazily load route modules (loader, action,
 * shouldRevalidate) and update the routeManifest in place which shares objects
 * with dataRoutes so those get updated as well.
 */ async function $48f15048fc5d75eb$var$loadLazyRouteModule(route, mapRouteProperties, manifest) {
    if (!route.lazy) return;
    let lazyRoute = await route.lazy();
    // If the lazy route function was executed and removed by another parallel
    // call then we can return - first lazy() to finish wins because the return
    // value of lazy is expected to be static
    if (!route.lazy) return;
    let routeToUpdate = manifest[route.id];
    $48f15048fc5d75eb$export$3e9cee6b33872309(routeToUpdate, "No route found in manifest");
    // Update the route in place.  This should be safe because there's no way
    // we could yet be sitting on this route as we can't get there without
    // resolving lazy() first.
    //
    // This is different than the HMR "update" use-case where we may actively be
    // on the route being updated.  The main concern boils down to "does this
    // mutation affect any ongoing navigations or any current state.matches
    // values?".  If not, it should be safe to update in place.
    let routeUpdates = {};
    for(let lazyRouteProperty in lazyRoute){
        let staticRouteValue = routeToUpdate[lazyRouteProperty];
        let isPropertyStaticallyDefined = staticRouteValue !== undefined && // This property isn't static since it should always be updated based
        // on the route updates
        lazyRouteProperty !== "hasErrorBoundary";
        $48f15048fc5d75eb$export$c0e02632e14916fd(!isPropertyStaticallyDefined, "Route \"" + routeToUpdate.id + "\" has a static property \"" + lazyRouteProperty + "\" " + "defined but its lazy function is also returning a value for this property. " + ("The lazy route property \"" + lazyRouteProperty + "\" will be ignored."));
        if (!isPropertyStaticallyDefined && !$48f15048fc5d75eb$var$immutableRouteKeys.has(lazyRouteProperty)) routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];
    }
    // Mutate the route with the provided updates.  Do this first so we pass
    // the updated version to mapRouteProperties
    Object.assign(routeToUpdate, routeUpdates);
    // Mutate the `hasErrorBoundary` property on the route based on the route
    // updates and remove the `lazy` function so we don't resolve the lazy
    // route again.
    Object.assign(routeToUpdate, $48f15048fc5d75eb$var$_extends({}, mapRouteProperties(routeToUpdate), {
        lazy: undefined
    }));
}
// Default implementation of `dataStrategy` which fetches all loaders in parallel
async function $48f15048fc5d75eb$var$defaultDataStrategy(_ref4) {
    let { matches: matches } = _ref4;
    let matchesToLoad = matches.filter((m)=>m.shouldLoad);
    let results = await Promise.all(matchesToLoad.map((m)=>m.resolve()));
    return results.reduce((acc, result, i)=>Object.assign(acc, {
            [matchesToLoad[i].route.id]: result
        }), {});
}
async function $48f15048fc5d75eb$var$callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties, requestContext) {
    let loadRouteDefinitionsPromises = matches.map((m)=>m.route.lazy ? $48f15048fc5d75eb$var$loadLazyRouteModule(m.route, mapRouteProperties, manifest) : undefined);
    let dsMatches = matches.map((match, i)=>{
        let loadRoutePromise = loadRouteDefinitionsPromises[i];
        let shouldLoad = matchesToLoad.some((m)=>m.route.id === match.route.id);
        // `resolve` encapsulates route.lazy(), executing the loader/action,
        // and mapping return values/thrown errors to a `DataStrategyResult`.  Users
        // can pass a callback to take fine-grained control over the execution
        // of the loader/action
        let resolve = async (handlerOverride)=>{
            if (handlerOverride && request.method === "GET" && (match.route.lazy || match.route.loader)) shouldLoad = true;
            return shouldLoad ? $48f15048fc5d75eb$var$callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, requestContext) : Promise.resolve({
                type: $48f15048fc5d75eb$var$ResultType.data,
                result: undefined
            });
        };
        return $48f15048fc5d75eb$var$_extends({}, match, {
            shouldLoad: shouldLoad,
            resolve: resolve
        });
    });
    // Send all matches here to allow for a middleware-type implementation.
    // handler will be a no-op for unneeded routes and we filter those results
    // back out below.
    let results = await dataStrategyImpl({
        matches: dsMatches,
        request: request,
        params: matches[0].params,
        fetcherKey: fetcherKey,
        context: requestContext
    });
    // Wait for all routes to load here but 'swallow the error since we want
    // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -
    // called from `match.resolve()`
    try {
        await Promise.all(loadRouteDefinitionsPromises);
    } catch (e) {
    // No-op
    }
    return results;
}
// Default logic for calling a loader/action is the user has no specified a dataStrategy
async function $48f15048fc5d75eb$var$callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, staticContext) {
    let result;
    let onReject;
    let runHandler = (handler)=>{
        // Setup a promise we can race against so that abort signals short circuit
        let reject;
        // This will never resolve so safe to type it as Promise<DataStrategyResult> to
        // satisfy the function return value
        let abortPromise = new Promise((_, r)=>reject = r);
        onReject = ()=>reject();
        request.signal.addEventListener("abort", onReject);
        let actualHandler = (ctx)=>{
            if (typeof handler !== "function") return Promise.reject(new Error("You cannot call the handler for a route which defines a boolean " + ("\"" + type + "\" [routeId: " + match.route.id + "]")));
            return handler({
                request: request,
                params: match.params,
                context: staticContext
            }, ...ctx !== undefined ? [
                ctx
            ] : []);
        };
        let handlerPromise = (async ()=>{
            try {
                let val = await (handlerOverride ? handlerOverride((ctx)=>actualHandler(ctx)) : actualHandler());
                return {
                    type: "data",
                    result: val
                };
            } catch (e) {
                return {
                    type: "error",
                    result: e
                };
            }
        })();
        return Promise.race([
            handlerPromise,
            abortPromise
        ]);
    };
    try {
        let handler = match.route[type];
        // If we have a route.lazy promise, await that first
        if (loadRoutePromise) {
            if (handler) {
                // Run statically defined handler in parallel with lazy()
                let handlerError;
                let [value] = await Promise.all([
                    // If the handler throws, don't let it immediately bubble out,
                    // since we need to let the lazy() execution finish so we know if this
                    // route has a boundary that can handle the error
                    runHandler(handler).catch((e)=>{
                        handlerError = e;
                    }),
                    loadRoutePromise
                ]);
                if (handlerError !== undefined) throw handlerError;
                result = value;
            } else {
                // Load lazy route module, then run any returned handler
                await loadRoutePromise;
                handler = match.route[type];
                if (handler) // Handler still runs even if we got interrupted to maintain consistency
                // with un-abortable behavior of handler execution on non-lazy or
                // previously-lazy-loaded routes
                result = await runHandler(handler);
                else if (type === "action") {
                    let url = new URL(request.url);
                    let pathname = url.pathname + url.search;
                    throw $48f15048fc5d75eb$var$getInternalRouterError(405, {
                        method: request.method,
                        pathname: pathname,
                        routeId: match.route.id
                    });
                } else // lazy() route has no loader to run.  Short circuit here so we don't
                // hit the invariant below that errors on returning undefined.
                return {
                    type: $48f15048fc5d75eb$var$ResultType.data,
                    result: undefined
                };
            }
        } else if (!handler) {
            let url = new URL(request.url);
            let pathname = url.pathname + url.search;
            throw $48f15048fc5d75eb$var$getInternalRouterError(404, {
                pathname: pathname
            });
        } else result = await runHandler(handler);
        $48f15048fc5d75eb$export$3e9cee6b33872309(result.result !== undefined, "You defined " + (type === "action" ? "an action" : "a loader") + " for route " + ("\"" + match.route.id + "\" but didn't return anything from your `" + type + "` ") + "function. Please return a value or `null`.");
    } catch (e) {
        // We should already be catching and converting normal handler executions to
        // DataStrategyResults and returning them, so anything that throws here is an
        // unexpected error we still need to wrap
        return {
            type: $48f15048fc5d75eb$var$ResultType.error,
            result: e
        };
    } finally{
        if (onReject) request.signal.removeEventListener("abort", onReject);
    }
    return result;
}
async function $48f15048fc5d75eb$var$convertDataStrategyResultToDataResult(dataStrategyResult) {
    let { result: result, type: type } = dataStrategyResult;
    if ($48f15048fc5d75eb$var$isResponse(result)) {
        let data;
        try {
            let contentType = result.headers.get("Content-Type");
            // Check between word boundaries instead of startsWith() due to the last
            // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type
            if (contentType && /\bapplication\/json\b/.test(contentType)) {
                if (result.body == null) data = null;
                else data = await result.json();
            } else data = await result.text();
        } catch (e) {
            return {
                type: $48f15048fc5d75eb$var$ResultType.error,
                error: e
            };
        }
        if (type === $48f15048fc5d75eb$var$ResultType.error) return {
            type: $48f15048fc5d75eb$var$ResultType.error,
            error: new $48f15048fc5d75eb$export$6c6580e81da25755(result.status, result.statusText, data),
            statusCode: result.status,
            headers: result.headers
        };
        return {
            type: $48f15048fc5d75eb$var$ResultType.data,
            data: data,
            statusCode: result.status,
            headers: result.headers
        };
    }
    if (type === $48f15048fc5d75eb$var$ResultType.error) {
        if ($48f15048fc5d75eb$export$e0163cfdf7bc9cfa(result)) {
            var _result$init3, _result$init4;
            if (result.data instanceof Error) {
                var _result$init, _result$init2;
                return {
                    type: $48f15048fc5d75eb$var$ResultType.error,
                    error: result.data,
                    statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,
                    headers: (_result$init2 = result.init) != null && _result$init2.headers ? new Headers(result.init.headers) : undefined
                };
            }
            // Convert thrown data() to ErrorResponse instances
            return {
                type: $48f15048fc5d75eb$var$ResultType.error,
                error: new $48f15048fc5d75eb$export$6c6580e81da25755(((_result$init3 = result.init) == null ? void 0 : _result$init3.status) || 500, undefined, result.data),
                statusCode: $48f15048fc5d75eb$export$972111febbeef05b(result) ? result.status : undefined,
                headers: (_result$init4 = result.init) != null && _result$init4.headers ? new Headers(result.init.headers) : undefined
            };
        }
        return {
            type: $48f15048fc5d75eb$var$ResultType.error,
            error: result,
            statusCode: $48f15048fc5d75eb$export$972111febbeef05b(result) ? result.status : undefined
        };
    }
    if ($48f15048fc5d75eb$export$fbcedacb60443473(result)) {
        var _result$init5, _result$init6;
        return {
            type: $48f15048fc5d75eb$var$ResultType.deferred,
            deferredData: result,
            statusCode: (_result$init5 = result.init) == null ? void 0 : _result$init5.status,
            headers: ((_result$init6 = result.init) == null ? void 0 : _result$init6.headers) && new Headers(result.init.headers)
        };
    }
    if ($48f15048fc5d75eb$export$e0163cfdf7bc9cfa(result)) {
        var _result$init7, _result$init8;
        return {
            type: $48f15048fc5d75eb$var$ResultType.data,
            data: result.data,
            statusCode: (_result$init7 = result.init) == null ? void 0 : _result$init7.status,
            headers: (_result$init8 = result.init) != null && _result$init8.headers ? new Headers(result.init.headers) : undefined
        };
    }
    return {
        type: $48f15048fc5d75eb$var$ResultType.data,
        data: result
    };
}
// Support relative routing in internal redirects
function $48f15048fc5d75eb$var$normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {
    let location = response.headers.get("Location");
    $48f15048fc5d75eb$export$3e9cee6b33872309(location, "Redirects returned/thrown from loaders/actions must have a Location header");
    if (!$48f15048fc5d75eb$var$ABSOLUTE_URL_REGEX.test(location)) {
        let trimmedMatches = matches.slice(0, matches.findIndex((m)=>m.route.id === routeId) + 1);
        location = $48f15048fc5d75eb$var$normalizeTo(new URL(request.url), trimmedMatches, basename, true, location, v7_relativeSplatPath);
        response.headers.set("Location", location);
    }
    return response;
}
function $48f15048fc5d75eb$var$normalizeRedirectLocation(location, currentUrl, basename) {
    if ($48f15048fc5d75eb$var$ABSOLUTE_URL_REGEX.test(location)) {
        // Strip off the protocol+origin for same-origin + same-basename absolute redirects
        let normalizedLocation = location;
        let url = normalizedLocation.startsWith("//") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);
        let isSameBasename = $48f15048fc5d75eb$export$b69e3301ce081aa3(url.pathname, basename) != null;
        if (url.origin === currentUrl.origin && isSameBasename) return url.pathname + url.search + url.hash;
    }
    return location;
}
// Utility method for creating the Request instances for loaders/actions during
// client-side navigations and fetches.  During SSR we will always have a
// Request instance from the static handler (query/queryRoute)
function $48f15048fc5d75eb$var$createClientSideRequest(history, location, signal, submission) {
    let url = history.createURL($48f15048fc5d75eb$var$stripHashFromPath(location)).toString();
    let init = {
        signal: signal
    };
    if (submission && $48f15048fc5d75eb$var$isMutationMethod(submission.formMethod)) {
        let { formMethod: formMethod, formEncType: formEncType } = submission;
        // Didn't think we needed this but it turns out unlike other methods, patch
        // won't be properly normalized to uppercase and results in a 405 error.
        // See: https://fetch.spec.whatwg.org/#concept-method
        init.method = formMethod.toUpperCase();
        if (formEncType === "application/json") {
            init.headers = new Headers({
                "Content-Type": formEncType
            });
            init.body = JSON.stringify(submission.json);
        } else if (formEncType === "text/plain") // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)
        init.body = submission.text;
        else if (formEncType === "application/x-www-form-urlencoded" && submission.formData) // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)
        init.body = $48f15048fc5d75eb$var$convertFormDataToSearchParams(submission.formData);
        else // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)
        init.body = submission.formData;
    }
    return new Request(url, init);
}
function $48f15048fc5d75eb$var$convertFormDataToSearchParams(formData) {
    let searchParams = new URLSearchParams();
    for (let [key, value] of formData.entries())// https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs
    searchParams.append(key, typeof value === "string" ? value : value.name);
    return searchParams;
}
function $48f15048fc5d75eb$var$convertSearchParamsToFormData(searchParams) {
    let formData = new FormData();
    for (let [key, value] of searchParams.entries())formData.append(key, value);
    return formData;
}
function $48f15048fc5d75eb$var$processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {
    // Fill in loaderData/errors from our loaders
    let loaderData = {};
    let errors = null;
    let statusCode;
    let foundError = false;
    let loaderHeaders = {};
    let pendingError = pendingActionResult && $48f15048fc5d75eb$var$isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : undefined;
    // Process loader results into state.loaderData/state.errors
    matches.forEach((match)=>{
        if (!(match.route.id in results)) return;
        let id = match.route.id;
        let result = results[id];
        $48f15048fc5d75eb$export$3e9cee6b33872309(!$48f15048fc5d75eb$var$isRedirectResult(result), "Cannot handle redirect results in processLoaderData");
        if ($48f15048fc5d75eb$var$isErrorResult(result)) {
            let error = result.error;
            // If we have a pending action error, we report it at the highest-route
            // that throws a loader error, and then clear it out to indicate that
            // it was consumed
            if (pendingError !== undefined) {
                error = pendingError;
                pendingError = undefined;
            }
            errors = errors || {};
            if (skipLoaderErrorBubbling) errors[id] = error;
            else {
                // Look upwards from the matched route for the closest ancestor error
                // boundary, defaulting to the root match.  Prefer higher error values
                // if lower errors bubble to the same boundary
                let boundaryMatch = $48f15048fc5d75eb$var$findNearestBoundary(matches, id);
                if (errors[boundaryMatch.route.id] == null) errors[boundaryMatch.route.id] = error;
            }
            // Clear our any prior loaderData for the throwing route
            loaderData[id] = undefined;
            // Once we find our first (highest) error, we set the status code and
            // prevent deeper status codes from overriding
            if (!foundError) {
                foundError = true;
                statusCode = $48f15048fc5d75eb$export$972111febbeef05b(result.error) ? result.error.status : 500;
            }
            if (result.headers) loaderHeaders[id] = result.headers;
        } else if ($48f15048fc5d75eb$var$isDeferredResult(result)) {
            activeDeferreds.set(id, result.deferredData);
            loaderData[id] = result.deferredData.data;
            // Error status codes always override success status codes, but if all
            // loaders are successful we take the deepest status code.
            if (result.statusCode != null && result.statusCode !== 200 && !foundError) statusCode = result.statusCode;
            if (result.headers) loaderHeaders[id] = result.headers;
        } else {
            loaderData[id] = result.data;
            // Error status codes always override success status codes, but if all
            // loaders are successful we take the deepest status code.
            if (result.statusCode && result.statusCode !== 200 && !foundError) statusCode = result.statusCode;
            if (result.headers) loaderHeaders[id] = result.headers;
        }
    });
    // If we didn't consume the pending action error (i.e., all loaders
    // resolved), then consume it here.  Also clear out any loaderData for the
    // throwing route
    if (pendingError !== undefined && pendingActionResult) {
        errors = {
            [pendingActionResult[0]]: pendingError
        };
        loaderData[pendingActionResult[0]] = undefined;
    }
    return {
        loaderData: loaderData,
        errors: errors,
        statusCode: statusCode || 200,
        loaderHeaders: loaderHeaders
    };
}
function $48f15048fc5d75eb$var$processLoaderData(state, matches, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {
    let { loaderData: loaderData, errors: errors } = $48f15048fc5d75eb$var$processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, false // This method is only called client side so we always want to bubble
    );
    // Process results from our revalidating fetchers
    revalidatingFetchers.forEach((rf)=>{
        let { key: key, match: match, controller: controller } = rf;
        let result = fetcherResults[key];
        $48f15048fc5d75eb$export$3e9cee6b33872309(result, "Did not find corresponding fetcher result");
        // Process fetcher non-redirect errors
        if (controller && controller.signal.aborted) // Nothing to do for aborted fetchers
        return;
        else if ($48f15048fc5d75eb$var$isErrorResult(result)) {
            let boundaryMatch = $48f15048fc5d75eb$var$findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);
            if (!(errors && errors[boundaryMatch.route.id])) errors = $48f15048fc5d75eb$var$_extends({}, errors, {
                [boundaryMatch.route.id]: result.error
            });
            state.fetchers.delete(key);
        } else if ($48f15048fc5d75eb$var$isRedirectResult(result)) // Should never get here, redirects should get processed above, but we
        // keep this to type narrow to a success result in the else
        $48f15048fc5d75eb$export$3e9cee6b33872309(false, "Unhandled fetcher revalidation redirect");
        else if ($48f15048fc5d75eb$var$isDeferredResult(result)) // Should never get here, deferred data should be awaited for fetchers
        // in resolveDeferredResults
        $48f15048fc5d75eb$export$3e9cee6b33872309(false, "Unhandled fetcher deferred data");
        else {
            let doneFetcher = $48f15048fc5d75eb$var$getDoneFetcher(result.data);
            state.fetchers.set(key, doneFetcher);
        }
    });
    return {
        loaderData: loaderData,
        errors: errors
    };
}
function $48f15048fc5d75eb$var$mergeLoaderData(loaderData, newLoaderData, matches, errors) {
    let mergedLoaderData = $48f15048fc5d75eb$var$_extends({}, newLoaderData);
    for (let match of matches){
        let id = match.route.id;
        if (newLoaderData.hasOwnProperty(id)) {
            if (newLoaderData[id] !== undefined) mergedLoaderData[id] = newLoaderData[id];
        } else if (loaderData[id] !== undefined && match.route.loader) // Preserve existing keys not included in newLoaderData and where a loader
        // wasn't removed by HMR
        mergedLoaderData[id] = loaderData[id];
        if (errors && errors.hasOwnProperty(id)) break;
    }
    return mergedLoaderData;
}
function $48f15048fc5d75eb$var$getActionDataForCommit(pendingActionResult) {
    if (!pendingActionResult) return {};
    return $48f15048fc5d75eb$var$isErrorResult(pendingActionResult[1]) ? {
        // Clear out prior actionData on errors
        actionData: {}
    } : {
        actionData: {
            [pendingActionResult[0]]: pendingActionResult[1].data
        }
    };
}
// Find the nearest error boundary, looking upwards from the leaf route (or the
// route specified by routeId) for the closest ancestor error boundary,
// defaulting to the root match
function $48f15048fc5d75eb$var$findNearestBoundary(matches, routeId) {
    let eligibleMatches = routeId ? matches.slice(0, matches.findIndex((m)=>m.route.id === routeId) + 1) : [
        ...matches
    ];
    return eligibleMatches.reverse().find((m)=>m.route.hasErrorBoundary === true) || matches[0];
}
function $48f15048fc5d75eb$var$getShortCircuitMatches(routes) {
    // Prefer a root layout route if present, otherwise shim in a route object
    let route = routes.length === 1 ? routes[0] : routes.find((r)=>r.index || !r.path || r.path === "/") || {
        id: "__shim-error-route__"
    };
    return {
        matches: [
            {
                params: {},
                pathname: "",
                pathnameBase: "",
                route: route
            }
        ],
        route: route
    };
}
function $48f15048fc5d75eb$var$getInternalRouterError(status, _temp5) {
    let { pathname: pathname, routeId: routeId, method: method, type: type, message: message } = _temp5 === void 0 ? {} : _temp5;
    let statusText = "Unknown Server Error";
    let errorMessage = "Unknown @remix-run/router error";
    if (status === 400) {
        statusText = "Bad Request";
        if (method && pathname && routeId) errorMessage = "You made a " + method + " request to \"" + pathname + "\" but " + ("did not provide a `loader` for route \"" + routeId + "\", ") + "so there is no way to handle the request.";
        else if (type === "defer-action") errorMessage = "defer() is not supported in actions";
        else if (type === "invalid-body") errorMessage = "Unable to encode submission body";
    } else if (status === 403) {
        statusText = "Forbidden";
        errorMessage = "Route \"" + routeId + "\" does not match URL \"" + pathname + "\"";
    } else if (status === 404) {
        statusText = "Not Found";
        errorMessage = "No route matches URL \"" + pathname + "\"";
    } else if (status === 405) {
        statusText = "Method Not Allowed";
        if (method && pathname && routeId) errorMessage = "You made a " + method.toUpperCase() + " request to \"" + pathname + "\" but " + ("did not provide an `action` for route \"" + routeId + "\", ") + "so there is no way to handle the request.";
        else if (method) errorMessage = "Invalid request method \"" + method.toUpperCase() + "\"";
    }
    return new $48f15048fc5d75eb$export$6c6580e81da25755(status || 500, statusText, new Error(errorMessage), true);
}
// Find any returned redirect errors, starting from the lowest match
function $48f15048fc5d75eb$var$findRedirect(results) {
    let entries = Object.entries(results);
    for(let i = entries.length - 1; i >= 0; i--){
        let [key, result] = entries[i];
        if ($48f15048fc5d75eb$var$isRedirectResult(result)) return {
            key: key,
            result: result
        };
    }
}
function $48f15048fc5d75eb$var$stripHashFromPath(path) {
    let parsedPath = typeof path === "string" ? $48f15048fc5d75eb$export$8ccf933b0513f8d0(path) : path;
    return $48f15048fc5d75eb$export$fe53371bee54353d($48f15048fc5d75eb$var$_extends({}, parsedPath, {
        hash: ""
    }));
}
function $48f15048fc5d75eb$var$isHashChangeOnly(a, b) {
    if (a.pathname !== b.pathname || a.search !== b.search) return false;
    if (a.hash === "") // /page -> /page#hash
    return b.hash !== "";
    else if (a.hash === b.hash) // /page#hash -> /page#hash
    return true;
    else if (b.hash !== "") // /page#hash -> /page#other
    return true;
    // If the hash is removed the browser will re-perform a request to the server
    // /page#hash -> /page
    return false;
}
function $48f15048fc5d75eb$var$isDataStrategyResult(result) {
    return result != null && typeof result === "object" && "type" in result && "result" in result && (result.type === $48f15048fc5d75eb$var$ResultType.data || result.type === $48f15048fc5d75eb$var$ResultType.error);
}
function $48f15048fc5d75eb$var$isRedirectDataStrategyResultResult(result) {
    return $48f15048fc5d75eb$var$isResponse(result.result) && $48f15048fc5d75eb$var$redirectStatusCodes.has(result.result.status);
}
function $48f15048fc5d75eb$var$isDeferredResult(result) {
    return result.type === $48f15048fc5d75eb$var$ResultType.deferred;
}
function $48f15048fc5d75eb$var$isErrorResult(result) {
    return result.type === $48f15048fc5d75eb$var$ResultType.error;
}
function $48f15048fc5d75eb$var$isRedirectResult(result) {
    return (result && result.type) === $48f15048fc5d75eb$var$ResultType.redirect;
}
function $48f15048fc5d75eb$export$e0163cfdf7bc9cfa(value) {
    return typeof value === "object" && value != null && "type" in value && "data" in value && "init" in value && value.type === "DataWithResponseInit";
}
function $48f15048fc5d75eb$export$fbcedacb60443473(value) {
    let deferred = value;
    return deferred && typeof deferred === "object" && typeof deferred.data === "object" && typeof deferred.subscribe === "function" && typeof deferred.cancel === "function" && typeof deferred.resolveData === "function";
}
function $48f15048fc5d75eb$var$isResponse(value) {
    return value != null && typeof value.status === "number" && typeof value.statusText === "string" && typeof value.headers === "object" && typeof value.body !== "undefined";
}
function $48f15048fc5d75eb$var$isRedirectResponse(result) {
    if (!$48f15048fc5d75eb$var$isResponse(result)) return false;
    let status = result.status;
    let location = result.headers.get("Location");
    return status >= 300 && status <= 399 && location != null;
}
function $48f15048fc5d75eb$var$isValidMethod(method) {
    return $48f15048fc5d75eb$var$validRequestMethods.has(method.toLowerCase());
}
function $48f15048fc5d75eb$var$isMutationMethod(method) {
    return $48f15048fc5d75eb$var$validMutationMethods.has(method.toLowerCase());
}
async function $48f15048fc5d75eb$var$resolveNavigationDeferredResults(matches, results, signal, currentMatches, currentLoaderData) {
    let entries = Object.entries(results);
    for(let index = 0; index < entries.length; index++){
        let [routeId, result] = entries[index];
        let match = matches.find((m)=>(m == null ? void 0 : m.route.id) === routeId);
        // If we don't have a match, then we can have a deferred result to do
        // anything with.  This is for revalidating fetchers where the route was
        // removed during HMR
        if (!match) continue;
        let currentMatch = currentMatches.find((m)=>m.route.id === match.route.id);
        let isRevalidatingLoader = currentMatch != null && !$48f15048fc5d75eb$var$isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;
        if ($48f15048fc5d75eb$var$isDeferredResult(result) && isRevalidatingLoader) // Note: we do not have to touch activeDeferreds here since we race them
        // against the signal in resolveDeferredData and they'll get aborted
        // there if needed
        await $48f15048fc5d75eb$var$resolveDeferredData(result, signal, false).then((result)=>{
            if (result) results[routeId] = result;
        });
    }
}
async function $48f15048fc5d75eb$var$resolveFetcherDeferredResults(matches, results, revalidatingFetchers) {
    for(let index = 0; index < revalidatingFetchers.length; index++){
        let { key: key, routeId: routeId, controller: controller } = revalidatingFetchers[index];
        let result = results[key];
        let match = matches.find((m)=>(m == null ? void 0 : m.route.id) === routeId);
        // If we don't have a match, then we can have a deferred result to do
        // anything with.  This is for revalidating fetchers where the route was
        // removed during HMR
        if (!match) continue;
        if ($48f15048fc5d75eb$var$isDeferredResult(result)) {
            // Note: we do not have to touch activeDeferreds here since we race them
            // against the signal in resolveDeferredData and they'll get aborted
            // there if needed
            $48f15048fc5d75eb$export$3e9cee6b33872309(controller, "Expected an AbortController for revalidating fetcher deferred result");
            await $48f15048fc5d75eb$var$resolveDeferredData(result, controller.signal, true).then((result)=>{
                if (result) results[key] = result;
            });
        }
    }
}
async function $48f15048fc5d75eb$var$resolveDeferredData(result, signal, unwrap) {
    if (unwrap === void 0) unwrap = false;
    let aborted = await result.deferredData.resolveData(signal);
    if (aborted) return;
    if (unwrap) try {
        return {
            type: $48f15048fc5d75eb$var$ResultType.data,
            data: result.deferredData.unwrappedData
        };
    } catch (e) {
        // Handle any TrackedPromise._error values encountered while unwrapping
        return {
            type: $48f15048fc5d75eb$var$ResultType.error,
            error: e
        };
    }
    return {
        type: $48f15048fc5d75eb$var$ResultType.data,
        data: result.deferredData.data
    };
}
function $48f15048fc5d75eb$var$hasNakedIndexQuery(search) {
    return new URLSearchParams(search).getAll("index").some((v)=>v === "");
}
function $48f15048fc5d75eb$var$getTargetMatch(matches, location) {
    let search = typeof location === "string" ? $48f15048fc5d75eb$export$8ccf933b0513f8d0(location).search : location.search;
    if (matches[matches.length - 1].route.index && $48f15048fc5d75eb$var$hasNakedIndexQuery(search || "")) // Return the leaf index route when index is present
    return matches[matches.length - 1];
    // Otherwise grab the deepest "path contributing" match (ignoring index and
    // pathless layout routes)
    let pathMatches = $48f15048fc5d75eb$var$getPathContributingMatches(matches);
    return pathMatches[pathMatches.length - 1];
}
function $48f15048fc5d75eb$var$getSubmissionFromNavigation(navigation) {
    let { formMethod: formMethod, formAction: formAction, formEncType: formEncType, text: text, formData: formData, json: json } = navigation;
    if (!formMethod || !formAction || !formEncType) return;
    if (text != null) return {
        formMethod: formMethod,
        formAction: formAction,
        formEncType: formEncType,
        formData: undefined,
        json: undefined,
        text: text
    };
    else if (formData != null) return {
        formMethod: formMethod,
        formAction: formAction,
        formEncType: formEncType,
        formData: formData,
        json: undefined,
        text: undefined
    };
    else if (json !== undefined) return {
        formMethod: formMethod,
        formAction: formAction,
        formEncType: formEncType,
        formData: undefined,
        json: json,
        text: undefined
    };
}
function $48f15048fc5d75eb$var$getLoadingNavigation(location, submission) {
    if (submission) {
        let navigation = {
            state: "loading",
            location: location,
            formMethod: submission.formMethod,
            formAction: submission.formAction,
            formEncType: submission.formEncType,
            formData: submission.formData,
            json: submission.json,
            text: submission.text
        };
        return navigation;
    } else {
        let navigation = {
            state: "loading",
            location: location,
            formMethod: undefined,
            formAction: undefined,
            formEncType: undefined,
            formData: undefined,
            json: undefined,
            text: undefined
        };
        return navigation;
    }
}
function $48f15048fc5d75eb$var$getSubmittingNavigation(location, submission) {
    let navigation = {
        state: "submitting",
        location: location,
        formMethod: submission.formMethod,
        formAction: submission.formAction,
        formEncType: submission.formEncType,
        formData: submission.formData,
        json: submission.json,
        text: submission.text
    };
    return navigation;
}
function $48f15048fc5d75eb$var$getLoadingFetcher(submission, data) {
    if (submission) {
        let fetcher = {
            state: "loading",
            formMethod: submission.formMethod,
            formAction: submission.formAction,
            formEncType: submission.formEncType,
            formData: submission.formData,
            json: submission.json,
            text: submission.text,
            data: data
        };
        return fetcher;
    } else {
        let fetcher = {
            state: "loading",
            formMethod: undefined,
            formAction: undefined,
            formEncType: undefined,
            formData: undefined,
            json: undefined,
            text: undefined,
            data: data
        };
        return fetcher;
    }
}
function $48f15048fc5d75eb$var$getSubmittingFetcher(submission, existingFetcher) {
    let fetcher = {
        state: "submitting",
        formMethod: submission.formMethod,
        formAction: submission.formAction,
        formEncType: submission.formEncType,
        formData: submission.formData,
        json: submission.json,
        text: submission.text,
        data: existingFetcher ? existingFetcher.data : undefined
    };
    return fetcher;
}
function $48f15048fc5d75eb$var$getDoneFetcher(data) {
    let fetcher = {
        state: "idle",
        formMethod: undefined,
        formAction: undefined,
        formEncType: undefined,
        formData: undefined,
        json: undefined,
        text: undefined,
        data: data
    };
    return fetcher;
}
function $48f15048fc5d75eb$var$restoreAppliedTransitions(_window, transitions) {
    try {
        let sessionPositions = _window.sessionStorage.getItem($48f15048fc5d75eb$var$TRANSITIONS_STORAGE_KEY);
        if (sessionPositions) {
            let json = JSON.parse(sessionPositions);
            for (let [k, v] of Object.entries(json || {}))if (v && Array.isArray(v)) transitions.set(k, new Set(v || []));
        }
    } catch (e) {
    // no-op, use default empty object
    }
}
function $48f15048fc5d75eb$var$persistAppliedTransitions(_window, transitions) {
    if (transitions.size > 0) {
        let json = {};
        for (let [k, v] of transitions)json[k] = [
            ...v
        ];
        try {
            _window.sessionStorage.setItem($48f15048fc5d75eb$var$TRANSITIONS_STORAGE_KEY, JSON.stringify(json));
        } catch (error) {
            $48f15048fc5d75eb$export$c0e02632e14916fd(false, "Failed to save applied view transitions in sessionStorage (" + error + ").");
        }
    }
}

/**
 * React Router v6.30.1
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */ 
var $7p28Q = parcelRequire("7p28Q");

function $0a4cd71eaf9877fd$var$_extends() {
    $0a4cd71eaf9877fd$var$_extends = Object.assign ? Object.assign.bind() : function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return $0a4cd71eaf9877fd$var$_extends.apply(this, arguments);
}
// Create react-specific types from the agnostic types in @remix-run/router to
// export from react-router
const $0a4cd71eaf9877fd$export$3add0d5dce533e2e = /*#__PURE__*/ $7p28Q.createContext(null);
const $0a4cd71eaf9877fd$export$145dfa71566a64dc = /*#__PURE__*/ $7p28Q.createContext(null);
const $0a4cd71eaf9877fd$var$AwaitContext = /*#__PURE__*/ $7p28Q.createContext(null);
/**
 * A Navigator is a "location changer"; it's how you get to different locations.
 *
 * Every history instance conforms to the Navigator interface, but the
 * distinction is useful primarily when it comes to the low-level `<Router>` API
 * where both the location and a navigator must be provided separately in order
 * to avoid "tearing" that may occur in a suspense-enabled app if the action
 * and/or location were to be read directly from the history instance.
 */ const $0a4cd71eaf9877fd$export$26749e8557646306 = /*#__PURE__*/ $7p28Q.createContext(null);
const $0a4cd71eaf9877fd$export$c7914228fb69b0f5 = /*#__PURE__*/ $7p28Q.createContext(null);
const $0a4cd71eaf9877fd$export$9072aa6dd1f93057 = /*#__PURE__*/ $7p28Q.createContext({
    outlet: null,
    matches: [],
    isDataRoute: false
});
const $0a4cd71eaf9877fd$var$RouteErrorContext = /*#__PURE__*/ $7p28Q.createContext(null);
/**
 * Returns the full href for the given "to" value. This is useful for building
 * custom links that are also accessible and preserve right-click behavior.
 *
 * @see https://reactrouter.com/v6/hooks/use-href
 */ function $0a4cd71eaf9877fd$export$b66bb29c5006f12f(to, _temp) {
    let { relative: relative } = _temp === void 0 ? {} : _temp;
    !$0a4cd71eaf9877fd$export$9c954a9d03d32f4a() && (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
    let { basename: basename, navigator: navigator } = $7p28Q.useContext($0a4cd71eaf9877fd$export$26749e8557646306);
    let { hash: hash, pathname: pathname, search: search } = $0a4cd71eaf9877fd$export$e75d2a2d1b3c245b(to, {
        relative: relative
    });
    let joinedPathname = pathname;
    // If we're operating within a basename, prepend it to the pathname prior
    // to creating the href.  If this is a root navigation, then just use the raw
    // basename which allows the basename to have full control over the presence
    // of a trailing slash on root links
    if (basename !== "/") joinedPathname = pathname === "/" ? basename : (0, $48f15048fc5d75eb$export$86d9a7913e44197e)([
        basename,
        pathname
    ]);
    return navigator.createHref({
        pathname: joinedPathname,
        search: search,
        hash: hash
    });
}
/**
 * Returns true if this component is a descendant of a `<Router>`.
 *
 * @see https://reactrouter.com/v6/hooks/use-in-router-context
 */ function $0a4cd71eaf9877fd$export$9c954a9d03d32f4a() {
    return $7p28Q.useContext($0a4cd71eaf9877fd$export$c7914228fb69b0f5) != null;
}
/**
 * Returns the current location object, which represents the current URL in web
 * browsers.
 *
 * Note: If you're using this it may mean you're doing some of your own
 * "routing" in your app, and we'd like to know what your use case is. We may
 * be able to provide something higher-level to better suit your needs.
 *
 * @see https://reactrouter.com/v6/hooks/use-location
 */ function $0a4cd71eaf9877fd$export$45d76561a5302f2b() {
    !$0a4cd71eaf9877fd$export$9c954a9d03d32f4a() && (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
    return $7p28Q.useContext($0a4cd71eaf9877fd$export$c7914228fb69b0f5).location;
}
/**
 * Returns the current navigation action which describes how the router came to
 * the current location, either by a pop, push, or replace on the history stack.
 *
 * @see https://reactrouter.com/v6/hooks/use-navigation-type
 */ function $0a4cd71eaf9877fd$export$1b3f31771c5d07c() {
    return $7p28Q.useContext($0a4cd71eaf9877fd$export$c7914228fb69b0f5).navigationType;
}
/**
 * Returns a PathMatch object if the given pattern matches the current URL.
 * This is useful for components that need to know "active" state, e.g.
 * `<NavLink>`.
 *
 * @see https://reactrouter.com/v6/hooks/use-match
 */ function $0a4cd71eaf9877fd$export$6c330e8992e8a295(pattern) {
    !$0a4cd71eaf9877fd$export$9c954a9d03d32f4a() && (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
    let { pathname: pathname } = $0a4cd71eaf9877fd$export$45d76561a5302f2b();
    return $7p28Q.useMemo(()=>(0, $48f15048fc5d75eb$export$81336c211d5ff295)(pattern, (0, $48f15048fc5d75eb$export$30d21fd6d7295f52)(pathname)), [
        pathname,
        pattern
    ]);
}
/**
 * The interface for the navigate() function returned from useNavigate().
 */ const $0a4cd71eaf9877fd$var$navigateEffectWarning = "You should call navigate() in a React.useEffect(), not when your component is first rendered.";
// Mute warnings for calls to useNavigate in SSR environments
function $0a4cd71eaf9877fd$var$useIsomorphicLayoutEffect(cb) {
    let isStatic = $7p28Q.useContext($0a4cd71eaf9877fd$export$26749e8557646306).static;
    if (!isStatic) // We should be able to get rid of this once react 18.3 is released
    // See: https://github.com/facebook/react/pull/26395
    // eslint-disable-next-line react-hooks/rules-of-hooks
    $7p28Q.useLayoutEffect(cb);
}
/**
 * Returns an imperative method for changing the location. Used by `<Link>`s, but
 * may also be used by other elements to change the location.
 *
 * @see https://reactrouter.com/v6/hooks/use-navigate
 */ function $0a4cd71eaf9877fd$export$9770f232ac06a008() {
    let { isDataRoute: isDataRoute } = $7p28Q.useContext($0a4cd71eaf9877fd$export$9072aa6dd1f93057);
    // Conditional usage is OK here because the usage of a data router is static
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return isDataRoute ? $0a4cd71eaf9877fd$var$useNavigateStable() : $0a4cd71eaf9877fd$var$useNavigateUnstable();
}
function $0a4cd71eaf9877fd$var$useNavigateUnstable() {
    !$0a4cd71eaf9877fd$export$9c954a9d03d32f4a() && (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
    let dataRouterContext = $7p28Q.useContext($0a4cd71eaf9877fd$export$3add0d5dce533e2e);
    let { basename: basename, future: future, navigator: navigator } = $7p28Q.useContext($0a4cd71eaf9877fd$export$26749e8557646306);
    let { matches: matches } = $7p28Q.useContext($0a4cd71eaf9877fd$export$9072aa6dd1f93057);
    let { pathname: locationPathname } = $0a4cd71eaf9877fd$export$45d76561a5302f2b();
    let routePathnamesJson = JSON.stringify((0, $48f15048fc5d75eb$export$a5784978eca585fa)(matches, future.v7_relativeSplatPath));
    let activeRef = $7p28Q.useRef(false);
    $0a4cd71eaf9877fd$var$useIsomorphicLayoutEffect(()=>{
        activeRef.current = true;
    });
    let navigate = $7p28Q.useCallback(function(to, options) {
        if (options === void 0) options = {};
        // Short circuit here since if this happens on first render the navigate
        // is useless because we haven't wired up our history listener yet
        if (!activeRef.current) return;
        if (typeof to === "number") {
            navigator.go(to);
            return;
        }
        let path = (0, $48f15048fc5d75eb$export$cae722b0cc860f13)(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
        // If we're operating within a basename, prepend it to the pathname prior
        // to handing off to history (but only if we're not in a data router,
        // otherwise it'll prepend the basename inside of the router).
        // If this is a root navigation, then we navigate to the raw basename
        // which allows the basename to have full control over the presence of a
        // trailing slash on root links
        if (dataRouterContext == null && basename !== "/") path.pathname = path.pathname === "/" ? basename : (0, $48f15048fc5d75eb$export$86d9a7913e44197e)([
            basename,
            path.pathname
        ]);
        (!!options.replace ? navigator.replace : navigator.push)(path, options.state, options);
    }, [
        basename,
        navigator,
        routePathnamesJson,
        locationPathname,
        dataRouterContext
    ]);
    return navigate;
}
const $0a4cd71eaf9877fd$var$OutletContext = /*#__PURE__*/ $7p28Q.createContext(null);
/**
 * Returns the context (if provided) for the child route at this level of the route
 * hierarchy.
 * @see https://reactrouter.com/v6/hooks/use-outlet-context
 */ function $0a4cd71eaf9877fd$export$4138103a3ae699cc() {
    return $7p28Q.useContext($0a4cd71eaf9877fd$var$OutletContext);
}
/**
 * Returns the element for the child route at this level of the route
 * hierarchy. Used internally by `<Outlet>` to render child routes.
 *
 * @see https://reactrouter.com/v6/hooks/use-outlet
 */ function $0a4cd71eaf9877fd$export$a3be3530d8e40d0b(context) {
    let outlet = $7p28Q.useContext($0a4cd71eaf9877fd$export$9072aa6dd1f93057).outlet;
    if (outlet) return /*#__PURE__*/ $7p28Q.createElement($0a4cd71eaf9877fd$var$OutletContext.Provider, {
        value: context
    }, outlet);
    return outlet;
}
/**
 * Returns an object of key/value pairs of the dynamic params from the current
 * URL that were matched by the route path.
 *
 * @see https://reactrouter.com/v6/hooks/use-params
 */ function $0a4cd71eaf9877fd$export$99eaa27ddbbb95ef() {
    let { matches: matches } = $7p28Q.useContext($0a4cd71eaf9877fd$export$9072aa6dd1f93057);
    let routeMatch = matches[matches.length - 1];
    return routeMatch ? routeMatch.params : {};
}
/**
 * Resolves the pathname of the given `to` value against the current location.
 *
 * @see https://reactrouter.com/v6/hooks/use-resolved-path
 */ function $0a4cd71eaf9877fd$export$e75d2a2d1b3c245b(to, _temp2) {
    let { relative: relative } = _temp2 === void 0 ? {} : _temp2;
    let { future: future } = $7p28Q.useContext($0a4cd71eaf9877fd$export$26749e8557646306);
    let { matches: matches } = $7p28Q.useContext($0a4cd71eaf9877fd$export$9072aa6dd1f93057);
    let { pathname: locationPathname } = $0a4cd71eaf9877fd$export$45d76561a5302f2b();
    let routePathnamesJson = JSON.stringify((0, $48f15048fc5d75eb$export$a5784978eca585fa)(matches, future.v7_relativeSplatPath));
    return $7p28Q.useMemo(()=>(0, $48f15048fc5d75eb$export$cae722b0cc860f13)(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [
        to,
        routePathnamesJson,
        locationPathname,
        relative
    ]);
}
/**
 * Returns the element of the route that matched the current location, prepared
 * with the correct context to render the remainder of the route tree. Route
 * elements in the tree must render an `<Outlet>` to render their child route's
 * element.
 *
 * @see https://reactrouter.com/v6/hooks/use-routes
 */ function $0a4cd71eaf9877fd$export$5d3fca4a98652595(routes, locationArg) {
    return $0a4cd71eaf9877fd$export$5fcee62552a12fbf(routes, locationArg);
}
// Internal implementation with accept optional param for RouterProvider usage
function $0a4cd71eaf9877fd$export$5fcee62552a12fbf(routes, locationArg, dataRouterState, future) {
    !$0a4cd71eaf9877fd$export$9c954a9d03d32f4a() && (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
    let { navigator: navigator } = $7p28Q.useContext($0a4cd71eaf9877fd$export$26749e8557646306);
    let { matches: parentMatches } = $7p28Q.useContext($0a4cd71eaf9877fd$export$9072aa6dd1f93057);
    let routeMatch = parentMatches[parentMatches.length - 1];
    let parentParams = routeMatch ? routeMatch.params : {};
    let parentPathname = routeMatch ? routeMatch.pathname : "/";
    let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
    let parentRoute = routeMatch && routeMatch.route;
    let locationFromContext = $0a4cd71eaf9877fd$export$45d76561a5302f2b();
    let location;
    if (locationArg) {
        var _parsedLocationArg$pa;
        let parsedLocationArg = typeof locationArg === "string" ? (0, $48f15048fc5d75eb$export$8ccf933b0513f8d0)(locationArg) : locationArg;
        !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) && (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
        location = parsedLocationArg;
    } else location = locationFromContext;
    let pathname = location.pathname || "/";
    let remainingPathname = pathname;
    if (parentPathnameBase !== "/") {
        // Determine the remaining pathname by removing the # of URL segments the
        // parentPathnameBase has, instead of removing based on character count.
        // This is because we can't guarantee that incoming/outgoing encodings/
        // decodings will match exactly.
        // We decode paths before matching on a per-segment basis with
        // decodeURIComponent(), but we re-encode pathnames via `new URL()` so they
        // match what `window.location.pathname` would reflect.  Those don't 100%
        // align when it comes to encoded URI characters such as % and &.
        //
        // So we may end up with:
        //   pathname:           "/descendant/a%25b/match"
        //   parentPathnameBase: "/descendant/a%b"
        //
        // And the direct substring removal approach won't work :/
        let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
        let segments = pathname.replace(/^\//, "").split("/");
        remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
    }
    let matches = (0, $48f15048fc5d75eb$export$2708184779ceb39d)(routes, {
        pathname: remainingPathname
    });
    let renderedMatches = $0a4cd71eaf9877fd$var$_renderMatches(matches && matches.map((match)=>Object.assign({}, match, {
            params: Object.assign({}, parentParams, match.params),
            pathname: (0, $48f15048fc5d75eb$export$86d9a7913e44197e)([
                parentPathnameBase,
                // Re-encode pathnames that were decoded inside matchRoutes
                navigator.encodeLocation ? navigator.encodeLocation(match.pathname).pathname : match.pathname
            ]),
            pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : (0, $48f15048fc5d75eb$export$86d9a7913e44197e)([
                parentPathnameBase,
                // Re-encode pathnames that were decoded inside matchRoutes
                navigator.encodeLocation ? navigator.encodeLocation(match.pathnameBase).pathname : match.pathnameBase
            ])
        })), parentMatches, dataRouterState, future);
    // When a user passes in a `locationArg`, the associated routes need to
    // be wrapped in a new `LocationContext.Provider` in order for `useLocation`
    // to use the scoped location instead of the global location.
    if (locationArg && renderedMatches) return /*#__PURE__*/ $7p28Q.createElement($0a4cd71eaf9877fd$export$c7914228fb69b0f5.Provider, {
        value: {
            location: $0a4cd71eaf9877fd$var$_extends({
                pathname: "/",
                search: "",
                hash: "",
                state: null,
                key: "default"
            }, location),
            navigationType: (0, $48f15048fc5d75eb$export$e19cd5f9376f8cee).Pop
        }
    }, renderedMatches);
    return renderedMatches;
}
function $0a4cd71eaf9877fd$var$DefaultErrorComponent() {
    let error = $0a4cd71eaf9877fd$export$ed527bf60f6e05f2();
    let message = (0, $48f15048fc5d75eb$export$972111febbeef05b)(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
    let stack = error instanceof Error ? error.stack : null;
    let lightgrey = "rgba(200,200,200, 0.5)";
    let preStyles = {
        padding: "0.5rem",
        backgroundColor: lightgrey
    };
    let codeStyles = {
        padding: "2px 4px",
        backgroundColor: lightgrey
    };
    let devInfo = null;
    return /*#__PURE__*/ $7p28Q.createElement($7p28Q.Fragment, null, /*#__PURE__*/ $7p28Q.createElement("h2", null, "Unexpected Application Error!"), /*#__PURE__*/ $7p28Q.createElement("h3", {
        style: {
            fontStyle: "italic"
        }
    }, message), stack ? /*#__PURE__*/ $7p28Q.createElement("pre", {
        style: preStyles
    }, stack) : null, devInfo);
}
const $0a4cd71eaf9877fd$var$defaultErrorElement = /*#__PURE__*/ $7p28Q.createElement($0a4cd71eaf9877fd$var$DefaultErrorComponent, null);
class $0a4cd71eaf9877fd$var$RenderErrorBoundary extends $7p28Q.Component {
    constructor(props){
        super(props);
        this.state = {
            location: props.location,
            revalidation: props.revalidation,
            error: props.error
        };
    }
    static getDerivedStateFromError(error) {
        return {
            error: error
        };
    }
    static getDerivedStateFromProps(props, state) {
        // When we get into an error state, the user will likely click "back" to the
        // previous page that didn't have an error. Because this wraps the entire
        // application, that will have no effect--the error page continues to display.
        // This gives us a mechanism to recover from the error when the location changes.
        //
        // Whether we're in an error state or not, we update the location in state
        // so that when we are in an error state, it gets reset when a new location
        // comes in and the user recovers from the error.
        if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") return {
            error: props.error,
            location: props.location,
            revalidation: props.revalidation
        };
        // If we're not changing locations, preserve the location but still surface
        // any new errors that may come through. We retain the existing error, we do
        // this because the error provided from the app state may be cleared without
        // the location changing.
        return {
            error: props.error !== undefined ? props.error : state.error,
            location: state.location,
            revalidation: props.revalidation || state.revalidation
        };
    }
    componentDidCatch(error, errorInfo) {
        console.error("React Router caught the following error during render", error, errorInfo);
    }
    render() {
        return this.state.error !== undefined ? /*#__PURE__*/ $7p28Q.createElement($0a4cd71eaf9877fd$export$9072aa6dd1f93057.Provider, {
            value: this.props.routeContext
        }, /*#__PURE__*/ $7p28Q.createElement($0a4cd71eaf9877fd$var$RouteErrorContext.Provider, {
            value: this.state.error,
            children: this.props.component
        })) : this.props.children;
    }
}
function $0a4cd71eaf9877fd$var$RenderedRoute(_ref) {
    let { routeContext: routeContext, match: match, children: children } = _ref;
    let dataRouterContext = $7p28Q.useContext($0a4cd71eaf9877fd$export$3add0d5dce533e2e);
    // Track how deep we got in our render pass to emulate SSR componentDidCatch
    // in a DataStaticRouter
    if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
    return /*#__PURE__*/ $7p28Q.createElement($0a4cd71eaf9877fd$export$9072aa6dd1f93057.Provider, {
        value: routeContext
    }, children);
}
function $0a4cd71eaf9877fd$var$_renderMatches(matches, parentMatches, dataRouterState, future) {
    var _dataRouterState;
    if (parentMatches === void 0) parentMatches = [];
    if (dataRouterState === void 0) dataRouterState = null;
    if (future === void 0) future = null;
    if (matches == null) {
        var _future;
        if (!dataRouterState) return null;
        if (dataRouterState.errors) // Don't bail if we have data router errors so we can render them in the
        // boundary.  Use the pre-matched (or shimmed) matches
        matches = dataRouterState.matches;
        else if ((_future = future) != null && _future.v7_partialHydration && parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) // Don't bail if we're initializing with partial hydration and we have
        // router matches.  That means we're actively running `patchRoutesOnNavigation`
        // so we should render down the partial matches to the appropriate
        // `HydrateFallback`.  We only do this if `parentMatches` is empty so it
        // only impacts the root matches for `RouterProvider` and no descendant
        // `<Routes>`
        matches = dataRouterState.matches;
        else return null;
    }
    let renderedMatches = matches;
    // If we have data errors, trim matches to the highest error boundary
    let errors = (_dataRouterState = dataRouterState) == null ? void 0 : _dataRouterState.errors;
    if (errors != null) {
        let errorIndex = renderedMatches.findIndex((m)=>m.route.id && (errors == null ? void 0 : errors[m.route.id]) !== undefined);
        !(errorIndex >= 0) && (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
        renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
    }
    // If we're in a partial hydration mode, detect if we need to render down to
    // a given HydrateFallback while we load the rest of the hydration data
    let renderFallback = false;
    let fallbackIndex = -1;
    if (dataRouterState && future && future.v7_partialHydration) for(let i = 0; i < renderedMatches.length; i++){
        let match = renderedMatches[i];
        // Track the deepest fallback up until the first route without data
        if (match.route.HydrateFallback || match.route.hydrateFallbackElement) fallbackIndex = i;
        if (match.route.id) {
            let { loaderData: loaderData, errors: errors } = dataRouterState;
            let needsToRunLoader = match.route.loader && loaderData[match.route.id] === undefined && (!errors || errors[match.route.id] === undefined);
            if (match.route.lazy || needsToRunLoader) {
                // We found the first route that's not ready to render (waiting on
                // lazy, or has a loader that hasn't run yet).  Flag that we need to
                // render a fallback and render up until the appropriate fallback
                renderFallback = true;
                if (fallbackIndex >= 0) renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
                else renderedMatches = [
                    renderedMatches[0]
                ];
                break;
            }
        }
    }
    return renderedMatches.reduceRight((outlet, match, index)=>{
        // Only data routers handle errors/fallbacks
        let error;
        let shouldRenderHydrateFallback = false;
        let errorElement = null;
        let hydrateFallbackElement = null;
        if (dataRouterState) {
            error = errors && match.route.id ? errors[match.route.id] : undefined;
            errorElement = match.route.errorElement || $0a4cd71eaf9877fd$var$defaultErrorElement;
            if (renderFallback) {
                if (fallbackIndex < 0 && index === 0) {
                    $0a4cd71eaf9877fd$var$warningOnce("route-fallback", false, "No `HydrateFallback` element provided to render during initial hydration");
                    shouldRenderHydrateFallback = true;
                    hydrateFallbackElement = null;
                } else if (fallbackIndex === index) {
                    shouldRenderHydrateFallback = true;
                    hydrateFallbackElement = match.route.hydrateFallbackElement || null;
                }
            }
        }
        let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));
        let getChildren = ()=>{
            let children;
            if (error) children = errorElement;
            else if (shouldRenderHydrateFallback) children = hydrateFallbackElement;
            else if (match.route.Component) // Note: This is a de-optimized path since React won't re-use the
            // ReactElement since it's identity changes with each new
            // React.createElement call.  We keep this so folks can use
            // `<Route Component={...}>` in `<Routes>` but generally `Component`
            // usage is only advised in `RouterProvider` when we can convert it to
            // `element` ahead of time.
            children = /*#__PURE__*/ $7p28Q.createElement(match.route.Component, null);
            else if (match.route.element) children = match.route.element;
            else children = outlet;
            return /*#__PURE__*/ $7p28Q.createElement($0a4cd71eaf9877fd$var$RenderedRoute, {
                match: match,
                routeContext: {
                    outlet: outlet,
                    matches: matches,
                    isDataRoute: dataRouterState != null
                },
                children: children
            });
        };
        // Only wrap in an error boundary within data router usages when we have an
        // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to
        // an ancestor ErrorBoundary/errorElement
        return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /*#__PURE__*/ $7p28Q.createElement($0a4cd71eaf9877fd$var$RenderErrorBoundary, {
            location: dataRouterState.location,
            revalidation: dataRouterState.revalidation,
            component: errorElement,
            error: error,
            children: getChildren(),
            routeContext: {
                outlet: null,
                matches: matches,
                isDataRoute: true
            }
        }) : getChildren();
    }, null);
}
var $0a4cd71eaf9877fd$var$DataRouterHook = /*#__PURE__*/ function(DataRouterHook) {
    DataRouterHook["UseBlocker"] = "useBlocker";
    DataRouterHook["UseRevalidator"] = "useRevalidator";
    DataRouterHook["UseNavigateStable"] = "useNavigate";
    return DataRouterHook;
}($0a4cd71eaf9877fd$var$DataRouterHook || {});
var $0a4cd71eaf9877fd$var$DataRouterStateHook = /*#__PURE__*/ function(DataRouterStateHook) {
    DataRouterStateHook["UseBlocker"] = "useBlocker";
    DataRouterStateHook["UseLoaderData"] = "useLoaderData";
    DataRouterStateHook["UseActionData"] = "useActionData";
    DataRouterStateHook["UseRouteError"] = "useRouteError";
    DataRouterStateHook["UseNavigation"] = "useNavigation";
    DataRouterStateHook["UseRouteLoaderData"] = "useRouteLoaderData";
    DataRouterStateHook["UseMatches"] = "useMatches";
    DataRouterStateHook["UseRevalidator"] = "useRevalidator";
    DataRouterStateHook["UseNavigateStable"] = "useNavigate";
    DataRouterStateHook["UseRouteId"] = "useRouteId";
    return DataRouterStateHook;
}($0a4cd71eaf9877fd$var$DataRouterStateHook || {});
function $0a4cd71eaf9877fd$var$getDataRouterConsoleError(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.";
}
function $0a4cd71eaf9877fd$var$useDataRouterContext(hookName) {
    let ctx = $7p28Q.useContext($0a4cd71eaf9877fd$export$3add0d5dce533e2e);
    !ctx && (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
    return ctx;
}
function $0a4cd71eaf9877fd$var$useDataRouterState(hookName) {
    let state = $7p28Q.useContext($0a4cd71eaf9877fd$export$145dfa71566a64dc);
    !state && (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
    return state;
}
function $0a4cd71eaf9877fd$var$useRouteContext(hookName) {
    let route = $7p28Q.useContext($0a4cd71eaf9877fd$export$9072aa6dd1f93057);
    !route && (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
    return route;
}
// Internal version with hookName-aware debugging
function $0a4cd71eaf9877fd$var$useCurrentRouteId(hookName) {
    let route = $0a4cd71eaf9877fd$var$useRouteContext(hookName);
    let thisRoute = route.matches[route.matches.length - 1];
    !thisRoute.route.id && (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
    return thisRoute.route.id;
}
/**
 * Returns the ID for the nearest contextual route
 */ function $0a4cd71eaf9877fd$export$5fc8298006ad9e58() {
    return $0a4cd71eaf9877fd$var$useCurrentRouteId($0a4cd71eaf9877fd$var$DataRouterStateHook.UseRouteId);
}
/**
 * Returns the current navigation, defaulting to an "idle" navigation when
 * no navigation is in progress
 */ function $0a4cd71eaf9877fd$export$d0fd4b7106de2769() {
    let state = $0a4cd71eaf9877fd$var$useDataRouterState($0a4cd71eaf9877fd$var$DataRouterStateHook.UseNavigation);
    return state.navigation;
}
/**
 * Returns a revalidate function for manually triggering revalidation, as well
 * as the current state of any manual revalidations
 */ function $0a4cd71eaf9877fd$export$600dc272ed516c15() {
    let dataRouterContext = $0a4cd71eaf9877fd$var$useDataRouterContext($0a4cd71eaf9877fd$var$DataRouterHook.UseRevalidator);
    let state = $0a4cd71eaf9877fd$var$useDataRouterState($0a4cd71eaf9877fd$var$DataRouterStateHook.UseRevalidator);
    return $7p28Q.useMemo(()=>({
            revalidate: dataRouterContext.router.revalidate,
            state: state.revalidation
        }), [
        dataRouterContext.router.revalidate,
        state.revalidation
    ]);
}
/**
 * Returns the active route matches, useful for accessing loaderData for
 * parent/child routes or the route "handle" property
 */ function $0a4cd71eaf9877fd$export$2378eb7f5ff86053() {
    let { matches: matches, loaderData: loaderData } = $0a4cd71eaf9877fd$var$useDataRouterState($0a4cd71eaf9877fd$var$DataRouterStateHook.UseMatches);
    return $7p28Q.useMemo(()=>matches.map((m)=>(0, $48f15048fc5d75eb$export$b3fac024fad9e8ff)(m, loaderData)), [
        matches,
        loaderData
    ]);
}
/**
 * Returns the loader data for the nearest ancestor Route loader
 */ function $0a4cd71eaf9877fd$export$1448a5050d252c4d() {
    let state = $0a4cd71eaf9877fd$var$useDataRouterState($0a4cd71eaf9877fd$var$DataRouterStateHook.UseLoaderData);
    let routeId = $0a4cd71eaf9877fd$var$useCurrentRouteId($0a4cd71eaf9877fd$var$DataRouterStateHook.UseLoaderData);
    if (state.errors && state.errors[routeId] != null) {
        console.error("You cannot `useLoaderData` in an errorElement (routeId: " + routeId + ")");
        return undefined;
    }
    return state.loaderData[routeId];
}
/**
 * Returns the loaderData for the given routeId
 */ function $0a4cd71eaf9877fd$export$fd5d37484eab868d(routeId) {
    let state = $0a4cd71eaf9877fd$var$useDataRouterState($0a4cd71eaf9877fd$var$DataRouterStateHook.UseRouteLoaderData);
    return state.loaderData[routeId];
}
/**
 * Returns the action data for the nearest ancestor Route action
 */ function $0a4cd71eaf9877fd$export$fdc00f3f26066d5e() {
    let state = $0a4cd71eaf9877fd$var$useDataRouterState($0a4cd71eaf9877fd$var$DataRouterStateHook.UseActionData);
    let routeId = $0a4cd71eaf9877fd$var$useCurrentRouteId($0a4cd71eaf9877fd$var$DataRouterStateHook.UseLoaderData);
    return state.actionData ? state.actionData[routeId] : undefined;
}
/**
 * Returns the nearest ancestor Route error, which could be a loader/action
 * error or a render error.  This is intended to be called from your
 * ErrorBoundary/errorElement to display a proper error message.
 */ function $0a4cd71eaf9877fd$export$ed527bf60f6e05f2() {
    var _state$errors;
    let error = $7p28Q.useContext($0a4cd71eaf9877fd$var$RouteErrorContext);
    let state = $0a4cd71eaf9877fd$var$useDataRouterState($0a4cd71eaf9877fd$var$DataRouterStateHook.UseRouteError);
    let routeId = $0a4cd71eaf9877fd$var$useCurrentRouteId($0a4cd71eaf9877fd$var$DataRouterStateHook.UseRouteError);
    // If this was a render error, we put it in a RouteError context inside
    // of RenderErrorBoundary
    if (error !== undefined) return error;
    // Otherwise look for errors from our data router state
    return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
}
/**
 * Returns the happy-path data from the nearest ancestor `<Await />` value
 */ function $0a4cd71eaf9877fd$export$78a72ddb39bdd145() {
    let value = $7p28Q.useContext($0a4cd71eaf9877fd$var$AwaitContext);
    return value == null ? void 0 : value._data;
}
/**
 * Returns the error from the nearest ancestor `<Await />` value
 */ function $0a4cd71eaf9877fd$export$17f53340677d5831() {
    let value = $7p28Q.useContext($0a4cd71eaf9877fd$var$AwaitContext);
    return value == null ? void 0 : value._error;
}
let $0a4cd71eaf9877fd$var$blockerId = 0;
/**
 * Allow the application to block navigations within the SPA and present the
 * user a confirmation dialog to confirm the navigation.  Mostly used to avoid
 * using half-filled form data.  This does not handle hard-reloads or
 * cross-origin navigations.
 */ function $0a4cd71eaf9877fd$export$b273b3273281a049(shouldBlock) {
    let { router: router, basename: basename } = $0a4cd71eaf9877fd$var$useDataRouterContext($0a4cd71eaf9877fd$var$DataRouterHook.UseBlocker);
    let state = $0a4cd71eaf9877fd$var$useDataRouterState($0a4cd71eaf9877fd$var$DataRouterStateHook.UseBlocker);
    let [blockerKey, setBlockerKey] = $7p28Q.useState("");
    let blockerFunction = $7p28Q.useCallback((arg)=>{
        if (typeof shouldBlock !== "function") return !!shouldBlock;
        if (basename === "/") return shouldBlock(arg);
        // If they provided us a function and we've got an active basename, strip
        // it from the locations we expose to the user to match the behavior of
        // useLocation
        let { currentLocation: currentLocation, nextLocation: nextLocation, historyAction: historyAction } = arg;
        return shouldBlock({
            currentLocation: $0a4cd71eaf9877fd$var$_extends({}, currentLocation, {
                pathname: (0, $48f15048fc5d75eb$export$b69e3301ce081aa3)(currentLocation.pathname, basename) || currentLocation.pathname
            }),
            nextLocation: $0a4cd71eaf9877fd$var$_extends({}, nextLocation, {
                pathname: (0, $48f15048fc5d75eb$export$b69e3301ce081aa3)(nextLocation.pathname, basename) || nextLocation.pathname
            }),
            historyAction: historyAction
        });
    }, [
        basename,
        shouldBlock
    ]);
    // This effect is in charge of blocker key assignment and deletion (which is
    // tightly coupled to the key)
    $7p28Q.useEffect(()=>{
        let key = String(++$0a4cd71eaf9877fd$var$blockerId);
        setBlockerKey(key);
        return ()=>router.deleteBlocker(key);
    }, [
        router
    ]);
    // This effect handles assigning the blockerFunction.  This is to handle
    // unstable blocker function identities, and happens only after the prior
    // effect so we don't get an orphaned blockerFunction in the router with a
    // key of "".  Until then we just have the IDLE_BLOCKER.
    $7p28Q.useEffect(()=>{
        if (blockerKey !== "") router.getBlocker(blockerKey, blockerFunction);
    }, [
        router,
        blockerKey,
        blockerFunction
    ]);
    // Prefer the blocker from `state` not `router.state` since DataRouterContext
    // is memoized so this ensures we update on blocker state updates
    return blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : (0, $48f15048fc5d75eb$export$386d57f03f0b2883);
}
/**
 * Stable version of useNavigate that is used when we are in the context of
 * a RouterProvider.
 */ function $0a4cd71eaf9877fd$var$useNavigateStable() {
    let { router: router } = $0a4cd71eaf9877fd$var$useDataRouterContext($0a4cd71eaf9877fd$var$DataRouterHook.UseNavigateStable);
    let id = $0a4cd71eaf9877fd$var$useCurrentRouteId($0a4cd71eaf9877fd$var$DataRouterStateHook.UseNavigateStable);
    let activeRef = $7p28Q.useRef(false);
    $0a4cd71eaf9877fd$var$useIsomorphicLayoutEffect(()=>{
        activeRef.current = true;
    });
    let navigate = $7p28Q.useCallback(function(to, options) {
        if (options === void 0) options = {};
        // Short circuit here since if this happens on first render the navigate
        // is useless because we haven't wired up our router subscriber yet
        if (!activeRef.current) return;
        if (typeof to === "number") router.navigate(to);
        else router.navigate(to, $0a4cd71eaf9877fd$var$_extends({
            fromRouteId: id
        }, options));
    }, [
        router,
        id
    ]);
    return navigate;
}
const $0a4cd71eaf9877fd$var$alreadyWarned$1 = {};
function $0a4cd71eaf9877fd$var$warningOnce(key, cond, message) {
    if (!cond && !$0a4cd71eaf9877fd$var$alreadyWarned$1[key]) $0a4cd71eaf9877fd$var$alreadyWarned$1[key] = true;
}
const $0a4cd71eaf9877fd$var$alreadyWarned = {};
function $0a4cd71eaf9877fd$var$warnOnce(key, message) {}
const $0a4cd71eaf9877fd$var$logDeprecation = (flag, msg, link)=>$0a4cd71eaf9877fd$var$warnOnce(flag, "\u26A0\uFE0F React Router Future Flag Warning: " + msg + ". " + ("You can use the `" + flag + "` future flag to opt-in early. ") + ("For more information, see " + link + "."));
function $0a4cd71eaf9877fd$export$db5148ec97d6af7a(renderFuture, routerFuture) {
    if ((renderFuture == null ? void 0 : renderFuture.v7_startTransition) === undefined) $0a4cd71eaf9877fd$var$logDeprecation("v7_startTransition", "React Router will begin wrapping state updates in `React.startTransition` in v7", "https://reactrouter.com/v6/upgrading/future#v7_starttransition");
    if ((renderFuture == null ? void 0 : renderFuture.v7_relativeSplatPath) === undefined && (!routerFuture || routerFuture.v7_relativeSplatPath === undefined)) $0a4cd71eaf9877fd$var$logDeprecation("v7_relativeSplatPath", "Relative route resolution within Splat routes is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath");
    if (routerFuture) {
        if (routerFuture.v7_fetcherPersist === undefined) $0a4cd71eaf9877fd$var$logDeprecation("v7_fetcherPersist", "The persistence behavior of fetchers is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_fetcherpersist");
        if (routerFuture.v7_normalizeFormMethod === undefined) $0a4cd71eaf9877fd$var$logDeprecation("v7_normalizeFormMethod", "Casing of `formMethod` fields is being normalized to uppercase in v7", "https://reactrouter.com/v6/upgrading/future#v7_normalizeformmethod");
        if (routerFuture.v7_partialHydration === undefined) $0a4cd71eaf9877fd$var$logDeprecation("v7_partialHydration", "`RouterProvider` hydration behavior is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_partialhydration");
        if (routerFuture.v7_skipActionErrorRevalidation === undefined) $0a4cd71eaf9877fd$var$logDeprecation("v7_skipActionErrorRevalidation", "The revalidation behavior after 4xx/5xx `action` responses is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_skipactionerrorrevalidation");
    }
}
/**
  Webpack + React 17 fails to compile on any of the following because webpack
  complains that `startTransition` doesn't exist in `React`:
  * import { startTransition } from "react"
  * import * as React from from "react";
    "startTransition" in React ? React.startTransition(() => setState()) : setState()
  * import * as React from from "react";
    "startTransition" in React ? React["startTransition"](() => setState()) : setState()

  Moving it to a constant such as the following solves the Webpack/React 17 issue:
  * import * as React from from "react";
    const START_TRANSITION = "startTransition";
    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()

  However, that introduces webpack/terser minification issues in production builds
  in React 18 where minification/obfuscation ends up removing the call of
  React.startTransition entirely from the first half of the ternary.  Grabbing
  this exported reference once up front resolves that issue.

  See https://github.com/remix-run/react-router/issues/10579
*/ const $0a4cd71eaf9877fd$var$START_TRANSITION = "startTransition";
const $0a4cd71eaf9877fd$var$startTransitionImpl = $7p28Q[$0a4cd71eaf9877fd$var$START_TRANSITION];
/**
 * Given a Remix Router instance, render the appropriate UI
 */ function $0a4cd71eaf9877fd$export$323e4fc2fa4753fb(_ref) {
    let { fallbackElement: fallbackElement, router: router, future: future } = _ref;
    let [state, setStateImpl] = $7p28Q.useState(router.state);
    let { v7_startTransition: v7_startTransition } = future || {};
    let setState = $7p28Q.useCallback((newState)=>{
        if (v7_startTransition && $0a4cd71eaf9877fd$var$startTransitionImpl) $0a4cd71eaf9877fd$var$startTransitionImpl(()=>setStateImpl(newState));
        else setStateImpl(newState);
    }, [
        setStateImpl,
        v7_startTransition
    ]);
    // Need to use a layout effect here so we are subscribed early enough to
    // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)
    $7p28Q.useLayoutEffect(()=>router.subscribe(setState), [
        router,
        setState
    ]);
    $7p28Q.useEffect(()=>{
    // Only log this once on initial mount
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    let navigator = $7p28Q.useMemo(()=>{
        return {
            createHref: router.createHref,
            encodeLocation: router.encodeLocation,
            go: (n)=>router.navigate(n),
            push: (to, state, opts)=>router.navigate(to, {
                    state: state,
                    preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
                }),
            replace: (to, state, opts)=>router.navigate(to, {
                    replace: true,
                    state: state,
                    preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
                })
        };
    }, [
        router
    ]);
    let basename = router.basename || "/";
    let dataRouterContext = $7p28Q.useMemo(()=>({
            router: router,
            navigator: navigator,
            static: false,
            basename: basename
        }), [
        router,
        navigator,
        basename
    ]);
    $7p28Q.useEffect(()=>$0a4cd71eaf9877fd$export$db5148ec97d6af7a(future, router.future), [
        router,
        future
    ]);
    // The fragment and {null} here are important!  We need them to keep React 18's
    // useId happy when we are server-rendering since we may have a <script> here
    // containing the hydrated server-side staticContext (from StaticRouterProvider).
    // useId relies on the component tree structure to generate deterministic id's
    // so we need to ensure it remains the same on the client even though
    // we don't need the <script> tag
    return /*#__PURE__*/ $7p28Q.createElement($7p28Q.Fragment, null, /*#__PURE__*/ $7p28Q.createElement($0a4cd71eaf9877fd$export$3add0d5dce533e2e.Provider, {
        value: dataRouterContext
    }, /*#__PURE__*/ $7p28Q.createElement($0a4cd71eaf9877fd$export$145dfa71566a64dc.Provider, {
        value: state
    }, /*#__PURE__*/ $7p28Q.createElement($0a4cd71eaf9877fd$export$55185c17a0fcbe46, {
        basename: basename,
        location: state.location,
        navigationType: state.historyAction,
        navigator: navigator,
        future: {
            v7_relativeSplatPath: router.future.v7_relativeSplatPath
        }
    }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/ $7p28Q.createElement($0a4cd71eaf9877fd$var$DataRoutes, {
        routes: router.routes,
        future: router.future,
        state: state
    }) : fallbackElement))), null);
}
function $0a4cd71eaf9877fd$var$DataRoutes(_ref2) {
    let { routes: routes, future: future, state: state } = _ref2;
    return $0a4cd71eaf9877fd$export$5fcee62552a12fbf(routes, undefined, state, future);
}
/**
 * A `<Router>` that stores all entries in memory.
 *
 * @see https://reactrouter.com/v6/router-components/memory-router
 */ function $0a4cd71eaf9877fd$export$ae46f04cfaffe093(_ref3) {
    let { basename: basename, children: children, initialEntries: initialEntries, initialIndex: initialIndex, future: future } = _ref3;
    let historyRef = $7p28Q.useRef();
    if (historyRef.current == null) historyRef.current = (0, $48f15048fc5d75eb$export$2b76ad033c6e6d08)({
        initialEntries: initialEntries,
        initialIndex: initialIndex,
        v5Compat: true
    });
    let history = historyRef.current;
    let [state, setStateImpl] = $7p28Q.useState({
        action: history.action,
        location: history.location
    });
    let { v7_startTransition: v7_startTransition } = future || {};
    let setState = $7p28Q.useCallback((newState)=>{
        v7_startTransition && $0a4cd71eaf9877fd$var$startTransitionImpl ? $0a4cd71eaf9877fd$var$startTransitionImpl(()=>setStateImpl(newState)) : setStateImpl(newState);
    }, [
        setStateImpl,
        v7_startTransition
    ]);
    $7p28Q.useLayoutEffect(()=>history.listen(setState), [
        history,
        setState
    ]);
    $7p28Q.useEffect(()=>$0a4cd71eaf9877fd$export$db5148ec97d6af7a(future), [
        future
    ]);
    return /*#__PURE__*/ $7p28Q.createElement($0a4cd71eaf9877fd$export$55185c17a0fcbe46, {
        basename: basename,
        children: children,
        location: state.location,
        navigationType: state.action,
        navigator: history,
        future: future
    });
}
/**
 * Changes the current location.
 *
 * Note: This API is mostly useful in React.Component subclasses that are not
 * able to use hooks. In functional components, we recommend you use the
 * `useNavigate` hook instead.
 *
 * @see https://reactrouter.com/v6/components/navigate
 */ function $0a4cd71eaf9877fd$export$444b3ab0cb9aec40(_ref4) {
    let { to: to, replace: replace, state: state, relative: relative } = _ref4;
    !$0a4cd71eaf9877fd$export$9c954a9d03d32f4a() && (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
    let { future: future, static: isStatic } = $7p28Q.useContext($0a4cd71eaf9877fd$export$26749e8557646306);
    let { matches: matches } = $7p28Q.useContext($0a4cd71eaf9877fd$export$9072aa6dd1f93057);
    let { pathname: locationPathname } = $0a4cd71eaf9877fd$export$45d76561a5302f2b();
    let navigate = $0a4cd71eaf9877fd$export$9770f232ac06a008();
    // Resolve the path outside of the effect so that when effects run twice in
    // StrictMode they navigate to the same place
    let path = (0, $48f15048fc5d75eb$export$cae722b0cc860f13)(to, (0, $48f15048fc5d75eb$export$a5784978eca585fa)(matches, future.v7_relativeSplatPath), locationPathname, relative === "path");
    let jsonPath = JSON.stringify(path);
    $7p28Q.useEffect(()=>navigate(JSON.parse(jsonPath), {
            replace: replace,
            state: state,
            relative: relative
        }), [
        navigate,
        jsonPath,
        relative,
        replace,
        state
    ]);
    return null;
}
/**
 * Renders the child route's element, if there is one.
 *
 * @see https://reactrouter.com/v6/components/outlet
 */ function $0a4cd71eaf9877fd$export$910ae8079b2c2852(props) {
    return $0a4cd71eaf9877fd$export$a3be3530d8e40d0b(props.context);
}
/**
 * Declares an element that should be rendered at a certain URL path.
 *
 * @see https://reactrouter.com/v6/components/route
 */ function $0a4cd71eaf9877fd$export$e7b0ac011bb776c6(_props) {
    (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
}
/**
 * Provides location context for the rest of the app.
 *
 * Note: You usually won't render a `<Router>` directly. Instead, you'll render a
 * router that is more specific to your environment such as a `<BrowserRouter>`
 * in web browsers or a `<StaticRouter>` for server rendering.
 *
 * @see https://reactrouter.com/v6/router-components/router
 */ function $0a4cd71eaf9877fd$export$55185c17a0fcbe46(_ref5) {
    let { basename: basenameProp = "/", children: children = null, location: locationProp, navigationType: navigationType = (0, $48f15048fc5d75eb$export$e19cd5f9376f8cee).Pop, navigator: navigator, static: staticProp = false, future: future } = _ref5;
    !!$0a4cd71eaf9877fd$export$9c954a9d03d32f4a() && (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
    // Preserve trailing slashes on basename, so we can let the user control
    // the enforcement of trailing slashes throughout the app
    let basename = basenameProp.replace(/^\/*/, "/");
    let navigationContext = $7p28Q.useMemo(()=>({
            basename: basename,
            navigator: navigator,
            static: staticProp,
            future: $0a4cd71eaf9877fd$var$_extends({
                v7_relativeSplatPath: false
            }, future)
        }), [
        basename,
        future,
        navigator,
        staticProp
    ]);
    if (typeof locationProp === "string") locationProp = (0, $48f15048fc5d75eb$export$8ccf933b0513f8d0)(locationProp);
    let { pathname: pathname = "/", search: search = "", hash: hash = "", state: state = null, key: key = "default" } = locationProp;
    let locationContext = $7p28Q.useMemo(()=>{
        let trailingPathname = (0, $48f15048fc5d75eb$export$b69e3301ce081aa3)(pathname, basename);
        if (trailingPathname == null) return null;
        return {
            location: {
                pathname: trailingPathname,
                search: search,
                hash: hash,
                state: state,
                key: key
            },
            navigationType: navigationType
        };
    }, [
        basename,
        pathname,
        search,
        hash,
        state,
        key,
        navigationType
    ]);
    if (locationContext == null) return null;
    return /*#__PURE__*/ $7p28Q.createElement($0a4cd71eaf9877fd$export$26749e8557646306.Provider, {
        value: navigationContext
    }, /*#__PURE__*/ $7p28Q.createElement($0a4cd71eaf9877fd$export$c7914228fb69b0f5.Provider, {
        children: children,
        value: locationContext
    }));
}
/**
 * A container for a nested tree of `<Route>` elements that renders the branch
 * that best matches the current location.
 *
 * @see https://reactrouter.com/v6/components/routes
 */ function $0a4cd71eaf9877fd$export$3565eb3d00ca5a74(_ref6) {
    let { children: children, location: location } = _ref6;
    return $0a4cd71eaf9877fd$export$5d3fca4a98652595($0a4cd71eaf9877fd$export$16da398f5434bdec(children), location);
}
/**
 * Component to use for rendering lazily loaded data from returning defer()
 * in a loader function
 */ function $0a4cd71eaf9877fd$export$6ddabde395c8c576(_ref7) {
    let { children: children, errorElement: errorElement, resolve: resolve } = _ref7;
    return /*#__PURE__*/ $7p28Q.createElement($0a4cd71eaf9877fd$var$AwaitErrorBoundary, {
        resolve: resolve,
        errorElement: errorElement
    }, /*#__PURE__*/ $7p28Q.createElement($0a4cd71eaf9877fd$var$ResolveAwait, null, children));
}
var $0a4cd71eaf9877fd$var$AwaitRenderStatus = /*#__PURE__*/ function(AwaitRenderStatus) {
    AwaitRenderStatus[AwaitRenderStatus["pending"] = 0] = "pending";
    AwaitRenderStatus[AwaitRenderStatus["success"] = 1] = "success";
    AwaitRenderStatus[AwaitRenderStatus["error"] = 2] = "error";
    return AwaitRenderStatus;
}($0a4cd71eaf9877fd$var$AwaitRenderStatus || {});
const $0a4cd71eaf9877fd$var$neverSettledPromise = new Promise(()=>{});
class $0a4cd71eaf9877fd$var$AwaitErrorBoundary extends $7p28Q.Component {
    constructor(props){
        super(props);
        this.state = {
            error: null
        };
    }
    static getDerivedStateFromError(error) {
        return {
            error: error
        };
    }
    componentDidCatch(error, errorInfo) {
        console.error("<Await> caught the following error during render", error, errorInfo);
    }
    render() {
        let { children: children, errorElement: errorElement, resolve: resolve } = this.props;
        let promise = null;
        let status = $0a4cd71eaf9877fd$var$AwaitRenderStatus.pending;
        if (!(resolve instanceof Promise)) {
            // Didn't get a promise - provide as a resolved promise
            status = $0a4cd71eaf9877fd$var$AwaitRenderStatus.success;
            promise = Promise.resolve();
            Object.defineProperty(promise, "_tracked", {
                get: ()=>true
            });
            Object.defineProperty(promise, "_data", {
                get: ()=>resolve
            });
        } else if (this.state.error) {
            // Caught a render error, provide it as a rejected promise
            status = $0a4cd71eaf9877fd$var$AwaitRenderStatus.error;
            let renderError = this.state.error;
            promise = Promise.reject().catch(()=>{}); // Avoid unhandled rejection warnings
            Object.defineProperty(promise, "_tracked", {
                get: ()=>true
            });
            Object.defineProperty(promise, "_error", {
                get: ()=>renderError
            });
        } else if (resolve._tracked) {
            // Already tracked promise - check contents
            promise = resolve;
            status = "_error" in promise ? $0a4cd71eaf9877fd$var$AwaitRenderStatus.error : "_data" in promise ? $0a4cd71eaf9877fd$var$AwaitRenderStatus.success : $0a4cd71eaf9877fd$var$AwaitRenderStatus.pending;
        } else {
            // Raw (untracked) promise - track it
            status = $0a4cd71eaf9877fd$var$AwaitRenderStatus.pending;
            Object.defineProperty(resolve, "_tracked", {
                get: ()=>true
            });
            promise = resolve.then((data)=>Object.defineProperty(resolve, "_data", {
                    get: ()=>data
                }), (error)=>Object.defineProperty(resolve, "_error", {
                    get: ()=>error
                }));
        }
        if (status === $0a4cd71eaf9877fd$var$AwaitRenderStatus.error && promise._error instanceof (0, $48f15048fc5d75eb$export$42a99a7a4bc0e76a)) // Freeze the UI by throwing a never resolved promise
        throw $0a4cd71eaf9877fd$var$neverSettledPromise;
        if (status === $0a4cd71eaf9877fd$var$AwaitRenderStatus.error && !errorElement) // No errorElement, throw to the nearest route-level error boundary
        throw promise._error;
        if (status === $0a4cd71eaf9877fd$var$AwaitRenderStatus.error) // Render via our errorElement
        return /*#__PURE__*/ $7p28Q.createElement($0a4cd71eaf9877fd$var$AwaitContext.Provider, {
            value: promise,
            children: errorElement
        });
        if (status === $0a4cd71eaf9877fd$var$AwaitRenderStatus.success) // Render children with resolved value
        return /*#__PURE__*/ $7p28Q.createElement($0a4cd71eaf9877fd$var$AwaitContext.Provider, {
            value: promise,
            children: children
        });
        // Throw to the suspense boundary
        throw promise;
    }
}
/**
 * @private
 * Indirection to leverage useAsyncValue for a render-prop API on `<Await>`
 */ function $0a4cd71eaf9877fd$var$ResolveAwait(_ref8) {
    let { children: children } = _ref8;
    let data = $0a4cd71eaf9877fd$export$78a72ddb39bdd145();
    let toRender = typeof children === "function" ? children(data) : children;
    return /*#__PURE__*/ $7p28Q.createElement($7p28Q.Fragment, null, toRender);
}
///////////////////////////////////////////////////////////////////////////////
// UTILS
///////////////////////////////////////////////////////////////////////////////
/**
 * Creates a route config from a React "children" object, which is usually
 * either a `<Route>` element or an array of them. Used internally by
 * `<Routes>` to create a route config from its children.
 *
 * @see https://reactrouter.com/v6/utils/create-routes-from-children
 */ function $0a4cd71eaf9877fd$export$16da398f5434bdec(children, parentPath) {
    if (parentPath === void 0) parentPath = [];
    let routes = [];
    $7p28Q.Children.forEach(children, (element, index)=>{
        if (!/*#__PURE__*/ $7p28Q.isValidElement(element)) // Ignore non-elements. This allows people to more easily inline
        // conditionals in their route config.
        return;
        let treePath = [
            ...parentPath,
            index
        ];
        if (element.type === $7p28Q.Fragment) {
            // Transparently support React.Fragment and its children.
            routes.push.apply(routes, $0a4cd71eaf9877fd$export$16da398f5434bdec(element.props.children, treePath));
            return;
        }
        !(element.type === $0a4cd71eaf9877fd$export$e7b0ac011bb776c6) && (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
        !(!element.props.index || !element.props.children) && (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
        let route = {
            id: element.props.id || treePath.join("-"),
            caseSensitive: element.props.caseSensitive,
            element: element.props.element,
            Component: element.props.Component,
            index: element.props.index,
            path: element.props.path,
            loader: element.props.loader,
            action: element.props.action,
            errorElement: element.props.errorElement,
            ErrorBoundary: element.props.ErrorBoundary,
            hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,
            shouldRevalidate: element.props.shouldRevalidate,
            handle: element.props.handle,
            lazy: element.props.lazy
        };
        if (element.props.children) route.children = $0a4cd71eaf9877fd$export$16da398f5434bdec(element.props.children, treePath);
        routes.push(route);
    });
    return routes;
}
/**
 * Renders the result of `matchRoutes()` into a React element.
 */ function $0a4cd71eaf9877fd$export$daf73786167a7f72(matches) {
    return $0a4cd71eaf9877fd$var$_renderMatches(matches);
}
function $0a4cd71eaf9877fd$export$52b333d321859367(route) {
    let updates = {
        // Note: this check also occurs in createRoutesFromChildren so update
        // there if you change this -- please and thank you!
        hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null
    };
    if (route.Component) Object.assign(updates, {
        element: /*#__PURE__*/ $7p28Q.createElement(route.Component),
        Component: undefined
    });
    if (route.HydrateFallback) Object.assign(updates, {
        hydrateFallbackElement: /*#__PURE__*/ $7p28Q.createElement(route.HydrateFallback),
        HydrateFallback: undefined
    });
    if (route.ErrorBoundary) Object.assign(updates, {
        errorElement: /*#__PURE__*/ $7p28Q.createElement(route.ErrorBoundary),
        ErrorBoundary: undefined
    });
    return updates;
}
function $0a4cd71eaf9877fd$export$f30f7e456d254e83(routes, opts) {
    return (0, $48f15048fc5d75eb$export$baddd0131ee8c05b)({
        basename: opts == null ? void 0 : opts.basename,
        future: $0a4cd71eaf9877fd$var$_extends({}, opts == null ? void 0 : opts.future, {
            v7_prependBasename: true
        }),
        history: (0, $48f15048fc5d75eb$export$2b76ad033c6e6d08)({
            initialEntries: opts == null ? void 0 : opts.initialEntries,
            initialIndex: opts == null ? void 0 : opts.initialIndex
        }),
        hydrationData: opts == null ? void 0 : opts.hydrationData,
        routes: routes,
        mapRouteProperties: $0a4cd71eaf9877fd$export$52b333d321859367,
        dataStrategy: opts == null ? void 0 : opts.dataStrategy,
        patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation
    }).initialize();
}



function $94342d10451cd5fe$var$_extends() {
    $94342d10451cd5fe$var$_extends = Object.assign ? Object.assign.bind() : function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return $94342d10451cd5fe$var$_extends.apply(this, arguments);
}
function $94342d10451cd5fe$var$_objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
const $94342d10451cd5fe$var$defaultMethod = "get";
const $94342d10451cd5fe$var$defaultEncType = "application/x-www-form-urlencoded";
function $94342d10451cd5fe$var$isHtmlElement(object) {
    return object != null && typeof object.tagName === "string";
}
function $94342d10451cd5fe$var$isButtonElement(object) {
    return $94342d10451cd5fe$var$isHtmlElement(object) && object.tagName.toLowerCase() === "button";
}
function $94342d10451cd5fe$var$isFormElement(object) {
    return $94342d10451cd5fe$var$isHtmlElement(object) && object.tagName.toLowerCase() === "form";
}
function $94342d10451cd5fe$var$isInputElement(object) {
    return $94342d10451cd5fe$var$isHtmlElement(object) && object.tagName.toLowerCase() === "input";
}
function $94342d10451cd5fe$var$isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
function $94342d10451cd5fe$var$shouldProcessLinkClick(event, target) {
    return event.button === 0 && // Ignore everything but left clicks
    (!target || target === "_self") && // Let browser handle "target=_blank" etc.
    !$94342d10451cd5fe$var$isModifiedEvent(event) // Ignore clicks with modifier keys
    ;
}
/**
 * Creates a URLSearchParams object using the given initializer.
 *
 * This is identical to `new URLSearchParams(init)` except it also
 * supports arrays as values in the object form of the initializer
 * instead of just strings. This is convenient when you need multiple
 * values for a given key, but don't want to use an array initializer.
 *
 * For example, instead of:
 *
 *   let searchParams = new URLSearchParams([
 *     ['sort', 'name'],
 *     ['sort', 'price']
 *   ]);
 *
 * you can do:
 *
 *   let searchParams = createSearchParams({
 *     sort: ['name', 'price']
 *   });
 */ function $94342d10451cd5fe$export$a2e4e2dcc7b1f22f(init) {
    if (init === void 0) init = "";
    return new URLSearchParams(typeof init === "string" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key)=>{
        let value = init[key];
        return memo.concat(Array.isArray(value) ? value.map((v)=>[
                key,
                v
            ]) : [
            [
                key,
                value
            ]
        ]);
    }, []));
}
function $94342d10451cd5fe$var$getSearchParamsForLocation(locationSearch, defaultSearchParams) {
    let searchParams = $94342d10451cd5fe$export$a2e4e2dcc7b1f22f(locationSearch);
    if (defaultSearchParams) // Use `defaultSearchParams.forEach(...)` here instead of iterating of
    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to
    // web extensions. Relevant Bugzilla tickets:
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984
    defaultSearchParams.forEach((_, key)=>{
        if (!searchParams.has(key)) defaultSearchParams.getAll(key).forEach((value)=>{
            searchParams.append(key, value);
        });
    });
    return searchParams;
}
// One-time check for submitter support
let $94342d10451cd5fe$var$_formDataSupportsSubmitter = null;
function $94342d10451cd5fe$var$isFormDataSubmitterSupported() {
    if ($94342d10451cd5fe$var$_formDataSupportsSubmitter === null) try {
        new FormData(document.createElement("form"), // @ts-expect-error if FormData supports the submitter parameter, this will throw
        0);
        $94342d10451cd5fe$var$_formDataSupportsSubmitter = false;
    } catch (e) {
        $94342d10451cd5fe$var$_formDataSupportsSubmitter = true;
    }
    return $94342d10451cd5fe$var$_formDataSupportsSubmitter;
}
const $94342d10451cd5fe$var$supportedFormEncTypes = new Set([
    "application/x-www-form-urlencoded",
    "multipart/form-data",
    "text/plain"
]);
function $94342d10451cd5fe$var$getFormEncType(encType) {
    if (encType != null && !$94342d10451cd5fe$var$supportedFormEncTypes.has(encType)) return null;
    return encType;
}
function $94342d10451cd5fe$var$getFormSubmissionInfo(target, basename) {
    let method;
    let action;
    let encType;
    let formData;
    let body;
    if ($94342d10451cd5fe$var$isFormElement(target)) {
        // When grabbing the action from the element, it will have had the basename
        // prefixed to ensure non-JS scenarios work, so strip it since we'll
        // re-prefix in the router
        let attr = target.getAttribute("action");
        action = attr ? (0, $48f15048fc5d75eb$export$b69e3301ce081aa3)(attr, basename) : null;
        method = target.getAttribute("method") || $94342d10451cd5fe$var$defaultMethod;
        encType = $94342d10451cd5fe$var$getFormEncType(target.getAttribute("enctype")) || $94342d10451cd5fe$var$defaultEncType;
        formData = new FormData(target);
    } else if ($94342d10451cd5fe$var$isButtonElement(target) || $94342d10451cd5fe$var$isInputElement(target) && (target.type === "submit" || target.type === "image")) {
        let form = target.form;
        if (form == null) throw new Error("Cannot submit a <button> or <input type=\"submit\"> without a <form>");
        // <button>/<input type="submit"> may override attributes of <form>
        // When grabbing the action from the element, it will have had the basename
        // prefixed to ensure non-JS scenarios work, so strip it since we'll
        // re-prefix in the router
        let attr = target.getAttribute("formaction") || form.getAttribute("action");
        action = attr ? (0, $48f15048fc5d75eb$export$b69e3301ce081aa3)(attr, basename) : null;
        method = target.getAttribute("formmethod") || form.getAttribute("method") || $94342d10451cd5fe$var$defaultMethod;
        encType = $94342d10451cd5fe$var$getFormEncType(target.getAttribute("formenctype")) || $94342d10451cd5fe$var$getFormEncType(form.getAttribute("enctype")) || $94342d10451cd5fe$var$defaultEncType;
        // Build a FormData object populated from a form and submitter
        formData = new FormData(form, target);
        // If this browser doesn't support the `FormData(el, submitter)` format,
        // then tack on the submitter value at the end.  This is a lightweight
        // solution that is not 100% spec compliant.  For complete support in older
        // browsers, consider using the `formdata-submitter-polyfill` package
        if (!$94342d10451cd5fe$var$isFormDataSubmitterSupported()) {
            let { name: name, type: type, value: value } = target;
            if (type === "image") {
                let prefix = name ? name + "." : "";
                formData.append(prefix + "x", "0");
                formData.append(prefix + "y", "0");
            } else if (name) formData.append(name, value);
        }
    } else if ($94342d10451cd5fe$var$isHtmlElement(target)) throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
    else {
        method = $94342d10451cd5fe$var$defaultMethod;
        action = null;
        encType = $94342d10451cd5fe$var$defaultEncType;
        body = target;
    }
    // Send body for <Form encType="text/plain" so we encode it into text
    if (formData && encType === "text/plain") {
        body = formData;
        formData = undefined;
    }
    return {
        action: action,
        method: method.toLowerCase(),
        encType: encType,
        formData: formData,
        body: body
    };
}
const $94342d10451cd5fe$var$_excluded = [
    "onClick",
    "relative",
    "reloadDocument",
    "replace",
    "state",
    "target",
    "to",
    "preventScrollReset",
    "viewTransition"
], $94342d10451cd5fe$var$_excluded2 = [
    "aria-current",
    "caseSensitive",
    "className",
    "end",
    "style",
    "to",
    "viewTransition",
    "children"
], $94342d10451cd5fe$var$_excluded3 = [
    "fetcherKey",
    "navigate",
    "reloadDocument",
    "replace",
    "state",
    "method",
    "action",
    "onSubmit",
    "relative",
    "preventScrollReset",
    "viewTransition"
];
// HEY YOU! DON'T TOUCH THIS VARIABLE!
//
// It is replaced with the proper version at build time via a babel plugin in
// the rollup config.
//
// Export a global property onto the window for React Router detection by the
// Core Web Vitals Technology Report.  This way they can configure the `wappalyzer`
// to detect and properly classify live websites as being built with React Router:
// https://github.com/HTTPArchive/wappalyzer/blob/main/src/technologies/r.json
const $94342d10451cd5fe$var$REACT_ROUTER_VERSION = "6";
try {
    window.__reactRouterVersion = $94342d10451cd5fe$var$REACT_ROUTER_VERSION;
} catch (e) {
// no-op
}
function $94342d10451cd5fe$export$1f3f55432a00e06d(routes, opts) {
    return (0, $48f15048fc5d75eb$export$baddd0131ee8c05b)({
        basename: opts == null ? void 0 : opts.basename,
        future: $94342d10451cd5fe$var$_extends({}, opts == null ? void 0 : opts.future, {
            v7_prependBasename: true
        }),
        history: (0, $48f15048fc5d75eb$export$719fc203c4e16dee)({
            window: opts == null ? void 0 : opts.window
        }),
        hydrationData: (opts == null ? void 0 : opts.hydrationData) || $94342d10451cd5fe$var$parseHydrationData(),
        routes: routes,
        mapRouteProperties: (0, $0a4cd71eaf9877fd$export$52b333d321859367),
        dataStrategy: opts == null ? void 0 : opts.dataStrategy,
        patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation,
        window: opts == null ? void 0 : opts.window
    }).initialize();
}
function $94342d10451cd5fe$export$1ba7ed8a3a7b3765(routes, opts) {
    return (0, $48f15048fc5d75eb$export$baddd0131ee8c05b)({
        basename: opts == null ? void 0 : opts.basename,
        future: $94342d10451cd5fe$var$_extends({}, opts == null ? void 0 : opts.future, {
            v7_prependBasename: true
        }),
        history: (0, $48f15048fc5d75eb$export$b71fdd3798280242)({
            window: opts == null ? void 0 : opts.window
        }),
        hydrationData: (opts == null ? void 0 : opts.hydrationData) || $94342d10451cd5fe$var$parseHydrationData(),
        routes: routes,
        mapRouteProperties: (0, $0a4cd71eaf9877fd$export$52b333d321859367),
        dataStrategy: opts == null ? void 0 : opts.dataStrategy,
        patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation,
        window: opts == null ? void 0 : opts.window
    }).initialize();
}
function $94342d10451cd5fe$var$parseHydrationData() {
    var _window;
    let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;
    if (state && state.errors) state = $94342d10451cd5fe$var$_extends({}, state, {
        errors: $94342d10451cd5fe$var$deserializeErrors(state.errors)
    });
    return state;
}
function $94342d10451cd5fe$var$deserializeErrors(errors) {
    if (!errors) return null;
    let entries = Object.entries(errors);
    let serialized = {};
    for (let [key, val] of entries){
        // Hey you!  If you change this, please change the corresponding logic in
        // serializeErrors in react-router-dom/server.tsx :)
        if (val && val.__type === "RouteErrorResponse") serialized[key] = new (0, $48f15048fc5d75eb$export$6c6580e81da25755)(val.status, val.statusText, val.data, val.internal === true);
        else if (val && val.__type === "Error") {
            // Attempt to reconstruct the right type of Error (i.e., ReferenceError)
            if (val.__subType) {
                let ErrorConstructor = window[val.__subType];
                if (typeof ErrorConstructor === "function") try {
                    // @ts-expect-error
                    let error = new ErrorConstructor(val.message);
                    // Wipe away the client-side stack trace.  Nothing to fill it in with
                    // because we don't serialize SSR stack traces for security reasons
                    error.stack = "";
                    serialized[key] = error;
                } catch (e) {
                // no-op - fall through and create a normal Error
                }
            }
            if (serialized[key] == null) {
                let error = new Error(val.message);
                // Wipe away the client-side stack trace.  Nothing to fill it in with
                // because we don't serialize SSR stack traces for security reasons
                error.stack = "";
                serialized[key] = error;
            }
        } else serialized[key] = val;
    }
    return serialized;
}
const $94342d10451cd5fe$export$7ad602f0e94e62d1 = /*#__PURE__*/ $7p28Q.createContext({
    isTransitioning: false
});
const $94342d10451cd5fe$export$148fd98d095596d4 = /*#__PURE__*/ $7p28Q.createContext(new Map());
//#endregion
////////////////////////////////////////////////////////////////////////////////
//#region Components
////////////////////////////////////////////////////////////////////////////////
/**
  Webpack + React 17 fails to compile on any of the following because webpack
  complains that `startTransition` doesn't exist in `React`:
  * import { startTransition } from "react"
  * import * as React from from "react";
    "startTransition" in React ? React.startTransition(() => setState()) : setState()
  * import * as React from from "react";
    "startTransition" in React ? React["startTransition"](() => setState()) : setState()

  Moving it to a constant such as the following solves the Webpack/React 17 issue:
  * import * as React from from "react";
    const START_TRANSITION = "startTransition";
    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()

  However, that introduces webpack/terser minification issues in production builds
  in React 18 where minification/obfuscation ends up removing the call of
  React.startTransition entirely from the first half of the ternary.  Grabbing
  this exported reference once up front resolves that issue.

  See https://github.com/remix-run/react-router/issues/10579
*/ const $94342d10451cd5fe$var$START_TRANSITION = "startTransition";
const $94342d10451cd5fe$var$startTransitionImpl = $7p28Q[$94342d10451cd5fe$var$START_TRANSITION];
const $94342d10451cd5fe$var$FLUSH_SYNC = "flushSync";
const $94342d10451cd5fe$var$flushSyncImpl = $b939d40a1c9f6035$exports[$94342d10451cd5fe$var$FLUSH_SYNC];
const $94342d10451cd5fe$var$USE_ID = "useId";
const $94342d10451cd5fe$var$useIdImpl = $7p28Q[$94342d10451cd5fe$var$USE_ID];
function $94342d10451cd5fe$var$startTransitionSafe(cb) {
    if ($94342d10451cd5fe$var$startTransitionImpl) $94342d10451cd5fe$var$startTransitionImpl(cb);
    else cb();
}
function $94342d10451cd5fe$var$flushSyncSafe(cb) {
    if ($94342d10451cd5fe$var$flushSyncImpl) $94342d10451cd5fe$var$flushSyncImpl(cb);
    else cb();
}
class $94342d10451cd5fe$var$Deferred {
    constructor(){
        this.status = "pending";
        this.promise = new Promise((resolve, reject)=>{
            this.resolve = (value)=>{
                if (this.status === "pending") {
                    this.status = "resolved";
                    resolve(value);
                }
            };
            this.reject = (reason)=>{
                if (this.status === "pending") {
                    this.status = "rejected";
                    reject(reason);
                }
            };
        });
    }
}
/**
 * Given a Remix Router instance, render the appropriate UI
 */ function $94342d10451cd5fe$export$323e4fc2fa4753fb(_ref) {
    let { fallbackElement: fallbackElement, router: router, future: future } = _ref;
    let [state, setStateImpl] = $7p28Q.useState(router.state);
    let [pendingState, setPendingState] = $7p28Q.useState();
    let [vtContext, setVtContext] = $7p28Q.useState({
        isTransitioning: false
    });
    let [renderDfd, setRenderDfd] = $7p28Q.useState();
    let [transition, setTransition] = $7p28Q.useState();
    let [interruption, setInterruption] = $7p28Q.useState();
    let fetcherData = $7p28Q.useRef(new Map());
    let { v7_startTransition: v7_startTransition } = future || {};
    let optInStartTransition = $7p28Q.useCallback((cb)=>{
        if (v7_startTransition) $94342d10451cd5fe$var$startTransitionSafe(cb);
        else cb();
    }, [
        v7_startTransition
    ]);
    let setState = $7p28Q.useCallback((newState, _ref2)=>{
        let { deletedFetchers: deletedFetchers, flushSync: flushSync, viewTransitionOpts: viewTransitionOpts } = _ref2;
        newState.fetchers.forEach((fetcher, key)=>{
            if (fetcher.data !== undefined) fetcherData.current.set(key, fetcher.data);
        });
        deletedFetchers.forEach((key)=>fetcherData.current.delete(key));
        let isViewTransitionUnavailable = router.window == null || router.window.document == null || typeof router.window.document.startViewTransition !== "function";
        // If this isn't a view transition or it's not available in this browser,
        // just update and be done with it
        if (!viewTransitionOpts || isViewTransitionUnavailable) {
            if (flushSync) $94342d10451cd5fe$var$flushSyncSafe(()=>setStateImpl(newState));
            else optInStartTransition(()=>setStateImpl(newState));
            return;
        }
        // flushSync + startViewTransition
        if (flushSync) {
            // Flush through the context to mark DOM elements as transition=ing
            $94342d10451cd5fe$var$flushSyncSafe(()=>{
                // Cancel any pending transitions
                if (transition) {
                    renderDfd && renderDfd.resolve();
                    transition.skipTransition();
                }
                setVtContext({
                    isTransitioning: true,
                    flushSync: true,
                    currentLocation: viewTransitionOpts.currentLocation,
                    nextLocation: viewTransitionOpts.nextLocation
                });
            });
            // Update the DOM
            let t = router.window.document.startViewTransition(()=>{
                $94342d10451cd5fe$var$flushSyncSafe(()=>setStateImpl(newState));
            });
            // Clean up after the animation completes
            t.finished.finally(()=>{
                $94342d10451cd5fe$var$flushSyncSafe(()=>{
                    setRenderDfd(undefined);
                    setTransition(undefined);
                    setPendingState(undefined);
                    setVtContext({
                        isTransitioning: false
                    });
                });
            });
            $94342d10451cd5fe$var$flushSyncSafe(()=>setTransition(t));
            return;
        }
        // startTransition + startViewTransition
        if (transition) {
            // Interrupting an in-progress transition, cancel and let everything flush
            // out, and then kick off a new transition from the interruption state
            renderDfd && renderDfd.resolve();
            transition.skipTransition();
            setInterruption({
                state: newState,
                currentLocation: viewTransitionOpts.currentLocation,
                nextLocation: viewTransitionOpts.nextLocation
            });
        } else {
            // Completed navigation update with opted-in view transitions, let 'er rip
            setPendingState(newState);
            setVtContext({
                isTransitioning: true,
                flushSync: false,
                currentLocation: viewTransitionOpts.currentLocation,
                nextLocation: viewTransitionOpts.nextLocation
            });
        }
    }, [
        router.window,
        transition,
        renderDfd,
        fetcherData,
        optInStartTransition
    ]);
    // Need to use a layout effect here so we are subscribed early enough to
    // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)
    $7p28Q.useLayoutEffect(()=>router.subscribe(setState), [
        router,
        setState
    ]);
    // When we start a view transition, create a Deferred we can use for the
    // eventual "completed" render
    $7p28Q.useEffect(()=>{
        if (vtContext.isTransitioning && !vtContext.flushSync) setRenderDfd(new $94342d10451cd5fe$var$Deferred());
    }, [
        vtContext
    ]);
    // Once the deferred is created, kick off startViewTransition() to update the
    // DOM and then wait on the Deferred to resolve (indicating the DOM update has
    // happened)
    $7p28Q.useEffect(()=>{
        if (renderDfd && pendingState && router.window) {
            let newState = pendingState;
            let renderPromise = renderDfd.promise;
            let transition = router.window.document.startViewTransition(async ()=>{
                optInStartTransition(()=>setStateImpl(newState));
                await renderPromise;
            });
            transition.finished.finally(()=>{
                setRenderDfd(undefined);
                setTransition(undefined);
                setPendingState(undefined);
                setVtContext({
                    isTransitioning: false
                });
            });
            setTransition(transition);
        }
    }, [
        optInStartTransition,
        pendingState,
        renderDfd,
        router.window
    ]);
    // When the new location finally renders and is committed to the DOM, this
    // effect will run to resolve the transition
    $7p28Q.useEffect(()=>{
        if (renderDfd && pendingState && state.location.key === pendingState.location.key) renderDfd.resolve();
    }, [
        renderDfd,
        transition,
        state.location,
        pendingState
    ]);
    // If we get interrupted with a new navigation during a transition, we skip
    // the active transition, let it cleanup, then kick it off again here
    $7p28Q.useEffect(()=>{
        if (!vtContext.isTransitioning && interruption) {
            setPendingState(interruption.state);
            setVtContext({
                isTransitioning: true,
                flushSync: false,
                currentLocation: interruption.currentLocation,
                nextLocation: interruption.nextLocation
            });
            setInterruption(undefined);
        }
    }, [
        vtContext.isTransitioning,
        interruption
    ]);
    $7p28Q.useEffect(()=>{
    // Only log this once on initial mount
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    let navigator = $7p28Q.useMemo(()=>{
        return {
            createHref: router.createHref,
            encodeLocation: router.encodeLocation,
            go: (n)=>router.navigate(n),
            push: (to, state, opts)=>router.navigate(to, {
                    state: state,
                    preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
                }),
            replace: (to, state, opts)=>router.navigate(to, {
                    replace: true,
                    state: state,
                    preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
                })
        };
    }, [
        router
    ]);
    let basename = router.basename || "/";
    let dataRouterContext = $7p28Q.useMemo(()=>({
            router: router,
            navigator: navigator,
            static: false,
            basename: basename
        }), [
        router,
        navigator,
        basename
    ]);
    let routerFuture = $7p28Q.useMemo(()=>({
            v7_relativeSplatPath: router.future.v7_relativeSplatPath
        }), [
        router.future.v7_relativeSplatPath
    ]);
    $7p28Q.useEffect(()=>(0, $0a4cd71eaf9877fd$export$db5148ec97d6af7a)(future, router.future), [
        future,
        router.future
    ]);
    // The fragment and {null} here are important!  We need them to keep React 18's
    // useId happy when we are server-rendering since we may have a <script> here
    // containing the hydrated server-side staticContext (from StaticRouterProvider).
    // useId relies on the component tree structure to generate deterministic id's
    // so we need to ensure it remains the same on the client even though
    // we don't need the <script> tag
    return /*#__PURE__*/ $7p28Q.createElement($7p28Q.Fragment, null, /*#__PURE__*/ $7p28Q.createElement((0, $0a4cd71eaf9877fd$export$3add0d5dce533e2e).Provider, {
        value: dataRouterContext
    }, /*#__PURE__*/ $7p28Q.createElement((0, $0a4cd71eaf9877fd$export$145dfa71566a64dc).Provider, {
        value: state
    }, /*#__PURE__*/ $7p28Q.createElement($94342d10451cd5fe$export$148fd98d095596d4.Provider, {
        value: fetcherData.current
    }, /*#__PURE__*/ $7p28Q.createElement($94342d10451cd5fe$export$7ad602f0e94e62d1.Provider, {
        value: vtContext
    }, /*#__PURE__*/ $7p28Q.createElement((0, $0a4cd71eaf9877fd$export$55185c17a0fcbe46), {
        basename: basename,
        location: state.location,
        navigationType: state.historyAction,
        navigator: navigator,
        future: routerFuture
    }, state.initialized || router.future.v7_partialHydration ? /*#__PURE__*/ $7p28Q.createElement($94342d10451cd5fe$var$MemoizedDataRoutes, {
        routes: router.routes,
        future: router.future,
        state: state
    }) : fallbackElement))))), null);
}
// Memoize to avoid re-renders when updating `ViewTransitionContext`
const $94342d10451cd5fe$var$MemoizedDataRoutes = /*#__PURE__*/ $7p28Q.memo($94342d10451cd5fe$var$DataRoutes);
function $94342d10451cd5fe$var$DataRoutes(_ref3) {
    let { routes: routes, future: future, state: state } = _ref3;
    return (0, $0a4cd71eaf9877fd$export$5fcee62552a12fbf)(routes, undefined, state, future);
}
/**
 * A `<Router>` for use in web browsers. Provides the cleanest URLs.
 */ function $94342d10451cd5fe$export$9ba4e89fdfa1fc54(_ref4) {
    let { basename: basename, children: children, future: future, window: window1 } = _ref4;
    let historyRef = $7p28Q.useRef();
    if (historyRef.current == null) historyRef.current = (0, $48f15048fc5d75eb$export$719fc203c4e16dee)({
        window: window1,
        v5Compat: true
    });
    let history = historyRef.current;
    let [state, setStateImpl] = $7p28Q.useState({
        action: history.action,
        location: history.location
    });
    let { v7_startTransition: v7_startTransition } = future || {};
    let setState = $7p28Q.useCallback((newState)=>{
        v7_startTransition && $94342d10451cd5fe$var$startTransitionImpl ? $94342d10451cd5fe$var$startTransitionImpl(()=>setStateImpl(newState)) : setStateImpl(newState);
    }, [
        setStateImpl,
        v7_startTransition
    ]);
    $7p28Q.useLayoutEffect(()=>history.listen(setState), [
        history,
        setState
    ]);
    $7p28Q.useEffect(()=>(0, $0a4cd71eaf9877fd$export$db5148ec97d6af7a)(future), [
        future
    ]);
    return /*#__PURE__*/ $7p28Q.createElement((0, $0a4cd71eaf9877fd$export$55185c17a0fcbe46), {
        basename: basename,
        children: children,
        location: state.location,
        navigationType: state.action,
        navigator: history,
        future: future
    });
}
/**
 * A `<Router>` for use in web browsers. Stores the location in the hash
 * portion of the URL so it is not sent to the server.
 */ function $94342d10451cd5fe$export$7221d69dcfc8e36b(_ref5) {
    let { basename: basename, children: children, future: future, window: window1 } = _ref5;
    let historyRef = $7p28Q.useRef();
    if (historyRef.current == null) historyRef.current = (0, $48f15048fc5d75eb$export$b71fdd3798280242)({
        window: window1,
        v5Compat: true
    });
    let history = historyRef.current;
    let [state, setStateImpl] = $7p28Q.useState({
        action: history.action,
        location: history.location
    });
    let { v7_startTransition: v7_startTransition } = future || {};
    let setState = $7p28Q.useCallback((newState)=>{
        v7_startTransition && $94342d10451cd5fe$var$startTransitionImpl ? $94342d10451cd5fe$var$startTransitionImpl(()=>setStateImpl(newState)) : setStateImpl(newState);
    }, [
        setStateImpl,
        v7_startTransition
    ]);
    $7p28Q.useLayoutEffect(()=>history.listen(setState), [
        history,
        setState
    ]);
    $7p28Q.useEffect(()=>(0, $0a4cd71eaf9877fd$export$db5148ec97d6af7a)(future), [
        future
    ]);
    return /*#__PURE__*/ $7p28Q.createElement((0, $0a4cd71eaf9877fd$export$55185c17a0fcbe46), {
        basename: basename,
        children: children,
        location: state.location,
        navigationType: state.action,
        navigator: history,
        future: future
    });
}
/**
 * A `<Router>` that accepts a pre-instantiated history object. It's important
 * to note that using your own history object is highly discouraged and may add
 * two versions of the history library to your bundles unless you use the same
 * version of the history library that React Router uses internally.
 */ function $94342d10451cd5fe$export$eefb0c834599897e(_ref6) {
    let { basename: basename, children: children, future: future, history: history } = _ref6;
    let [state, setStateImpl] = $7p28Q.useState({
        action: history.action,
        location: history.location
    });
    let { v7_startTransition: v7_startTransition } = future || {};
    let setState = $7p28Q.useCallback((newState)=>{
        v7_startTransition && $94342d10451cd5fe$var$startTransitionImpl ? $94342d10451cd5fe$var$startTransitionImpl(()=>setStateImpl(newState)) : setStateImpl(newState);
    }, [
        setStateImpl,
        v7_startTransition
    ]);
    $7p28Q.useLayoutEffect(()=>history.listen(setState), [
        history,
        setState
    ]);
    $7p28Q.useEffect(()=>(0, $0a4cd71eaf9877fd$export$db5148ec97d6af7a)(future), [
        future
    ]);
    return /*#__PURE__*/ $7p28Q.createElement((0, $0a4cd71eaf9877fd$export$55185c17a0fcbe46), {
        basename: basename,
        children: children,
        location: state.location,
        navigationType: state.action,
        navigator: history,
        future: future
    });
}
const $94342d10451cd5fe$var$isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
const $94342d10451cd5fe$var$ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
/**
 * The public API for rendering a history-aware `<a>`.
 */ const $94342d10451cd5fe$export$a6c7ac8248d6e38a = /*#__PURE__*/ $7p28Q.forwardRef(function LinkWithRef(_ref7, ref) {
    let { onClick: onClick, relative: relative, reloadDocument: reloadDocument, replace: replace, state: state, target: target, to: to, preventScrollReset: preventScrollReset, viewTransition: viewTransition } = _ref7, rest = $94342d10451cd5fe$var$_objectWithoutPropertiesLoose(_ref7, $94342d10451cd5fe$var$_excluded);
    let { basename: basename } = $7p28Q.useContext((0, $0a4cd71eaf9877fd$export$26749e8557646306));
    // Rendered into <a href> for absolute URLs
    let absoluteHref;
    let isExternal = false;
    if (typeof to === "string" && $94342d10451cd5fe$var$ABSOLUTE_URL_REGEX.test(to)) {
        // Render the absolute href server- and client-side
        absoluteHref = to;
        // Only check for external origins client-side
        if ($94342d10451cd5fe$var$isBrowser) try {
            let currentUrl = new URL(window.location.href);
            let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
            let path = (0, $48f15048fc5d75eb$export$b69e3301ce081aa3)(targetUrl.pathname, basename);
            if (targetUrl.origin === currentUrl.origin && path != null) // Strip the protocol/origin/basename for same-origin absolute URLs
            to = path + targetUrl.search + targetUrl.hash;
            else isExternal = true;
        } catch (e) {}
    }
    // Rendered into <a href> for relative URLs
    let href = (0, $0a4cd71eaf9877fd$export$b66bb29c5006f12f)(to, {
        relative: relative
    });
    let internalOnClick = $94342d10451cd5fe$export$67621102c14d847(to, {
        replace: replace,
        state: state,
        target: target,
        preventScrollReset: preventScrollReset,
        relative: relative,
        viewTransition: viewTransition
    });
    function handleClick(event) {
        if (onClick) onClick(event);
        if (!event.defaultPrevented) internalOnClick(event);
    }
    return(/*#__PURE__*/ // eslint-disable-next-line jsx-a11y/anchor-has-content
    $7p28Q.createElement("a", $94342d10451cd5fe$var$_extends({}, rest, {
        href: absoluteHref || href,
        onClick: isExternal || reloadDocument ? onClick : handleClick,
        ref: ref,
        target: target
    })));
});
/**
 * A `<Link>` wrapper that knows if it's "active" or not.
 */ const $94342d10451cd5fe$export$b0d92dbee9b5b60d = /*#__PURE__*/ $7p28Q.forwardRef(function NavLinkWithRef(_ref8, ref) {
    let { "aria-current": ariaCurrentProp = "page", caseSensitive: caseSensitive = false, className: classNameProp = "", end: end = false, style: styleProp, to: to, viewTransition: viewTransition, children: children } = _ref8, rest = $94342d10451cd5fe$var$_objectWithoutPropertiesLoose(_ref8, $94342d10451cd5fe$var$_excluded2);
    let path = (0, $0a4cd71eaf9877fd$export$e75d2a2d1b3c245b)(to, {
        relative: rest.relative
    });
    let location = (0, $0a4cd71eaf9877fd$export$45d76561a5302f2b)();
    let routerState = $7p28Q.useContext((0, $0a4cd71eaf9877fd$export$145dfa71566a64dc));
    let { navigator: navigator, basename: basename } = $7p28Q.useContext((0, $0a4cd71eaf9877fd$export$26749e8557646306));
    let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
    // eslint-disable-next-line react-hooks/rules-of-hooks
    $94342d10451cd5fe$export$e262bd1977bea848(path) && viewTransition === true;
    let toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;
    let locationPathname = location.pathname;
    let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
    if (!caseSensitive) {
        locationPathname = locationPathname.toLowerCase();
        nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
        toPathname = toPathname.toLowerCase();
    }
    if (nextLocationPathname && basename) nextLocationPathname = (0, $48f15048fc5d75eb$export$b69e3301ce081aa3)(nextLocationPathname, basename) || nextLocationPathname;
    // If the `to` has a trailing slash, look at that exact spot.  Otherwise,
    // we're looking for a slash _after_ what's in `to`.  For example:
    //
    // <NavLink to="/users"> and <NavLink to="/users/">
    // both want to look for a / at index 6 to match URL `/users/matt`
    const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;
    let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";
    let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
    let renderProps = {
        isActive: isActive,
        isPending: isPending,
        isTransitioning: isTransitioning
    };
    let ariaCurrent = isActive ? ariaCurrentProp : undefined;
    let className;
    if (typeof classNameProp === "function") className = classNameProp(renderProps);
    else // If the className prop is not a function, we use a default `active`
    // class for <NavLink />s that are active. In v5 `active` was the default
    // value for `activeClassName`, but we are removing that API and can still
    // use the old default behavior for a cleaner upgrade path and keep the
    // simple styling rules working as they currently do.
    className = [
        classNameProp,
        isActive ? "active" : null,
        isPending ? "pending" : null,
        isTransitioning ? "transitioning" : null
    ].filter(Boolean).join(" ");
    let style = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
    return /*#__PURE__*/ $7p28Q.createElement($94342d10451cd5fe$export$a6c7ac8248d6e38a, $94342d10451cd5fe$var$_extends({}, rest, {
        "aria-current": ariaCurrent,
        className: className,
        ref: ref,
        style: style,
        to: to,
        viewTransition: viewTransition
    }), typeof children === "function" ? children(renderProps) : children);
});
/**
 * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except
 * that the interaction with the server is with `fetch` instead of new document
 * requests, allowing components to add nicer UX to the page as the form is
 * submitted and returns with data.
 */ const $94342d10451cd5fe$export$a7fed597f4b8afd8 = /*#__PURE__*/ $7p28Q.forwardRef((_ref9, forwardedRef)=>{
    let { fetcherKey: fetcherKey, navigate: navigate, reloadDocument: reloadDocument, replace: replace, state: state, method: method = $94342d10451cd5fe$var$defaultMethod, action: action, onSubmit: onSubmit, relative: relative, preventScrollReset: preventScrollReset, viewTransition: viewTransition } = _ref9, props = $94342d10451cd5fe$var$_objectWithoutPropertiesLoose(_ref9, $94342d10451cd5fe$var$_excluded3);
    let submit = $94342d10451cd5fe$export$47c85c6e3a081d3();
    let formAction = $94342d10451cd5fe$export$89a6bd6db0d97c56(action, {
        relative: relative
    });
    let formMethod = method.toLowerCase() === "get" ? "get" : "post";
    let submitHandler = (event)=>{
        onSubmit && onSubmit(event);
        if (event.defaultPrevented) return;
        event.preventDefault();
        let submitter = event.nativeEvent.submitter;
        let submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method;
        submit(submitter || event.currentTarget, {
            fetcherKey: fetcherKey,
            method: submitMethod,
            navigate: navigate,
            replace: replace,
            state: state,
            relative: relative,
            preventScrollReset: preventScrollReset,
            viewTransition: viewTransition
        });
    };
    return /*#__PURE__*/ $7p28Q.createElement("form", $94342d10451cd5fe$var$_extends({
        ref: forwardedRef,
        method: formMethod,
        action: formAction,
        onSubmit: reloadDocument ? onSubmit : submitHandler
    }, props));
});
/**
 * This component will emulate the browser's scroll restoration on location
 * changes.
 */ function $94342d10451cd5fe$export$11aac1aab828f1fa(_ref10) {
    let { getKey: getKey, storageKey: storageKey } = _ref10;
    $94342d10451cd5fe$export$25057cfe5591e3e9({
        getKey: getKey,
        storageKey: storageKey
    });
    return null;
}
//#endregion
////////////////////////////////////////////////////////////////////////////////
//#region Hooks
////////////////////////////////////////////////////////////////////////////////
var $94342d10451cd5fe$var$DataRouterHook;
(function(DataRouterHook) {
    DataRouterHook["UseScrollRestoration"] = "useScrollRestoration";
    DataRouterHook["UseSubmit"] = "useSubmit";
    DataRouterHook["UseSubmitFetcher"] = "useSubmitFetcher";
    DataRouterHook["UseFetcher"] = "useFetcher";
    DataRouterHook["useViewTransitionState"] = "useViewTransitionState";
})($94342d10451cd5fe$var$DataRouterHook || ($94342d10451cd5fe$var$DataRouterHook = {}));
var $94342d10451cd5fe$var$DataRouterStateHook;
(function(DataRouterStateHook) {
    DataRouterStateHook["UseFetcher"] = "useFetcher";
    DataRouterStateHook["UseFetchers"] = "useFetchers";
    DataRouterStateHook["UseScrollRestoration"] = "useScrollRestoration";
})($94342d10451cd5fe$var$DataRouterStateHook || ($94342d10451cd5fe$var$DataRouterStateHook = {}));
// Internal hooks
function $94342d10451cd5fe$var$getDataRouterConsoleError(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.";
}
function $94342d10451cd5fe$var$useDataRouterContext(hookName) {
    let ctx = $7p28Q.useContext((0, $0a4cd71eaf9877fd$export$3add0d5dce533e2e));
    !ctx && (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
    return ctx;
}
function $94342d10451cd5fe$var$useDataRouterState(hookName) {
    let state = $7p28Q.useContext((0, $0a4cd71eaf9877fd$export$145dfa71566a64dc));
    !state && (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
    return state;
}
// External hooks
/**
 * Handles the click behavior for router `<Link>` components. This is useful if
 * you need to create custom `<Link>` components with the same click behavior we
 * use in our exported `<Link>`.
 */ function $94342d10451cd5fe$export$67621102c14d847(to, _temp) {
    let { target: target, replace: replaceProp, state: state, preventScrollReset: preventScrollReset, relative: relative, viewTransition: viewTransition } = _temp === void 0 ? {} : _temp;
    let navigate = (0, $0a4cd71eaf9877fd$export$9770f232ac06a008)();
    let location = (0, $0a4cd71eaf9877fd$export$45d76561a5302f2b)();
    let path = (0, $0a4cd71eaf9877fd$export$e75d2a2d1b3c245b)(to, {
        relative: relative
    });
    return $7p28Q.useCallback((event)=>{
        if ($94342d10451cd5fe$var$shouldProcessLinkClick(event, target)) {
            event.preventDefault();
            // If the URL hasn't changed, a regular <a> will do a replace instead of
            // a push, so do the same here unless the replace prop is explicitly set
            let replace = replaceProp !== undefined ? replaceProp : (0, $48f15048fc5d75eb$export$fe53371bee54353d)(location) === (0, $48f15048fc5d75eb$export$fe53371bee54353d)(path);
            navigate(to, {
                replace: replace,
                state: state,
                preventScrollReset: preventScrollReset,
                relative: relative,
                viewTransition: viewTransition
            });
        }
    }, [
        location,
        navigate,
        path,
        replaceProp,
        state,
        target,
        to,
        preventScrollReset,
        relative,
        viewTransition
    ]);
}
/**
 * A convenient wrapper for reading and writing search parameters via the
 * URLSearchParams interface.
 */ function $94342d10451cd5fe$export$f1a78c17382fe22a(defaultInit) {
    let defaultSearchParamsRef = $7p28Q.useRef($94342d10451cd5fe$export$a2e4e2dcc7b1f22f(defaultInit));
    let hasSetSearchParamsRef = $7p28Q.useRef(false);
    let location = (0, $0a4cd71eaf9877fd$export$45d76561a5302f2b)();
    let searchParams = $7p28Q.useMemo(()=>// Only merge in the defaults if we haven't yet called setSearchParams.
        // Once we call that we want those to take precedence, otherwise you can't
        // remove a param with setSearchParams({}) if it has an initial value
        $94342d10451cd5fe$var$getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [
        location.search
    ]);
    let navigate = (0, $0a4cd71eaf9877fd$export$9770f232ac06a008)();
    let setSearchParams = $7p28Q.useCallback((nextInit, navigateOptions)=>{
        const newSearchParams = $94342d10451cd5fe$export$a2e4e2dcc7b1f22f(typeof nextInit === "function" ? nextInit(searchParams) : nextInit);
        hasSetSearchParamsRef.current = true;
        navigate("?" + newSearchParams, navigateOptions);
    }, [
        navigate,
        searchParams
    ]);
    return [
        searchParams,
        setSearchParams
    ];
}
function $94342d10451cd5fe$var$validateClientSideSubmission() {
    if (typeof document === "undefined") throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
}
let $94342d10451cd5fe$var$fetcherId = 0;
let $94342d10451cd5fe$var$getUniqueFetcherId = ()=>"__" + String(++$94342d10451cd5fe$var$fetcherId) + "__";
/**
 * Returns a function that may be used to programmatically submit a form (or
 * some arbitrary data) to the server.
 */ function $94342d10451cd5fe$export$47c85c6e3a081d3() {
    let { router: router } = $94342d10451cd5fe$var$useDataRouterContext($94342d10451cd5fe$var$DataRouterHook.UseSubmit);
    let { basename: basename } = $7p28Q.useContext((0, $0a4cd71eaf9877fd$export$26749e8557646306));
    let currentRouteId = (0, $0a4cd71eaf9877fd$export$5fc8298006ad9e58)();
    return $7p28Q.useCallback(function(target, options) {
        if (options === void 0) options = {};
        $94342d10451cd5fe$var$validateClientSideSubmission();
        let { action: action, method: method, encType: encType, formData: formData, body: body } = $94342d10451cd5fe$var$getFormSubmissionInfo(target, basename);
        if (options.navigate === false) {
            let key = options.fetcherKey || $94342d10451cd5fe$var$getUniqueFetcherId();
            router.fetch(key, currentRouteId, options.action || action, {
                preventScrollReset: options.preventScrollReset,
                formData: formData,
                body: body,
                formMethod: options.method || method,
                formEncType: options.encType || encType,
                flushSync: options.flushSync
            });
        } else router.navigate(options.action || action, {
            preventScrollReset: options.preventScrollReset,
            formData: formData,
            body: body,
            formMethod: options.method || method,
            formEncType: options.encType || encType,
            replace: options.replace,
            state: options.state,
            fromRouteId: currentRouteId,
            flushSync: options.flushSync,
            viewTransition: options.viewTransition
        });
    }, [
        router,
        basename,
        currentRouteId
    ]);
}
// v7: Eventually we should deprecate this entirely in favor of using the
// router method directly?
function $94342d10451cd5fe$export$89a6bd6db0d97c56(action, _temp2) {
    let { relative: relative } = _temp2 === void 0 ? {} : _temp2;
    let { basename: basename } = $7p28Q.useContext((0, $0a4cd71eaf9877fd$export$26749e8557646306));
    let routeContext = $7p28Q.useContext((0, $0a4cd71eaf9877fd$export$9072aa6dd1f93057));
    !routeContext && (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
    let [match] = routeContext.matches.slice(-1);
    // Shallow clone path so we can modify it below, otherwise we modify the
    // object referenced by useMemo inside useResolvedPath
    let path = $94342d10451cd5fe$var$_extends({}, (0, $0a4cd71eaf9877fd$export$e75d2a2d1b3c245b)(action ? action : ".", {
        relative: relative
    }));
    // If no action was specified, browsers will persist current search params
    // when determining the path, so match that behavior
    // https://github.com/remix-run/remix/issues/927
    let location = (0, $0a4cd71eaf9877fd$export$45d76561a5302f2b)();
    if (action == null) {
        // Safe to write to this directly here since if action was undefined, we
        // would have called useResolvedPath(".") which will never include a search
        path.search = location.search;
        // When grabbing search params from the URL, remove any included ?index param
        // since it might not apply to our contextual route.  We add it back based
        // on match.route.index below
        let params = new URLSearchParams(path.search);
        let indexValues = params.getAll("index");
        let hasNakedIndexParam = indexValues.some((v)=>v === "");
        if (hasNakedIndexParam) {
            params.delete("index");
            indexValues.filter((v)=>v).forEach((v)=>params.append("index", v));
            let qs = params.toString();
            path.search = qs ? "?" + qs : "";
        }
    }
    if ((!action || action === ".") && match.route.index) path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
    // If we're operating within a basename, prepend it to the pathname prior
    // to creating the form action.  If this is a root navigation, then just use
    // the raw basename which allows the basename to have full control over the
    // presence of a trailing slash on root actions
    if (basename !== "/") path.pathname = path.pathname === "/" ? basename : (0, $48f15048fc5d75eb$export$86d9a7913e44197e)([
        basename,
        path.pathname
    ]);
    return (0, $48f15048fc5d75eb$export$fe53371bee54353d)(path);
}
// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`
/**
 * Interacts with route loaders and actions without causing a navigation. Great
 * for any interaction that stays on the same page.
 */ function $94342d10451cd5fe$export$5b0d2d9a9921565a(_temp3) {
    var _route$matches;
    let { key: key } = _temp3 === void 0 ? {} : _temp3;
    let { router: router } = $94342d10451cd5fe$var$useDataRouterContext($94342d10451cd5fe$var$DataRouterHook.UseFetcher);
    let state = $94342d10451cd5fe$var$useDataRouterState($94342d10451cd5fe$var$DataRouterStateHook.UseFetcher);
    let fetcherData = $7p28Q.useContext($94342d10451cd5fe$export$148fd98d095596d4);
    let route = $7p28Q.useContext((0, $0a4cd71eaf9877fd$export$9072aa6dd1f93057));
    let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;
    !fetcherData && (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
    !route && (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
    !(routeId != null) && (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
    // Fetcher key handling
    // OK to call conditionally to feature detect `useId`
    // eslint-disable-next-line react-hooks/rules-of-hooks
    let defaultKey = $94342d10451cd5fe$var$useIdImpl ? $94342d10451cd5fe$var$useIdImpl() : "";
    let [fetcherKey, setFetcherKey] = $7p28Q.useState(key || defaultKey);
    if (key && key !== fetcherKey) setFetcherKey(key);
    else if (!fetcherKey) // We will only fall through here when `useId` is not available
    setFetcherKey($94342d10451cd5fe$var$getUniqueFetcherId());
    // Registration/cleanup
    $7p28Q.useEffect(()=>{
        router.getFetcher(fetcherKey);
        return ()=>{
            // Tell the router we've unmounted - if v7_fetcherPersist is enabled this
            // will not delete immediately but instead queue up a delete after the
            // fetcher returns to an `idle` state
            router.deleteFetcher(fetcherKey);
        };
    }, [
        router,
        fetcherKey
    ]);
    // Fetcher additions
    let load = $7p28Q.useCallback((href, opts)=>{
        !routeId && (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
        router.fetch(fetcherKey, routeId, href, opts);
    }, [
        fetcherKey,
        routeId,
        router
    ]);
    let submitImpl = $94342d10451cd5fe$export$47c85c6e3a081d3();
    let submit = $7p28Q.useCallback((target, opts)=>{
        submitImpl(target, $94342d10451cd5fe$var$_extends({}, opts, {
            navigate: false,
            fetcherKey: fetcherKey
        }));
    }, [
        fetcherKey,
        submitImpl
    ]);
    let FetcherForm = $7p28Q.useMemo(()=>{
        let FetcherForm = /*#__PURE__*/ $7p28Q.forwardRef((props, ref)=>{
            return /*#__PURE__*/ $7p28Q.createElement($94342d10451cd5fe$export$a7fed597f4b8afd8, $94342d10451cd5fe$var$_extends({}, props, {
                navigate: false,
                fetcherKey: fetcherKey,
                ref: ref
            }));
        });
        return FetcherForm;
    }, [
        fetcherKey
    ]);
    // Exposed FetcherWithComponents
    let fetcher = state.fetchers.get(fetcherKey) || (0, $48f15048fc5d75eb$export$52eace9c284d3585);
    let data = fetcherData.get(fetcherKey);
    let fetcherWithComponents = $7p28Q.useMemo(()=>$94342d10451cd5fe$var$_extends({
            Form: FetcherForm,
            submit: submit,
            load: load
        }, fetcher, {
            data: data
        }), [
        FetcherForm,
        submit,
        load,
        fetcher,
        data
    ]);
    return fetcherWithComponents;
}
/**
 * Provides all fetchers currently on the page. Useful for layouts and parent
 * routes that need to provide pending/optimistic UI regarding the fetch.
 */ function $94342d10451cd5fe$export$fa996778a3a31087() {
    let state = $94342d10451cd5fe$var$useDataRouterState($94342d10451cd5fe$var$DataRouterStateHook.UseFetchers);
    return Array.from(state.fetchers.entries()).map((_ref11)=>{
        let [key, fetcher] = _ref11;
        return $94342d10451cd5fe$var$_extends({}, fetcher, {
            key: key
        });
    });
}
const $94342d10451cd5fe$var$SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
let $94342d10451cd5fe$var$savedScrollPositions = {};
/**
 * When rendered inside a RouterProvider, will restore scroll positions on navigations
 */ function $94342d10451cd5fe$export$25057cfe5591e3e9(_temp4) {
    let { getKey: getKey, storageKey: storageKey } = _temp4 === void 0 ? {} : _temp4;
    let { router: router } = $94342d10451cd5fe$var$useDataRouterContext($94342d10451cd5fe$var$DataRouterHook.UseScrollRestoration);
    let { restoreScrollPosition: restoreScrollPosition, preventScrollReset: preventScrollReset } = $94342d10451cd5fe$var$useDataRouterState($94342d10451cd5fe$var$DataRouterStateHook.UseScrollRestoration);
    let { basename: basename } = $7p28Q.useContext((0, $0a4cd71eaf9877fd$export$26749e8557646306));
    let location = (0, $0a4cd71eaf9877fd$export$45d76561a5302f2b)();
    let matches = (0, $0a4cd71eaf9877fd$export$2378eb7f5ff86053)();
    let navigation = (0, $0a4cd71eaf9877fd$export$d0fd4b7106de2769)();
    // Trigger manual scroll restoration while we're active
    $7p28Q.useEffect(()=>{
        window.history.scrollRestoration = "manual";
        return ()=>{
            window.history.scrollRestoration = "auto";
        };
    }, []);
    // Save positions on pagehide
    $94342d10451cd5fe$var$usePageHide($7p28Q.useCallback(()=>{
        if (navigation.state === "idle") {
            let key = (getKey ? getKey(location, matches) : null) || location.key;
            $94342d10451cd5fe$var$savedScrollPositions[key] = window.scrollY;
        }
        try {
            sessionStorage.setItem(storageKey || $94342d10451cd5fe$var$SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify($94342d10451cd5fe$var$savedScrollPositions));
        } catch (error) {}
        window.history.scrollRestoration = "auto";
    }, [
        storageKey,
        getKey,
        navigation.state,
        location,
        matches
    ]));
    // Read in any saved scroll locations
    if (typeof document !== "undefined") {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        $7p28Q.useLayoutEffect(()=>{
            try {
                let sessionPositions = sessionStorage.getItem(storageKey || $94342d10451cd5fe$var$SCROLL_RESTORATION_STORAGE_KEY);
                if (sessionPositions) $94342d10451cd5fe$var$savedScrollPositions = JSON.parse(sessionPositions);
            } catch (e) {
            // no-op, use default empty object
            }
        }, [
            storageKey
        ]);
        // Enable scroll restoration in the router
        // eslint-disable-next-line react-hooks/rules-of-hooks
        $7p28Q.useLayoutEffect(()=>{
            let getKeyWithoutBasename = getKey && basename !== "/" ? (location, matches)=>getKey($94342d10451cd5fe$var$_extends({}, location, {
                    pathname: (0, $48f15048fc5d75eb$export$b69e3301ce081aa3)(location.pathname, basename) || location.pathname
                }), matches) : getKey;
            let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration($94342d10451cd5fe$var$savedScrollPositions, ()=>window.scrollY, getKeyWithoutBasename);
            return ()=>disableScrollRestoration && disableScrollRestoration();
        }, [
            router,
            basename,
            getKey
        ]);
        // Restore scrolling when state.restoreScrollPosition changes
        // eslint-disable-next-line react-hooks/rules-of-hooks
        $7p28Q.useLayoutEffect(()=>{
            // Explicit false means don't do anything (used for submissions)
            if (restoreScrollPosition === false) return;
            // been here before, scroll to it
            if (typeof restoreScrollPosition === "number") {
                window.scrollTo(0, restoreScrollPosition);
                return;
            }
            // try to scroll to the hash
            if (location.hash) {
                let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));
                if (el) {
                    el.scrollIntoView();
                    return;
                }
            }
            // Don't reset if this navigation opted out
            if (preventScrollReset === true) return;
            // otherwise go to the top on new locations
            window.scrollTo(0, 0);
        }, [
            location,
            restoreScrollPosition,
            preventScrollReset
        ]);
    }
}
/**
 * Setup a callback to be fired on the window's `beforeunload` event. This is
 * useful for saving some data to `window.localStorage` just before the page
 * refreshes.
 *
 * Note: The `callback` argument should be a function created with
 * `React.useCallback()`.
 */ function $94342d10451cd5fe$export$c0a586b329cae57d(callback, options) {
    let { capture: capture } = options || {};
    $7p28Q.useEffect(()=>{
        let opts = capture != null ? {
            capture: capture
        } : undefined;
        window.addEventListener("beforeunload", callback, opts);
        return ()=>{
            window.removeEventListener("beforeunload", callback, opts);
        };
    }, [
        callback,
        capture
    ]);
}
/**
 * Setup a callback to be fired on the window's `pagehide` event. This is
 * useful for saving some data to `window.localStorage` just before the page
 * refreshes.  This event is better supported than beforeunload across browsers.
 *
 * Note: The `callback` argument should be a function created with
 * `React.useCallback()`.
 */ function $94342d10451cd5fe$var$usePageHide(callback, options) {
    let { capture: capture } = options || {};
    $7p28Q.useEffect(()=>{
        let opts = capture != null ? {
            capture: capture
        } : undefined;
        window.addEventListener("pagehide", callback, opts);
        return ()=>{
            window.removeEventListener("pagehide", callback, opts);
        };
    }, [
        callback,
        capture
    ]);
}
/**
 * Wrapper around useBlocker to show a window.confirm prompt to users instead
 * of building a custom UI with useBlocker.
 *
 * Warning: This has *a lot of rough edges* and behaves very differently (and
 * very incorrectly in some cases) across browsers if user click addition
 * back/forward navigations while the confirm is open.  Use at your own risk.
 */ function $94342d10451cd5fe$export$39f4eb3dbd812741(_ref12) {
    let { when: when, message: message } = _ref12;
    let blocker = (0, $0a4cd71eaf9877fd$export$b273b3273281a049)(when);
    $7p28Q.useEffect(()=>{
        if (blocker.state === "blocked") {
            let proceed = window.confirm(message);
            if (proceed) // This timeout is needed to avoid a weird "race" on POP navigations
            // between the `window.history` revert navigation and the result of
            // `window.confirm`
            setTimeout(blocker.proceed, 0);
            else blocker.reset();
        }
    }, [
        blocker,
        message
    ]);
    $7p28Q.useEffect(()=>{
        if (blocker.state === "blocked" && !when) blocker.reset();
    }, [
        blocker,
        when
    ]);
}
/**
 * Return a boolean indicating if there is an active view transition to the
 * given href.  You can use this value to render CSS classes or viewTransitionName
 * styles onto your elements
 *
 * @param href The destination href
 * @param [opts.relative] Relative routing type ("route" | "path")
 */ function $94342d10451cd5fe$export$e262bd1977bea848(to, opts) {
    if (opts === void 0) opts = {};
    let vtContext = $7p28Q.useContext($94342d10451cd5fe$export$7ad602f0e94e62d1);
    !(vtContext != null) && (0, $48f15048fc5d75eb$export$3e9cee6b33872309)(false);
    let { basename: basename } = $94342d10451cd5fe$var$useDataRouterContext($94342d10451cd5fe$var$DataRouterHook.useViewTransitionState);
    let path = (0, $0a4cd71eaf9877fd$export$e75d2a2d1b3c245b)(to, {
        relative: opts.relative
    });
    if (!vtContext.isTransitioning) return false;
    let currentPath = (0, $48f15048fc5d75eb$export$b69e3301ce081aa3)(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;
    let nextPath = (0, $48f15048fc5d75eb$export$b69e3301ce081aa3)(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;
    // Transition is active if we're going to or coming from the indicated
    // destination.  This ensures that other PUSH navigations that reverse
    // an indicated transition apply.  I.e., on the list view you have:
    //
    //   <NavLink to="/details/1" viewTransition>
    //
    // If you click the breadcrumb back to the list view:
    //
    //   <NavLink to="/list" viewTransition>
    //
    // We should apply the transition because it's indicated as active going
    // from /list -> /details/1 and therefore should be active on the reverse
    // (even though this isn't strictly a POP reverse)
    return (0, $48f15048fc5d75eb$export$81336c211d5ff295)(path.pathname, nextPath) != null || (0, $48f15048fc5d75eb$export$81336c211d5ff295)(path.pathname, currentPath) != null;
}


// src/components/Auth/AuthGuard.jsx

parcelRequire("7p28Q");

// src/hooks/useAuth.jsx


var $7p28Q = parcelRequire("7p28Q");
const $5406cae867311a40$export$6d3c090e66a883b1 = ()=>undefined;


/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
 */ const $ee1ab2624407a779$export$588c7fdda06fbb0a = {
    /**
     * @define {boolean} Whether this is the client Node.js SDK.
     */ NODE_CLIENT: false,
    /**
     * @define {boolean} Whether this is the Admin Node.js SDK.
     */ NODE_ADMIN: false,
    /**
     * Firebase SDK Version
     */ SDK_VERSION: '${JSCORE_VERSION}'
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Throws an error if the provided assertion is falsy
 */ const $ee1ab2624407a779$export$a7a9523472993e97 = function(assertion, message) {
    if (!assertion) throw $ee1ab2624407a779$export$a39cad550e7ab28a(message);
};
/**
 * Returns an Error object suitable for throwing.
 */ const $ee1ab2624407a779$export$a39cad550e7ab28a = function(message) {
    return new Error('Firebase Database (' + $ee1ab2624407a779$export$588c7fdda06fbb0a.SDK_VERSION + ') INTERNAL ASSERT FAILED: ' + message);
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $ee1ab2624407a779$var$stringToByteArray$1 = function(str) {
    // TODO(user): Use native implementations if/when available
    const out = [];
    let p = 0;
    for(let i = 0; i < str.length; i++){
        let c = str.charCodeAt(i);
        if (c < 128) out[p++] = c;
        else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
        } else if ((c & 0xfc00) === 0xd800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
            // Surrogate Pair
            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        } else {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        }
    }
    return out;
};
/**
 * Turns an array of numbers into the string given by the concatenation of the
 * characters to which the numbers correspond.
 * @param bytes Array of numbers representing characters.
 * @return Stringification of the array.
 */ const $ee1ab2624407a779$var$byteArrayToString = function(bytes) {
    // TODO(user): Use native implementations if/when available
    const out = [];
    let pos = 0, c = 0;
    while(pos < bytes.length){
        const c1 = bytes[pos++];
        if (c1 < 128) out[c++] = String.fromCharCode(c1);
        else if (c1 > 191 && c1 < 224) {
            const c2 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
        } else if (c1 > 239 && c1 < 365) {
            // Surrogate Pair
            const c2 = bytes[pos++];
            const c3 = bytes[pos++];
            const c4 = bytes[pos++];
            const u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;
            out[c++] = String.fromCharCode(0xd800 + (u >> 10));
            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
        } else {
            const c2 = bytes[pos++];
            const c3 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
        }
    }
    return out.join('');
};
// We define it as an object literal instead of a class because a class compiled down to es5 can't
// be treeshaked. https://github.com/rollup/rollup/issues/1691
// Static lookup maps, lazily populated by init_()
// TODO(dlarocque): Define this as a class, since we no longer target ES5.
const $ee1ab2624407a779$export$b3b2de96497acc47 = {
    /**
     * Maps bytes to characters.
     */ byteToCharMap_: null,
    /**
     * Maps characters to bytes.
     */ charToByteMap_: null,
    /**
     * Maps bytes to websafe characters.
     * @private
     */ byteToCharMapWebSafe_: null,
    /**
     * Maps websafe characters to bytes.
     * @private
     */ charToByteMapWebSafe_: null,
    /**
     * Our default alphabet, shared between
     * ENCODED_VALS and ENCODED_VALS_WEBSAFE
     */ ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
    /**
     * Our default alphabet. Value 64 (=) is special; it means "nothing."
     */ get ENCODED_VALS () {
        return this.ENCODED_VALS_BASE + '+/=';
    },
    /**
     * Our websafe alphabet.
     */ get ENCODED_VALS_WEBSAFE () {
        return this.ENCODED_VALS_BASE + '-_.';
    },
    /**
     * Whether this browser supports the atob and btoa functions. This extension
     * started at Mozilla but is now implemented by many browsers. We use the
     * ASSUME_* variables to avoid pulling in the full useragent detection library
     * but still allowing the standard per-browser compilations.
     *
     */ HAS_NATIVE_SUPPORT: typeof atob === 'function',
    /**
     * Base64-encode an array of bytes.
     *
     * @param input An array of bytes (numbers with
     *     value in [0, 255]) to encode.
     * @param webSafe Boolean indicating we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */ encodeByteArray (input, webSafe) {
        if (!Array.isArray(input)) throw Error('encodeByteArray takes an array as a parameter');
        this.init_();
        const byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
        const output = [];
        for(let i = 0; i < input.length; i += 3){
            const byte1 = input[i];
            const haveByte2 = i + 1 < input.length;
            const byte2 = haveByte2 ? input[i + 1] : 0;
            const haveByte3 = i + 2 < input.length;
            const byte3 = haveByte3 ? input[i + 2] : 0;
            const outByte1 = byte1 >> 2;
            const outByte2 = (byte1 & 0x03) << 4 | byte2 >> 4;
            let outByte3 = (byte2 & 0x0f) << 2 | byte3 >> 6;
            let outByte4 = byte3 & 0x3f;
            if (!haveByte3) {
                outByte4 = 64;
                if (!haveByte2) outByte3 = 64;
            }
            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join('');
    },
    /**
     * Base64-encode a string.
     *
     * @param input A string to encode.
     * @param webSafe If true, we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */ encodeString (input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) return btoa(input);
        return this.encodeByteArray($ee1ab2624407a779$var$stringToByteArray$1(input), webSafe);
    },
    /**
     * Base64-decode a string.
     *
     * @param input to decode.
     * @param webSafe True if we should use the
     *     alternative alphabet.
     * @return string representing the decoded value.
     */ decodeString (input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) return atob(input);
        return $ee1ab2624407a779$var$byteArrayToString(this.decodeStringToByteArray(input, webSafe));
    },
    /**
     * Base64-decode a string.
     *
     * In base-64 decoding, groups of four characters are converted into three
     * bytes.  If the encoder did not apply padding, the input length may not
     * be a multiple of 4.
     *
     * In this case, the last group will have fewer than 4 characters, and
     * padding will be inferred.  If the group has one or two characters, it decodes
     * to one byte.  If the group has three characters, it decodes to two bytes.
     *
     * @param input Input to decode.
     * @param webSafe True if we should use the web-safe alphabet.
     * @return bytes representing the decoded value.
     */ decodeStringToByteArray (input, webSafe) {
        this.init_();
        const charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
        const output = [];
        for(let i = 0; i < input.length;){
            const byte1 = charToByteMap[input.charAt(i++)];
            const haveByte2 = i < input.length;
            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
            ++i;
            const haveByte3 = i < input.length;
            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            const haveByte4 = i < input.length;
            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) throw new $ee1ab2624407a779$export$55ca9d4bee46aeb3();
            const outByte1 = byte1 << 2 | byte2 >> 4;
            output.push(outByte1);
            if (byte3 !== 64) {
                const outByte2 = byte2 << 4 & 0xf0 | byte3 >> 2;
                output.push(outByte2);
                if (byte4 !== 64) {
                    const outByte3 = byte3 << 6 & 0xc0 | byte4;
                    output.push(outByte3);
                }
            }
        }
        return output;
    },
    /**
     * Lazy static initialization function. Called before
     * accessing any of the static map variables.
     * @private
     */ init_ () {
        if (!this.byteToCharMap_) {
            this.byteToCharMap_ = {};
            this.charToByteMap_ = {};
            this.byteToCharMapWebSafe_ = {};
            this.charToByteMapWebSafe_ = {};
            // We want quick mappings back and forth, so we precompute two maps.
            for(let i = 0; i < this.ENCODED_VALS.length; i++){
                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                this.charToByteMap_[this.byteToCharMap_[i]] = i;
                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                // Be forgiving when decoding and correctly decode both encodings.
                if (i >= this.ENCODED_VALS_BASE.length) {
                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                }
            }
        }
    }
};
/**
 * An error encountered while decoding base64 string.
 */ class $ee1ab2624407a779$export$55ca9d4bee46aeb3 extends Error {
    constructor(){
        super(...arguments);
        this.name = 'DecodeBase64StringError';
    }
}
/**
 * URL-safe base64 encoding
 */ const $ee1ab2624407a779$export$e510a73ee562749 = function(str) {
    const utf8Bytes = $ee1ab2624407a779$var$stringToByteArray$1(str);
    return $ee1ab2624407a779$export$b3b2de96497acc47.encodeByteArray(utf8Bytes, true);
};
/**
 * URL-safe base64 encoding (without "." padding in the end).
 * e.g. Used in JSON Web Token (JWT) parts.
 */ const $ee1ab2624407a779$export$4b5284a3025a455 = function(str) {
    // Use base64url encoding and remove padding in the end (dot characters).
    return $ee1ab2624407a779$export$e510a73ee562749(str).replace(/\./g, '');
};
/**
 * URL-safe base64 decoding
 *
 * NOTE: DO NOT use the global atob() function - it does NOT support the
 * base64Url variant encoding.
 *
 * @param str To be decoded
 * @return Decoded result, if possible
 */ const $ee1ab2624407a779$export$c62426fdd000a97e = function(str) {
    try {
        return $ee1ab2624407a779$export$b3b2de96497acc47.decodeString(str, true);
    } catch (e) {
        console.error('base64Decode failed: ', e);
    }
    return null;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Do a deep-copy of basic JavaScript Objects or Arrays.
 */ function $ee1ab2624407a779$export$6c40052bed430212(value) {
    return $ee1ab2624407a779$export$54e9fb29908872fa(undefined, value);
}
/**
 * Copy properties from source to target (recursively allows extension
 * of Objects and Arrays).  Scalar values in the target are over-written.
 * If target is undefined, an object of the appropriate type will be created
 * (and returned).
 *
 * We recursively copy all child properties of plain Objects in the source- so
 * that namespace- like dictionaries are merged.
 *
 * Note that the target can be a function, in which case the properties in
 * the source Object are copied onto it as static properties of the Function.
 *
 * Note: we don't merge __proto__ to prevent prototype pollution
 */ function $ee1ab2624407a779$export$54e9fb29908872fa(target, source) {
    if (!(source instanceof Object)) return source;
    switch(source.constructor){
        case Date:
            // Treat Dates like scalars; if the target date object had any child
            // properties - they will be lost!
            const dateValue = source;
            return new Date(dateValue.getTime());
        case Object:
            if (target === undefined) target = {};
            break;
        case Array:
            // Always copy the array source and overwrite the target.
            target = [];
            break;
        default:
            // Not a plain Object - treat it as a scalar.
            return source;
    }
    for(const prop in source){
        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202
        if (!source.hasOwnProperty(prop) || !$ee1ab2624407a779$var$isValidKey(prop)) continue;
        target[prop] = $ee1ab2624407a779$export$54e9fb29908872fa(target[prop], source[prop]);
    }
    return target;
}
function $ee1ab2624407a779$var$isValidKey(key) {
    return key !== '__proto__';
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Polyfill for `globalThis` object.
 * @returns the `globalThis` object for the given environment.
 * @public
 */ function $ee1ab2624407a779$export$a4e55266d2135a7f() {
    if (typeof self !== 'undefined') return self;
    if (typeof window !== 'undefined') return window;
    if (typeof $parcel$global !== 'undefined') return $parcel$global;
    throw new Error('Unable to locate global object.');
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $ee1ab2624407a779$var$getDefaultsFromGlobal = ()=>$ee1ab2624407a779$export$a4e55266d2135a7f().__FIREBASE_DEFAULTS__;
/**
 * Attempt to read defaults from a JSON string provided to
 * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in
 * process(.)env(.)__FIREBASE_DEFAULTS_PATH__
 * The dots are in parens because certain compilers (Vite?) cannot
 * handle seeing that variable in comments.
 * See https://github.com/firebase/firebase-js-sdk/issues/6838
 */ const $ee1ab2624407a779$var$getDefaultsFromEnvVariable = ()=>{
    return;
};
const $ee1ab2624407a779$var$getDefaultsFromCookie = ()=>{
    if (typeof document === 'undefined') return;
    let match;
    try {
        match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);
    } catch (e) {
        // Some environments such as Angular Universal SSR have a
        // `document` object but error on accessing `document.cookie`.
        return;
    }
    const decoded = match && $ee1ab2624407a779$export$c62426fdd000a97e(match[1]);
    return decoded && JSON.parse(decoded);
};
/**
 * Get the __FIREBASE_DEFAULTS__ object. It checks in order:
 * (1) if such an object exists as a property of `globalThis`
 * (2) if such an object was provided on a shell environment variable
 * (3) if such an object exists in a cookie
 * @public
 */ const $ee1ab2624407a779$export$212bb2fc580a90a8 = ()=>{
    try {
        return (0, $5406cae867311a40$export$6d3c090e66a883b1)() || $ee1ab2624407a779$var$getDefaultsFromGlobal() || $ee1ab2624407a779$var$getDefaultsFromEnvVariable() || $ee1ab2624407a779$var$getDefaultsFromCookie();
    } catch (e) {
        /**
         * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due
         * to any environment case we have not accounted for. Log to
         * info instead of swallowing so we can find these unknown cases
         * and add paths for them if needed.
         */ console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);
        return;
    }
};
/**
 * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object
 * for the given product.
 * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available
 * @public
 */ const $ee1ab2624407a779$export$9c11895284c8adad = (productName)=>{
    var _a, _b;
    return (_b = (_a = $ee1ab2624407a779$export$212bb2fc580a90a8()) === null || _a === void 0 ? void 0 : _a.emulatorHosts) === null || _b === void 0 ? void 0 : _b[productName];
};
/**
 * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object
 * for the given product.
 * @returns a pair of hostname and port like `["::1", 4000]` if available
 * @public
 */ const $ee1ab2624407a779$export$a3febcf1f14a3a0c = (productName)=>{
    const host = $ee1ab2624407a779$export$9c11895284c8adad(productName);
    if (!host) return undefined;
    const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.
    if (separatorIndex <= 0 || separatorIndex + 1 === host.length) throw new Error(`Invalid host ${host} with no separate hostname and port!`);
    // eslint-disable-next-line no-restricted-globals
    const port = parseInt(host.substring(separatorIndex + 1), 10);
    if (host[0] === '[') // Bracket-quoted `[ipv6addr]:port` => return "ipv6addr" (without brackets).
    return [
        host.substring(1, separatorIndex - 1),
        port
    ];
    else return [
        host.substring(0, separatorIndex),
        port
    ];
};
/**
 * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.
 * @public
 */ const $ee1ab2624407a779$export$3dfb6827a9f89756 = ()=>{
    var _a;
    return (_a = $ee1ab2624407a779$export$212bb2fc580a90a8()) === null || _a === void 0 ? void 0 : _a.config;
};
/**
 * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties
 * prefixed by "_")
 * @public
 */ const $ee1ab2624407a779$export$5539a1a3afe87d6 = (name)=>{
    var _a;
    return (_a = $ee1ab2624407a779$export$212bb2fc580a90a8()) === null || _a === void 0 ? void 0 : _a[`_${name}`];
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $ee1ab2624407a779$export$85f6557964517f1a {
    constructor(){
        this.reject = ()=>{};
        this.resolve = ()=>{};
        this.promise = new Promise((resolve, reject)=>{
            this.resolve = resolve;
            this.reject = reject;
        });
    }
    /**
     * Our API internals are not promisified and cannot because our callback APIs have subtle expectations around
     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
     * and returns a node-style callback which will resolve or reject the Deferred's promise.
     */ wrapCallback(callback) {
        return (error, value)=>{
            if (error) this.reject(error);
            else this.resolve(value);
            if (typeof callback === 'function') {
                // Attaching noop handler just in case developer wasn't expecting
                // promises
                this.promise.catch(()=>{});
                // Some of our callbacks don't expect a value and our own tests
                // assert that the parameter length is 1
                if (callback.length === 1) callback(error);
                else callback(error, value);
            }
        };
    }
}
/**
 * @license
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Checks whether host is a cloud workstation or not.
 * @public
 */ function $ee1ab2624407a779$export$5b4d24b45140ad90(host) {
    return host.endsWith('.cloudworkstations.dev');
}
/**
 * Makes a fetch request to the given server.
 * Mostly used for forwarding cookies in Firebase Studio.
 * @public
 */ async function $ee1ab2624407a779$export$c0f0d0ce4283a937(endpoint) {
    const result = await fetch(endpoint, {
        credentials: 'include'
    });
    return result.ok;
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $ee1ab2624407a779$export$367bf224123348f1(token, projectId) {
    if (token.uid) throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
    // Unsecured JWTs use "none" as the algorithm.
    const header = {
        alg: 'none',
        type: 'JWT'
    };
    const project = projectId || 'demo-project';
    const iat = token.iat || 0;
    const sub = token.sub || token.user_id;
    if (!sub) throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
    const payload = Object.assign({
        // Set all required fields to decent defaults
        iss: `https://securetoken.google.com/${project}`,
        aud: project,
        iat: iat,
        exp: iat + 3600,
        auth_time: iat,
        sub: sub,
        user_id: sub,
        firebase: {
            sign_in_provider: 'custom',
            identities: {}
        }
    }, token);
    // Unsecured JWTs use the empty string as a signature.
    const signature = '';
    return [
        $ee1ab2624407a779$export$4b5284a3025a455(JSON.stringify(header)),
        $ee1ab2624407a779$export$4b5284a3025a455(JSON.stringify(payload)),
        signature
    ].join('.');
}
const $ee1ab2624407a779$var$emulatorStatus = {};
// Checks whether any products are running on an emulator
function $ee1ab2624407a779$var$getEmulatorSummary() {
    const summary = {
        prod: [],
        emulator: []
    };
    for (const key of Object.keys($ee1ab2624407a779$var$emulatorStatus))if ($ee1ab2624407a779$var$emulatorStatus[key]) summary.emulator.push(key);
    else summary.prod.push(key);
    return summary;
}
function $ee1ab2624407a779$var$getOrCreateEl(id) {
    let parentDiv = document.getElementById(id);
    let created = false;
    if (!parentDiv) {
        parentDiv = document.createElement('div');
        parentDiv.setAttribute('id', id);
        created = true;
    }
    return {
        created: created,
        element: parentDiv
    };
}
let $ee1ab2624407a779$var$previouslyDismissed = false;
/**
 * Updates Emulator Banner. Primarily used for Firebase Studio
 * @param name
 * @param isRunningEmulator
 * @public
 */ function $ee1ab2624407a779$export$fd3d2954543183b1(name, isRunningEmulator) {
    if (typeof window === 'undefined' || typeof document === 'undefined' || !$ee1ab2624407a779$export$5b4d24b45140ad90(window.location.host) || $ee1ab2624407a779$var$emulatorStatus[name] === isRunningEmulator || $ee1ab2624407a779$var$emulatorStatus[name] || // If already set to use emulator, can't go back to prod.
    $ee1ab2624407a779$var$previouslyDismissed) return;
    $ee1ab2624407a779$var$emulatorStatus[name] = isRunningEmulator;
    function prefixedId(id) {
        return `__firebase__banner__${id}`;
    }
    const bannerId = '__firebase__banner';
    const summary = $ee1ab2624407a779$var$getEmulatorSummary();
    const showError = summary.prod.length > 0;
    function tearDown() {
        const element = document.getElementById(bannerId);
        if (element) element.remove();
    }
    function setupBannerStyles(bannerEl) {
        bannerEl.style.display = 'flex';
        bannerEl.style.background = '#7faaf0';
        bannerEl.style.position = 'fixed';
        bannerEl.style.bottom = '5px';
        bannerEl.style.left = '5px';
        bannerEl.style.padding = '.5em';
        bannerEl.style.borderRadius = '5px';
        bannerEl.style.alignItems = 'center';
    }
    function setupIconStyles(prependIcon, iconId) {
        prependIcon.setAttribute('width', '24');
        prependIcon.setAttribute('id', iconId);
        prependIcon.setAttribute('height', '24');
        prependIcon.setAttribute('viewBox', '0 0 24 24');
        prependIcon.setAttribute('fill', 'none');
        prependIcon.style.marginLeft = '-6px';
    }
    function setupCloseBtn() {
        const closeBtn = document.createElement('span');
        closeBtn.style.cursor = 'pointer';
        closeBtn.style.marginLeft = '16px';
        closeBtn.style.fontSize = '24px';
        closeBtn.innerHTML = ' &times;';
        closeBtn.onclick = ()=>{
            $ee1ab2624407a779$var$previouslyDismissed = true;
            tearDown();
        };
        return closeBtn;
    }
    function setupLinkStyles(learnMoreLink, learnMoreId) {
        learnMoreLink.setAttribute('id', learnMoreId);
        learnMoreLink.innerText = 'Learn more';
        learnMoreLink.href = 'https://firebase.google.com/docs/studio/preview-apps#preview-backend';
        learnMoreLink.setAttribute('target', '__blank');
        learnMoreLink.style.paddingLeft = '5px';
        learnMoreLink.style.textDecoration = 'underline';
    }
    function setupDom() {
        const banner = $ee1ab2624407a779$var$getOrCreateEl(bannerId);
        const firebaseTextId = prefixedId('text');
        const firebaseText = document.getElementById(firebaseTextId) || document.createElement('span');
        const learnMoreId = prefixedId('learnmore');
        const learnMoreLink = document.getElementById(learnMoreId) || document.createElement('a');
        const prependIconId = prefixedId('preprendIcon');
        const prependIcon = document.getElementById(prependIconId) || document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        if (banner.created) {
            // update styles
            const bannerEl = banner.element;
            setupBannerStyles(bannerEl);
            setupLinkStyles(learnMoreLink, learnMoreId);
            const closeBtn = setupCloseBtn();
            setupIconStyles(prependIcon, prependIconId);
            bannerEl.append(prependIcon, firebaseText, learnMoreLink, closeBtn);
            document.body.appendChild(bannerEl);
        }
        if (showError) {
            firebaseText.innerText = `Preview backend disconnected.`;
            prependIcon.innerHTML = `<g clip-path="url(#clip0_6013_33858)">
<path d="M4.8 17.6L12 5.6L19.2 17.6H4.8ZM6.91667 16.4H17.0833L12 7.93333L6.91667 16.4ZM12 15.6C12.1667 15.6 12.3056 15.5444 12.4167 15.4333C12.5389 15.3111 12.6 15.1667 12.6 15C12.6 14.8333 12.5389 14.6944 12.4167 14.5833C12.3056 14.4611 12.1667 14.4 12 14.4C11.8333 14.4 11.6889 14.4611 11.5667 14.5833C11.4556 14.6944 11.4 14.8333 11.4 15C11.4 15.1667 11.4556 15.3111 11.5667 15.4333C11.6889 15.5444 11.8333 15.6 12 15.6ZM11.4 13.6H12.6V10.4H11.4V13.6Z" fill="#212121"/>
</g>
<defs>
<clipPath id="clip0_6013_33858">
<rect width="24" height="24" fill="white"/>
</clipPath>
</defs>`;
        } else {
            prependIcon.innerHTML = `<g clip-path="url(#clip0_6083_34804)">
<path d="M11.4 15.2H12.6V11.2H11.4V15.2ZM12 10C12.1667 10 12.3056 9.94444 12.4167 9.83333C12.5389 9.71111 12.6 9.56667 12.6 9.4C12.6 9.23333 12.5389 9.09444 12.4167 8.98333C12.3056 8.86111 12.1667 8.8 12 8.8C11.8333 8.8 11.6889 8.86111 11.5667 8.98333C11.4556 9.09444 11.4 9.23333 11.4 9.4C11.4 9.56667 11.4556 9.71111 11.5667 9.83333C11.6889 9.94444 11.8333 10 12 10ZM12 18.4C11.1222 18.4 10.2944 18.2333 9.51667 17.9C8.73889 17.5667 8.05556 17.1111 7.46667 16.5333C6.88889 15.9444 6.43333 15.2611 6.1 14.4833C5.76667 13.7056 5.6 12.8778 5.6 12C5.6 11.1111 5.76667 10.2833 6.1 9.51667C6.43333 8.73889 6.88889 8.06111 7.46667 7.48333C8.05556 6.89444 8.73889 6.43333 9.51667 6.1C10.2944 5.76667 11.1222 5.6 12 5.6C12.8889 5.6 13.7167 5.76667 14.4833 6.1C15.2611 6.43333 15.9389 6.89444 16.5167 7.48333C17.1056 8.06111 17.5667 8.73889 17.9 9.51667C18.2333 10.2833 18.4 11.1111 18.4 12C18.4 12.8778 18.2333 13.7056 17.9 14.4833C17.5667 15.2611 17.1056 15.9444 16.5167 16.5333C15.9389 17.1111 15.2611 17.5667 14.4833 17.9C13.7167 18.2333 12.8889 18.4 12 18.4ZM12 17.2C13.4444 17.2 14.6722 16.6944 15.6833 15.6833C16.6944 14.6722 17.2 13.4444 17.2 12C17.2 10.5556 16.6944 9.32778 15.6833 8.31667C14.6722 7.30555 13.4444 6.8 12 6.8C10.5556 6.8 9.32778 7.30555 8.31667 8.31667C7.30556 9.32778 6.8 10.5556 6.8 12C6.8 13.4444 7.30556 14.6722 8.31667 15.6833C9.32778 16.6944 10.5556 17.2 12 17.2Z" fill="#212121"/>
</g>
<defs>
<clipPath id="clip0_6083_34804">
<rect width="24" height="24" fill="white"/>
</clipPath>
</defs>`;
            firebaseText.innerText = 'Preview backend running in this workspace.';
        }
        firebaseText.setAttribute('id', firebaseTextId);
    }
    if (document.readyState === 'loading') window.addEventListener('DOMContentLoaded', setupDom);
    else setupDom();
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns navigator.userAgent string or '' if it's not defined.
 * @return user agent string
 */ function $ee1ab2624407a779$export$c36915b22ce77c19() {
    if (typeof navigator !== 'undefined' && typeof navigator['userAgent'] === 'string') return navigator['userAgent'];
    else return '';
}
/**
 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
 *
 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
 * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
 * wait for a callback.
 */ function $ee1ab2624407a779$export$872f8323f01d7ae0() {
    return typeof window !== 'undefined' && // @ts-ignore Setting up an broadly applicable index signature for Window
    // just to deal with this case would probably be a bad idea.
    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test($ee1ab2624407a779$export$c36915b22ce77c19());
}
/**
 * Detect Node.js.
 *
 * @return true if Node.js environment is detected or specified.
 */ // Node detection logic from: https://github.com/iliakan/detect-node/
function $ee1ab2624407a779$export$8ee0fc9ee280b4ee() {
    var _a;
    const forceEnvironment = (_a = $ee1ab2624407a779$export$212bb2fc580a90a8()) === null || _a === void 0 ? void 0 : _a.forceEnvironment;
    if (forceEnvironment === 'node') return true;
    else if (forceEnvironment === 'browser') return false;
    try {
        return Object.prototype.toString.call($parcel$global.process) === '[object process]';
    } catch (e) {
        return false;
    }
}
/**
 * Detect Browser Environment.
 * Note: This will return true for certain test frameworks that are incompletely
 * mimicking a browser, and should not lead to assuming all browser APIs are
 * available.
 */ function $ee1ab2624407a779$export$4e09c449d6c407f7() {
    return typeof window !== 'undefined' || $ee1ab2624407a779$export$97b87b8868ff7a3c();
}
/**
 * Detect Web Worker context.
 */ function $ee1ab2624407a779$export$97b87b8868ff7a3c() {
    return typeof WorkerGlobalScope !== 'undefined' && typeof self !== 'undefined' && self instanceof WorkerGlobalScope;
}
/**
 * Detect Cloudflare Worker context.
 */ function $ee1ab2624407a779$export$ad9e9b75cb9fb797() {
    return typeof navigator !== 'undefined' && navigator.userAgent === 'Cloudflare-Workers';
}
function $ee1ab2624407a779$export$caa8774a9107a58e() {
    const runtime = typeof chrome === 'object' ? chrome.runtime : typeof browser === 'object' ? browser.runtime : undefined;
    return typeof runtime === 'object' && runtime.id !== undefined;
}
/**
 * Detect React Native.
 *
 * @return true if ReactNative environment is detected.
 */ function $ee1ab2624407a779$export$f7a1e23e542d38e3() {
    return typeof navigator === 'object' && navigator['product'] === 'ReactNative';
}
/** Detects Electron apps. */ function $ee1ab2624407a779$export$f2f6a8999f8ebd30() {
    return $ee1ab2624407a779$export$c36915b22ce77c19().indexOf('Electron/') >= 0;
}
/** Detects Internet Explorer. */ function $ee1ab2624407a779$export$7e7b1a9668aaed8() {
    const ua = $ee1ab2624407a779$export$c36915b22ce77c19();
    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
}
/** Detects Universal Windows Platform apps. */ function $ee1ab2624407a779$export$202944b2d2824246() {
    return $ee1ab2624407a779$export$c36915b22ce77c19().indexOf('MSAppHost/') >= 0;
}
/**
 * Detect whether the current SDK build is the Node version.
 *
 * @return true if it's the Node SDK build.
 */ function $ee1ab2624407a779$export$5d1d834fbbf8bab7() {
    return $ee1ab2624407a779$export$588c7fdda06fbb0a.NODE_CLIENT === true || $ee1ab2624407a779$export$588c7fdda06fbb0a.NODE_ADMIN === true;
}
/** Returns true if we are running in Safari. */ function $ee1ab2624407a779$export$95df08bae54cb4df() {
    return !$ee1ab2624407a779$export$8ee0fc9ee280b4ee() && !!navigator.userAgent && navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');
}
/** Returns true if we are running in Safari or WebKit */ function $ee1ab2624407a779$export$ef10bcfb06572016() {
    return !$ee1ab2624407a779$export$8ee0fc9ee280b4ee() && !!navigator.userAgent && (navigator.userAgent.includes('Safari') || navigator.userAgent.includes('WebKit')) && !navigator.userAgent.includes('Chrome');
}
/**
 * This method checks if indexedDB is supported by current browser/service worker context
 * @return true if indexedDB is supported by current browser/service worker context
 */ function $ee1ab2624407a779$export$3865db50535c2055() {
    try {
        return typeof indexedDB === 'object';
    } catch (e) {
        return false;
    }
}
/**
 * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject
 * if errors occur during the database open operation.
 *
 * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox
 * private browsing)
 */ function $ee1ab2624407a779$export$a8a3018f3d187a4d() {
    return new Promise((resolve, reject)=>{
        try {
            let preExist = true;
            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';
            const request = self.indexedDB.open(DB_CHECK_NAME);
            request.onsuccess = ()=>{
                request.result.close();
                // delete database only when it doesn't pre-exist
                if (!preExist) self.indexedDB.deleteDatabase(DB_CHECK_NAME);
                resolve(true);
            };
            request.onupgradeneeded = ()=>{
                preExist = false;
            };
            request.onerror = ()=>{
                var _a;
                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');
            };
        } catch (error) {
            reject(error);
        }
    });
}
/**
 *
 * This method checks whether cookie is enabled within current browser
 * @return true if cookie is enabled within current browser
 */ function $ee1ab2624407a779$export$f172b7eb6cf60599() {
    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) return false;
    return true;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview Standardized Firebase Error.
 *
 * Usage:
 *
 *   // TypeScript string literals for type-safe codes
 *   type Err =
 *     'unknown' |
 *     'object-not-found'
 *     ;
 *
 *   // Closure enum for type-safe error codes
 *   // at-enum {string}
 *   var Err = {
 *     UNKNOWN: 'unknown',
 *     OBJECT_NOT_FOUND: 'object-not-found',
 *   }
 *
 *   let errors: Map<Err, string> = {
 *     'generic-error': "Unknown error",
 *     'file-not-found': "Could not find file: {$file}",
 *   };
 *
 *   // Type-safe function - must pass a valid error code as param.
 *   let error = new ErrorFactory<Err>('service', 'Service', errors);
 *
 *   ...
 *   throw error.create(Err.GENERIC);
 *   ...
 *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});
 *   ...
 *   // Service: Could not file file: foo.txt (service/file-not-found).
 *
 *   catch (e) {
 *     assert(e.message === "Could not find file: foo.txt.");
 *     if ((e as FirebaseError)?.code === 'service/file-not-found') {
 *       console.log("Could not read file: " + e['file']);
 *     }
 *   }
 */ const $ee1ab2624407a779$var$ERROR_NAME = 'FirebaseError';
// Based on code from:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
class $ee1ab2624407a779$export$dd24e9cd51226c56 extends Error {
    constructor(/** The error code for this error. */ code, message, /** Custom data for this error. */ customData){
        super(message);
        this.code = code;
        this.customData = customData;
        /** The custom name for all FirebaseErrors. */ this.name = $ee1ab2624407a779$var$ERROR_NAME;
        // Fix For ES5
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        // TODO(dlarocque): Replace this with `new.target`: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#support-for-newtarget
        //                   which we can now use since we no longer target ES5.
        Object.setPrototypeOf(this, $ee1ab2624407a779$export$dd24e9cd51226c56.prototype);
        // Maintains proper stack trace for where our error was thrown.
        // Only available on V8.
        if (Error.captureStackTrace) Error.captureStackTrace(this, $ee1ab2624407a779$export$3fa6e1b18a3b2d40.prototype.create);
    }
}
class $ee1ab2624407a779$export$3fa6e1b18a3b2d40 {
    constructor(service, serviceName, errors){
        this.service = service;
        this.serviceName = serviceName;
        this.errors = errors;
    }
    create(code, ...data) {
        const customData = data[0] || {};
        const fullCode = `${this.service}/${code}`;
        const template = this.errors[code];
        const message = template ? $ee1ab2624407a779$var$replaceTemplate(template, customData) : 'Error';
        // Service Name: Error message (service/code).
        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;
        const error = new $ee1ab2624407a779$export$dd24e9cd51226c56(fullCode, fullMessage, customData);
        return error;
    }
}
function $ee1ab2624407a779$var$replaceTemplate(template, data) {
    return template.replace($ee1ab2624407a779$var$PATTERN, (_, key)=>{
        const value = data[key];
        return value != null ? String(value) : `<${key}?>`;
    });
}
const $ee1ab2624407a779$var$PATTERN = /\{\$([^}]+)}/g;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Evaluates a JSON string into a javascript object.
 *
 * @param {string} str A string containing JSON.
 * @return {*} The javascript object representing the specified JSON.
 */ function $ee1ab2624407a779$export$c5a53ce6a17cf18d(str) {
    return JSON.parse(str);
}
/**
 * Returns JSON representing a javascript object.
 * @param {*} data JavaScript object to be stringified.
 * @return {string} The JSON contents of the object.
 */ function $ee1ab2624407a779$export$fac44ee5b035f737(data) {
    return JSON.stringify(data);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Decodes a Firebase auth. token into constituent parts.
 *
 * Notes:
 * - May return with invalid / incomplete claims if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ const $ee1ab2624407a779$export$2f872c0f2117be69 = function(token) {
    let header = {}, claims = {}, data = {}, signature = '';
    try {
        const parts = token.split('.');
        header = $ee1ab2624407a779$export$c5a53ce6a17cf18d($ee1ab2624407a779$export$c62426fdd000a97e(parts[0]) || '');
        claims = $ee1ab2624407a779$export$c5a53ce6a17cf18d($ee1ab2624407a779$export$c62426fdd000a97e(parts[1]) || '');
        signature = parts[2];
        data = claims['d'] || {};
        delete claims['d'];
    } catch (e) {}
    return {
        header: header,
        claims: claims,
        data: data,
        signature: signature
    };
};
/**
 * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
 * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ const $ee1ab2624407a779$export$5f870fcca7ae6a88 = function(token) {
    const claims = $ee1ab2624407a779$export$2f872c0f2117be69(token).claims;
    const now = Math.floor(new Date().getTime() / 1000);
    let validSince = 0, validUntil = 0;
    if (typeof claims === 'object') {
        if (claims.hasOwnProperty('nbf')) validSince = claims['nbf'];
        else if (claims.hasOwnProperty('iat')) validSince = claims['iat'];
        if (claims.hasOwnProperty('exp')) validUntil = claims['exp'];
        else // token will expire after 24h by default
        validUntil = validSince + 86400;
    }
    return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;
};
/**
 * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
 *
 * Notes:
 * - May return null if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ const $ee1ab2624407a779$export$701c661ec91095f2 = function(token) {
    const claims = $ee1ab2624407a779$export$2f872c0f2117be69(token).claims;
    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) return claims['iat'];
    return null;
};
/**
 * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ const $ee1ab2624407a779$export$9565ca3d387f8aa0 = function(token) {
    const decoded = $ee1ab2624407a779$export$2f872c0f2117be69(token), claims = decoded.claims;
    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
};
/**
 * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ const $ee1ab2624407a779$export$fc970ed23da99565 = function(token) {
    const claims = $ee1ab2624407a779$export$2f872c0f2117be69(token).claims;
    return typeof claims === 'object' && claims['admin'] === true;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $ee1ab2624407a779$export$2344b14b097df817(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}
function $ee1ab2624407a779$export$e51ae4db7b428f67(obj, key) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) return obj[key];
    else return undefined;
}
function $ee1ab2624407a779$export$dd1bc94b04021eeb(obj) {
    for(const key in obj){
        if (Object.prototype.hasOwnProperty.call(obj, key)) return false;
    }
    return true;
}
function $ee1ab2624407a779$export$871de8747c9eaa88(obj, fn, contextObj) {
    const res = {};
    for(const key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) res[key] = fn.call(contextObj, obj[key], key, obj);
    return res;
}
/**
 * Deep equal two objects. Support Arrays and Objects.
 */ function $ee1ab2624407a779$export$9cb4719e2e525b7a(a, b) {
    if (a === b) return true;
    const aKeys = Object.keys(a);
    const bKeys = Object.keys(b);
    for (const k of aKeys){
        if (!bKeys.includes(k)) return false;
        const aProp = a[k];
        const bProp = b[k];
        if ($ee1ab2624407a779$var$isObject(aProp) && $ee1ab2624407a779$var$isObject(bProp)) {
            if (!$ee1ab2624407a779$export$9cb4719e2e525b7a(aProp, bProp)) return false;
        } else if (aProp !== bProp) return false;
    }
    for (const k of bKeys){
        if (!aKeys.includes(k)) return false;
    }
    return true;
}
function $ee1ab2624407a779$var$isObject(thing) {
    return thing !== null && typeof thing === 'object';
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Rejects if the given promise doesn't resolve in timeInMS milliseconds.
 * @internal
 */ function $ee1ab2624407a779$export$a9cd205a244d9f54(promise, timeInMS = 2000) {
    const deferredPromise = new $ee1ab2624407a779$export$85f6557964517f1a();
    setTimeout(()=>deferredPromise.reject('timeout!'), timeInMS);
    promise.then(deferredPromise.resolve, deferredPromise.reject);
    return deferredPromise.promise;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
 * params object (e.g. {arg: 'val', arg2: 'val2'})
 * Note: You must prepend it with ? when adding it to a URL.
 */ function $ee1ab2624407a779$export$ac4103b836844853(querystringParams) {
    const params = [];
    for (const [key, value] of Object.entries(querystringParams))if (Array.isArray(value)) value.forEach((arrayVal)=>{
        params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
    });
    else params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
    return params.length ? '&' + params.join('&') : '';
}
/**
 * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
 * (e.g. {arg: 'val', arg2: 'val2'})
 */ function $ee1ab2624407a779$export$c1271ca4c8a70741(querystring) {
    const obj = {};
    const tokens = querystring.replace(/^\?/, '').split('&');
    tokens.forEach((token)=>{
        if (token) {
            const [key, value] = token.split('=');
            obj[decodeURIComponent(key)] = decodeURIComponent(value);
        }
    });
    return obj;
}
/**
 * Extract the query string part of a URL, including the leading question mark (if present).
 */ function $ee1ab2624407a779$export$1a8408415472d8ed(url) {
    const queryStart = url.indexOf('?');
    if (!queryStart) return '';
    const fragmentStart = url.indexOf('#', queryStart);
    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview SHA-1 cryptographic hash.
 * Variable names follow the notation in FIPS PUB 180-3:
 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
 *
 * Usage:
 *   var sha1 = new sha1();
 *   sha1.update(bytes);
 *   var hash = sha1.digest();
 *
 * Performance:
 *   Chrome 23:   ~400 Mbit/s
 *   Firefox 16:  ~250 Mbit/s
 *
 */ /**
 * SHA-1 cryptographic hash constructor.
 *
 * The properties declared here are discussed in the above algorithm document.
 * @constructor
 * @final
 * @struct
 */ class $ee1ab2624407a779$export$c85d589bf4e25fef {
    constructor(){
        /**
         * Holds the previous values of accumulated variables a-e in the compress_
         * function.
         * @private
         */ this.chain_ = [];
        /**
         * A buffer holding the partially computed hash result.
         * @private
         */ this.buf_ = [];
        /**
         * An array of 80 bytes, each a part of the message to be hashed.  Referred to
         * as the message schedule in the docs.
         * @private
         */ this.W_ = [];
        /**
         * Contains data needed to pad messages less than 64 bytes.
         * @private
         */ this.pad_ = [];
        /**
         * @private {number}
         */ this.inbuf_ = 0;
        /**
         * @private {number}
         */ this.total_ = 0;
        this.blockSize = 64;
        this.pad_[0] = 128;
        for(let i = 1; i < this.blockSize; ++i)this.pad_[i] = 0;
        this.reset();
    }
    reset() {
        this.chain_[0] = 0x67452301;
        this.chain_[1] = 0xefcdab89;
        this.chain_[2] = 0x98badcfe;
        this.chain_[3] = 0x10325476;
        this.chain_[4] = 0xc3d2e1f0;
        this.inbuf_ = 0;
        this.total_ = 0;
    }
    /**
     * Internal compress helper function.
     * @param buf Block to compress.
     * @param offset Offset of the block in the buffer.
     * @private
     */ compress_(buf, offset) {
        if (!offset) offset = 0;
        const W = this.W_;
        // get 16 big endian words
        if (typeof buf === 'string') for(let i = 0; i < 16; i++){
            // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
            // have a bug that turns the post-increment ++ operator into pre-increment
            // during JIT compilation.  We have code that depends heavily on SHA-1 for
            // correctness and which is affected by this bug, so I've removed all uses
            // of post-increment ++ in which the result value is used.  We can revert
            // this change once the Safari bug
            // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
            // most clients have been updated.
            W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
            offset += 4;
        }
        else for(let i = 0; i < 16; i++){
            W[i] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
            offset += 4;
        }
        // expand to 80 words
        for(let i = 16; i < 80; i++){
            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
            W[i] = (t << 1 | t >>> 31) & 0xffffffff;
        }
        let a = this.chain_[0];
        let b = this.chain_[1];
        let c = this.chain_[2];
        let d = this.chain_[3];
        let e = this.chain_[4];
        let f, k;
        // TODO(user): Try to unroll this loop to speed up the computation.
        for(let i = 0; i < 80; i++){
            if (i < 40) {
                if (i < 20) {
                    f = d ^ b & (c ^ d);
                    k = 0x5a827999;
                } else {
                    f = b ^ c ^ d;
                    k = 0x6ed9eba1;
                }
            } else if (i < 60) {
                f = b & c | d & (b | c);
                k = 0x8f1bbcdc;
            } else {
                f = b ^ c ^ d;
                k = 0xca62c1d6;
            }
            const t = (a << 5 | a >>> 27) + f + e + k + W[i] & 0xffffffff;
            e = d;
            d = c;
            c = (b << 30 | b >>> 2) & 0xffffffff;
            b = a;
            a = t;
        }
        this.chain_[0] = this.chain_[0] + a & 0xffffffff;
        this.chain_[1] = this.chain_[1] + b & 0xffffffff;
        this.chain_[2] = this.chain_[2] + c & 0xffffffff;
        this.chain_[3] = this.chain_[3] + d & 0xffffffff;
        this.chain_[4] = this.chain_[4] + e & 0xffffffff;
    }
    update(bytes, length) {
        // TODO(johnlenz): tighten the function signature and remove this check
        if (bytes == null) return;
        if (length === undefined) length = bytes.length;
        const lengthMinusBlock = length - this.blockSize;
        let n = 0;
        // Using local instead of member variables gives ~5% speedup on Firefox 16.
        const buf = this.buf_;
        let inbuf = this.inbuf_;
        // The outer while loop should execute at most twice.
        while(n < length){
            // When we have no data in the block to top up, we can directly process the
            // input buffer (assuming it contains sufficient data). This gives ~25%
            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
            // the data is provided in large chunks (or in multiples of 64 bytes).
            if (inbuf === 0) while(n <= lengthMinusBlock){
                this.compress_(bytes, n);
                n += this.blockSize;
            }
            if (typeof bytes === 'string') while(n < length){
                buf[inbuf] = bytes.charCodeAt(n);
                ++inbuf;
                ++n;
                if (inbuf === this.blockSize) {
                    this.compress_(buf);
                    inbuf = 0;
                    break;
                }
            }
            else while(n < length){
                buf[inbuf] = bytes[n];
                ++inbuf;
                ++n;
                if (inbuf === this.blockSize) {
                    this.compress_(buf);
                    inbuf = 0;
                    break;
                }
            }
        }
        this.inbuf_ = inbuf;
        this.total_ += length;
    }
    /** @override */ digest() {
        const digest = [];
        let totalBits = this.total_ * 8;
        // Add pad 0x80 0x00*.
        if (this.inbuf_ < 56) this.update(this.pad_, 56 - this.inbuf_);
        else this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
        // Add # bits.
        for(let i = this.blockSize - 1; i >= 56; i--){
            this.buf_[i] = totalBits & 255;
            totalBits /= 256; // Don't use bit-shifting here!
        }
        this.compress_(this.buf_);
        let n = 0;
        for(let i = 0; i < 5; i++)for(let j = 24; j >= 0; j -= 8){
            digest[n] = this.chain_[i] >> j & 255;
            ++n;
        }
        return digest;
    }
}
/**
 * Helper to make a Subscribe function (just like Promise helps make a
 * Thenable).
 *
 * @param executor Function which can make calls to a single Observer
 *     as a proxy.
 * @param onNoObservers Callback when count of Observers goes to zero.
 */ function $ee1ab2624407a779$export$364097d812234b3f(executor, onNoObservers) {
    const proxy = new $ee1ab2624407a779$var$ObserverProxy(executor, onNoObservers);
    return proxy.subscribe.bind(proxy);
}
/**
 * Implement fan-out for any number of Observers attached via a subscribe
 * function.
 */ class $ee1ab2624407a779$var$ObserverProxy {
    /**
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */ constructor(executor, onNoObservers){
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        // Micro-task scheduling by calling task.then().
        this.task = Promise.resolve();
        this.finalized = false;
        this.onNoObservers = onNoObservers;
        // Call the executor asynchronously so subscribers that are called
        // synchronously after the creation of the subscribe function
        // can still receive the very first value generated in the executor.
        this.task.then(()=>{
            executor(this);
        }).catch((e)=>{
            this.error(e);
        });
    }
    next(value) {
        this.forEachObserver((observer)=>{
            observer.next(value);
        });
    }
    error(error) {
        this.forEachObserver((observer)=>{
            observer.error(error);
        });
        this.close(error);
    }
    complete() {
        this.forEachObserver((observer)=>{
            observer.complete();
        });
        this.close();
    }
    /**
     * Subscribe function that can be used to add an Observer to the fan-out list.
     *
     * - We require that no event is sent to a subscriber synchronously to their
     *   call to subscribe().
     */ subscribe(nextOrObserver, error, complete) {
        let observer;
        if (nextOrObserver === undefined && error === undefined && complete === undefined) throw new Error('Missing Observer.');
        // Assemble an Observer object when passed as callback functions.
        if ($ee1ab2624407a779$var$implementsAnyMethods(nextOrObserver, [
            'next',
            'error',
            'complete'
        ])) observer = nextOrObserver;
        else observer = {
            next: nextOrObserver,
            error: error,
            complete: complete
        };
        if (observer.next === undefined) observer.next = $ee1ab2624407a779$var$noop;
        if (observer.error === undefined) observer.error = $ee1ab2624407a779$var$noop;
        if (observer.complete === undefined) observer.complete = $ee1ab2624407a779$var$noop;
        const unsub = this.unsubscribeOne.bind(this, this.observers.length);
        // Attempt to subscribe to a terminated Observable - we
        // just respond to the Observer with the final error or complete
        // event.
        if (this.finalized) // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(()=>{
            try {
                if (this.finalError) observer.error(this.finalError);
                else observer.complete();
            } catch (e) {
            // nothing
            }
            return;
        });
        this.observers.push(observer);
        return unsub;
    }
    // Unsubscribe is synchronous - we guarantee that no events are sent to
    // any unsubscribed Observer.
    unsubscribeOne(i) {
        if (this.observers === undefined || this.observers[i] === undefined) return;
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== undefined) this.onNoObservers(this);
    }
    forEachObserver(fn) {
        if (this.finalized) // Already closed by previous event....just eat the additional values.
        return;
        // Since sendOne calls asynchronously - there is no chance that
        // this.observers will become undefined.
        for(let i = 0; i < this.observers.length; i++)this.sendOne(i, fn);
    }
    // Call the Observer via one of it's callback function. We are careful to
    // confirm that the observe has not been unsubscribed since this asynchronous
    // function had been queued.
    sendOne(i, fn) {
        // Execute the callback asynchronously
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(()=>{
            if (this.observers !== undefined && this.observers[i] !== undefined) try {
                fn(this.observers[i]);
            } catch (e) {
                // Ignore exceptions raised in Observers or missing methods of an
                // Observer.
                // Log error to console. b/31404806
                if (typeof console !== 'undefined' && console.error) console.error(e);
            }
        });
    }
    close(err) {
        if (this.finalized) return;
        this.finalized = true;
        if (err !== undefined) this.finalError = err;
        // Proxy is no longer needed - garbage collect references
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(()=>{
            this.observers = undefined;
            this.onNoObservers = undefined;
        });
    }
}
/** Turn synchronous function into one called asynchronously. */ // eslint-disable-next-line @typescript-eslint/ban-types
function $ee1ab2624407a779$export$12af436354f1a4f7(fn, onError) {
    return (...args)=>{
        Promise.resolve(true).then(()=>{
            fn(...args);
        }).catch((error)=>{
            if (onError) onError(error);
        });
    };
}
/**
 * Return true if the object passed in implements any of the named methods.
 */ function $ee1ab2624407a779$var$implementsAnyMethods(obj, methods) {
    if (typeof obj !== 'object' || obj === null) return false;
    for (const method of methods){
        if (method in obj && typeof obj[method] === 'function') return true;
    }
    return false;
}
function $ee1ab2624407a779$var$noop() {
// do nothing
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Check to make sure the appropriate number of arguments are provided for a public function.
 * Throws an error if it fails.
 *
 * @param fnName The function name
 * @param minCount The minimum number of arguments to allow for the function call
 * @param maxCount The maximum number of argument to allow for the function call
 * @param argCount The actual number of arguments provided.
 */ const $ee1ab2624407a779$export$20164226a0ed35c3 = function(fnName, minCount, maxCount, argCount) {
    let argError;
    if (argCount < minCount) argError = 'at least ' + minCount;
    else if (argCount > maxCount) argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
    if (argError) {
        const error = fnName + ' failed: Was called with ' + argCount + (argCount === 1 ? ' argument.' : ' arguments.') + ' Expects ' + argError + '.';
        throw new Error(error);
    }
};
/**
 * Generates a string to prefix an error message about failed argument validation
 *
 * @param fnName The function name
 * @param argName The name of the argument
 * @return The prefix to add to the error thrown for validation.
 */ function $ee1ab2624407a779$export$adea4917e02d93dc(fnName, argName) {
    return `${fnName} failed: ${argName} argument `;
}
/**
 * @param fnName
 * @param argumentNumber
 * @param namespace
 * @param optional
 */ function $ee1ab2624407a779$export$8eef22622e725943(fnName, namespace, optional) {
    if (optional && !namespace) return;
    if (typeof namespace !== 'string') //TODO: I should do more validation here. We only allow certain chars in namespaces.
    throw new Error($ee1ab2624407a779$export$adea4917e02d93dc(fnName, 'namespace') + 'must be a valid firebase namespace.');
}
function $ee1ab2624407a779$export$5bcd2a2eb6640dfa(fnName, argumentName, // eslint-disable-next-line @typescript-eslint/ban-types
callback, optional) {
    if (optional && !callback) return;
    if (typeof callback !== 'function') throw new Error($ee1ab2624407a779$export$adea4917e02d93dc(fnName, argumentName) + 'must be a valid function.');
}
function $ee1ab2624407a779$export$df77539402cfb523(fnName, argumentName, context, optional) {
    if (optional && !context) return;
    if (typeof context !== 'object' || context === null) throw new Error($ee1ab2624407a779$export$adea4917e02d93dc(fnName, argumentName) + 'must be a valid context object.');
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
// so it's been modified.
// Note that not all Unicode characters appear as single characters in JavaScript strings.
// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
// use 2 characters in JavaScript.  All 4-byte UTF-8 characters begin with a first
// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
// pair).
// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
/**
 * @param {string} str
 * @return {Array}
 */ const $ee1ab2624407a779$export$655666783217a925 = function(str) {
    const out = [];
    let p = 0;
    for(let i = 0; i < str.length; i++){
        let c = str.charCodeAt(i);
        // Is this the lead surrogate in a surrogate pair?
        if (c >= 0xd800 && c <= 0xdbff) {
            const high = c - 0xd800; // the high 10 bits.
            i++;
            $ee1ab2624407a779$export$a7a9523472993e97(i < str.length, 'Surrogate pair missing trail surrogate.');
            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.
            c = 0x10000 + (high << 10) + low;
        }
        if (c < 128) out[p++] = c;
        else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
        } else if (c < 65536) {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        } else {
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        }
    }
    return out;
};
/**
 * Calculate length without actually converting; useful for doing cheaper validation.
 * @param {string} str
 * @return {number}
 */ const $ee1ab2624407a779$export$9536dc0a75b20bf9 = function(str) {
    let p = 0;
    for(let i = 0; i < str.length; i++){
        const c = str.charCodeAt(i);
        if (c < 128) p++;
        else if (c < 2048) p += 2;
        else if (c >= 0xd800 && c <= 0xdbff) {
            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
            p += 4;
            i++; // skip trail surrogate.
        } else p += 3;
    }
    return p;
};
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The amount of milliseconds to exponentially increase.
 */ const $ee1ab2624407a779$var$DEFAULT_INTERVAL_MILLIS = 1000;
/**
 * The factor to backoff by.
 * Should be a number greater than 1.
 */ const $ee1ab2624407a779$var$DEFAULT_BACKOFF_FACTOR = 2;
/**
 * The maximum milliseconds to increase to.
 *
 * <p>Visible for testing
 */ const $ee1ab2624407a779$export$bdf1213ffbdb096e = 14400000; // Four hours, like iOS and Android.
/**
 * The percentage of backoff time to randomize by.
 * See
 * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic
 * for context.
 *
 * <p>Visible for testing
 */ const $ee1ab2624407a779$export$3518ed2cfe61fa30 = 0.5;
/**
 * Based on the backoff method from
 * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.
 * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.
 */ function $ee1ab2624407a779$export$4d810c0ca64ed8e9(backoffCount, intervalMillis = $ee1ab2624407a779$var$DEFAULT_INTERVAL_MILLIS, backoffFactor = $ee1ab2624407a779$var$DEFAULT_BACKOFF_FACTOR) {
    // Calculates an exponentially increasing value.
    // Deviation: calculates value from count and a constant interval, so we only need to save value
    // and count to restore state.
    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
    // A random "fuzz" to avoid waves of retries.
    // Deviation: randomFactor is required.
    const randomWait = Math.round(// A fraction of the backoff value to add/subtract.
    // Deviation: changes multiplication order to improve readability.
    $ee1ab2624407a779$export$3518ed2cfe61fa30 * currBaseValue * // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines
    // if we add or subtract.
    (Math.random() - 0.5) * 2);
    // Limits backoff to max to avoid effectively permanent backoff.
    return Math.min($ee1ab2624407a779$export$bdf1213ffbdb096e, currBaseValue + randomWait);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provide English ordinal letters after a number
 */ function $ee1ab2624407a779$export$7bb39f879164e4ac(i) {
    if (!Number.isFinite(i)) return `${i}`;
    return i + $ee1ab2624407a779$var$indicator(i);
}
function $ee1ab2624407a779$var$indicator(i) {
    i = Math.abs(i);
    const cent = i % 100;
    if (cent >= 10 && cent <= 20) return 'th';
    const dec = i % 10;
    if (dec === 1) return 'st';
    if (dec === 2) return 'nd';
    if (dec === 3) return 'rd';
    return 'th';
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $ee1ab2624407a779$export$4befe9b5fa509a1b(service) {
    if (service && service._delegate) return service._delegate;
    else return service;
}


/**
 * Component for service name T, e.g. `auth`, `auth-internal`
 */ class $7d2fc2186abbee8c$export$16fa2f45be04daa8 {
    /**
     *
     * @param name The public service name, e.g. app, auth, firestore, database
     * @param instanceFactory Service factory responsible for creating the public interface
     * @param type whether the service provided by the component is public or private
     */ constructor(name, instanceFactory, type){
        this.name = name;
        this.instanceFactory = instanceFactory;
        this.type = type;
        this.multipleInstances = false;
        /**
         * Properties to be added to the service namespace
         */ this.serviceProps = {};
        this.instantiationMode = "LAZY" /* InstantiationMode.LAZY */ ;
        this.onInstanceCreated = null;
    }
    setInstantiationMode(mode) {
        this.instantiationMode = mode;
        return this;
    }
    setMultipleInstances(multipleInstances) {
        this.multipleInstances = multipleInstances;
        return this;
    }
    setServiceProps(props) {
        this.serviceProps = props;
        return this;
    }
    setInstanceCreatedCallback(callback) {
        this.onInstanceCreated = callback;
        return this;
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $7d2fc2186abbee8c$var$DEFAULT_ENTRY_NAME = '[DEFAULT]';
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
 * NameServiceMapping[T] is an alias for the type of the instance
 */ class $7d2fc2186abbee8c$export$2881499e37b75b9a {
    constructor(name, container){
        this.name = name;
        this.container = container;
        this.component = null;
        this.instances = new Map();
        this.instancesDeferred = new Map();
        this.instancesOptions = new Map();
        this.onInitCallbacks = new Map();
    }
    /**
     * @param identifier A provider can provide multiple instances of a service
     * if this.component.multipleInstances is true.
     */ get(identifier) {
        // if multipleInstances is not supported, use the default name
        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        if (!this.instancesDeferred.has(normalizedIdentifier)) {
            const deferred = new (0, $ee1ab2624407a779$export$85f6557964517f1a)();
            this.instancesDeferred.set(normalizedIdentifier, deferred);
            if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) // initialize the service if it can be auto-initialized
            try {
                const instance = this.getOrInitializeService({
                    instanceIdentifier: normalizedIdentifier
                });
                if (instance) deferred.resolve(instance);
            } catch (e) {
            // when the instance factory throws an exception during get(), it should not cause
            // a fatal error. We just return the unresolved promise in this case.
            }
        }
        return this.instancesDeferred.get(normalizedIdentifier).promise;
    }
    getImmediate(options) {
        var _a;
        // if multipleInstances is not supported, use the default name
        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);
        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;
        if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) try {
            return this.getOrInitializeService({
                instanceIdentifier: normalizedIdentifier
            });
        } catch (e) {
            if (optional) return null;
            else throw e;
        }
        else {
            // In case a component is not initialized and should/cannot be auto-initialized at the moment, return null if the optional flag is set, or throw
            if (optional) return null;
            else throw Error(`Service ${this.name} is not available`);
        }
    }
    getComponent() {
        return this.component;
    }
    setComponent(component) {
        if (component.name !== this.name) throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);
        if (this.component) throw Error(`Component for ${this.name} has already been provided`);
        this.component = component;
        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)
        if (!this.shouldAutoInitialize()) return;
        // if the service is eager, initialize the default instance
        if ($7d2fc2186abbee8c$var$isComponentEager(component)) try {
            this.getOrInitializeService({
                instanceIdentifier: $7d2fc2186abbee8c$var$DEFAULT_ENTRY_NAME
            });
        } catch (e) {
        // when the instance factory for an eager Component throws an exception during the eager
        // initialization, it should not cause a fatal error.
        // TODO: Investigate if we need to make it configurable, because some component may want to cause
        // a fatal error in this case?
        }
        // Create service instances for the pending promises and resolve them
        // NOTE: if this.multipleInstances is false, only the default instance will be created
        // and all promises with resolve with it regardless of the identifier.
        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()){
            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
            try {
                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
                const instance = this.getOrInitializeService({
                    instanceIdentifier: normalizedIdentifier
                });
                instanceDeferred.resolve(instance);
            } catch (e) {
            // when the instance factory throws an exception, it should not cause
            // a fatal error. We just leave the promise unresolved.
            }
        }
    }
    clearInstance(identifier = $7d2fc2186abbee8c$var$DEFAULT_ENTRY_NAME) {
        this.instancesDeferred.delete(identifier);
        this.instancesOptions.delete(identifier);
        this.instances.delete(identifier);
    }
    // app.delete() will call this method on every provider to delete the services
    // TODO: should we mark the provider as deleted?
    async delete() {
        const services = Array.from(this.instances.values());
        await Promise.all([
            ...services.filter((service)=>'INTERNAL' in service) // legacy services
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            .map((service)=>service.INTERNAL.delete()),
            ...services.filter((service)=>'_delete' in service) // modularized services
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            .map((service)=>service._delete())
        ]);
    }
    isComponentSet() {
        return this.component != null;
    }
    isInitialized(identifier = $7d2fc2186abbee8c$var$DEFAULT_ENTRY_NAME) {
        return this.instances.has(identifier);
    }
    getOptions(identifier = $7d2fc2186abbee8c$var$DEFAULT_ENTRY_NAME) {
        return this.instancesOptions.get(identifier) || {};
    }
    initialize(opts = {}) {
        const { options: options = {} } = opts;
        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
        if (this.isInitialized(normalizedIdentifier)) throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);
        if (!this.isComponentSet()) throw Error(`Component ${this.name} has not been registered yet`);
        const instance = this.getOrInitializeService({
            instanceIdentifier: normalizedIdentifier,
            options: options
        });
        // resolve any pending promise waiting for the service instance
        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()){
            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
            if (normalizedIdentifier === normalizedDeferredIdentifier) instanceDeferred.resolve(instance);
        }
        return instance;
    }
    /**
     *
     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
     *
     * @param identifier An optional instance identifier
     * @returns a function to unregister the callback
     */ onInit(callback, identifier) {
        var _a;
        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();
        existingCallbacks.add(callback);
        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
        const existingInstance = this.instances.get(normalizedIdentifier);
        if (existingInstance) callback(existingInstance, normalizedIdentifier);
        return ()=>{
            existingCallbacks.delete(callback);
        };
    }
    /**
     * Invoke onInit callbacks synchronously
     * @param instance the service instance`
     */ invokeOnInitCallbacks(instance, identifier) {
        const callbacks = this.onInitCallbacks.get(identifier);
        if (!callbacks) return;
        for (const callback of callbacks)try {
            callback(instance, identifier);
        } catch (_a) {
        // ignore errors in the onInit callback
        }
    }
    getOrInitializeService({ instanceIdentifier: instanceIdentifier, options: options = {} }) {
        let instance = this.instances.get(instanceIdentifier);
        if (!instance && this.component) {
            instance = this.component.instanceFactory(this.container, {
                instanceIdentifier: $7d2fc2186abbee8c$var$normalizeIdentifierForFactory(instanceIdentifier),
                options: options
            });
            this.instances.set(instanceIdentifier, instance);
            this.instancesOptions.set(instanceIdentifier, options);
            /**
             * Invoke onInit listeners.
             * Note this.component.onInstanceCreated is different, which is used by the component creator,
             * while onInit listeners are registered by consumers of the provider.
             */ this.invokeOnInitCallbacks(instance, instanceIdentifier);
            /**
             * Order is important
             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which
             * makes `isInitialized()` return true.
             */ if (this.component.onInstanceCreated) try {
                this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
            } catch (_a) {
            // ignore errors in the onInstanceCreatedCallback
            }
        }
        return instance || null;
    }
    normalizeInstanceIdentifier(identifier = $7d2fc2186abbee8c$var$DEFAULT_ENTRY_NAME) {
        if (this.component) return this.component.multipleInstances ? identifier : $7d2fc2186abbee8c$var$DEFAULT_ENTRY_NAME;
        else return identifier; // assume multiple instances are supported before the component is provided.
    }
    shouldAutoInitialize() {
        return !!this.component && this.component.instantiationMode !== "EXPLICIT" /* InstantiationMode.EXPLICIT */ ;
    }
}
// undefined should be passed to the service factory for the default instance
function $7d2fc2186abbee8c$var$normalizeIdentifierForFactory(identifier) {
    return identifier === $7d2fc2186abbee8c$var$DEFAULT_ENTRY_NAME ? undefined : identifier;
}
function $7d2fc2186abbee8c$var$isComponentEager(component) {
    return component.instantiationMode === "EAGER" /* InstantiationMode.EAGER */ ;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
 */ class $7d2fc2186abbee8c$export$436a80eea5d5c0c5 {
    constructor(name){
        this.name = name;
        this.providers = new Map();
    }
    /**
     *
     * @param component Component being added
     * @param overwrite When a component with the same name has already been registered,
     * if overwrite is true: overwrite the existing component with the new component and create a new
     * provider with the new component. It can be useful in tests where you want to use different mocks
     * for different tests.
     * if overwrite is false: throw an exception
     */ addComponent(component) {
        const provider = this.getProvider(component.name);
        if (provider.isComponentSet()) throw new Error(`Component ${component.name} has already been registered with ${this.name}`);
        provider.setComponent(component);
    }
    addOrOverwriteComponent(component) {
        const provider = this.getProvider(component.name);
        if (provider.isComponentSet()) // delete the existing provider from the container, so we can register the new component
        this.providers.delete(component.name);
        this.addComponent(component);
    }
    /**
     * getProvider provides a type safe interface where it can only be called with a field name
     * present in NameServiceMapping interface.
     *
     * Firebase SDKs providing services should extend NameServiceMapping interface to register
     * themselves.
     */ getProvider(name) {
        if (this.providers.has(name)) return this.providers.get(name);
        // create a Provider for a service that hasn't registered with Firebase
        const provider = new $7d2fc2186abbee8c$export$2881499e37b75b9a(name, this);
        this.providers.set(name, provider);
        return provider;
    }
    getProviders() {
        return Array.from(this.providers.values());
    }
}


/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A container for all of the Logger instances
 */ const $429b88c59f76915c$var$instances = [];
/**
 * The JS SDK supports 5 log levels and also allows a user the ability to
 * silence the logs altogether.
 *
 * The order is a follows:
 * DEBUG < VERBOSE < INFO < WARN < ERROR
 *
 * All of the log types above the current log level will be captured (i.e. if
 * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
 * `VERBOSE` logs will not)
 */ var $429b88c59f76915c$export$243e62d78d3b544d;
(function(LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
    LogLevel[LogLevel["INFO"] = 2] = "INFO";
    LogLevel[LogLevel["WARN"] = 3] = "WARN";
    LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
    LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
})($429b88c59f76915c$export$243e62d78d3b544d || ($429b88c59f76915c$export$243e62d78d3b544d = {}));
const $429b88c59f76915c$var$levelStringToEnum = {
    'debug': $429b88c59f76915c$export$243e62d78d3b544d.DEBUG,
    'verbose': $429b88c59f76915c$export$243e62d78d3b544d.VERBOSE,
    'info': $429b88c59f76915c$export$243e62d78d3b544d.INFO,
    'warn': $429b88c59f76915c$export$243e62d78d3b544d.WARN,
    'error': $429b88c59f76915c$export$243e62d78d3b544d.ERROR,
    'silent': $429b88c59f76915c$export$243e62d78d3b544d.SILENT
};
/**
 * The default log level
 */ const $429b88c59f76915c$var$defaultLogLevel = $429b88c59f76915c$export$243e62d78d3b544d.INFO;
/**
 * By default, `console.debug` is not displayed in the developer console (in
 * chrome). To avoid forcing users to have to opt-in to these logs twice
 * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
 * logs to the `console.log` function.
 */ const $429b88c59f76915c$var$ConsoleMethod = {
    [$429b88c59f76915c$export$243e62d78d3b544d.DEBUG]: 'log',
    [$429b88c59f76915c$export$243e62d78d3b544d.VERBOSE]: 'log',
    [$429b88c59f76915c$export$243e62d78d3b544d.INFO]: 'info',
    [$429b88c59f76915c$export$243e62d78d3b544d.WARN]: 'warn',
    [$429b88c59f76915c$export$243e62d78d3b544d.ERROR]: 'error'
};
/**
 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
 * messages on to their corresponding console counterparts (if the log method
 * is supported by the current log level)
 */ const $429b88c59f76915c$var$defaultLogHandler = (instance, logType, ...args)=>{
    if (logType < instance.logLevel) return;
    const now = new Date().toISOString();
    const method = $429b88c59f76915c$var$ConsoleMethod[logType];
    if (method) console[method](`[${now}]  ${instance.name}:`, ...args);
    else throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);
};
class $429b88c59f76915c$export$efa9a398d6368992 {
    /**
     * Gives you an instance of a Logger to capture messages according to
     * Firebase's logging scheme.
     *
     * @param name The name that the logs will be associated with
     */ constructor(name){
        this.name = name;
        /**
         * The log level of the given Logger instance.
         */ this._logLevel = $429b88c59f76915c$var$defaultLogLevel;
        /**
         * The main (internal) log handler for the Logger instance.
         * Can be set to a new function in internal package code but not by user.
         */ this._logHandler = $429b88c59f76915c$var$defaultLogHandler;
        /**
         * The optional, additional, user-defined log handler for the Logger instance.
         */ this._userLogHandler = null;
        /**
         * Capture the current instance for later use
         */ $429b88c59f76915c$var$instances.push(this);
    }
    get logLevel() {
        return this._logLevel;
    }
    set logLevel(val) {
        if (!(val in $429b88c59f76915c$export$243e62d78d3b544d)) throw new TypeError(`Invalid value "${val}" assigned to \`logLevel\``);
        this._logLevel = val;
    }
    // Workaround for setter/getter having to be the same type.
    setLogLevel(val) {
        this._logLevel = typeof val === 'string' ? $429b88c59f76915c$var$levelStringToEnum[val] : val;
    }
    get logHandler() {
        return this._logHandler;
    }
    set logHandler(val) {
        if (typeof val !== 'function') throw new TypeError('Value assigned to `logHandler` must be a function');
        this._logHandler = val;
    }
    get userLogHandler() {
        return this._userLogHandler;
    }
    set userLogHandler(val) {
        this._userLogHandler = val;
    }
    /**
     * The functions below are all based on the `console` interface
     */ debug(...args) {
        this._userLogHandler && this._userLogHandler(this, $429b88c59f76915c$export$243e62d78d3b544d.DEBUG, ...args);
        this._logHandler(this, $429b88c59f76915c$export$243e62d78d3b544d.DEBUG, ...args);
    }
    log(...args) {
        this._userLogHandler && this._userLogHandler(this, $429b88c59f76915c$export$243e62d78d3b544d.VERBOSE, ...args);
        this._logHandler(this, $429b88c59f76915c$export$243e62d78d3b544d.VERBOSE, ...args);
    }
    info(...args) {
        this._userLogHandler && this._userLogHandler(this, $429b88c59f76915c$export$243e62d78d3b544d.INFO, ...args);
        this._logHandler(this, $429b88c59f76915c$export$243e62d78d3b544d.INFO, ...args);
    }
    warn(...args) {
        this._userLogHandler && this._userLogHandler(this, $429b88c59f76915c$export$243e62d78d3b544d.WARN, ...args);
        this._logHandler(this, $429b88c59f76915c$export$243e62d78d3b544d.WARN, ...args);
    }
    error(...args) {
        this._userLogHandler && this._userLogHandler(this, $429b88c59f76915c$export$243e62d78d3b544d.ERROR, ...args);
        this._logHandler(this, $429b88c59f76915c$export$243e62d78d3b544d.ERROR, ...args);
    }
}
function $429b88c59f76915c$export$c622e99c0ce7b1c9(level) {
    $429b88c59f76915c$var$instances.forEach((inst)=>{
        inst.setLogLevel(level);
    });
}
function $429b88c59f76915c$export$29577d29c84db5f6(logCallback, options) {
    for (const instance of $429b88c59f76915c$var$instances){
        let customLogLevel = null;
        if (options && options.level) customLogLevel = $429b88c59f76915c$var$levelStringToEnum[options.level];
        if (logCallback === null) instance.userLogHandler = null;
        else instance.userLogHandler = (instance, level, ...args)=>{
            const message = args.map((arg)=>{
                if (arg == null) return null;
                else if (typeof arg === 'string') return arg;
                else if (typeof arg === 'number' || typeof arg === 'boolean') return arg.toString();
                else if (arg instanceof Error) return arg.message;
                else try {
                    return JSON.stringify(arg);
                } catch (ignored) {
                    return null;
                }
            }).filter((arg)=>arg).join(' ');
            if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) logCallback({
                level: $429b88c59f76915c$export$243e62d78d3b544d[level].toLowerCase(),
                message: message,
                args: args,
                type: instance.name
            });
        };
    }
}



const $a165fbdacbd62e4b$export$23f2a1d2818174ef = (object, constructors)=>constructors.some((c)=>object instanceof c);
let $a165fbdacbd62e4b$var$idbProxyableTypes;
let $a165fbdacbd62e4b$var$cursorAdvanceMethods;
// This is a function to prevent it throwing up in node environments.
function $a165fbdacbd62e4b$var$getIdbProxyableTypes() {
    return $a165fbdacbd62e4b$var$idbProxyableTypes || ($a165fbdacbd62e4b$var$idbProxyableTypes = [
        IDBDatabase,
        IDBObjectStore,
        IDBIndex,
        IDBCursor,
        IDBTransaction
    ]);
}
// This is a function to prevent it throwing up in node environments.
function $a165fbdacbd62e4b$var$getCursorAdvanceMethods() {
    return $a165fbdacbd62e4b$var$cursorAdvanceMethods || ($a165fbdacbd62e4b$var$cursorAdvanceMethods = [
        IDBCursor.prototype.advance,
        IDBCursor.prototype.continue,
        IDBCursor.prototype.continuePrimaryKey
    ]);
}
const $a165fbdacbd62e4b$var$cursorRequestMap = new WeakMap();
const $a165fbdacbd62e4b$var$transactionDoneMap = new WeakMap();
const $a165fbdacbd62e4b$var$transactionStoreNamesMap = new WeakMap();
const $a165fbdacbd62e4b$var$transformCache = new WeakMap();
const $a165fbdacbd62e4b$export$407448d2b89b1813 = new WeakMap();
function $a165fbdacbd62e4b$var$promisifyRequest(request) {
    const promise = new Promise((resolve, reject)=>{
        const unlisten = ()=>{
            request.removeEventListener('success', success);
            request.removeEventListener('error', error);
        };
        const success = ()=>{
            resolve($a165fbdacbd62e4b$export$efccba1c4a2ef57b(request.result));
            unlisten();
        };
        const error = ()=>{
            reject(request.error);
            unlisten();
        };
        request.addEventListener('success', success);
        request.addEventListener('error', error);
    });
    promise.then((value)=>{
        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval
        // (see wrapFunction).
        if (value instanceof IDBCursor) $a165fbdacbd62e4b$var$cursorRequestMap.set(value, request);
    // Catching to avoid "Uncaught Promise exceptions"
    }).catch(()=>{});
    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This
    // is because we create many promises from a single IDBRequest.
    $a165fbdacbd62e4b$export$407448d2b89b1813.set(promise, request);
    return promise;
}
function $a165fbdacbd62e4b$var$cacheDonePromiseForTransaction(tx) {
    // Early bail if we've already created a done promise for this transaction.
    if ($a165fbdacbd62e4b$var$transactionDoneMap.has(tx)) return;
    const done = new Promise((resolve, reject)=>{
        const unlisten = ()=>{
            tx.removeEventListener('complete', complete);
            tx.removeEventListener('error', error);
            tx.removeEventListener('abort', error);
        };
        const complete = ()=>{
            resolve();
            unlisten();
        };
        const error = ()=>{
            reject(tx.error || new DOMException('AbortError', 'AbortError'));
            unlisten();
        };
        tx.addEventListener('complete', complete);
        tx.addEventListener('error', error);
        tx.addEventListener('abort', error);
    });
    // Cache it for later retrieval.
    $a165fbdacbd62e4b$var$transactionDoneMap.set(tx, done);
}
let $a165fbdacbd62e4b$var$idbProxyTraps = {
    get (target, prop, receiver) {
        if (target instanceof IDBTransaction) {
            // Special handling for transaction.done.
            if (prop === 'done') return $a165fbdacbd62e4b$var$transactionDoneMap.get(target);
            // Polyfill for objectStoreNames because of Edge.
            if (prop === 'objectStoreNames') return target.objectStoreNames || $a165fbdacbd62e4b$var$transactionStoreNamesMap.get(target);
            // Make tx.store return the only store in the transaction, or undefined if there are many.
            if (prop === 'store') return receiver.objectStoreNames[1] ? undefined : receiver.objectStore(receiver.objectStoreNames[0]);
        }
        // Else transform whatever we get back.
        return $a165fbdacbd62e4b$export$efccba1c4a2ef57b(target[prop]);
    },
    set (target, prop, value) {
        target[prop] = value;
        return true;
    },
    has (target, prop) {
        if (target instanceof IDBTransaction && (prop === 'done' || prop === 'store')) return true;
        return prop in target;
    }
};
function $a165fbdacbd62e4b$export$43caf9889c228507(callback) {
    $a165fbdacbd62e4b$var$idbProxyTraps = callback($a165fbdacbd62e4b$var$idbProxyTraps);
}
function $a165fbdacbd62e4b$var$wrapFunction(func) {
    // Due to expected object equality (which is enforced by the caching in `wrap`), we
    // only create one new func per func.
    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.
    if (func === IDBDatabase.prototype.transaction && !('objectStoreNames' in IDBTransaction.prototype)) return function(storeNames, ...args) {
        const tx = func.call($a165fbdacbd62e4b$export$3b14a55fb2447963(this), storeNames, ...args);
        $a165fbdacbd62e4b$var$transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [
            storeNames
        ]);
        return $a165fbdacbd62e4b$export$efccba1c4a2ef57b(tx);
    };
    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In
    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the
    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense
    // with real promises, so each advance methods returns a new promise for the cursor object, or
    // undefined if the end of the cursor has been reached.
    if ($a165fbdacbd62e4b$var$getCursorAdvanceMethods().includes(func)) return function(...args) {
        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
        // the original object.
        func.apply($a165fbdacbd62e4b$export$3b14a55fb2447963(this), args);
        return $a165fbdacbd62e4b$export$efccba1c4a2ef57b($a165fbdacbd62e4b$var$cursorRequestMap.get(this));
    };
    return function(...args) {
        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
        // the original object.
        return $a165fbdacbd62e4b$export$efccba1c4a2ef57b(func.apply($a165fbdacbd62e4b$export$3b14a55fb2447963(this), args));
    };
}
function $a165fbdacbd62e4b$var$transformCachableValue(value) {
    if (typeof value === 'function') return $a165fbdacbd62e4b$var$wrapFunction(value);
    // This doesn't return, it just creates a 'done' promise for the transaction,
    // which is later returned for transaction.done (see idbObjectHandler).
    if (value instanceof IDBTransaction) $a165fbdacbd62e4b$var$cacheDonePromiseForTransaction(value);
    if ($a165fbdacbd62e4b$export$23f2a1d2818174ef(value, $a165fbdacbd62e4b$var$getIdbProxyableTypes())) return new Proxy(value, $a165fbdacbd62e4b$var$idbProxyTraps);
    // Return the same value back if we're not going to transform it.
    return value;
}
function $a165fbdacbd62e4b$export$efccba1c4a2ef57b(value) {
    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because
    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.
    if (value instanceof IDBRequest) return $a165fbdacbd62e4b$var$promisifyRequest(value);
    // If we've already transformed this value before, reuse the transformed value.
    // This is faster, but it also provides object equality.
    if ($a165fbdacbd62e4b$var$transformCache.has(value)) return $a165fbdacbd62e4b$var$transformCache.get(value);
    const newValue = $a165fbdacbd62e4b$var$transformCachableValue(value);
    // Not all types are transformed.
    // These may be primitive types, so they can't be WeakMap keys.
    if (newValue !== value) {
        $a165fbdacbd62e4b$var$transformCache.set(value, newValue);
        $a165fbdacbd62e4b$export$407448d2b89b1813.set(newValue, value);
    }
    return newValue;
}
const $a165fbdacbd62e4b$export$3b14a55fb2447963 = (value)=>$a165fbdacbd62e4b$export$407448d2b89b1813.get(value);


/**
 * Open a database.
 *
 * @param name Name of the database.
 * @param version Schema version.
 * @param callbacks Additional callbacks.
 */ function $3e98b2231e2238bf$export$ca0ed41b1a2af7e(name, version, { blocked: blocked, upgrade: upgrade, blocking: blocking, terminated: terminated } = {}) {
    const request = indexedDB.open(name, version);
    const openPromise = (0, $a165fbdacbd62e4b$export$efccba1c4a2ef57b)(request);
    if (upgrade) request.addEventListener('upgradeneeded', (event)=>{
        upgrade((0, $a165fbdacbd62e4b$export$efccba1c4a2ef57b)(request.result), event.oldVersion, event.newVersion, (0, $a165fbdacbd62e4b$export$efccba1c4a2ef57b)(request.transaction), event);
    });
    if (blocked) request.addEventListener('blocked', (event)=>blocked(// Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
        event.oldVersion, event.newVersion, event));
    openPromise.then((db)=>{
        if (terminated) db.addEventListener('close', ()=>terminated());
        if (blocking) db.addEventListener('versionchange', (event)=>blocking(event.oldVersion, event.newVersion, event));
    }).catch(()=>{});
    return openPromise;
}
/**
 * Delete a database.
 *
 * @param name Name of the database.
 */ function $3e98b2231e2238bf$export$9d6df0ac66a98bb2(name, { blocked: blocked } = {}) {
    const request = indexedDB.deleteDatabase(name);
    if (blocked) request.addEventListener('blocked', (event)=>blocked(// Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
        event.oldVersion, event));
    return (0, $a165fbdacbd62e4b$export$efccba1c4a2ef57b)(request).then(()=>undefined);
}
const $3e98b2231e2238bf$var$readMethods = [
    'get',
    'getKey',
    'getAll',
    'getAllKeys',
    'count'
];
const $3e98b2231e2238bf$var$writeMethods = [
    'put',
    'add',
    'delete',
    'clear'
];
const $3e98b2231e2238bf$var$cachedMethods = new Map();
function $3e98b2231e2238bf$var$getMethod(target, prop) {
    if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === 'string')) return;
    if ($3e98b2231e2238bf$var$cachedMethods.get(prop)) return $3e98b2231e2238bf$var$cachedMethods.get(prop);
    const targetFuncName = prop.replace(/FromIndex$/, '');
    const useIndex = prop !== targetFuncName;
    const isWrite = $3e98b2231e2238bf$var$writeMethods.includes(targetFuncName);
    if (// Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || $3e98b2231e2238bf$var$readMethods.includes(targetFuncName))) return;
    const method = async function(storeName, ...args) {
        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(
        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');
        let target = tx.store;
        if (useIndex) target = target.index(args.shift());
        // Must reject if op rejects.
        // If it's a write operation, must reject if tx.done rejects.
        // Must reject with op rejection first.
        // Must resolve with op value.
        // Must handle both promises (no unhandled rejections)
        return (await Promise.all([
            target[targetFuncName](...args),
            isWrite && tx.done
        ]))[0];
    };
    $3e98b2231e2238bf$var$cachedMethods.set(prop, method);
    return method;
}
(0, $a165fbdacbd62e4b$export$43caf9889c228507)((oldTraps)=>({
        ...oldTraps,
        get: (target, prop, receiver)=>$3e98b2231e2238bf$var$getMethod(target, prop) || oldTraps.get(target, prop, receiver),
        has: (target, prop)=>!!$3e98b2231e2238bf$var$getMethod(target, prop) || oldTraps.has(target, prop)
    }));


/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $12572052cab62175$var$PlatformLoggerServiceImpl {
    constructor(container){
        this.container = container;
    }
    // In initial implementation, this will be called by installations on
    // auth token refresh, and installations will send this string.
    getPlatformInfoString() {
        const providers = this.container.getProviders();
        // Loop through providers and get library/version pairs from any that are
        // version components.
        return providers.map((provider)=>{
            if ($12572052cab62175$var$isVersionServiceProvider(provider)) {
                const service = provider.getImmediate();
                return `${service.library}/${service.version}`;
            } else return null;
        }).filter((logString)=>logString).join(' ');
    }
}
/**
 *
 * @param provider check if this provider provides a VersionService
 *
 * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
 * provides VersionService. The provider is not necessarily a 'app-version'
 * provider.
 */ function $12572052cab62175$var$isVersionServiceProvider(provider) {
    const component = provider.getComponent();
    return (component === null || component === void 0 ? void 0 : component.type) === "VERSION" /* ComponentType.VERSION */ ;
}
const $12572052cab62175$var$name$q = "@firebase/app";
const $12572052cab62175$var$version$1 = "0.13.0";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $12572052cab62175$var$logger = new (0, $429b88c59f76915c$export$efa9a398d6368992)('@firebase/app');
const $12572052cab62175$var$name$p = "@firebase/app-compat";
const $12572052cab62175$var$name$o = "@firebase/analytics-compat";
const $12572052cab62175$var$name$n = "@firebase/analytics";
const $12572052cab62175$var$name$m = "@firebase/app-check-compat";
const $12572052cab62175$var$name$l = "@firebase/app-check";
const $12572052cab62175$var$name$k = "@firebase/auth";
const $12572052cab62175$var$name$j = "@firebase/auth-compat";
const $12572052cab62175$var$name$i = "@firebase/database";
const $12572052cab62175$var$name$h = "@firebase/data-connect";
const $12572052cab62175$var$name$g = "@firebase/database-compat";
const $12572052cab62175$var$name$f = "@firebase/functions";
const $12572052cab62175$var$name$e = "@firebase/functions-compat";
const $12572052cab62175$var$name$d = "@firebase/installations";
const $12572052cab62175$var$name$c = "@firebase/installations-compat";
const $12572052cab62175$var$name$b = "@firebase/messaging";
const $12572052cab62175$var$name$a = "@firebase/messaging-compat";
const $12572052cab62175$var$name$9 = "@firebase/performance";
const $12572052cab62175$var$name$8 = "@firebase/performance-compat";
const $12572052cab62175$var$name$7 = "@firebase/remote-config";
const $12572052cab62175$var$name$6 = "@firebase/remote-config-compat";
const $12572052cab62175$var$name$5 = "@firebase/storage";
const $12572052cab62175$var$name$4 = "@firebase/storage-compat";
const $12572052cab62175$var$name$3 = "@firebase/firestore";
const $12572052cab62175$var$name$2 = "@firebase/ai";
const $12572052cab62175$var$name$1 = "@firebase/firestore-compat";
const $12572052cab62175$var$name = "firebase";
const $12572052cab62175$var$version = "11.8.0";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The default app name
 *
 * @internal
 */ const $12572052cab62175$export$9f30fa0c10967f7f = '[DEFAULT]';
const $12572052cab62175$var$PLATFORM_LOG_STRING = {
    [$12572052cab62175$var$name$q]: 'fire-core',
    [$12572052cab62175$var$name$p]: 'fire-core-compat',
    [$12572052cab62175$var$name$n]: 'fire-analytics',
    [$12572052cab62175$var$name$o]: 'fire-analytics-compat',
    [$12572052cab62175$var$name$l]: 'fire-app-check',
    [$12572052cab62175$var$name$m]: 'fire-app-check-compat',
    [$12572052cab62175$var$name$k]: 'fire-auth',
    [$12572052cab62175$var$name$j]: 'fire-auth-compat',
    [$12572052cab62175$var$name$i]: 'fire-rtdb',
    [$12572052cab62175$var$name$h]: 'fire-data-connect',
    [$12572052cab62175$var$name$g]: 'fire-rtdb-compat',
    [$12572052cab62175$var$name$f]: 'fire-fn',
    [$12572052cab62175$var$name$e]: 'fire-fn-compat',
    [$12572052cab62175$var$name$d]: 'fire-iid',
    [$12572052cab62175$var$name$c]: 'fire-iid-compat',
    [$12572052cab62175$var$name$b]: 'fire-fcm',
    [$12572052cab62175$var$name$a]: 'fire-fcm-compat',
    [$12572052cab62175$var$name$9]: 'fire-perf',
    [$12572052cab62175$var$name$8]: 'fire-perf-compat',
    [$12572052cab62175$var$name$7]: 'fire-rc',
    [$12572052cab62175$var$name$6]: 'fire-rc-compat',
    [$12572052cab62175$var$name$5]: 'fire-gcs',
    [$12572052cab62175$var$name$4]: 'fire-gcs-compat',
    [$12572052cab62175$var$name$3]: 'fire-fst',
    [$12572052cab62175$var$name$1]: 'fire-fst-compat',
    [$12572052cab62175$var$name$2]: 'fire-vertex',
    'fire-js': 'fire-js',
    [$12572052cab62175$var$name]: 'fire-js-all'
};
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @internal
 */ const $12572052cab62175$export$b4e3c36c855b14b5 = new Map();
/**
 * @internal
 */ const $12572052cab62175$export$fb03ad8d3d5c5f76 = new Map();
/**
 * Registered components.
 *
 * @internal
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
const $12572052cab62175$export$9566bce3835c0f28 = new Map();
/**
 * @param component - the component being added to this app's container
 *
 * @internal
 */ function $12572052cab62175$export$fa5244b94c62d36a(app, component) {
    try {
        app.container.addComponent(component);
    } catch (e) {
        $12572052cab62175$var$logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);
    }
}
/**
 *
 * @internal
 */ function $12572052cab62175$export$4393112b42e2b41d(app, component) {
    app.container.addOrOverwriteComponent(component);
}
/**
 *
 * @param component - the component to register
 * @returns whether or not the component is registered successfully
 *
 * @internal
 */ function $12572052cab62175$export$c930050e7bb63965(component) {
    const componentName = component.name;
    if ($12572052cab62175$export$9566bce3835c0f28.has(componentName)) {
        $12572052cab62175$var$logger.debug(`There were multiple attempts to register component ${componentName}.`);
        return false;
    }
    $12572052cab62175$export$9566bce3835c0f28.set(componentName, component);
    // add the component to existing app instances
    for (const app of $12572052cab62175$export$b4e3c36c855b14b5.values())$12572052cab62175$export$fa5244b94c62d36a(app, component);
    for (const serverApp of $12572052cab62175$export$fb03ad8d3d5c5f76.values())$12572052cab62175$export$fa5244b94c62d36a(serverApp, component);
    return true;
}
/**
 *
 * @param app - FirebaseApp instance
 * @param name - service name
 *
 * @returns the provider for the service with the matching name
 *
 * @internal
 */ function $12572052cab62175$export$fa0d6da0f5838f50(app, name) {
    const heartbeatController = app.container.getProvider('heartbeat').getImmediate({
        optional: true
    });
    if (heartbeatController) heartbeatController.triggerHeartbeat();
    return app.container.getProvider(name);
}
/**
 *
 * @param app - FirebaseApp instance
 * @param name - service name
 * @param instanceIdentifier - service instance identifier in case the service supports multiple instances
 *
 * @internal
 */ function $12572052cab62175$export$48d18de2ff1c45a5(app, name, instanceIdentifier = $12572052cab62175$export$9f30fa0c10967f7f) {
    $12572052cab62175$export$fa0d6da0f5838f50(app, name).clearInstance(instanceIdentifier);
}
/**
 *
 * @param obj - an object of type FirebaseApp or FirebaseOptions.
 *
 * @returns true if the provide object is of type FirebaseApp.
 *
 * @internal
 */ function $12572052cab62175$export$110778f8e98b8257(obj) {
    return obj.options !== undefined;
}
/**
 *
 * @param obj - an object of type FirebaseApp.
 *
 * @returns true if the provided object is of type FirebaseServerAppImpl.
 *
 * @internal
 */ function $12572052cab62175$export$643c8bc6c389f34e(obj) {
    if (obj === null || obj === undefined) return false;
    return obj.settings !== undefined;
}
/**
 * Test only
 *
 * @internal
 */ function $12572052cab62175$export$3685d89b9c3cdfaf() {
    $12572052cab62175$export$9566bce3835c0f28.clear();
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $12572052cab62175$var$ERRORS = {
    ["no-app" /* AppError.NO_APP */ ]: "No Firebase App '{$appName}' has been created - call initializeApp() first",
    ["bad-app-name" /* AppError.BAD_APP_NAME */ ]: "Illegal App name: '{$appName}'",
    ["duplicate-app" /* AppError.DUPLICATE_APP */ ]: "Firebase App named '{$appName}' already exists with different options or config",
    ["app-deleted" /* AppError.APP_DELETED */ ]: "Firebase App named '{$appName}' already deleted",
    ["server-app-deleted" /* AppError.SERVER_APP_DELETED */ ]: 'Firebase Server App has been deleted',
    ["no-options" /* AppError.NO_OPTIONS */ ]: 'Need to provide options, when not being deployed to hosting via source.',
    ["invalid-app-argument" /* AppError.INVALID_APP_ARGUMENT */ ]: "firebase.{$appName}() takes either no argument or a Firebase App instance.",
    ["invalid-log-argument" /* AppError.INVALID_LOG_ARGUMENT */ ]: 'First argument to `onLog` must be null or a function.',
    ["idb-open" /* AppError.IDB_OPEN */ ]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',
    ["idb-get" /* AppError.IDB_GET */ ]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',
    ["idb-set" /* AppError.IDB_WRITE */ ]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',
    ["idb-delete" /* AppError.IDB_DELETE */ ]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.',
    ["finalization-registry-not-supported" /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */ ]: 'FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.',
    ["invalid-server-app-environment" /* AppError.INVALID_SERVER_APP_ENVIRONMENT */ ]: 'FirebaseServerApp is not for use in browser environments.'
};
const $12572052cab62175$var$ERROR_FACTORY = new (0, $ee1ab2624407a779$export$3fa6e1b18a3b2d40)('app', 'Firebase', $12572052cab62175$var$ERRORS);
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $12572052cab62175$var$FirebaseAppImpl {
    constructor(options, config, container){
        this._isDeleted = false;
        this._options = Object.assign({}, options);
        this._config = Object.assign({}, config);
        this._name = config.name;
        this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;
        this._container = container;
        this.container.addComponent(new (0, $7d2fc2186abbee8c$export$16fa2f45be04daa8)('app', ()=>this, "PUBLIC" /* ComponentType.PUBLIC */ ));
    }
    get automaticDataCollectionEnabled() {
        this.checkDestroyed();
        return this._automaticDataCollectionEnabled;
    }
    set automaticDataCollectionEnabled(val) {
        this.checkDestroyed();
        this._automaticDataCollectionEnabled = val;
    }
    get name() {
        this.checkDestroyed();
        return this._name;
    }
    get options() {
        this.checkDestroyed();
        return this._options;
    }
    get config() {
        this.checkDestroyed();
        return this._config;
    }
    get container() {
        return this._container;
    }
    get isDeleted() {
        return this._isDeleted;
    }
    set isDeleted(val) {
        this._isDeleted = val;
    }
    /**
     * This function will throw an Error if the App has already been deleted -
     * use before performing API actions on the App.
     */ checkDestroyed() {
        if (this.isDeleted) throw $12572052cab62175$var$ERROR_FACTORY.create("app-deleted" /* AppError.APP_DELETED */ , {
            appName: this._name
        });
    }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Parse the token and check to see if the `exp` claim is in the future.
// Reports an error to the console if the token or claim could not be parsed, or if `exp` is in
// the past.
function $12572052cab62175$var$validateTokenTTL(base64Token, tokenName) {
    const secondPart = (0, $ee1ab2624407a779$export$c62426fdd000a97e)(base64Token.split('.')[1]);
    if (secondPart === null) {
        console.error(`FirebaseServerApp ${tokenName} is invalid: second part could not be parsed.`);
        return;
    }
    const expClaim = JSON.parse(secondPart).exp;
    if (expClaim === undefined) {
        console.error(`FirebaseServerApp ${tokenName} is invalid: expiration claim could not be parsed`);
        return;
    }
    const exp = JSON.parse(secondPart).exp * 1000;
    const now = new Date().getTime();
    const diff = exp - now;
    if (diff <= 0) console.error(`FirebaseServerApp ${tokenName} is invalid: the token has expired.`);
}
class $12572052cab62175$var$FirebaseServerAppImpl extends $12572052cab62175$var$FirebaseAppImpl {
    constructor(options, serverConfig, name, container){
        // Build configuration parameters for the FirebaseAppImpl base class.
        const automaticDataCollectionEnabled = serverConfig.automaticDataCollectionEnabled !== undefined ? serverConfig.automaticDataCollectionEnabled : true;
        // Create the FirebaseAppSettings object for the FirebaseAppImp constructor.
        const config = {
            name: name,
            automaticDataCollectionEnabled: automaticDataCollectionEnabled
        };
        if (options.apiKey !== undefined) // Construct the parent FirebaseAppImp object.
        super(options, config, container);
        else {
            const appImpl = options;
            super(appImpl.options, config, container);
        }
        // Now construct the data for the FirebaseServerAppImpl.
        this._serverConfig = Object.assign({
            automaticDataCollectionEnabled: automaticDataCollectionEnabled
        }, serverConfig);
        // Ensure that the current time is within the `authIdtoken` window of validity.
        if (this._serverConfig.authIdToken) $12572052cab62175$var$validateTokenTTL(this._serverConfig.authIdToken, 'authIdToken');
        // Ensure that the current time is within the `appCheckToken` window of validity.
        if (this._serverConfig.appCheckToken) $12572052cab62175$var$validateTokenTTL(this._serverConfig.appCheckToken, 'appCheckToken');
        this._finalizationRegistry = null;
        if (typeof FinalizationRegistry !== 'undefined') this._finalizationRegistry = new FinalizationRegistry(()=>{
            this.automaticCleanup();
        });
        this._refCount = 0;
        this.incRefCount(this._serverConfig.releaseOnDeref);
        // Do not retain a hard reference to the dref object, otherwise the FinalizationRegistry
        // will never trigger.
        this._serverConfig.releaseOnDeref = undefined;
        serverConfig.releaseOnDeref = undefined;
        $12572052cab62175$export$d29d5299a7137abc($12572052cab62175$var$name$q, $12572052cab62175$var$version$1, 'serverapp');
    }
    toJSON() {
        return undefined;
    }
    get refCount() {
        return this._refCount;
    }
    // Increment the reference count of this server app. If an object is provided, register it
    // with the finalization registry.
    incRefCount(obj) {
        if (this.isDeleted) return;
        this._refCount++;
        if (obj !== undefined && this._finalizationRegistry !== null) this._finalizationRegistry.register(obj, this);
    }
    // Decrement the reference count.
    decRefCount() {
        if (this.isDeleted) return 0;
        return --this._refCount;
    }
    // Invoked by the FinalizationRegistry callback to note that this app should go through its
    // reference counts and delete itself if no reference count remain. The coordinating logic that
    // handles this is in deleteApp(...).
    automaticCleanup() {
        $12572052cab62175$export$6eec44aa53d5ea34(this);
    }
    get settings() {
        this.checkDestroyed();
        return this._serverConfig;
    }
    /**
     * This function will throw an Error if the App has already been deleted -
     * use before performing API actions on the App.
     */ checkDestroyed() {
        if (this.isDeleted) throw $12572052cab62175$var$ERROR_FACTORY.create("server-app-deleted" /* AppError.SERVER_APP_DELETED */ );
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The current SDK version.
 *
 * @public
 */ const $12572052cab62175$export$31499a9cd224b78c = $12572052cab62175$var$version;
function $12572052cab62175$export$c55cfd413944906d(_options, rawConfig = {}) {
    let options = _options;
    if (typeof rawConfig !== 'object') {
        const name = rawConfig;
        rawConfig = {
            name: name
        };
    }
    const config = Object.assign({
        name: $12572052cab62175$export$9f30fa0c10967f7f,
        automaticDataCollectionEnabled: true
    }, rawConfig);
    const name = config.name;
    if (typeof name !== 'string' || !name) throw $12572052cab62175$var$ERROR_FACTORY.create("bad-app-name" /* AppError.BAD_APP_NAME */ , {
        appName: String(name)
    });
    options || (options = (0, $ee1ab2624407a779$export$3dfb6827a9f89756)());
    if (!options) throw $12572052cab62175$var$ERROR_FACTORY.create("no-options" /* AppError.NO_OPTIONS */ );
    const existingApp = $12572052cab62175$export$b4e3c36c855b14b5.get(name);
    if (existingApp) {
        // return the existing app if options and config deep equal the ones in the existing app.
        if ((0, $ee1ab2624407a779$export$9cb4719e2e525b7a)(options, existingApp.options) && (0, $ee1ab2624407a779$export$9cb4719e2e525b7a)(config, existingApp.config)) return existingApp;
        else throw $12572052cab62175$var$ERROR_FACTORY.create("duplicate-app" /* AppError.DUPLICATE_APP */ , {
            appName: name
        });
    }
    const container = new (0, $7d2fc2186abbee8c$export$436a80eea5d5c0c5)(name);
    for (const component of $12572052cab62175$export$9566bce3835c0f28.values())container.addComponent(component);
    const newApp = new $12572052cab62175$var$FirebaseAppImpl(options, config, container);
    $12572052cab62175$export$b4e3c36c855b14b5.set(name, newApp);
    return newApp;
}
function $12572052cab62175$export$45a407ab953b136b(_options, _serverAppConfig) {
    if ((0, $ee1ab2624407a779$export$4e09c449d6c407f7)() && !(0, $ee1ab2624407a779$export$97b87b8868ff7a3c)()) // FirebaseServerApp isn't designed to be run in browsers.
    throw $12572052cab62175$var$ERROR_FACTORY.create("invalid-server-app-environment" /* AppError.INVALID_SERVER_APP_ENVIRONMENT */ );
    if (_serverAppConfig.automaticDataCollectionEnabled === undefined) _serverAppConfig.automaticDataCollectionEnabled = true;
    let appOptions;
    if ($12572052cab62175$export$110778f8e98b8257(_options)) appOptions = _options.options;
    else appOptions = _options;
    // Build an app name based on a hash of the configuration options.
    const nameObj = Object.assign(Object.assign({}, _serverAppConfig), appOptions);
    // However, Do not mangle the name based on releaseOnDeref, since it will vary between the
    // construction of FirebaseServerApp instances. For example, if the object is the request headers.
    if (nameObj.releaseOnDeref !== undefined) delete nameObj.releaseOnDeref;
    const hashCode = (s)=>{
        return [
            ...s
        ].reduce((hash, c)=>Math.imul(31, hash) + c.charCodeAt(0) | 0, 0);
    };
    if (_serverAppConfig.releaseOnDeref !== undefined) {
        if (typeof FinalizationRegistry === 'undefined') throw $12572052cab62175$var$ERROR_FACTORY.create("finalization-registry-not-supported" /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */ , {});
    }
    const nameString = '' + hashCode(JSON.stringify(nameObj));
    const existingApp = $12572052cab62175$export$fb03ad8d3d5c5f76.get(nameString);
    if (existingApp) {
        existingApp.incRefCount(_serverAppConfig.releaseOnDeref);
        return existingApp;
    }
    const container = new (0, $7d2fc2186abbee8c$export$436a80eea5d5c0c5)(nameString);
    for (const component of $12572052cab62175$export$9566bce3835c0f28.values())container.addComponent(component);
    const newApp = new $12572052cab62175$var$FirebaseServerAppImpl(appOptions, _serverAppConfig, nameString, container);
    $12572052cab62175$export$fb03ad8d3d5c5f76.set(nameString, newApp);
    return newApp;
}
/**
 * Retrieves a {@link @firebase/app#FirebaseApp} instance.
 *
 * When called with no arguments, the default app is returned. When an app name
 * is provided, the app corresponding to that name is returned.
 *
 * An exception is thrown if the app being retrieved has not yet been
 * initialized.
 *
 * @example
 * ```javascript
 * // Return the default app
 * const app = getApp();
 * ```
 *
 * @example
 * ```javascript
 * // Return a named app
 * const otherApp = getApp("otherApp");
 * ```
 *
 * @param name - Optional name of the app to return. If no name is
 *   provided, the default is `"[DEFAULT]"`.
 *
 * @returns The app corresponding to the provided app name.
 *   If no app name is provided, the default app is returned.
 *
 * @public
 */ function $12572052cab62175$export$f9962582c9e66d99(name = $12572052cab62175$export$9f30fa0c10967f7f) {
    const app = $12572052cab62175$export$b4e3c36c855b14b5.get(name);
    if (!app && name === $12572052cab62175$export$9f30fa0c10967f7f && (0, $ee1ab2624407a779$export$3dfb6827a9f89756)()) return $12572052cab62175$export$c55cfd413944906d();
    if (!app) throw $12572052cab62175$var$ERROR_FACTORY.create("no-app" /* AppError.NO_APP */ , {
        appName: name
    });
    return app;
}
/**
 * A (read-only) array of all initialized apps.
 * @public
 */ function $12572052cab62175$export$68ddedf7d44b3bdf() {
    return Array.from($12572052cab62175$export$b4e3c36c855b14b5.values());
}
/**
 * Renders this app unusable and frees the resources of all associated
 * services.
 *
 * @example
 * ```javascript
 * deleteApp(app)
 *   .then(function() {
 *     console.log("App deleted successfully");
 *   })
 *   .catch(function(error) {
 *     console.log("Error deleting app:", error);
 *   });
 * ```
 *
 * @public
 */ async function $12572052cab62175$export$6eec44aa53d5ea34(app) {
    let cleanupProviders = false;
    const name = app.name;
    if ($12572052cab62175$export$b4e3c36c855b14b5.has(name)) {
        cleanupProviders = true;
        $12572052cab62175$export$b4e3c36c855b14b5.delete(name);
    } else if ($12572052cab62175$export$fb03ad8d3d5c5f76.has(name)) {
        const firebaseServerApp = app;
        if (firebaseServerApp.decRefCount() <= 0) {
            $12572052cab62175$export$fb03ad8d3d5c5f76.delete(name);
            cleanupProviders = true;
        }
    }
    if (cleanupProviders) {
        await Promise.all(app.container.getProviders().map((provider)=>provider.delete()));
        app.isDeleted = true;
    }
}
/**
 * Registers a library's name and version for platform logging purposes.
 * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)
 * @param version - Current version of that library.
 * @param variant - Bundle variant, e.g., node, rn, etc.
 *
 * @public
 */ function $12572052cab62175$export$d29d5299a7137abc(libraryKeyOrName, version, variant) {
    var _a;
    // TODO: We can use this check to whitelist strings when/if we set up
    // a good whitelist system.
    let library = (_a = $12572052cab62175$var$PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
    if (variant) library += `-${variant}`;
    const libraryMismatch = library.match(/\s|\//);
    const versionMismatch = version.match(/\s|\//);
    if (libraryMismatch || versionMismatch) {
        const warning = [
            `Unable to register library "${library}" with version "${version}":`
        ];
        if (libraryMismatch) warning.push(`library name "${library}" contains illegal characters (whitespace or "/")`);
        if (libraryMismatch && versionMismatch) warning.push('and');
        if (versionMismatch) warning.push(`version name "${version}" contains illegal characters (whitespace or "/")`);
        $12572052cab62175$var$logger.warn(warning.join(' '));
        return;
    }
    $12572052cab62175$export$c930050e7bb63965(new (0, $7d2fc2186abbee8c$export$16fa2f45be04daa8)(`${library}-version`, ()=>({
            library: library,
            version: version
        }), "VERSION" /* ComponentType.VERSION */ ));
}
/**
 * Sets log handler for all Firebase SDKs.
 * @param logCallback - An optional custom log handler that executes user code whenever
 * the Firebase SDK makes a logging call.
 *
 * @public
 */ function $12572052cab62175$export$a82ad227dc8163dc(logCallback, options) {
    if (logCallback !== null && typeof logCallback !== 'function') throw $12572052cab62175$var$ERROR_FACTORY.create("invalid-log-argument" /* AppError.INVALID_LOG_ARGUMENT */ );
    (0, $429b88c59f76915c$export$29577d29c84db5f6)(logCallback, options);
}
/**
 * Sets log level for all Firebase SDKs.
 *
 * All of the log types above the current log level are captured (i.e. if
 * you set the log level to `info`, errors are logged, but `debug` and
 * `verbose` logs are not).
 *
 * @public
 */ function $12572052cab62175$export$c622e99c0ce7b1c9(logLevel) {
    (0, $429b88c59f76915c$export$c622e99c0ce7b1c9)(logLevel);
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $12572052cab62175$var$DB_NAME = 'firebase-heartbeat-database';
const $12572052cab62175$var$DB_VERSION = 1;
const $12572052cab62175$var$STORE_NAME = 'firebase-heartbeat-store';
let $12572052cab62175$var$dbPromise = null;
function $12572052cab62175$var$getDbPromise() {
    if (!$12572052cab62175$var$dbPromise) $12572052cab62175$var$dbPromise = (0, $3e98b2231e2238bf$export$ca0ed41b1a2af7e)($12572052cab62175$var$DB_NAME, $12572052cab62175$var$DB_VERSION, {
        upgrade: (db, oldVersion)=>{
            // We don't use 'break' in this switch statement, the fall-through
            // behavior is what we want, because if there are multiple versions between
            // the old version and the current version, we want ALL the migrations
            // that correspond to those versions to run, not only the last one.
            // eslint-disable-next-line default-case
            switch(oldVersion){
                case 0:
                    try {
                        db.createObjectStore($12572052cab62175$var$STORE_NAME);
                    } catch (e) {
                        // Safari/iOS browsers throw occasional exceptions on
                        // db.createObjectStore() that may be a bug. Avoid blocking
                        // the rest of the app functionality.
                        console.warn(e);
                    }
            }
        }
    }).catch((e)=>{
        throw $12572052cab62175$var$ERROR_FACTORY.create("idb-open" /* AppError.IDB_OPEN */ , {
            originalErrorMessage: e.message
        });
    });
    return $12572052cab62175$var$dbPromise;
}
async function $12572052cab62175$var$readHeartbeatsFromIndexedDB(app) {
    try {
        const db = await $12572052cab62175$var$getDbPromise();
        const tx = db.transaction($12572052cab62175$var$STORE_NAME);
        const result = await tx.objectStore($12572052cab62175$var$STORE_NAME).get($12572052cab62175$var$computeKey(app));
        // We already have the value but tx.done can throw,
        // so we need to await it here to catch errors
        await tx.done;
        return result;
    } catch (e) {
        if (e instanceof (0, $ee1ab2624407a779$export$dd24e9cd51226c56)) $12572052cab62175$var$logger.warn(e.message);
        else {
            const idbGetError = $12572052cab62175$var$ERROR_FACTORY.create("idb-get" /* AppError.IDB_GET */ , {
                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message
            });
            $12572052cab62175$var$logger.warn(idbGetError.message);
        }
    }
}
async function $12572052cab62175$var$writeHeartbeatsToIndexedDB(app, heartbeatObject) {
    try {
        const db = await $12572052cab62175$var$getDbPromise();
        const tx = db.transaction($12572052cab62175$var$STORE_NAME, 'readwrite');
        const objectStore = tx.objectStore($12572052cab62175$var$STORE_NAME);
        await objectStore.put(heartbeatObject, $12572052cab62175$var$computeKey(app));
        await tx.done;
    } catch (e) {
        if (e instanceof (0, $ee1ab2624407a779$export$dd24e9cd51226c56)) $12572052cab62175$var$logger.warn(e.message);
        else {
            const idbGetError = $12572052cab62175$var$ERROR_FACTORY.create("idb-set" /* AppError.IDB_WRITE */ , {
                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message
            });
            $12572052cab62175$var$logger.warn(idbGetError.message);
        }
    }
}
function $12572052cab62175$var$computeKey(app) {
    return `${app.name}!${app.options.appId}`;
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $12572052cab62175$var$MAX_HEADER_BYTES = 1024;
const $12572052cab62175$var$MAX_NUM_STORED_HEARTBEATS = 30;
class $12572052cab62175$var$HeartbeatServiceImpl {
    constructor(container){
        this.container = container;
        /**
         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate
         * the header string.
         * Stores one record per date. This will be consolidated into the standard
         * format of one record per user agent string before being sent as a header.
         * Populated from indexedDB when the controller is instantiated and should
         * be kept in sync with indexedDB.
         * Leave public for easier testing.
         */ this._heartbeatsCache = null;
        const app = this.container.getProvider('app').getImmediate();
        this._storage = new $12572052cab62175$var$HeartbeatStorageImpl(app);
        this._heartbeatsCachePromise = this._storage.read().then((result)=>{
            this._heartbeatsCache = result;
            return result;
        });
    }
    /**
     * Called to report a heartbeat. The function will generate
     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it
     * to IndexedDB.
     * Note that we only store one heartbeat per day. So if a heartbeat for today is
     * already logged, subsequent calls to this function in the same day will be ignored.
     */ async triggerHeartbeat() {
        var _a, _b;
        try {
            const platformLogger = this.container.getProvider('platform-logger').getImmediate();
            // This is the "Firebase user agent" string from the platform logger
            // service, not the browser user agent.
            const agent = platformLogger.getPlatformInfoString();
            const date = $12572052cab62175$var$getUTCDateString();
            if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null) {
                this._heartbeatsCache = await this._heartbeatsCachePromise;
                // If we failed to construct a heartbeats cache, then return immediately.
                if (((_b = this._heartbeatsCache) === null || _b === void 0 ? void 0 : _b.heartbeats) == null) return;
            }
            // Do not store a heartbeat if one is already stored for this day
            // or if a header has already been sent today.
            if (this._heartbeatsCache.lastSentHeartbeatDate === date || this._heartbeatsCache.heartbeats.some((singleDateHeartbeat)=>singleDateHeartbeat.date === date)) return;
            else {
                // There is no entry for this date. Create one.
                this._heartbeatsCache.heartbeats.push({
                    date: date,
                    agent: agent
                });
                // If the number of stored heartbeats exceeds the maximum number of stored heartbeats, remove the heartbeat with the earliest date.
                // Since this is executed each time a heartbeat is pushed, the limit can only be exceeded by one, so only one needs to be removed.
                if (this._heartbeatsCache.heartbeats.length > $12572052cab62175$var$MAX_NUM_STORED_HEARTBEATS) {
                    const earliestHeartbeatIdx = $12572052cab62175$var$getEarliestHeartbeatIdx(this._heartbeatsCache.heartbeats);
                    this._heartbeatsCache.heartbeats.splice(earliestHeartbeatIdx, 1);
                }
            }
            return this._storage.overwrite(this._heartbeatsCache);
        } catch (e) {
            $12572052cab62175$var$logger.warn(e);
        }
    }
    /**
     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.
     * It also clears all heartbeats from memory as well as in IndexedDB.
     *
     * NOTE: Consuming product SDKs should not send the header if this method
     * returns an empty string.
     */ async getHeartbeatsHeader() {
        var _a;
        try {
            if (this._heartbeatsCache === null) await this._heartbeatsCachePromise;
            // If it's still null or the array is empty, there is no data to send.
            if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null || this._heartbeatsCache.heartbeats.length === 0) return '';
            const date = $12572052cab62175$var$getUTCDateString();
            // Extract as many heartbeats from the cache as will fit under the size limit.
            const { heartbeatsToSend: heartbeatsToSend, unsentEntries: unsentEntries } = $12572052cab62175$var$extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);
            const headerString = (0, $ee1ab2624407a779$export$4b5284a3025a455)(JSON.stringify({
                version: 2,
                heartbeats: heartbeatsToSend
            }));
            // Store last sent date to prevent another being logged/sent for the same day.
            this._heartbeatsCache.lastSentHeartbeatDate = date;
            if (unsentEntries.length > 0) {
                // Store any unsent entries if they exist.
                this._heartbeatsCache.heartbeats = unsentEntries;
                // This seems more likely than emptying the array (below) to lead to some odd state
                // since the cache isn't empty and this will be called again on the next request,
                // and is probably safest if we await it.
                await this._storage.overwrite(this._heartbeatsCache);
            } else {
                this._heartbeatsCache.heartbeats = [];
                // Do not wait for this, to reduce latency.
                this._storage.overwrite(this._heartbeatsCache);
            }
            return headerString;
        } catch (e) {
            $12572052cab62175$var$logger.warn(e);
            return '';
        }
    }
}
function $12572052cab62175$var$getUTCDateString() {
    const today = new Date();
    // Returns date format 'YYYY-MM-DD'
    return today.toISOString().substring(0, 10);
}
function $12572052cab62175$var$extractHeartbeatsForHeader(heartbeatsCache, maxSize = $12572052cab62175$var$MAX_HEADER_BYTES) {
    // Heartbeats grouped by user agent in the standard format to be sent in
    // the header.
    const heartbeatsToSend = [];
    // Single date format heartbeats that are not sent.
    let unsentEntries = heartbeatsCache.slice();
    for (const singleDateHeartbeat of heartbeatsCache){
        // Look for an existing entry with the same user agent.
        const heartbeatEntry = heartbeatsToSend.find((hb)=>hb.agent === singleDateHeartbeat.agent);
        if (!heartbeatEntry) {
            // If no entry for this user agent exists, create one.
            heartbeatsToSend.push({
                agent: singleDateHeartbeat.agent,
                dates: [
                    singleDateHeartbeat.date
                ]
            });
            if ($12572052cab62175$var$countBytes(heartbeatsToSend) > maxSize) {
                // If the header would exceed max size, remove the added heartbeat
                // entry and stop adding to the header.
                heartbeatsToSend.pop();
                break;
            }
        } else {
            heartbeatEntry.dates.push(singleDateHeartbeat.date);
            // If the header would exceed max size, remove the added date
            // and stop adding to the header.
            if ($12572052cab62175$var$countBytes(heartbeatsToSend) > maxSize) {
                heartbeatEntry.dates.pop();
                break;
            }
        }
        // Pop unsent entry from queue. (Skipped if adding the entry exceeded
        // quota and the loop breaks early.)
        unsentEntries = unsentEntries.slice(1);
    }
    return {
        heartbeatsToSend: heartbeatsToSend,
        unsentEntries: unsentEntries
    };
}
class $12572052cab62175$var$HeartbeatStorageImpl {
    constructor(app){
        this.app = app;
        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
    }
    async runIndexedDBEnvironmentCheck() {
        if (!(0, $ee1ab2624407a779$export$3865db50535c2055)()) return false;
        else return (0, $ee1ab2624407a779$export$a8a3018f3d187a4d)().then(()=>true).catch(()=>false);
    }
    /**
     * Read all heartbeats.
     */ async read() {
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) return {
            heartbeats: []
        };
        else {
            const idbHeartbeatObject = await $12572052cab62175$var$readHeartbeatsFromIndexedDB(this.app);
            if (idbHeartbeatObject === null || idbHeartbeatObject === void 0 ? void 0 : idbHeartbeatObject.heartbeats) return idbHeartbeatObject;
            else return {
                heartbeats: []
            };
        }
    }
    // overwrite the storage with the provided heartbeats
    async overwrite(heartbeatsObject) {
        var _a;
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) return;
        else {
            const existingHeartbeatsObject = await this.read();
            return $12572052cab62175$var$writeHeartbeatsToIndexedDB(this.app, {
                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
                heartbeats: heartbeatsObject.heartbeats
            });
        }
    }
    // add heartbeats
    async add(heartbeatsObject) {
        var _a;
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) return;
        else {
            const existingHeartbeatsObject = await this.read();
            return $12572052cab62175$var$writeHeartbeatsToIndexedDB(this.app, {
                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
                heartbeats: [
                    ...existingHeartbeatsObject.heartbeats,
                    ...heartbeatsObject.heartbeats
                ]
            });
        }
    }
}
/**
 * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped
 * in a platform logging header JSON object, stringified, and converted
 * to base 64.
 */ function $12572052cab62175$var$countBytes(heartbeatsCache) {
    // base64 has a restricted set of characters, all of which should be 1 byte.
    return (0, $ee1ab2624407a779$export$4b5284a3025a455)(// heartbeatsCache wrapper properties
    JSON.stringify({
        version: 2,
        heartbeats: heartbeatsCache
    })).length;
}
/**
 * Returns the index of the heartbeat with the earliest date.
 * If the heartbeats array is empty, -1 is returned.
 */ function $12572052cab62175$var$getEarliestHeartbeatIdx(heartbeats) {
    if (heartbeats.length === 0) return -1;
    let earliestHeartbeatIdx = 0;
    let earliestHeartbeatDate = heartbeats[0].date;
    for(let i = 1; i < heartbeats.length; i++)if (heartbeats[i].date < earliestHeartbeatDate) {
        earliestHeartbeatDate = heartbeats[i].date;
        earliestHeartbeatIdx = i;
    }
    return earliestHeartbeatIdx;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $12572052cab62175$var$registerCoreComponents(variant) {
    $12572052cab62175$export$c930050e7bb63965(new (0, $7d2fc2186abbee8c$export$16fa2f45be04daa8)('platform-logger', (container)=>new $12572052cab62175$var$PlatformLoggerServiceImpl(container), "PRIVATE" /* ComponentType.PRIVATE */ ));
    $12572052cab62175$export$c930050e7bb63965(new (0, $7d2fc2186abbee8c$export$16fa2f45be04daa8)('heartbeat', (container)=>new $12572052cab62175$var$HeartbeatServiceImpl(container), "PRIVATE" /* ComponentType.PRIVATE */ ));
    // Register `app` package.
    $12572052cab62175$export$d29d5299a7137abc($12572052cab62175$var$name$q, $12572052cab62175$var$version$1, variant);
    // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation
    $12572052cab62175$export$d29d5299a7137abc($12572052cab62175$var$name$q, $12572052cab62175$var$version$1, 'esm2017');
    // Register platform SDK identifier (no version).
    $12572052cab62175$export$d29d5299a7137abc('fire-js', '');
}
/**
 * Firebase App
 *
 * @remarks This package coordinates the communication between the different Firebase components
 * @packageDocumentation
 */ $12572052cab62175$var$registerCoreComponents('');




/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol, Iterator */ var $b7b472ff0da46e08$var$extendStatics = function(d, b) {
    $b7b472ff0da46e08$var$extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return $b7b472ff0da46e08$var$extendStatics(d, b);
};
function $b7b472ff0da46e08$export$a8ba968b8961cb8a(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    $b7b472ff0da46e08$var$extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var $b7b472ff0da46e08$export$18ce0697a983be9b = function() {
    $b7b472ff0da46e08$export$18ce0697a983be9b = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $b7b472ff0da46e08$export$18ce0697a983be9b.apply(this, arguments);
};
function $b7b472ff0da46e08$export$3c9a16f847548506(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function $b7b472ff0da46e08$export$29e00dfd3077644b(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function $b7b472ff0da46e08$export$d5ad3fd78186038f(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function $b7b472ff0da46e08$export$3a84e1ae4e97e9b0(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) {
        if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
        return f;
    }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for(var i = decorators.length - 1; i >= 0; i--){
        var context = {};
        for(var p in contextIn)context[p] = p === "access" ? {} : contextIn[p];
        for(var p in contextIn.access)context.access[p] = contextIn.access[p];
        context.addInitializer = function(f) {
            if (done) throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f || null));
        };
        var result = (0, decorators[i])(kind === "accessor" ? {
            get: descriptor.get,
            set: descriptor.set
        } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        } else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
}
function $b7b472ff0da46e08$export$d831c04e792af3d(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for(var i = 0; i < initializers.length; i++)value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    return useValue ? value : void 0;
}
function $b7b472ff0da46e08$export$6a2a36740a146cb8(x) {
    return typeof x === "symbol" ? x : "".concat(x);
}
function $b7b472ff0da46e08$export$d1a06452d3489bc7(f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", {
        configurable: true,
        value: prefix ? "".concat(prefix, " ", name) : name
    });
}
function $b7b472ff0da46e08$export$f1db080c865becb9(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function $b7b472ff0da46e08$export$1050f835b63b671e(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function $b7b472ff0da46e08$export$67ebef60e6f28a6(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var $b7b472ff0da46e08$export$45d3717a4c69092e = Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function $b7b472ff0da46e08$export$f33643c0debef087(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) $b7b472ff0da46e08$export$45d3717a4c69092e(o, m, p);
}
function $b7b472ff0da46e08$export$19a8beecd37a4c45(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function $b7b472ff0da46e08$export$8d051b38c9118094(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function $b7b472ff0da46e08$export$afc72e2116322959() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat($b7b472ff0da46e08$export$8d051b38c9118094(arguments[i]));
    return ar;
}
function $b7b472ff0da46e08$export$6388937ca91ccae8() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function $b7b472ff0da46e08$export$1216008129fb82ed(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function $b7b472ff0da46e08$export$10c90e4f7922046c(v) {
    return this instanceof $b7b472ff0da46e08$export$10c90e4f7922046c ? (this.v = v, this) : new $b7b472ff0da46e08$export$10c90e4f7922046c(v);
}
function $b7b472ff0da46e08$export$e427f37a30a4de9b(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function awaitReturn(f) {
        return function(v) {
            return Promise.resolve(v).then(f, reject);
        };
    }
    function verb(n, f) {
        if (g[n]) {
            i[n] = function(v) {
                return new Promise(function(a, b) {
                    q.push([
                        n,
                        v,
                        a,
                        b
                    ]) > 1 || resume(n, v);
                });
            };
            if (f) i[n] = f(i[n]);
        }
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof $b7b472ff0da46e08$export$10c90e4f7922046c ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function $b7b472ff0da46e08$export$bbd80228419bb833(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: $b7b472ff0da46e08$export$10c90e4f7922046c(o[n](v)),
                done: false
            } : f ? f(v) : v;
        } : f;
    }
}
function $b7b472ff0da46e08$export$e3b29a3d6162315f(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof $b7b472ff0da46e08$export$19a8beecd37a4c45 === "function" ? $b7b472ff0da46e08$export$19a8beecd37a4c45(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function $b7b472ff0da46e08$export$4fb47efe1390b86f(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
var $b7b472ff0da46e08$var$__setModuleDefault = Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
var $b7b472ff0da46e08$var$ownKeys = function(o) {
    $b7b472ff0da46e08$var$ownKeys = Object.getOwnPropertyNames || function(o) {
        var ar = [];
        for(var k in o)if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
        return ar;
    };
    return $b7b472ff0da46e08$var$ownKeys(o);
};
function $b7b472ff0da46e08$export$c21735bcef00d192(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k = $b7b472ff0da46e08$var$ownKeys(mod), i = 0; i < k.length; i++)if (k[i] !== "default") $b7b472ff0da46e08$export$45d3717a4c69092e(result, mod, k[i]);
    }
    $b7b472ff0da46e08$var$__setModuleDefault(result, mod);
    return result;
}
function $b7b472ff0da46e08$export$da59b14a69baef04(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function $b7b472ff0da46e08$export$d5dcaf168c640c35(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function $b7b472ff0da46e08$export$d40a35129aaff81f(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function $b7b472ff0da46e08$export$81fdc39f203e4e04(state, receiver) {
    if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}
function $b7b472ff0da46e08$export$88ac25d8e944e405(env, value, async) {
    if (value !== null && value !== void 0) {
        if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
        var dispose, inner;
        if (async) {
            if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
        }
        if (dispose === void 0) {
            if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
            if (async) inner = dispose;
        }
        if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
        if (inner) dispose = function() {
            try {
                inner.call(this);
            } catch (e) {
                return Promise.reject(e);
            }
        };
        env.stack.push({
            value: value,
            dispose: dispose,
            async: async
        });
    } else if (async) env.stack.push({
        async: true
    });
    return value;
}
var $b7b472ff0da46e08$var$_SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};
function $b7b472ff0da46e08$export$8f076105dc360e92(env) {
    function fail(e) {
        env.error = env.hasError ? new $b7b472ff0da46e08$var$_SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
        env.hasError = true;
    }
    var r, s = 0;
    function next() {
        while(r = env.stack.pop())try {
            if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
            if (r.dispose) {
                var result = r.dispose.call(r.value);
                if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) {
                    fail(e);
                    return next();
                });
            } else s |= 1;
        } catch (e) {
            fail(e);
        }
        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
        if (env.hasError) throw env.error;
    }
    return next();
}
function $b7b472ff0da46e08$export$889dfb5d17574b0b(path, preserveJsx) {
    if (typeof path === "string" && /^\.\.?\//.test(path)) return path.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function(m, tsx, d, ext, cm) {
        return tsx ? preserveJsx ? ".jsx" : ".js" : d && (!ext || !cm) ? m : d + ext + "." + cm.toLowerCase() + "js";
    });
    return path;
}
var $b7b472ff0da46e08$export$2e2bcd8739ae039 = {
    __extends: $b7b472ff0da46e08$export$a8ba968b8961cb8a,
    __assign: $b7b472ff0da46e08$export$18ce0697a983be9b,
    __rest: $b7b472ff0da46e08$export$3c9a16f847548506,
    __decorate: $b7b472ff0da46e08$export$29e00dfd3077644b,
    __param: $b7b472ff0da46e08$export$d5ad3fd78186038f,
    __esDecorate: $b7b472ff0da46e08$export$3a84e1ae4e97e9b0,
    __runInitializers: $b7b472ff0da46e08$export$d831c04e792af3d,
    __propKey: $b7b472ff0da46e08$export$6a2a36740a146cb8,
    __setFunctionName: $b7b472ff0da46e08$export$d1a06452d3489bc7,
    __metadata: $b7b472ff0da46e08$export$f1db080c865becb9,
    __awaiter: $b7b472ff0da46e08$export$1050f835b63b671e,
    __generator: $b7b472ff0da46e08$export$67ebef60e6f28a6,
    __createBinding: $b7b472ff0da46e08$export$45d3717a4c69092e,
    __exportStar: $b7b472ff0da46e08$export$f33643c0debef087,
    __values: $b7b472ff0da46e08$export$19a8beecd37a4c45,
    __read: $b7b472ff0da46e08$export$8d051b38c9118094,
    __spread: $b7b472ff0da46e08$export$afc72e2116322959,
    __spreadArrays: $b7b472ff0da46e08$export$6388937ca91ccae8,
    __spreadArray: $b7b472ff0da46e08$export$1216008129fb82ed,
    __await: $b7b472ff0da46e08$export$10c90e4f7922046c,
    __asyncGenerator: $b7b472ff0da46e08$export$e427f37a30a4de9b,
    __asyncDelegator: $b7b472ff0da46e08$export$bbd80228419bb833,
    __asyncValues: $b7b472ff0da46e08$export$e3b29a3d6162315f,
    __makeTemplateObject: $b7b472ff0da46e08$export$4fb47efe1390b86f,
    __importStar: $b7b472ff0da46e08$export$c21735bcef00d192,
    __importDefault: $b7b472ff0da46e08$export$da59b14a69baef04,
    __classPrivateFieldGet: $b7b472ff0da46e08$export$d5dcaf168c640c35,
    __classPrivateFieldSet: $b7b472ff0da46e08$export$d40a35129aaff81f,
    __classPrivateFieldIn: $b7b472ff0da46e08$export$81fdc39f203e4e04,
    __addDisposableResource: $b7b472ff0da46e08$export$88ac25d8e944e405,
    __disposeResources: $b7b472ff0da46e08$export$8f076105dc360e92,
    __rewriteRelativeImportExtension: $b7b472ff0da46e08$export$889dfb5d17574b0b
};



/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An enum of factors that may be used for multifactor authentication.
 *
 * @public
 */ const $809b25475cc45ca0$export$d66501df72047452 = {
    /** Phone as second factor */ PHONE: 'phone',
    TOTP: 'totp'
};
/**
 * Enumeration of supported providers.
 *
 * @public
 */ const $809b25475cc45ca0$export$9e5f44173e64f162 = {
    /** Facebook provider ID */ FACEBOOK: 'facebook.com',
    /** GitHub provider ID */ GITHUB: 'github.com',
    /** Google provider ID */ GOOGLE: 'google.com',
    /** Password provider */ PASSWORD: 'password',
    /** Phone provider */ PHONE: 'phone',
    /** Twitter provider ID */ TWITTER: 'twitter.com'
};
/**
 * Enumeration of supported sign-in methods.
 *
 * @public
 */ const $809b25475cc45ca0$export$25ce5a424b770e84 = {
    /** Email link sign in method */ EMAIL_LINK: 'emailLink',
    /** Email/password sign in method */ EMAIL_PASSWORD: 'password',
    /** Facebook sign in method */ FACEBOOK: 'facebook.com',
    /** GitHub sign in method */ GITHUB: 'github.com',
    /** Google sign in method */ GOOGLE: 'google.com',
    /** Phone sign in method */ PHONE: 'phone',
    /** Twitter sign in method */ TWITTER: 'twitter.com'
};
/**
 * Enumeration of supported operation types.
 *
 * @public
 */ const $809b25475cc45ca0$export$c4ce752e73470fba = {
    /** Operation involving linking an additional provider to an already signed-in user. */ LINK: 'link',
    /** Operation involving using a provider to reauthenticate an already signed-in user. */ REAUTHENTICATE: 'reauthenticate',
    /** Operation involving signing in a user. */ SIGN_IN: 'signIn'
};
/**
 * An enumeration of the possible email action types.
 *
 * @public
 */ const $809b25475cc45ca0$export$ebd11618f299a286 = {
    /** The email link sign-in action. */ EMAIL_SIGNIN: 'EMAIL_SIGNIN',
    /** The password reset action. */ PASSWORD_RESET: 'PASSWORD_RESET',
    /** The email revocation action. */ RECOVER_EMAIL: 'RECOVER_EMAIL',
    /** The revert second factor addition email action. */ REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',
    /** The revert second factor addition email action. */ VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',
    /** The email verification action. */ VERIFY_EMAIL: 'VERIFY_EMAIL'
};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $809b25475cc45ca0$var$_debugErrorMap() {
    return {
        ["admin-restricted-operation" /* AuthErrorCode.ADMIN_ONLY_OPERATION */ ]: 'This operation is restricted to administrators only.',
        ["argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ ]: '',
        ["app-not-authorized" /* AuthErrorCode.APP_NOT_AUTHORIZED */ ]: "This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.",
        ["app-not-installed" /* AuthErrorCode.APP_NOT_INSTALLED */ ]: "The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.",
        ["captcha-check-failed" /* AuthErrorCode.CAPTCHA_CHECK_FAILED */ ]: "The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.",
        ["code-expired" /* AuthErrorCode.CODE_EXPIRED */ ]: "The SMS code has expired. Please re-send the verification code to try again.",
        ["cordova-not-ready" /* AuthErrorCode.CORDOVA_NOT_READY */ ]: 'Cordova framework is not ready.',
        ["cors-unsupported" /* AuthErrorCode.CORS_UNSUPPORTED */ ]: 'This browser is not supported.',
        ["credential-already-in-use" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */ ]: 'This credential is already associated with a different user account.',
        ["custom-token-mismatch" /* AuthErrorCode.CREDENTIAL_MISMATCH */ ]: 'The custom token corresponds to a different audience.',
        ["requires-recent-login" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */ ]: "This operation is sensitive and requires recent authentication. Log in again before retrying this request.",
        ["dependent-sdk-initialized-before-auth" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */ ]: "Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK.",
        ["dynamic-link-not-activated" /* AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED */ ]: "Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.",
        ["email-change-needs-verification" /* AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION */ ]: 'Multi-factor users must always have a verified email.',
        ["email-already-in-use" /* AuthErrorCode.EMAIL_EXISTS */ ]: 'The email address is already in use by another account.',
        ["emulator-config-failed" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */ ]: 'Auth instance has already been used to make a network call. Auth can no longer be configured to use the emulator. Try calling "connectAuthEmulator()" sooner.',
        ["expired-action-code" /* AuthErrorCode.EXPIRED_OOB_CODE */ ]: 'The action code has expired.',
        ["cancelled-popup-request" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */ ]: 'This operation has been cancelled due to another conflicting popup being opened.',
        ["internal-error" /* AuthErrorCode.INTERNAL_ERROR */ ]: 'An internal AuthError has occurred.',
        ["invalid-app-credential" /* AuthErrorCode.INVALID_APP_CREDENTIAL */ ]: "The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.",
        ["invalid-app-id" /* AuthErrorCode.INVALID_APP_ID */ ]: 'The mobile app identifier is not registered for the current project.',
        ["invalid-user-token" /* AuthErrorCode.INVALID_AUTH */ ]: "This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.",
        ["invalid-auth-event" /* AuthErrorCode.INVALID_AUTH_EVENT */ ]: 'An internal AuthError has occurred.',
        ["invalid-verification-code" /* AuthErrorCode.INVALID_CODE */ ]: "The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure to use the verification code provided by the user.",
        ["invalid-continue-uri" /* AuthErrorCode.INVALID_CONTINUE_URI */ ]: 'The continue URL provided in the request is invalid.',
        ["invalid-cordova-configuration" /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */ ]: "The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.",
        ["invalid-custom-token" /* AuthErrorCode.INVALID_CUSTOM_TOKEN */ ]: 'The custom token format is incorrect. Please check the documentation.',
        ["invalid-dynamic-link-domain" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */ ]: 'The provided dynamic link domain is not configured or authorized for the current project.',
        ["invalid-email" /* AuthErrorCode.INVALID_EMAIL */ ]: 'The email address is badly formatted.',
        ["invalid-emulator-scheme" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */ ]: 'Emulator URL must start with a valid scheme (http:// or https://).',
        ["invalid-api-key" /* AuthErrorCode.INVALID_API_KEY */ ]: 'Your API key is invalid, please check you have copied it correctly.',
        ["invalid-cert-hash" /* AuthErrorCode.INVALID_CERT_HASH */ ]: 'The SHA-1 certificate hash provided is invalid.',
        ["invalid-credential" /* AuthErrorCode.INVALID_CREDENTIAL */ ]: 'The supplied auth credential is incorrect, malformed or has expired.',
        ["invalid-message-payload" /* AuthErrorCode.INVALID_MESSAGE_PAYLOAD */ ]: "The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.",
        ["invalid-multi-factor-session" /* AuthErrorCode.INVALID_MFA_SESSION */ ]: 'The request does not contain a valid proof of first factor successful sign-in.',
        ["invalid-oauth-provider" /* AuthErrorCode.INVALID_OAUTH_PROVIDER */ ]: "EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.",
        ["invalid-oauth-client-id" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */ ]: "The OAuth client ID provided is either invalid or does not match the specified API key.",
        ["unauthorized-domain" /* AuthErrorCode.INVALID_ORIGIN */ ]: "This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.",
        ["invalid-action-code" /* AuthErrorCode.INVALID_OOB_CODE */ ]: "The action code is invalid. This can happen if the code is malformed, expired, or has already been used.",
        ["wrong-password" /* AuthErrorCode.INVALID_PASSWORD */ ]: 'The password is invalid or the user does not have a password.',
        ["invalid-persistence-type" /* AuthErrorCode.INVALID_PERSISTENCE */ ]: 'The specified persistence type is invalid. It can only be local, session or none.',
        ["invalid-phone-number" /* AuthErrorCode.INVALID_PHONE_NUMBER */ ]: "The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].",
        ["invalid-provider-id" /* AuthErrorCode.INVALID_PROVIDER_ID */ ]: 'The specified provider ID is invalid.',
        ["invalid-recipient-email" /* AuthErrorCode.INVALID_RECIPIENT_EMAIL */ ]: "The email corresponding to this action failed to send as the provided recipient email address is invalid.",
        ["invalid-sender" /* AuthErrorCode.INVALID_SENDER */ ]: "The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.",
        ["invalid-verification-id" /* AuthErrorCode.INVALID_SESSION_INFO */ ]: 'The verification ID used to create the phone auth credential is invalid.',
        ["invalid-tenant-id" /* AuthErrorCode.INVALID_TENANT_ID */ ]: "The Auth instance's tenant ID is invalid.",
        ["login-blocked" /* AuthErrorCode.LOGIN_BLOCKED */ ]: 'Login blocked by user-provided method: {$originalMessage}',
        ["missing-android-pkg-name" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */ ]: 'An Android Package Name must be provided if the Android App is required to be installed.',
        ["auth-domain-config-required" /* AuthErrorCode.MISSING_AUTH_DOMAIN */ ]: "Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.",
        ["missing-app-credential" /* AuthErrorCode.MISSING_APP_CREDENTIAL */ ]: "The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.",
        ["missing-verification-code" /* AuthErrorCode.MISSING_CODE */ ]: 'The phone auth credential was created with an empty SMS verification code.',
        ["missing-continue-uri" /* AuthErrorCode.MISSING_CONTINUE_URI */ ]: 'A continue URL must be provided in the request.',
        ["missing-iframe-start" /* AuthErrorCode.MISSING_IFRAME_START */ ]: 'An internal AuthError has occurred.',
        ["missing-ios-bundle-id" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */ ]: 'An iOS Bundle ID must be provided if an App Store ID is provided.',
        ["missing-or-invalid-nonce" /* AuthErrorCode.MISSING_OR_INVALID_NONCE */ ]: "The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.",
        ["missing-password" /* AuthErrorCode.MISSING_PASSWORD */ ]: 'A non-empty password must be provided',
        ["missing-multi-factor-info" /* AuthErrorCode.MISSING_MFA_INFO */ ]: 'No second factor identifier is provided.',
        ["missing-multi-factor-session" /* AuthErrorCode.MISSING_MFA_SESSION */ ]: 'The request is missing proof of first factor successful sign-in.',
        ["missing-phone-number" /* AuthErrorCode.MISSING_PHONE_NUMBER */ ]: 'To send verification codes, provide a phone number for the recipient.',
        ["missing-verification-id" /* AuthErrorCode.MISSING_SESSION_INFO */ ]: 'The phone auth credential was created with an empty verification ID.',
        ["app-deleted" /* AuthErrorCode.MODULE_DESTROYED */ ]: 'This instance of FirebaseApp has been deleted.',
        ["multi-factor-info-not-found" /* AuthErrorCode.MFA_INFO_NOT_FOUND */ ]: 'The user does not have a second factor matching the identifier provided.',
        ["multi-factor-auth-required" /* AuthErrorCode.MFA_REQUIRED */ ]: 'Proof of ownership of a second factor is required to complete sign-in.',
        ["account-exists-with-different-credential" /* AuthErrorCode.NEED_CONFIRMATION */ ]: "An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.",
        ["network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ ]: 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',
        ["no-auth-event" /* AuthErrorCode.NO_AUTH_EVENT */ ]: 'An internal AuthError has occurred.',
        ["no-such-provider" /* AuthErrorCode.NO_SUCH_PROVIDER */ ]: 'User was not linked to an account with the given provider.',
        ["null-user" /* AuthErrorCode.NULL_USER */ ]: "A null user object was provided as the argument for an operation which requires a non-null user object.",
        ["operation-not-allowed" /* AuthErrorCode.OPERATION_NOT_ALLOWED */ ]: "The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.",
        ["operation-not-supported-in-this-environment" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */ ]: 'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
        ["popup-blocked" /* AuthErrorCode.POPUP_BLOCKED */ ]: 'Unable to establish a connection with the popup. It may have been blocked by the browser.',
        ["popup-closed-by-user" /* AuthErrorCode.POPUP_CLOSED_BY_USER */ ]: 'The popup has been closed by the user before finalizing the operation.',
        ["provider-already-linked" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */ ]: 'User can only be linked to one identity for the given provider.',
        ["quota-exceeded" /* AuthErrorCode.QUOTA_EXCEEDED */ ]: "The project's quota for this operation has been exceeded.",
        ["redirect-cancelled-by-user" /* AuthErrorCode.REDIRECT_CANCELLED_BY_USER */ ]: 'The redirect operation has been cancelled by the user before finalizing.',
        ["redirect-operation-pending" /* AuthErrorCode.REDIRECT_OPERATION_PENDING */ ]: 'A redirect sign-in operation is already pending.',
        ["rejected-credential" /* AuthErrorCode.REJECTED_CREDENTIAL */ ]: 'The request contains malformed or mismatching credentials.',
        ["second-factor-already-in-use" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */ ]: 'The second factor is already enrolled on this account.',
        ["maximum-second-factor-count-exceeded" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */ ]: 'The maximum allowed number of second factors on a user has been exceeded.',
        ["tenant-id-mismatch" /* AuthErrorCode.TENANT_ID_MISMATCH */ ]: "The provided tenant ID does not match the Auth instance's tenant ID",
        ["timeout" /* AuthErrorCode.TIMEOUT */ ]: 'The operation has timed out.',
        ["user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */ ]: "The user's credential is no longer valid. The user must sign in again.",
        ["too-many-requests" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */ ]: "We have blocked all requests from this device due to unusual activity. Try again later.",
        ["unauthorized-continue-uri" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */ ]: "The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.",
        ["unsupported-first-factor" /* AuthErrorCode.UNSUPPORTED_FIRST_FACTOR */ ]: 'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',
        ["unsupported-persistence-type" /* AuthErrorCode.UNSUPPORTED_PERSISTENCE */ ]: 'The current environment does not support the specified persistence type.',
        ["unsupported-tenant-operation" /* AuthErrorCode.UNSUPPORTED_TENANT_OPERATION */ ]: 'This operation is not supported in a multi-tenant context.',
        ["unverified-email" /* AuthErrorCode.UNVERIFIED_EMAIL */ ]: 'The operation requires a verified email.',
        ["user-cancelled" /* AuthErrorCode.USER_CANCELLED */ ]: 'The user did not grant your application the permissions it requested.',
        ["user-not-found" /* AuthErrorCode.USER_DELETED */ ]: "There is no user record corresponding to this identifier. The user may have been deleted.",
        ["user-disabled" /* AuthErrorCode.USER_DISABLED */ ]: 'The user account has been disabled by an administrator.',
        ["user-mismatch" /* AuthErrorCode.USER_MISMATCH */ ]: 'The supplied credentials do not correspond to the previously signed in user.',
        ["user-signed-out" /* AuthErrorCode.USER_SIGNED_OUT */ ]: '',
        ["weak-password" /* AuthErrorCode.WEAK_PASSWORD */ ]: 'The password must be 6 characters long or more.',
        ["web-storage-unsupported" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */ ]: 'This browser is not supported or 3rd party cookies and data may be disabled.',
        ["already-initialized" /* AuthErrorCode.ALREADY_INITIALIZED */ ]: "initializeAuth() has already been called with different options. To avoid this error, call initializeAuth() with the same options as when it was originally called, or call getAuth() to return the already initialized instance.",
        ["missing-recaptcha-token" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */ ]: 'The reCAPTCHA token is missing when sending request to the backend.',
        ["invalid-recaptcha-token" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */ ]: 'The reCAPTCHA token is invalid when sending request to the backend.',
        ["invalid-recaptcha-action" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */ ]: 'The reCAPTCHA action is invalid when sending request to the backend.',
        ["recaptcha-not-enabled" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */ ]: 'reCAPTCHA Enterprise integration is not enabled for this project.',
        ["missing-client-type" /* AuthErrorCode.MISSING_CLIENT_TYPE */ ]: 'The reCAPTCHA client type is missing when sending request to the backend.',
        ["missing-recaptcha-version" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */ ]: 'The reCAPTCHA version is missing when sending request to the backend.',
        ["invalid-req-type" /* AuthErrorCode.INVALID_REQ_TYPE */ ]: 'Invalid request parameters.',
        ["invalid-recaptcha-version" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */ ]: 'The reCAPTCHA version is invalid when sending request to the backend.',
        ["unsupported-password-policy-schema-version" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */ ]: 'The password policy received from the backend uses a schema version that is not supported by this version of the Firebase SDK.',
        ["password-does-not-meet-requirements" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */ ]: 'The password does not meet the requirements.',
        ["invalid-hosting-link-domain" /* AuthErrorCode.INVALID_HOSTING_LINK_DOMAIN */ ]: "The provided Hosting link domain is not configured in Firebase Hosting or is not owned by the current project. This cannot be a default Hosting domain (`web.app` or `firebaseapp.com`)."
    };
}
function $809b25475cc45ca0$var$_prodErrorMap() {
    // We will include this one message in the prod error map since by the very
    // nature of this error, developers will never be able to see the message
    // using the debugErrorMap (which is installed during auth initialization).
    return {
        ["dependent-sdk-initialized-before-auth" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */ ]: "Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."
    };
}
/**
 * A verbose error map with detailed descriptions for most error codes.
 *
 * See discussion at {@link AuthErrorMap}
 *
 * @public
 */ const $809b25475cc45ca0$export$7f8ddf7c7c20b3cd = $809b25475cc45ca0$var$_debugErrorMap;
/**
 * A minimal error map with all verbose error messages stripped.
 *
 * See discussion at {@link AuthErrorMap}
 *
 * @public
 */ const $809b25475cc45ca0$export$9bb611d729802a56 = $809b25475cc45ca0$var$_prodErrorMap;
const $809b25475cc45ca0$var$_DEFAULT_AUTH_ERROR_FACTORY = new (0, $ee1ab2624407a779$export$3fa6e1b18a3b2d40)('auth', 'Firebase', $809b25475cc45ca0$var$_prodErrorMap());
/**
 * A map of potential `Auth` error codes, for easier comparison with errors
 * thrown by the SDK.
 *
 * @remarks
 * Note that you can't tree-shake individual keys
 * in the map, so by using the map you might substantially increase your
 * bundle size.
 *
 * @public
 */ const $809b25475cc45ca0$export$b4171a6734a65d42 = {
    ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',
    ARGUMENT_ERROR: 'auth/argument-error',
    APP_NOT_AUTHORIZED: 'auth/app-not-authorized',
    APP_NOT_INSTALLED: 'auth/app-not-installed',
    CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',
    CODE_EXPIRED: 'auth/code-expired',
    CORDOVA_NOT_READY: 'auth/cordova-not-ready',
    CORS_UNSUPPORTED: 'auth/cors-unsupported',
    CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',
    CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',
    CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',
    DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',
    DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',
    EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',
    EMAIL_EXISTS: 'auth/email-already-in-use',
    EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',
    EXPIRED_OOB_CODE: 'auth/expired-action-code',
    EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',
    INTERNAL_ERROR: 'auth/internal-error',
    INVALID_API_KEY: 'auth/invalid-api-key',
    INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',
    INVALID_APP_ID: 'auth/invalid-app-id',
    INVALID_AUTH: 'auth/invalid-user-token',
    INVALID_AUTH_EVENT: 'auth/invalid-auth-event',
    INVALID_CERT_HASH: 'auth/invalid-cert-hash',
    INVALID_CODE: 'auth/invalid-verification-code',
    INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',
    INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',
    INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',
    INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',
    INVALID_EMAIL: 'auth/invalid-email',
    INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',
    INVALID_IDP_RESPONSE: 'auth/invalid-credential',
    INVALID_LOGIN_CREDENTIALS: 'auth/invalid-credential',
    INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',
    INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',
    INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',
    INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',
    INVALID_OOB_CODE: 'auth/invalid-action-code',
    INVALID_ORIGIN: 'auth/unauthorized-domain',
    INVALID_PASSWORD: 'auth/wrong-password',
    INVALID_PERSISTENCE: 'auth/invalid-persistence-type',
    INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',
    INVALID_PROVIDER_ID: 'auth/invalid-provider-id',
    INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',
    INVALID_SENDER: 'auth/invalid-sender',
    INVALID_SESSION_INFO: 'auth/invalid-verification-id',
    INVALID_TENANT_ID: 'auth/invalid-tenant-id',
    MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',
    MFA_REQUIRED: 'auth/multi-factor-auth-required',
    MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',
    MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',
    MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',
    MISSING_CODE: 'auth/missing-verification-code',
    MISSING_CONTINUE_URI: 'auth/missing-continue-uri',
    MISSING_IFRAME_START: 'auth/missing-iframe-start',
    MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',
    MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',
    MISSING_MFA_INFO: 'auth/missing-multi-factor-info',
    MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',
    MISSING_PHONE_NUMBER: 'auth/missing-phone-number',
    MISSING_SESSION_INFO: 'auth/missing-verification-id',
    MODULE_DESTROYED: 'auth/app-deleted',
    NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',
    NETWORK_REQUEST_FAILED: 'auth/network-request-failed',
    NULL_USER: 'auth/null-user',
    NO_AUTH_EVENT: 'auth/no-auth-event',
    NO_SUCH_PROVIDER: 'auth/no-such-provider',
    OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',
    OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',
    POPUP_BLOCKED: 'auth/popup-blocked',
    POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',
    PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',
    QUOTA_EXCEEDED: 'auth/quota-exceeded',
    REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',
    REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',
    REJECTED_CREDENTIAL: 'auth/rejected-credential',
    SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',
    SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',
    TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',
    TIMEOUT: 'auth/timeout',
    TOKEN_EXPIRED: 'auth/user-token-expired',
    TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',
    UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',
    UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',
    UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',
    UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',
    UNVERIFIED_EMAIL: 'auth/unverified-email',
    USER_CANCELLED: 'auth/user-cancelled',
    USER_DELETED: 'auth/user-not-found',
    USER_DISABLED: 'auth/user-disabled',
    USER_MISMATCH: 'auth/user-mismatch',
    USER_SIGNED_OUT: 'auth/user-signed-out',
    WEAK_PASSWORD: 'auth/weak-password',
    WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',
    ALREADY_INITIALIZED: 'auth/already-initialized',
    RECAPTCHA_NOT_ENABLED: 'auth/recaptcha-not-enabled',
    MISSING_RECAPTCHA_TOKEN: 'auth/missing-recaptcha-token',
    INVALID_RECAPTCHA_TOKEN: 'auth/invalid-recaptcha-token',
    INVALID_RECAPTCHA_ACTION: 'auth/invalid-recaptcha-action',
    MISSING_CLIENT_TYPE: 'auth/missing-client-type',
    MISSING_RECAPTCHA_VERSION: 'auth/missing-recaptcha-version',
    INVALID_RECAPTCHA_VERSION: 'auth/invalid-recaptcha-version',
    INVALID_REQ_TYPE: 'auth/invalid-req-type',
    INVALID_HOSTING_LINK_DOMAIN: 'auth/invalid-hosting-link-domain'
};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $809b25475cc45ca0$var$logClient = new (0, $429b88c59f76915c$export$efa9a398d6368992)('@firebase/auth');
function $809b25475cc45ca0$var$_logWarn(msg, ...args) {
    if ($809b25475cc45ca0$var$logClient.logLevel <= (0, $429b88c59f76915c$export$243e62d78d3b544d).WARN) $809b25475cc45ca0$var$logClient.warn(`Auth (${(0, $12572052cab62175$export$31499a9cd224b78c)}): ${msg}`, ...args);
}
function $809b25475cc45ca0$var$_logError(msg, ...args) {
    if ($809b25475cc45ca0$var$logClient.logLevel <= (0, $429b88c59f76915c$export$243e62d78d3b544d).ERROR) $809b25475cc45ca0$var$logClient.error(`Auth (${(0, $12572052cab62175$export$31499a9cd224b78c)}): ${msg}`, ...args);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $809b25475cc45ca0$export$28f7fcd39efa255(authOrCode, ...rest) {
    throw $809b25475cc45ca0$var$createErrorInternal(authOrCode, ...rest);
}
function $809b25475cc45ca0$export$890c4ad488842ce7(authOrCode, ...rest) {
    return $809b25475cc45ca0$var$createErrorInternal(authOrCode, ...rest);
}
function $809b25475cc45ca0$var$_errorWithCustomMessage(auth, code, message) {
    const errorMap = Object.assign(Object.assign({}, $809b25475cc45ca0$export$9bb611d729802a56()), {
        [code]: message
    });
    const factory = new (0, $ee1ab2624407a779$export$3fa6e1b18a3b2d40)('auth', 'Firebase', errorMap);
    return factory.create(code, {
        appName: auth.name
    });
}
function $809b25475cc45ca0$var$_serverAppCurrentUserOperationNotSupportedError(auth) {
    return $809b25475cc45ca0$var$_errorWithCustomMessage(auth, "operation-not-supported-in-this-environment" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */ , 'Operations that alter the current user are not supported in conjunction with FirebaseServerApp');
}
function $809b25475cc45ca0$var$_assertInstanceOf(auth, object, instance) {
    const constructorInstance = instance;
    if (!(object instanceof constructorInstance)) {
        if (constructorInstance.name !== object.constructor.name) $809b25475cc45ca0$export$28f7fcd39efa255(auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        throw $809b25475cc45ca0$var$_errorWithCustomMessage(auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ , `Type of ${object.constructor.name} does not match expected instance.` + `Did you pass a reference from a different Auth SDK?`);
    }
}
function $809b25475cc45ca0$var$createErrorInternal(authOrCode, ...rest) {
    if (typeof authOrCode !== 'string') {
        const code = rest[0];
        const fullParams = [
            ...rest.slice(1)
        ];
        if (fullParams[0]) fullParams[0].appName = authOrCode.name;
        return authOrCode._errorFactory.create(code, ...fullParams);
    }
    return $809b25475cc45ca0$var$_DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);
}
function $809b25475cc45ca0$export$24baa2b76016ce0e(assertion, authOrCode, ...rest) {
    if (!assertion) throw $809b25475cc45ca0$var$createErrorInternal(authOrCode, ...rest);
}
/**
 * Unconditionally fails, throwing an internal error with the given message.
 *
 * @param failure type of failure encountered
 * @throws Error
 */ function $809b25475cc45ca0$var$debugFail(failure) {
    // Log the failure in addition to throw an exception, just in case the
    // exception is swallowed.
    const message = `INTERNAL ASSERTION FAILED: ` + failure;
    $809b25475cc45ca0$var$_logError(message);
    // NOTE: We don't use FirebaseError here because these are internal failures
    // that cannot be handled by the user. (Also it would create a circular
    // dependency between the error and assert modules which doesn't work.)
    throw new Error(message);
}
/**
 * Fails if the given assertion condition is false, throwing an Error with the
 * given message if it did.
 *
 * @param assertion
 * @param message
 */ function $809b25475cc45ca0$export$d66dc83d8cfc8dd(assertion, message) {
    if (!assertion) $809b25475cc45ca0$var$debugFail(message);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $809b25475cc45ca0$var$_getCurrentUrl() {
    var _a;
    return typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href) || '';
}
function $809b25475cc45ca0$var$_isHttpOrHttps() {
    return $809b25475cc45ca0$var$_getCurrentScheme() === 'http:' || $809b25475cc45ca0$var$_getCurrentScheme() === 'https:';
}
function $809b25475cc45ca0$var$_getCurrentScheme() {
    var _a;
    return typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Determine whether the browser is working online
 */ function $809b25475cc45ca0$var$_isOnline() {
    if (typeof navigator !== 'undefined' && navigator && 'onLine' in navigator && typeof navigator.onLine === 'boolean' && // Apply only for traditional web apps and Chrome extensions.
    // This is especially true for Cordova apps which have unreliable
    // navigator.onLine behavior unless cordova-plugin-network-information is
    // installed which overwrites the native navigator.onLine value and
    // defines navigator.connection.
    ($809b25475cc45ca0$var$_isHttpOrHttps() || (0, $ee1ab2624407a779$export$caa8774a9107a58e)() || 'connection' in navigator)) return navigator.onLine;
    // If we can't determine the state, assume it is online.
    return true;
}
function $809b25475cc45ca0$var$_getUserLanguage() {
    if (typeof navigator === 'undefined') return null;
    const navigatorLanguage = navigator;
    return(// Most reliable, but only supported in Chrome/Firefox.
    navigatorLanguage.languages && navigatorLanguage.languages[0] || // Supported in most browsers, but returns the language of the browser
    // UI, not the language set in browser settings.
    navigatorLanguage.language || // Couldn't determine language.
    null);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A structure to help pick between a range of long and short delay durations
 * depending on the current environment. In general, the long delay is used for
 * mobile environments whereas short delays are used for desktop environments.
 */ class $809b25475cc45ca0$var$Delay {
    constructor(shortDelay, longDelay){
        this.shortDelay = shortDelay;
        this.longDelay = longDelay;
        // Internal error when improperly initialized.
        $809b25475cc45ca0$export$d66dc83d8cfc8dd(longDelay > shortDelay, 'Short delay should be less than long delay!');
        this.isMobile = (0, $ee1ab2624407a779$export$872f8323f01d7ae0)() || (0, $ee1ab2624407a779$export$f7a1e23e542d38e3)();
    }
    get() {
        if (!$809b25475cc45ca0$var$_isOnline()) // Pick the shorter timeout.
        return Math.min(5000 /* DelayMin.OFFLINE */ , this.shortDelay);
        // If running in a mobile environment, return the long delay, otherwise
        // return the short delay.
        // This could be improved in the future to dynamically change based on other
        // variables instead of just reading the current environment.
        return this.isMobile ? this.longDelay : this.shortDelay;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $809b25475cc45ca0$var$_emulatorUrl(config, path) {
    $809b25475cc45ca0$export$d66dc83d8cfc8dd(config.emulator, 'Emulator should always be set here');
    const { url: url } = config.emulator;
    if (!path) return url;
    return `${url}${path.startsWith('/') ? path.slice(1) : path}`;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $809b25475cc45ca0$export$f96d196f7728bb5 {
    static initialize(fetchImpl, headersImpl, responseImpl) {
        this.fetchImpl = fetchImpl;
        if (headersImpl) this.headersImpl = headersImpl;
        if (responseImpl) this.responseImpl = responseImpl;
    }
    static fetch() {
        if (this.fetchImpl) return this.fetchImpl;
        if (typeof self !== 'undefined' && 'fetch' in self) return self.fetch;
        if (typeof globalThis !== 'undefined' && globalThis.fetch) return globalThis.fetch;
        if (typeof fetch !== 'undefined') return fetch;
        $809b25475cc45ca0$var$debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
    }
    static headers() {
        if (this.headersImpl) return this.headersImpl;
        if (typeof self !== 'undefined' && 'Headers' in self) return self.Headers;
        if (typeof globalThis !== 'undefined' && globalThis.Headers) return globalThis.Headers;
        if (typeof Headers !== 'undefined') return Headers;
        $809b25475cc45ca0$var$debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
    }
    static response() {
        if (this.responseImpl) return this.responseImpl;
        if (typeof self !== 'undefined' && 'Response' in self) return self.Response;
        if (typeof globalThis !== 'undefined' && globalThis.Response) return globalThis.Response;
        if (typeof Response !== 'undefined') return Response;
        $809b25475cc45ca0$var$debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Map from errors returned by the server to errors to developer visible errors
 */ const $809b25475cc45ca0$var$SERVER_ERROR_MAP = {
    // Custom token errors.
    ["CREDENTIAL_MISMATCH" /* ServerError.CREDENTIAL_MISMATCH */ ]: "custom-token-mismatch" /* AuthErrorCode.CREDENTIAL_MISMATCH */ ,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_CUSTOM_TOKEN" /* ServerError.MISSING_CUSTOM_TOKEN */ ]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ ,
    // Create Auth URI errors.
    ["INVALID_IDENTIFIER" /* ServerError.INVALID_IDENTIFIER */ ]: "invalid-email" /* AuthErrorCode.INVALID_EMAIL */ ,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_CONTINUE_URI" /* ServerError.MISSING_CONTINUE_URI */ ]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ ,
    // Sign in with email and password errors (some apply to sign up too).
    ["INVALID_PASSWORD" /* ServerError.INVALID_PASSWORD */ ]: "wrong-password" /* AuthErrorCode.INVALID_PASSWORD */ ,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_PASSWORD" /* ServerError.MISSING_PASSWORD */ ]: "missing-password" /* AuthErrorCode.MISSING_PASSWORD */ ,
    // Thrown if Email Enumeration Protection is enabled in the project and the email or password is
    // invalid.
    ["INVALID_LOGIN_CREDENTIALS" /* ServerError.INVALID_LOGIN_CREDENTIALS */ ]: "invalid-credential" /* AuthErrorCode.INVALID_CREDENTIAL */ ,
    // Sign up with email and password errors.
    ["EMAIL_EXISTS" /* ServerError.EMAIL_EXISTS */ ]: "email-already-in-use" /* AuthErrorCode.EMAIL_EXISTS */ ,
    ["PASSWORD_LOGIN_DISABLED" /* ServerError.PASSWORD_LOGIN_DISABLED */ ]: "operation-not-allowed" /* AuthErrorCode.OPERATION_NOT_ALLOWED */ ,
    // Verify assertion for sign in with credential errors:
    ["INVALID_IDP_RESPONSE" /* ServerError.INVALID_IDP_RESPONSE */ ]: "invalid-credential" /* AuthErrorCode.INVALID_CREDENTIAL */ ,
    ["INVALID_PENDING_TOKEN" /* ServerError.INVALID_PENDING_TOKEN */ ]: "invalid-credential" /* AuthErrorCode.INVALID_CREDENTIAL */ ,
    ["FEDERATED_USER_ID_ALREADY_LINKED" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */ ]: "credential-already-in-use" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */ ,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_REQ_TYPE" /* ServerError.MISSING_REQ_TYPE */ ]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ ,
    // Send Password reset email errors:
    ["EMAIL_NOT_FOUND" /* ServerError.EMAIL_NOT_FOUND */ ]: "user-not-found" /* AuthErrorCode.USER_DELETED */ ,
    ["RESET_PASSWORD_EXCEED_LIMIT" /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */ ]: "too-many-requests" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */ ,
    ["EXPIRED_OOB_CODE" /* ServerError.EXPIRED_OOB_CODE */ ]: "expired-action-code" /* AuthErrorCode.EXPIRED_OOB_CODE */ ,
    ["INVALID_OOB_CODE" /* ServerError.INVALID_OOB_CODE */ ]: "invalid-action-code" /* AuthErrorCode.INVALID_OOB_CODE */ ,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_OOB_CODE" /* ServerError.MISSING_OOB_CODE */ ]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ ,
    // Operations that require ID token in request:
    ["CREDENTIAL_TOO_OLD_LOGIN_AGAIN" /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */ ]: "requires-recent-login" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */ ,
    ["INVALID_ID_TOKEN" /* ServerError.INVALID_ID_TOKEN */ ]: "invalid-user-token" /* AuthErrorCode.INVALID_AUTH */ ,
    ["TOKEN_EXPIRED" /* ServerError.TOKEN_EXPIRED */ ]: "user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */ ,
    ["USER_NOT_FOUND" /* ServerError.USER_NOT_FOUND */ ]: "user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */ ,
    // Other errors.
    ["TOO_MANY_ATTEMPTS_TRY_LATER" /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */ ]: "too-many-requests" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */ ,
    ["PASSWORD_DOES_NOT_MEET_REQUIREMENTS" /* ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */ ]: "password-does-not-meet-requirements" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */ ,
    // Phone Auth related errors.
    ["INVALID_CODE" /* ServerError.INVALID_CODE */ ]: "invalid-verification-code" /* AuthErrorCode.INVALID_CODE */ ,
    ["INVALID_SESSION_INFO" /* ServerError.INVALID_SESSION_INFO */ ]: "invalid-verification-id" /* AuthErrorCode.INVALID_SESSION_INFO */ ,
    ["INVALID_TEMPORARY_PROOF" /* ServerError.INVALID_TEMPORARY_PROOF */ ]: "invalid-credential" /* AuthErrorCode.INVALID_CREDENTIAL */ ,
    ["MISSING_SESSION_INFO" /* ServerError.MISSING_SESSION_INFO */ ]: "missing-verification-id" /* AuthErrorCode.MISSING_SESSION_INFO */ ,
    ["SESSION_EXPIRED" /* ServerError.SESSION_EXPIRED */ ]: "code-expired" /* AuthErrorCode.CODE_EXPIRED */ ,
    // Other action code errors when additional settings passed.
    // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.
    // This is OK as this error will be caught by client side validation.
    ["MISSING_ANDROID_PACKAGE_NAME" /* ServerError.MISSING_ANDROID_PACKAGE_NAME */ ]: "missing-android-pkg-name" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */ ,
    ["UNAUTHORIZED_DOMAIN" /* ServerError.UNAUTHORIZED_DOMAIN */ ]: "unauthorized-continue-uri" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */ ,
    // getProjectConfig errors when clientId is passed.
    ["INVALID_OAUTH_CLIENT_ID" /* ServerError.INVALID_OAUTH_CLIENT_ID */ ]: "invalid-oauth-client-id" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */ ,
    // User actions (sign-up or deletion) disabled errors.
    ["ADMIN_ONLY_OPERATION" /* ServerError.ADMIN_ONLY_OPERATION */ ]: "admin-restricted-operation" /* AuthErrorCode.ADMIN_ONLY_OPERATION */ ,
    // Multi factor related errors.
    ["INVALID_MFA_PENDING_CREDENTIAL" /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */ ]: "invalid-multi-factor-session" /* AuthErrorCode.INVALID_MFA_SESSION */ ,
    ["MFA_ENROLLMENT_NOT_FOUND" /* ServerError.MFA_ENROLLMENT_NOT_FOUND */ ]: "multi-factor-info-not-found" /* AuthErrorCode.MFA_INFO_NOT_FOUND */ ,
    ["MISSING_MFA_ENROLLMENT_ID" /* ServerError.MISSING_MFA_ENROLLMENT_ID */ ]: "missing-multi-factor-info" /* AuthErrorCode.MISSING_MFA_INFO */ ,
    ["MISSING_MFA_PENDING_CREDENTIAL" /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */ ]: "missing-multi-factor-session" /* AuthErrorCode.MISSING_MFA_SESSION */ ,
    ["SECOND_FACTOR_EXISTS" /* ServerError.SECOND_FACTOR_EXISTS */ ]: "second-factor-already-in-use" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */ ,
    ["SECOND_FACTOR_LIMIT_EXCEEDED" /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */ ]: "maximum-second-factor-count-exceeded" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */ ,
    // Blocking functions related errors.
    ["BLOCKING_FUNCTION_ERROR_RESPONSE" /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */ ]: "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ ,
    // Recaptcha related errors.
    ["RECAPTCHA_NOT_ENABLED" /* ServerError.RECAPTCHA_NOT_ENABLED */ ]: "recaptcha-not-enabled" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */ ,
    ["MISSING_RECAPTCHA_TOKEN" /* ServerError.MISSING_RECAPTCHA_TOKEN */ ]: "missing-recaptcha-token" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */ ,
    ["INVALID_RECAPTCHA_TOKEN" /* ServerError.INVALID_RECAPTCHA_TOKEN */ ]: "invalid-recaptcha-token" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */ ,
    ["INVALID_RECAPTCHA_ACTION" /* ServerError.INVALID_RECAPTCHA_ACTION */ ]: "invalid-recaptcha-action" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */ ,
    ["MISSING_CLIENT_TYPE" /* ServerError.MISSING_CLIENT_TYPE */ ]: "missing-client-type" /* AuthErrorCode.MISSING_CLIENT_TYPE */ ,
    ["MISSING_RECAPTCHA_VERSION" /* ServerError.MISSING_RECAPTCHA_VERSION */ ]: "missing-recaptcha-version" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */ ,
    ["INVALID_RECAPTCHA_VERSION" /* ServerError.INVALID_RECAPTCHA_VERSION */ ]: "invalid-recaptcha-version" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */ ,
    ["INVALID_REQ_TYPE" /* ServerError.INVALID_REQ_TYPE */ ]: "invalid-req-type" /* AuthErrorCode.INVALID_REQ_TYPE */ 
};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $809b25475cc45ca0$var$CookieAuthProxiedEndpoints = [
    "/v1/accounts:signInWithCustomToken" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */ ,
    "/v1/accounts:signInWithEmailLink" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */ ,
    "/v1/accounts:signInWithIdp" /* Endpoint.SIGN_IN_WITH_IDP */ ,
    "/v1/accounts:signInWithPassword" /* Endpoint.SIGN_IN_WITH_PASSWORD */ ,
    "/v1/accounts:signInWithPhoneNumber" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */ ,
    "/v1/token" /* Endpoint.TOKEN */ 
];
const $809b25475cc45ca0$var$DEFAULT_API_TIMEOUT_MS = new $809b25475cc45ca0$var$Delay(30000, 60000);
function $809b25475cc45ca0$var$_addTidIfNecessary(auth, request) {
    if (auth.tenantId && !request.tenantId) return Object.assign(Object.assign({}, request), {
        tenantId: auth.tenantId
    });
    return request;
}
async function $809b25475cc45ca0$var$_performApiRequest(auth, method, path, request, customErrorMap = {}) {
    return $809b25475cc45ca0$var$_performFetchWithErrorHandling(auth, customErrorMap, async ()=>{
        let body = {};
        let params = {};
        if (request) {
            if (method === "GET" /* HttpMethod.GET */ ) params = request;
            else body = {
                body: JSON.stringify(request)
            };
        }
        const query = (0, $ee1ab2624407a779$export$ac4103b836844853)(Object.assign({
            key: auth.config.apiKey
        }, params)).slice(1);
        const headers = await auth._getAdditionalHeaders();
        headers["Content-Type" /* HttpHeader.CONTENT_TYPE */ ] = 'application/json';
        if (auth.languageCode) headers["X-Firebase-Locale" /* HttpHeader.X_FIREBASE_LOCALE */ ] = auth.languageCode;
        const fetchArgs = Object.assign({
            method: method,
            headers: headers
        }, body);
        /* Security-conscious server-side frameworks tend to have built in mitigations for referrer
           problems". See the Cloudflare GitHub issue #487: Error: The 'referrerPolicy' field on
           'RequestInitializerDict' is not implemented."
           https://github.com/cloudflare/next-on-pages/issues/487 */ if (!(0, $ee1ab2624407a779$export$ad9e9b75cb9fb797)()) fetchArgs.referrerPolicy = 'no-referrer';
        if (auth.emulatorConfig && (0, $ee1ab2624407a779$export$5b4d24b45140ad90)(auth.emulatorConfig.host)) fetchArgs.credentials = 'include';
        return $809b25475cc45ca0$export$f96d196f7728bb5.fetch()(await $809b25475cc45ca0$var$_getFinalTarget(auth, auth.config.apiHost, path, query), fetchArgs);
    });
}
async function $809b25475cc45ca0$var$_performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {
    auth._canInitEmulator = false;
    const errorMap = Object.assign(Object.assign({}, $809b25475cc45ca0$var$SERVER_ERROR_MAP), customErrorMap);
    try {
        const networkTimeout = new $809b25475cc45ca0$var$NetworkTimeout(auth);
        const response = await Promise.race([
            fetchFn(),
            networkTimeout.promise
        ]);
        // If we've reached this point, the fetch succeeded and the networkTimeout
        // didn't throw; clear the network timeout delay so that Node won't hang
        networkTimeout.clearNetworkTimeout();
        const json = await response.json();
        if ('needConfirmation' in json) throw $809b25475cc45ca0$var$_makeTaggedError(auth, "account-exists-with-different-credential" /* AuthErrorCode.NEED_CONFIRMATION */ , json);
        if (response.ok && !('errorMessage' in json)) return json;
        else {
            const errorMessage = response.ok ? json.errorMessage : json.error.message;
            const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');
            if (serverErrorCode === "FEDERATED_USER_ID_ALREADY_LINKED" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */ ) throw $809b25475cc45ca0$var$_makeTaggedError(auth, "credential-already-in-use" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */ , json);
            else if (serverErrorCode === "EMAIL_EXISTS" /* ServerError.EMAIL_EXISTS */ ) throw $809b25475cc45ca0$var$_makeTaggedError(auth, "email-already-in-use" /* AuthErrorCode.EMAIL_EXISTS */ , json);
            else if (serverErrorCode === "USER_DISABLED" /* ServerError.USER_DISABLED */ ) throw $809b25475cc45ca0$var$_makeTaggedError(auth, "user-disabled" /* AuthErrorCode.USER_DISABLED */ , json);
            const authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\s]+/g, '-');
            if (serverErrorMessage) throw $809b25475cc45ca0$var$_errorWithCustomMessage(auth, authError, serverErrorMessage);
            else $809b25475cc45ca0$export$28f7fcd39efa255(auth, authError);
        }
    } catch (e) {
        if (e instanceof (0, $ee1ab2624407a779$export$dd24e9cd51226c56)) throw e;
        // Changing this to a different error code will log user out when there is a network error
        // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.
        // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316
        $809b25475cc45ca0$export$28f7fcd39efa255(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ , {
            'message': String(e)
        });
    }
}
async function $809b25475cc45ca0$var$_performSignInRequest(auth, method, path, request, customErrorMap = {}) {
    const serverResponse = await $809b25475cc45ca0$var$_performApiRequest(auth, method, path, request, customErrorMap);
    if ('mfaPendingCredential' in serverResponse) $809b25475cc45ca0$export$28f7fcd39efa255(auth, "multi-factor-auth-required" /* AuthErrorCode.MFA_REQUIRED */ , {
        _serverResponse: serverResponse
    });
    return serverResponse;
}
async function $809b25475cc45ca0$var$_getFinalTarget(auth, host, path, query) {
    const base = `${host}${path}?${query}`;
    const authInternal = auth;
    const finalTarget = authInternal.config.emulator ? $809b25475cc45ca0$var$_emulatorUrl(auth.config, base) : `${auth.config.apiScheme}://${base}`;
    // Cookie auth works by MiTMing the signIn and token endpoints from the developer's backend,
    // saving the idToken and refreshToken into cookies, and then redacting the refreshToken
    // from the response
    if ($809b25475cc45ca0$var$CookieAuthProxiedEndpoints.includes(path)) {
        // Persistence manager is async, we need to await it. We can't just wait for auth initialized
        // here since auth initialization calls this function.
        await authInternal._persistenceManagerAvailable;
        if (authInternal._getPersistenceType() === "COOKIE" /* PersistenceType.COOKIE */ ) {
            const cookiePersistence = authInternal._getPersistence();
            return cookiePersistence._getFinalTarget(finalTarget).toString();
        }
    }
    return finalTarget;
}
function $809b25475cc45ca0$var$_parseEnforcementState(enforcementStateStr) {
    switch(enforcementStateStr){
        case 'ENFORCE':
            return "ENFORCE" /* EnforcementState.ENFORCE */ ;
        case 'AUDIT':
            return "AUDIT" /* EnforcementState.AUDIT */ ;
        case 'OFF':
            return "OFF" /* EnforcementState.OFF */ ;
        default:
            return "ENFORCEMENT_STATE_UNSPECIFIED" /* EnforcementState.ENFORCEMENT_STATE_UNSPECIFIED */ ;
    }
}
class $809b25475cc45ca0$var$NetworkTimeout {
    clearNetworkTimeout() {
        clearTimeout(this.timer);
    }
    constructor(auth){
        this.auth = auth;
        // Node timers and browser timers are fundamentally incompatible, but we
        // don't care about the value here
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.timer = null;
        this.promise = new Promise((_, reject)=>{
            this.timer = setTimeout(()=>{
                return reject($809b25475cc45ca0$export$890c4ad488842ce7(this.auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ ));
            }, $809b25475cc45ca0$var$DEFAULT_API_TIMEOUT_MS.get());
        });
    }
}
function $809b25475cc45ca0$var$_makeTaggedError(auth, code, response) {
    const errorParams = {
        appName: auth.name
    };
    if (response.email) errorParams.email = response.email;
    if (response.phoneNumber) errorParams.phoneNumber = response.phoneNumber;
    const error = $809b25475cc45ca0$export$890c4ad488842ce7(auth, code, errorParams);
    // We know customData is defined on error because errorParams is defined
    error.customData._tokenResponse = response;
    return error;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $809b25475cc45ca0$var$isV2(grecaptcha) {
    return grecaptcha !== undefined && grecaptcha.getResponse !== undefined;
}
function $809b25475cc45ca0$var$isEnterprise(grecaptcha) {
    return grecaptcha !== undefined && grecaptcha.enterprise !== undefined;
}
class $809b25475cc45ca0$var$RecaptchaConfig {
    constructor(response){
        /**
         * The reCAPTCHA site key.
         */ this.siteKey = '';
        /**
         * The list of providers and their enablement status for reCAPTCHA Enterprise.
         */ this.recaptchaEnforcementState = [];
        if (response.recaptchaKey === undefined) throw new Error('recaptchaKey undefined');
        // Example response.recaptchaKey: "projects/proj123/keys/sitekey123"
        this.siteKey = response.recaptchaKey.split('/')[3];
        this.recaptchaEnforcementState = response.recaptchaEnforcementState;
    }
    /**
     * Returns the reCAPTCHA Enterprise enforcement state for the given provider.
     *
     * @param providerStr - The provider whose enforcement state is to be returned.
     * @returns The reCAPTCHA Enterprise enforcement state for the given provider.
     */ getProviderEnforcementState(providerStr) {
        if (!this.recaptchaEnforcementState || this.recaptchaEnforcementState.length === 0) return null;
        for (const recaptchaEnforcementState of this.recaptchaEnforcementState){
            if (recaptchaEnforcementState.provider && recaptchaEnforcementState.provider === providerStr) return $809b25475cc45ca0$var$_parseEnforcementState(recaptchaEnforcementState.enforcementState);
        }
        return null;
    }
    /**
     * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.
     *
     * @param providerStr - The provider whose enablement state is to be returned.
     * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.
     */ isProviderEnabled(providerStr) {
        return this.getProviderEnforcementState(providerStr) === "ENFORCE" /* EnforcementState.ENFORCE */  || this.getProviderEnforcementState(providerStr) === "AUDIT" /* EnforcementState.AUDIT */ ;
    }
    /**
     * Returns true if reCAPTCHA Enterprise protection is enabled in at least one provider, otherwise
     * returns false.
     *
     * @returns Whether or not reCAPTCHA Enterprise protection is enabled for at least one provider.
     */ isAnyProviderEnabled() {
        return this.isProviderEnabled("EMAIL_PASSWORD_PROVIDER" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */ ) || this.isProviderEnabled("PHONE_PROVIDER" /* RecaptchaAuthProvider.PHONE_PROVIDER */ );
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function $809b25475cc45ca0$var$getRecaptchaParams(auth) {
    return (await $809b25475cc45ca0$var$_performApiRequest(auth, "GET" /* HttpMethod.GET */ , "/v1/recaptchaParams" /* Endpoint.GET_RECAPTCHA_PARAM */ )).recaptchaSiteKey || '';
}
async function $809b25475cc45ca0$var$getRecaptchaConfig(auth, request) {
    return $809b25475cc45ca0$var$_performApiRequest(auth, "GET" /* HttpMethod.GET */ , "/v2/recaptchaConfig" /* Endpoint.GET_RECAPTCHA_CONFIG */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function $809b25475cc45ca0$var$deleteAccount(auth, request) {
    return $809b25475cc45ca0$var$_performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:delete" /* Endpoint.DELETE_ACCOUNT */ , request);
}
async function $809b25475cc45ca0$var$deleteLinkedAccounts(auth, request) {
    return $809b25475cc45ca0$var$_performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:update" /* Endpoint.SET_ACCOUNT_INFO */ , request);
}
async function $809b25475cc45ca0$var$getAccountInfo(auth, request) {
    return $809b25475cc45ca0$var$_performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:lookup" /* Endpoint.GET_ACCOUNT_INFO */ , request);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $809b25475cc45ca0$var$utcTimestampToDateString(utcTimestamp) {
    if (!utcTimestamp) return undefined;
    try {
        // Convert to date object.
        const date = new Date(Number(utcTimestamp));
        // Test date is valid.
        if (!isNaN(date.getTime())) // Convert to UTC date string.
        return date.toUTCString();
    } catch (e) {
    // Do nothing. undefined will be returned.
    }
    return undefined;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.
 *
 * @remarks
 * Returns the current token if it has not expired or if it will not expire in the next five
 * minutes. Otherwise, this will refresh the token and return a new one.
 *
 * @param user - The user.
 * @param forceRefresh - Force refresh regardless of token expiration.
 *
 * @public
 */ function $809b25475cc45ca0$export$7a38258bbe170828(user, forceRefresh = false) {
    return (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(user).getIdToken(forceRefresh);
}
/**
 * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.
 *
 * @remarks
 * Returns the current token if it has not expired or if it will not expire in the next five
 * minutes. Otherwise, this will refresh the token and return a new one.
 *
 * @param user - The user.
 * @param forceRefresh - Force refresh regardless of token expiration.
 *
 * @public
 */ async function $809b25475cc45ca0$export$2f6ca3d3b1f80bf5(user, forceRefresh = false) {
    const userInternal = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(user);
    const token = await userInternal.getIdToken(forceRefresh);
    const claims = $809b25475cc45ca0$var$_parseToken(token);
    $809b25475cc45ca0$export$24baa2b76016ce0e(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    const firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;
    const signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_provider'];
    return {
        claims: claims,
        token: token,
        authTime: $809b25475cc45ca0$var$utcTimestampToDateString($809b25475cc45ca0$var$secondsStringToMilliseconds(claims.auth_time)),
        issuedAtTime: $809b25475cc45ca0$var$utcTimestampToDateString($809b25475cc45ca0$var$secondsStringToMilliseconds(claims.iat)),
        expirationTime: $809b25475cc45ca0$var$utcTimestampToDateString($809b25475cc45ca0$var$secondsStringToMilliseconds(claims.exp)),
        signInProvider: signInProvider || null,
        signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_second_factor']) || null
    };
}
function $809b25475cc45ca0$var$secondsStringToMilliseconds(seconds) {
    return Number(seconds) * 1000;
}
function $809b25475cc45ca0$var$_parseToken(token) {
    const [algorithm, payload, signature] = token.split('.');
    if (algorithm === undefined || payload === undefined || signature === undefined) {
        $809b25475cc45ca0$var$_logError('JWT malformed, contained fewer than 3 sections');
        return null;
    }
    try {
        const decoded = (0, $ee1ab2624407a779$export$c62426fdd000a97e)(payload);
        if (!decoded) {
            $809b25475cc45ca0$var$_logError('Failed to decode base64 JWT payload');
            return null;
        }
        return JSON.parse(decoded);
    } catch (e) {
        $809b25475cc45ca0$var$_logError('Caught error parsing JWT payload as JSON', e === null || e === void 0 ? void 0 : e.toString());
        return null;
    }
}
/**
 * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.
 */ function $809b25475cc45ca0$var$_tokenExpiresIn(token) {
    const parsedToken = $809b25475cc45ca0$var$_parseToken(token);
    $809b25475cc45ca0$export$24baa2b76016ce0e(parsedToken, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    $809b25475cc45ca0$export$24baa2b76016ce0e(typeof parsedToken.exp !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    $809b25475cc45ca0$export$24baa2b76016ce0e(typeof parsedToken.iat !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    return Number(parsedToken.exp) - Number(parsedToken.iat);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function $809b25475cc45ca0$var$_logoutIfInvalidated(user, promise, bypassAuthState = false) {
    if (bypassAuthState) return promise;
    try {
        return await promise;
    } catch (e) {
        if (e instanceof (0, $ee1ab2624407a779$export$dd24e9cd51226c56) && $809b25475cc45ca0$var$isUserInvalidated(e)) {
            if (user.auth.currentUser === user) await user.auth.signOut();
        }
        throw e;
    }
}
function $809b25475cc45ca0$var$isUserInvalidated({ code: code }) {
    return code === `auth/${"user-disabled" /* AuthErrorCode.USER_DISABLED */ }` || code === `auth/${"user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */ }`;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $809b25475cc45ca0$var$ProactiveRefresh {
    constructor(user){
        this.user = user;
        this.isRunning = false;
        // Node timers and browser timers return fundamentally different types.
        // We don't actually care what the value is but TS won't accept unknown and
        // we can't cast properly in both environments.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.timerId = null;
        this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */ ;
    }
    _start() {
        if (this.isRunning) return;
        this.isRunning = true;
        this.schedule();
    }
    _stop() {
        if (!this.isRunning) return;
        this.isRunning = false;
        if (this.timerId !== null) clearTimeout(this.timerId);
    }
    getInterval(wasError) {
        var _a;
        if (wasError) {
            const interval = this.errorBackoff;
            this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* Duration.RETRY_BACKOFF_MAX */ );
            return interval;
        } else {
            // Reset the error backoff
            this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */ ;
            const expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;
            const interval = expTime - Date.now() - 300000 /* Duration.OFFSET */ ;
            return Math.max(0, interval);
        }
    }
    schedule(wasError = false) {
        if (!this.isRunning) // Just in case...
        return;
        const interval = this.getInterval(wasError);
        this.timerId = setTimeout(async ()=>{
            await this.iteration();
        }, interval);
    }
    async iteration() {
        try {
            await this.user.getIdToken(true);
        } catch (e) {
            // Only retry on network errors
            if ((e === null || e === void 0 ? void 0 : e.code) === `auth/${"network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ }`) this.schedule(/* wasError */ true);
            return;
        }
        this.schedule();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $809b25475cc45ca0$var$UserMetadata {
    constructor(createdAt, lastLoginAt){
        this.createdAt = createdAt;
        this.lastLoginAt = lastLoginAt;
        this._initializeTime();
    }
    _initializeTime() {
        this.lastSignInTime = $809b25475cc45ca0$var$utcTimestampToDateString(this.lastLoginAt);
        this.creationTime = $809b25475cc45ca0$var$utcTimestampToDateString(this.createdAt);
    }
    _copy(metadata) {
        this.createdAt = metadata.createdAt;
        this.lastLoginAt = metadata.lastLoginAt;
        this._initializeTime();
    }
    toJSON() {
        return {
            createdAt: this.createdAt,
            lastLoginAt: this.lastLoginAt
        };
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function $809b25475cc45ca0$var$_reloadWithoutSaving(user) {
    var _a;
    const auth = user.auth;
    const idToken = await user.getIdToken();
    const response = await $809b25475cc45ca0$var$_logoutIfInvalidated(user, $809b25475cc45ca0$var$getAccountInfo(auth, {
        idToken: idToken
    }));
    $809b25475cc45ca0$export$24baa2b76016ce0e(response === null || response === void 0 ? void 0 : response.users.length, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    const coreAccount = response.users[0];
    user._notifyReloadListener(coreAccount);
    const newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length) ? $809b25475cc45ca0$var$extractProviderData(coreAccount.providerUserInfo) : [];
    const providerData = $809b25475cc45ca0$var$mergeProviderData(user.providerData, newProviderData);
    // Preserves the non-nonymous status of the stored user, even if no more
    // credentials (federated or email/password) are linked to the user. If
    // the user was previously anonymous, then use provider data to update.
    // On the other hand, if it was not anonymous before, it should never be
    // considered anonymous now.
    const oldIsAnonymous = user.isAnonymous;
    const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);
    const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;
    const updates = {
        uid: coreAccount.localId,
        displayName: coreAccount.displayName || null,
        photoURL: coreAccount.photoUrl || null,
        email: coreAccount.email || null,
        emailVerified: coreAccount.emailVerified || false,
        phoneNumber: coreAccount.phoneNumber || null,
        tenantId: coreAccount.tenantId || null,
        providerData: providerData,
        metadata: new $809b25475cc45ca0$var$UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
        isAnonymous: isAnonymous
    };
    Object.assign(user, updates);
}
/**
 * Reloads user account data, if signed in.
 *
 * @param user - The user.
 *
 * @public
 */ async function $809b25475cc45ca0$export$6554612db691658e(user) {
    const userInternal = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(user);
    await $809b25475cc45ca0$var$_reloadWithoutSaving(userInternal);
    // Even though the current user hasn't changed, update
    // current user will trigger a persistence update w/ the
    // new info.
    await userInternal.auth._persistUserIfCurrent(userInternal);
    userInternal.auth._notifyListenersIfCurrent(userInternal);
}
function $809b25475cc45ca0$var$mergeProviderData(original, newData) {
    const deduped = original.filter((o)=>!newData.some((n)=>n.providerId === o.providerId));
    return [
        ...deduped,
        ...newData
    ];
}
function $809b25475cc45ca0$var$extractProviderData(providers) {
    return providers.map((_a)=>{
        var { providerId: providerId } = _a, provider = (0, $b7b472ff0da46e08$export$3c9a16f847548506)(_a, [
            "providerId"
        ]);
        return {
            providerId: providerId,
            uid: provider.rawId || '',
            displayName: provider.displayName || null,
            email: provider.email || null,
            phoneNumber: provider.phoneNumber || null,
            photoURL: provider.photoUrl || null
        };
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function $809b25475cc45ca0$var$requestStsToken(auth, refreshToken) {
    const response = await $809b25475cc45ca0$var$_performFetchWithErrorHandling(auth, {}, async ()=>{
        const body = (0, $ee1ab2624407a779$export$ac4103b836844853)({
            'grant_type': 'refresh_token',
            'refresh_token': refreshToken
        }).slice(1);
        const { tokenApiHost: tokenApiHost, apiKey: apiKey } = auth.config;
        const url = await $809b25475cc45ca0$var$_getFinalTarget(auth, tokenApiHost, "/v1/token" /* Endpoint.TOKEN */ , `key=${apiKey}`);
        const headers = await auth._getAdditionalHeaders();
        headers["Content-Type" /* HttpHeader.CONTENT_TYPE */ ] = 'application/x-www-form-urlencoded';
        return $809b25475cc45ca0$export$f96d196f7728bb5.fetch()(url, {
            method: "POST" /* HttpMethod.POST */ ,
            headers: headers,
            body: body
        });
    });
    // The response comes back in snake_case. Convert to camel:
    return {
        accessToken: response.access_token,
        expiresIn: response.expires_in,
        refreshToken: response.refresh_token
    };
}
async function $809b25475cc45ca0$var$revokeToken(auth, request) {
    return $809b25475cc45ca0$var$_performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v2/accounts:revokeToken" /* Endpoint.REVOKE_TOKEN */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * We need to mark this class as internal explicitly to exclude it in the public typings, because
 * it references AuthInternal which has a circular dependency with UserInternal.
 *
 * @internal
 */ class $809b25475cc45ca0$var$StsTokenManager {
    constructor(){
        this.refreshToken = null;
        this.accessToken = null;
        this.expirationTime = null;
    }
    get isExpired() {
        return !this.expirationTime || Date.now() > this.expirationTime - 30000 /* Buffer.TOKEN_REFRESH */ ;
    }
    updateFromServerResponse(response) {
        $809b25475cc45ca0$export$24baa2b76016ce0e(response.idToken, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        $809b25475cc45ca0$export$24baa2b76016ce0e(typeof response.idToken !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        $809b25475cc45ca0$export$24baa2b76016ce0e(typeof response.refreshToken !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        const expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined' ? Number(response.expiresIn) : $809b25475cc45ca0$var$_tokenExpiresIn(response.idToken);
        this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);
    }
    updateFromIdToken(idToken) {
        $809b25475cc45ca0$export$24baa2b76016ce0e(idToken.length !== 0, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        const expiresIn = $809b25475cc45ca0$var$_tokenExpiresIn(idToken);
        this.updateTokensAndExpiration(idToken, null, expiresIn);
    }
    async getToken(auth, forceRefresh = false) {
        if (!forceRefresh && this.accessToken && !this.isExpired) return this.accessToken;
        $809b25475cc45ca0$export$24baa2b76016ce0e(this.refreshToken, auth, "user-token-expired" /* AuthErrorCode.TOKEN_EXPIRED */ );
        if (this.refreshToken) {
            await this.refresh(auth, this.refreshToken);
            return this.accessToken;
        }
        return null;
    }
    clearRefreshToken() {
        this.refreshToken = null;
    }
    async refresh(auth, oldToken) {
        const { accessToken: accessToken, refreshToken: refreshToken, expiresIn: expiresIn } = await $809b25475cc45ca0$var$requestStsToken(auth, oldToken);
        this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));
    }
    updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {
        this.refreshToken = refreshToken || null;
        this.accessToken = accessToken || null;
        this.expirationTime = Date.now() + expiresInSec * 1000;
    }
    static fromJSON(appName, object) {
        const { refreshToken: refreshToken, accessToken: accessToken, expirationTime: expirationTime } = object;
        const manager = new $809b25475cc45ca0$var$StsTokenManager();
        if (refreshToken) {
            $809b25475cc45ca0$export$24baa2b76016ce0e(typeof refreshToken === 'string', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ , {
                appName: appName
            });
            manager.refreshToken = refreshToken;
        }
        if (accessToken) {
            $809b25475cc45ca0$export$24baa2b76016ce0e(typeof accessToken === 'string', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ , {
                appName: appName
            });
            manager.accessToken = accessToken;
        }
        if (expirationTime) {
            $809b25475cc45ca0$export$24baa2b76016ce0e(typeof expirationTime === 'number', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ , {
                appName: appName
            });
            manager.expirationTime = expirationTime;
        }
        return manager;
    }
    toJSON() {
        return {
            refreshToken: this.refreshToken,
            accessToken: this.accessToken,
            expirationTime: this.expirationTime
        };
    }
    _assign(stsTokenManager) {
        this.accessToken = stsTokenManager.accessToken;
        this.refreshToken = stsTokenManager.refreshToken;
        this.expirationTime = stsTokenManager.expirationTime;
    }
    _clone() {
        return Object.assign(new $809b25475cc45ca0$var$StsTokenManager(), this.toJSON());
    }
    _performRefresh() {
        return $809b25475cc45ca0$var$debugFail('not implemented');
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $809b25475cc45ca0$var$assertStringOrUndefined(assertion, appName) {
    $809b25475cc45ca0$export$24baa2b76016ce0e(typeof assertion === 'string' || typeof assertion === 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ , {
        appName: appName
    });
}
class $809b25475cc45ca0$export$91477dc880baac21 {
    constructor(_a){
        var { uid: uid, auth: auth, stsTokenManager: stsTokenManager } = _a, opt = (0, $b7b472ff0da46e08$export$3c9a16f847548506)(_a, [
            "uid",
            "auth",
            "stsTokenManager"
        ]);
        // For the user object, provider is always Firebase.
        this.providerId = "firebase" /* ProviderId.FIREBASE */ ;
        this.proactiveRefresh = new $809b25475cc45ca0$var$ProactiveRefresh(this);
        this.reloadUserInfo = null;
        this.reloadListener = null;
        this.uid = uid;
        this.auth = auth;
        this.stsTokenManager = stsTokenManager;
        this.accessToken = stsTokenManager.accessToken;
        this.displayName = opt.displayName || null;
        this.email = opt.email || null;
        this.emailVerified = opt.emailVerified || false;
        this.phoneNumber = opt.phoneNumber || null;
        this.photoURL = opt.photoURL || null;
        this.isAnonymous = opt.isAnonymous || false;
        this.tenantId = opt.tenantId || null;
        this.providerData = opt.providerData ? [
            ...opt.providerData
        ] : [];
        this.metadata = new $809b25475cc45ca0$var$UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);
    }
    async getIdToken(forceRefresh) {
        const accessToken = await $809b25475cc45ca0$var$_logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));
        $809b25475cc45ca0$export$24baa2b76016ce0e(accessToken, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        if (this.accessToken !== accessToken) {
            this.accessToken = accessToken;
            await this.auth._persistUserIfCurrent(this);
            this.auth._notifyListenersIfCurrent(this);
        }
        return accessToken;
    }
    getIdTokenResult(forceRefresh) {
        return $809b25475cc45ca0$export$2f6ca3d3b1f80bf5(this, forceRefresh);
    }
    reload() {
        return $809b25475cc45ca0$export$6554612db691658e(this);
    }
    _assign(user) {
        if (this === user) return;
        $809b25475cc45ca0$export$24baa2b76016ce0e(this.uid === user.uid, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        this.displayName = user.displayName;
        this.photoURL = user.photoURL;
        this.email = user.email;
        this.emailVerified = user.emailVerified;
        this.phoneNumber = user.phoneNumber;
        this.isAnonymous = user.isAnonymous;
        this.tenantId = user.tenantId;
        this.providerData = user.providerData.map((userInfo)=>Object.assign({}, userInfo));
        this.metadata._copy(user.metadata);
        this.stsTokenManager._assign(user.stsTokenManager);
    }
    _clone(auth) {
        const newUser = new $809b25475cc45ca0$export$91477dc880baac21(Object.assign(Object.assign({}, this), {
            auth: auth,
            stsTokenManager: this.stsTokenManager._clone()
        }));
        newUser.metadata._copy(this.metadata);
        return newUser;
    }
    _onReload(callback) {
        // There should only ever be one listener, and that is a single instance of MultiFactorUser
        $809b25475cc45ca0$export$24baa2b76016ce0e(!this.reloadListener, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        this.reloadListener = callback;
        if (this.reloadUserInfo) {
            this._notifyReloadListener(this.reloadUserInfo);
            this.reloadUserInfo = null;
        }
    }
    _notifyReloadListener(userInfo) {
        if (this.reloadListener) this.reloadListener(userInfo);
        else // If no listener is subscribed yet, save the result so it's available when they do subscribe
        this.reloadUserInfo = userInfo;
    }
    _startProactiveRefresh() {
        this.proactiveRefresh._start();
    }
    _stopProactiveRefresh() {
        this.proactiveRefresh._stop();
    }
    async _updateTokensIfNecessary(response, reload = false) {
        let tokensRefreshed = false;
        if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {
            this.stsTokenManager.updateFromServerResponse(response);
            tokensRefreshed = true;
        }
        if (reload) await $809b25475cc45ca0$var$_reloadWithoutSaving(this);
        await this.auth._persistUserIfCurrent(this);
        if (tokensRefreshed) this.auth._notifyListenersIfCurrent(this);
    }
    async delete() {
        if ((0, $12572052cab62175$export$643c8bc6c389f34e)(this.auth.app)) return Promise.reject($809b25475cc45ca0$var$_serverAppCurrentUserOperationNotSupportedError(this.auth));
        const idToken = await this.getIdToken();
        await $809b25475cc45ca0$var$_logoutIfInvalidated(this, $809b25475cc45ca0$var$deleteAccount(this.auth, {
            idToken: idToken
        }));
        this.stsTokenManager.clearRefreshToken();
        // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()
        //       cancels pending actions...
        return this.auth.signOut();
    }
    toJSON() {
        return Object.assign(Object.assign({
            uid: this.uid,
            email: this.email || undefined,
            emailVerified: this.emailVerified,
            displayName: this.displayName || undefined,
            isAnonymous: this.isAnonymous,
            photoURL: this.photoURL || undefined,
            phoneNumber: this.phoneNumber || undefined,
            tenantId: this.tenantId || undefined,
            providerData: this.providerData.map((userInfo)=>Object.assign({}, userInfo)),
            stsTokenManager: this.stsTokenManager.toJSON(),
            // Redirect event ID must be maintained in case there is a pending
            // redirect event.
            _redirectEventId: this._redirectEventId
        }, this.metadata.toJSON()), {
            // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):
            apiKey: this.auth.config.apiKey,
            appName: this.auth.name
        });
    }
    get refreshToken() {
        return this.stsTokenManager.refreshToken || '';
    }
    static _fromJSON(auth, object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : undefined;
        const email = (_b = object.email) !== null && _b !== void 0 ? _b : undefined;
        const phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : undefined;
        const photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : undefined;
        const tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : undefined;
        const _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : undefined;
        const createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : undefined;
        const lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : undefined;
        const { uid: uid, emailVerified: emailVerified, isAnonymous: isAnonymous, providerData: providerData, stsTokenManager: plainObjectTokenManager } = object;
        $809b25475cc45ca0$export$24baa2b76016ce0e(uid && plainObjectTokenManager, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        const stsTokenManager = $809b25475cc45ca0$var$StsTokenManager.fromJSON(this.name, plainObjectTokenManager);
        $809b25475cc45ca0$export$24baa2b76016ce0e(typeof uid === 'string', auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        $809b25475cc45ca0$var$assertStringOrUndefined(displayName, auth.name);
        $809b25475cc45ca0$var$assertStringOrUndefined(email, auth.name);
        $809b25475cc45ca0$export$24baa2b76016ce0e(typeof emailVerified === 'boolean', auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        $809b25475cc45ca0$export$24baa2b76016ce0e(typeof isAnonymous === 'boolean', auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        $809b25475cc45ca0$var$assertStringOrUndefined(phoneNumber, auth.name);
        $809b25475cc45ca0$var$assertStringOrUndefined(photoURL, auth.name);
        $809b25475cc45ca0$var$assertStringOrUndefined(tenantId, auth.name);
        $809b25475cc45ca0$var$assertStringOrUndefined(_redirectEventId, auth.name);
        $809b25475cc45ca0$var$assertStringOrUndefined(createdAt, auth.name);
        $809b25475cc45ca0$var$assertStringOrUndefined(lastLoginAt, auth.name);
        const user = new $809b25475cc45ca0$export$91477dc880baac21({
            uid: uid,
            auth: auth,
            email: email,
            emailVerified: emailVerified,
            displayName: displayName,
            isAnonymous: isAnonymous,
            photoURL: photoURL,
            phoneNumber: phoneNumber,
            tenantId: tenantId,
            stsTokenManager: stsTokenManager,
            createdAt: createdAt,
            lastLoginAt: lastLoginAt
        });
        if (providerData && Array.isArray(providerData)) user.providerData = providerData.map((userInfo)=>Object.assign({}, userInfo));
        if (_redirectEventId) user._redirectEventId = _redirectEventId;
        return user;
    }
    /**
     * Initialize a User from an idToken server response
     * @param auth
     * @param idTokenResponse
     */ static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {
        const stsTokenManager = new $809b25475cc45ca0$var$StsTokenManager();
        stsTokenManager.updateFromServerResponse(idTokenResponse);
        // Initialize the Firebase Auth user.
        const user = new $809b25475cc45ca0$export$91477dc880baac21({
            uid: idTokenResponse.localId,
            auth: auth,
            stsTokenManager: stsTokenManager,
            isAnonymous: isAnonymous
        });
        // Updates the user info and data and resolves with a user instance.
        await $809b25475cc45ca0$var$_reloadWithoutSaving(user);
        return user;
    }
    /**
     * Initialize a User from an idToken server response
     * @param auth
     * @param idTokenResponse
     */ static async _fromGetAccountInfoResponse(auth, response, idToken) {
        const coreAccount = response.users[0];
        $809b25475cc45ca0$export$24baa2b76016ce0e(coreAccount.localId !== undefined, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        const providerData = coreAccount.providerUserInfo !== undefined ? $809b25475cc45ca0$var$extractProviderData(coreAccount.providerUserInfo) : [];
        const isAnonymous = !(coreAccount.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);
        const stsTokenManager = new $809b25475cc45ca0$var$StsTokenManager();
        stsTokenManager.updateFromIdToken(idToken);
        // Initialize the Firebase Auth user.
        const user = new $809b25475cc45ca0$export$91477dc880baac21({
            uid: coreAccount.localId,
            auth: auth,
            stsTokenManager: stsTokenManager,
            isAnonymous: isAnonymous
        });
        // update the user with data from the GetAccountInfo response.
        const updates = {
            uid: coreAccount.localId,
            displayName: coreAccount.displayName || null,
            photoURL: coreAccount.photoUrl || null,
            email: coreAccount.email || null,
            emailVerified: coreAccount.emailVerified || false,
            phoneNumber: coreAccount.phoneNumber || null,
            tenantId: coreAccount.tenantId || null,
            providerData: providerData,
            metadata: new $809b25475cc45ca0$var$UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
            isAnonymous: !(coreAccount.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length)
        };
        Object.assign(user, updates);
        return user;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $809b25475cc45ca0$var$instanceCache = new Map();
function $809b25475cc45ca0$export$cf2f7c5792f80b46(cls) {
    $809b25475cc45ca0$export$d66dc83d8cfc8dd(cls instanceof Function, 'Expected a class definition');
    let instance = $809b25475cc45ca0$var$instanceCache.get(cls);
    if (instance) {
        $809b25475cc45ca0$export$d66dc83d8cfc8dd(instance instanceof cls, 'Instance stored in cache mismatched with class');
        return instance;
    }
    instance = new cls();
    $809b25475cc45ca0$var$instanceCache.set(cls, instance);
    return instance;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $809b25475cc45ca0$var$InMemoryPersistence {
    constructor(){
        this.type = "NONE" /* PersistenceType.NONE */ ;
        this.storage = {};
    }
    async _isAvailable() {
        return true;
    }
    async _set(key, value) {
        this.storage[key] = value;
    }
    async _get(key) {
        const value = this.storage[key];
        return value === undefined ? null : value;
    }
    async _remove(key) {
        delete this.storage[key];
    }
    _addListener(_key, _listener) {
        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
        return;
    }
    _removeListener(_key, _listener) {
        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
        return;
    }
}
$809b25475cc45ca0$var$InMemoryPersistence.type = 'NONE';
/**
 * An implementation of {@link Persistence} of type 'NONE'.
 *
 * @public
 */ const $809b25475cc45ca0$export$e7c866399fa523f5 = $809b25475cc45ca0$var$InMemoryPersistence;
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $809b25475cc45ca0$export$53a70dd1ebbae346(key, apiKey, appName) {
    return `${"firebase" /* Namespace.PERSISTENCE */ }:${key}:${apiKey}:${appName}`;
}
class $809b25475cc45ca0$var$PersistenceUserManager {
    constructor(persistence, auth, userKey){
        this.persistence = persistence;
        this.auth = auth;
        this.userKey = userKey;
        const { config: config, name: name } = this.auth;
        this.fullUserKey = $809b25475cc45ca0$export$53a70dd1ebbae346(this.userKey, config.apiKey, name);
        this.fullPersistenceKey = $809b25475cc45ca0$export$53a70dd1ebbae346("persistence" /* KeyName.PERSISTENCE_USER */ , config.apiKey, name);
        this.boundEventHandler = auth._onStorageEvent.bind(auth);
        this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
    }
    setCurrentUser(user) {
        return this.persistence._set(this.fullUserKey, user.toJSON());
    }
    async getCurrentUser() {
        const blob = await this.persistence._get(this.fullUserKey);
        if (!blob) return null;
        if (typeof blob === 'string') {
            const response = await $809b25475cc45ca0$var$getAccountInfo(this.auth, {
                idToken: blob
            }).catch(()=>undefined);
            if (!response) return null;
            return $809b25475cc45ca0$export$91477dc880baac21._fromGetAccountInfoResponse(this.auth, response, blob);
        }
        return $809b25475cc45ca0$export$91477dc880baac21._fromJSON(this.auth, blob);
    }
    removeCurrentUser() {
        return this.persistence._remove(this.fullUserKey);
    }
    savePersistenceForRedirect() {
        return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
    }
    async setPersistence(newPersistence) {
        if (this.persistence === newPersistence) return;
        const currentUser = await this.getCurrentUser();
        await this.removeCurrentUser();
        this.persistence = newPersistence;
        if (currentUser) return this.setCurrentUser(currentUser);
    }
    delete() {
        this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
    }
    static async create(auth, persistenceHierarchy, userKey = "authUser" /* KeyName.AUTH_USER */ ) {
        if (!persistenceHierarchy.length) return new $809b25475cc45ca0$var$PersistenceUserManager($809b25475cc45ca0$export$cf2f7c5792f80b46($809b25475cc45ca0$export$e7c866399fa523f5), auth, userKey);
        // Eliminate any persistences that are not available
        const availablePersistences = (await Promise.all(persistenceHierarchy.map(async (persistence)=>{
            if (await persistence._isAvailable()) return persistence;
            return undefined;
        }))).filter((persistence)=>persistence);
        // Fall back to the first persistence listed, or in memory if none available
        let selectedPersistence = availablePersistences[0] || $809b25475cc45ca0$export$cf2f7c5792f80b46($809b25475cc45ca0$export$e7c866399fa523f5);
        const key = $809b25475cc45ca0$export$53a70dd1ebbae346(userKey, auth.config.apiKey, auth.name);
        // Pull out the existing user, setting the chosen persistence to that
        // persistence if the user exists.
        let userToMigrate = null;
        // Note, here we check for a user in _all_ persistences, not just the
        // ones deemed available. If we can migrate a user out of a broken
        // persistence, we will (but only if that persistence supports migration).
        for (const persistence of persistenceHierarchy)try {
            const blob = await persistence._get(key);
            if (blob) {
                let user;
                if (typeof blob === 'string') {
                    const response = await $809b25475cc45ca0$var$getAccountInfo(auth, {
                        idToken: blob
                    }).catch(()=>undefined);
                    if (!response) break;
                    user = await $809b25475cc45ca0$export$91477dc880baac21._fromGetAccountInfoResponse(auth, response, blob);
                } else user = $809b25475cc45ca0$export$91477dc880baac21._fromJSON(auth, blob); // throws for unparsable blob (wrong format)
                if (persistence !== selectedPersistence) userToMigrate = user;
                selectedPersistence = persistence;
                break;
            }
        } catch (_a) {}
        // If we find the user in a persistence that does support migration, use
        // that migration path (of only persistences that support migration)
        const migrationHierarchy = availablePersistences.filter((p)=>p._shouldAllowMigration);
        // If the persistence does _not_ allow migration, just finish off here
        if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) return new $809b25475cc45ca0$var$PersistenceUserManager(selectedPersistence, auth, userKey);
        selectedPersistence = migrationHierarchy[0];
        if (userToMigrate) // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does
        // we'll just let it bubble to surface the error.
        await selectedPersistence._set(key, userToMigrate.toJSON());
        // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues
        // such as users getting stuck with a previous account after signing out and refreshing the tab.
        await Promise.all(persistenceHierarchy.map(async (persistence)=>{
            if (persistence !== selectedPersistence) try {
                await persistence._remove(key);
            } catch (_a) {}
        }));
        return new $809b25475cc45ca0$var$PersistenceUserManager(selectedPersistence, auth, userKey);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Determine the browser for the purposes of reporting usage to the API
 */ function $809b25475cc45ca0$var$_getBrowserName(userAgent) {
    const ua = userAgent.toLowerCase();
    if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) return "Opera" /* BrowserName.OPERA */ ;
    else if ($809b25475cc45ca0$var$_isIEMobile(ua)) // Windows phone IEMobile browser.
    return "IEMobile" /* BrowserName.IEMOBILE */ ;
    else if (ua.includes('msie') || ua.includes('trident/')) return "IE" /* BrowserName.IE */ ;
    else if (ua.includes('edge/')) return "Edge" /* BrowserName.EDGE */ ;
    else if ($809b25475cc45ca0$var$_isFirefox(ua)) return "Firefox" /* BrowserName.FIREFOX */ ;
    else if (ua.includes('silk/')) return "Silk" /* BrowserName.SILK */ ;
    else if ($809b25475cc45ca0$var$_isBlackBerry(ua)) // Blackberry browser.
    return "Blackberry" /* BrowserName.BLACKBERRY */ ;
    else if ($809b25475cc45ca0$var$_isWebOS(ua)) // WebOS default browser.
    return "Webos" /* BrowserName.WEBOS */ ;
    else if ($809b25475cc45ca0$var$_isSafari(ua)) return "Safari" /* BrowserName.SAFARI */ ;
    else if ((ua.includes('chrome/') || $809b25475cc45ca0$var$_isChromeIOS(ua)) && !ua.includes('edge/')) return "Chrome" /* BrowserName.CHROME */ ;
    else if ($809b25475cc45ca0$export$9fa96a7d116ea3ce(ua)) // Android stock browser.
    return "Android" /* BrowserName.ANDROID */ ;
    else {
        // Most modern browsers have name/version at end of user agent string.
        const re = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/;
        const matches = userAgent.match(re);
        if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) return matches[1];
    }
    return "Other" /* BrowserName.OTHER */ ;
}
function $809b25475cc45ca0$var$_isFirefox(ua = (0, $ee1ab2624407a779$export$c36915b22ce77c19)()) {
    return /firefox\//i.test(ua);
}
function $809b25475cc45ca0$var$_isSafari(userAgent = (0, $ee1ab2624407a779$export$c36915b22ce77c19)()) {
    const ua = userAgent.toLowerCase();
    return ua.includes('safari/') && !ua.includes('chrome/') && !ua.includes('crios/') && !ua.includes('android');
}
function $809b25475cc45ca0$var$_isChromeIOS(ua = (0, $ee1ab2624407a779$export$c36915b22ce77c19)()) {
    return /crios\//i.test(ua);
}
function $809b25475cc45ca0$var$_isIEMobile(ua = (0, $ee1ab2624407a779$export$c36915b22ce77c19)()) {
    return /iemobile/i.test(ua);
}
function $809b25475cc45ca0$export$9fa96a7d116ea3ce(ua = (0, $ee1ab2624407a779$export$c36915b22ce77c19)()) {
    return /android/i.test(ua);
}
function $809b25475cc45ca0$var$_isBlackBerry(ua = (0, $ee1ab2624407a779$export$c36915b22ce77c19)()) {
    return /blackberry/i.test(ua);
}
function $809b25475cc45ca0$var$_isWebOS(ua = (0, $ee1ab2624407a779$export$c36915b22ce77c19)()) {
    return /webos/i.test(ua);
}
function $809b25475cc45ca0$export$92108d983e8ee699(ua = (0, $ee1ab2624407a779$export$c36915b22ce77c19)()) {
    return /iphone|ipad|ipod/i.test(ua) || /macintosh/i.test(ua) && /mobile/i.test(ua);
}
function $809b25475cc45ca0$export$9d398bebfec1c039(ua = (0, $ee1ab2624407a779$export$c36915b22ce77c19)()) {
    return /(iPad|iPhone|iPod).*OS 7_\d/i.test(ua) || /(iPad|iPhone|iPod).*OS 8_\d/i.test(ua);
}
function $809b25475cc45ca0$var$_isIOSStandalone(ua = (0, $ee1ab2624407a779$export$c36915b22ce77c19)()) {
    var _a;
    return $809b25475cc45ca0$export$92108d983e8ee699(ua) && !!((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.standalone);
}
function $809b25475cc45ca0$var$_isIE10() {
    return (0, $ee1ab2624407a779$export$7e7b1a9668aaed8)() && document.documentMode === 10;
}
function $809b25475cc45ca0$var$_isMobileBrowser(ua = (0, $ee1ab2624407a779$export$c36915b22ce77c19)()) {
    // TODO: implement getBrowserName equivalent for OS.
    return $809b25475cc45ca0$export$92108d983e8ee699(ua) || $809b25475cc45ca0$export$9fa96a7d116ea3ce(ua) || $809b25475cc45ca0$var$_isWebOS(ua) || $809b25475cc45ca0$var$_isBlackBerry(ua) || /windows phone/i.test(ua) || $809b25475cc45ca0$var$_isIEMobile(ua);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Determine the SDK version string
 */ function $809b25475cc45ca0$export$faec65b429be379(clientPlatform, frameworks = []) {
    let reportedPlatform;
    switch(clientPlatform){
        case "Browser" /* ClientPlatform.BROWSER */ :
            // In a browser environment, report the browser name.
            reportedPlatform = $809b25475cc45ca0$var$_getBrowserName((0, $ee1ab2624407a779$export$c36915b22ce77c19)());
            break;
        case "Worker" /* ClientPlatform.WORKER */ :
            // Technically a worker runs from a browser but we need to differentiate a
            // worker from a browser.
            // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.
            reportedPlatform = `${$809b25475cc45ca0$var$_getBrowserName((0, $ee1ab2624407a779$export$c36915b22ce77c19)())}-${clientPlatform}`;
            break;
        default:
            reportedPlatform = clientPlatform;
    }
    const reportedFrameworks = frameworks.length ? frameworks.join(',') : 'FirebaseCore-web'; /* default value if no other framework is used */ 
    return `${reportedPlatform}/${"JsCore" /* ClientImplementation.CORE */ }/${0, $12572052cab62175$export$31499a9cd224b78c}/${reportedFrameworks}`;
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $809b25475cc45ca0$var$AuthMiddlewareQueue {
    constructor(auth){
        this.auth = auth;
        this.queue = [];
    }
    pushCallback(callback, onAbort) {
        // The callback could be sync or async. Wrap it into a
        // function that is always async.
        const wrappedCallback = (user)=>new Promise((resolve, reject)=>{
                try {
                    const result = callback(user);
                    // Either resolve with existing promise or wrap a non-promise
                    // return value into a promise.
                    resolve(result);
                } catch (e) {
                    // Sync callback throws.
                    reject(e);
                }
            });
        // Attach the onAbort if present
        wrappedCallback.onAbort = onAbort;
        this.queue.push(wrappedCallback);
        const index = this.queue.length - 1;
        return ()=>{
            // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb
            // indexing of other elements.
            this.queue[index] = ()=>Promise.resolve();
        };
    }
    async runMiddleware(nextUser) {
        if (this.auth.currentUser === nextUser) return;
        // While running the middleware, build a temporary stack of onAbort
        // callbacks to call if one middleware callback rejects.
        const onAbortStack = [];
        try {
            for (const beforeStateCallback of this.queue){
                await beforeStateCallback(nextUser);
                // Only push the onAbort if the callback succeeds
                if (beforeStateCallback.onAbort) onAbortStack.push(beforeStateCallback.onAbort);
            }
        } catch (e) {
            // Run all onAbort, with separate try/catch to ignore any errors and
            // continue
            onAbortStack.reverse();
            for (const onAbort of onAbortStack)try {
                onAbort();
            } catch (_) {
            /* swallow error */ }
            throw this.auth._errorFactory.create("login-blocked" /* AuthErrorCode.LOGIN_BLOCKED */ , {
                originalMessage: e === null || e === void 0 ? void 0 : e.message
            });
        }
    }
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Fetches the password policy for the currently set tenant or the project if no tenant is set.
 *
 * @param auth Auth object.
 * @param request Password policy request.
 * @returns Password policy response.
 */ async function $809b25475cc45ca0$var$_getPasswordPolicy(auth, request = {}) {
    return $809b25475cc45ca0$var$_performApiRequest(auth, "GET" /* HttpMethod.GET */ , "/v2/passwordPolicy" /* Endpoint.GET_PASSWORD_POLICY */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Minimum min password length enforced by the backend, even if no minimum length is set.
const $809b25475cc45ca0$var$MINIMUM_MIN_PASSWORD_LENGTH = 6;
/**
 * Stores password policy requirements and provides password validation against the policy.
 *
 * @internal
 */ class $809b25475cc45ca0$var$PasswordPolicyImpl {
    constructor(response){
        var _a, _b, _c, _d;
        // Only include custom strength options defined in the response.
        const responseOptions = response.customStrengthOptions;
        this.customStrengthOptions = {};
        // TODO: Remove once the backend is updated to include the minimum min password length instead of undefined when there is no minimum length set.
        this.customStrengthOptions.minPasswordLength = (_a = responseOptions.minPasswordLength) !== null && _a !== void 0 ? _a : $809b25475cc45ca0$var$MINIMUM_MIN_PASSWORD_LENGTH;
        if (responseOptions.maxPasswordLength) this.customStrengthOptions.maxPasswordLength = responseOptions.maxPasswordLength;
        if (responseOptions.containsLowercaseCharacter !== undefined) this.customStrengthOptions.containsLowercaseLetter = responseOptions.containsLowercaseCharacter;
        if (responseOptions.containsUppercaseCharacter !== undefined) this.customStrengthOptions.containsUppercaseLetter = responseOptions.containsUppercaseCharacter;
        if (responseOptions.containsNumericCharacter !== undefined) this.customStrengthOptions.containsNumericCharacter = responseOptions.containsNumericCharacter;
        if (responseOptions.containsNonAlphanumericCharacter !== undefined) this.customStrengthOptions.containsNonAlphanumericCharacter = responseOptions.containsNonAlphanumericCharacter;
        this.enforcementState = response.enforcementState;
        if (this.enforcementState === 'ENFORCEMENT_STATE_UNSPECIFIED') this.enforcementState = 'OFF';
        // Use an empty string if no non-alphanumeric characters are specified in the response.
        this.allowedNonAlphanumericCharacters = (_c = (_b = response.allowedNonAlphanumericCharacters) === null || _b === void 0 ? void 0 : _b.join('')) !== null && _c !== void 0 ? _c : '';
        this.forceUpgradeOnSignin = (_d = response.forceUpgradeOnSignin) !== null && _d !== void 0 ? _d : false;
        this.schemaVersion = response.schemaVersion;
    }
    validatePassword(password) {
        var _a, _b, _c, _d, _e, _f;
        const status = {
            isValid: true,
            passwordPolicy: this
        };
        // Check the password length and character options.
        this.validatePasswordLengthOptions(password, status);
        this.validatePasswordCharacterOptions(password, status);
        // Combine the status into single isValid property.
        status.isValid && (status.isValid = (_a = status.meetsMinPasswordLength) !== null && _a !== void 0 ? _a : true);
        status.isValid && (status.isValid = (_b = status.meetsMaxPasswordLength) !== null && _b !== void 0 ? _b : true);
        status.isValid && (status.isValid = (_c = status.containsLowercaseLetter) !== null && _c !== void 0 ? _c : true);
        status.isValid && (status.isValid = (_d = status.containsUppercaseLetter) !== null && _d !== void 0 ? _d : true);
        status.isValid && (status.isValid = (_e = status.containsNumericCharacter) !== null && _e !== void 0 ? _e : true);
        status.isValid && (status.isValid = (_f = status.containsNonAlphanumericCharacter) !== null && _f !== void 0 ? _f : true);
        return status;
    }
    /**
     * Validates that the password meets the length options for the policy.
     *
     * @param password Password to validate.
     * @param status Validation status.
     */ validatePasswordLengthOptions(password, status) {
        const minPasswordLength = this.customStrengthOptions.minPasswordLength;
        const maxPasswordLength = this.customStrengthOptions.maxPasswordLength;
        if (minPasswordLength) status.meetsMinPasswordLength = password.length >= minPasswordLength;
        if (maxPasswordLength) status.meetsMaxPasswordLength = password.length <= maxPasswordLength;
    }
    /**
     * Validates that the password meets the character options for the policy.
     *
     * @param password Password to validate.
     * @param status Validation status.
     */ validatePasswordCharacterOptions(password, status) {
        // Assign statuses for requirements even if the password is an empty string.
        this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */ false, /* containsUppercaseCharacter= */ false, /* containsNumericCharacter= */ false, /* containsNonAlphanumericCharacter= */ false);
        let passwordChar;
        for(let i = 0; i < password.length; i++){
            passwordChar = password.charAt(i);
            this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */ passwordChar >= 'a' && passwordChar <= 'z', /* containsUppercaseCharacter= */ passwordChar >= 'A' && passwordChar <= 'Z', /* containsNumericCharacter= */ passwordChar >= '0' && passwordChar <= '9', /* containsNonAlphanumericCharacter= */ this.allowedNonAlphanumericCharacters.includes(passwordChar));
        }
    }
    /**
     * Updates the running validation status with the statuses for the character options.
     * Expected to be called each time a character is processed to update each option status
     * based on the current character.
     *
     * @param status Validation status.
     * @param containsLowercaseCharacter Whether the character is a lowercase letter.
     * @param containsUppercaseCharacter Whether the character is an uppercase letter.
     * @param containsNumericCharacter Whether the character is a numeric character.
     * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.
     */ updatePasswordCharacterOptionsStatuses(status, containsLowercaseCharacter, containsUppercaseCharacter, containsNumericCharacter, containsNonAlphanumericCharacter) {
        if (this.customStrengthOptions.containsLowercaseLetter) status.containsLowercaseLetter || (status.containsLowercaseLetter = containsLowercaseCharacter);
        if (this.customStrengthOptions.containsUppercaseLetter) status.containsUppercaseLetter || (status.containsUppercaseLetter = containsUppercaseCharacter);
        if (this.customStrengthOptions.containsNumericCharacter) status.containsNumericCharacter || (status.containsNumericCharacter = containsNumericCharacter);
        if (this.customStrengthOptions.containsNonAlphanumericCharacter) status.containsNonAlphanumericCharacter || (status.containsNonAlphanumericCharacter = containsNonAlphanumericCharacter);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $809b25475cc45ca0$export$9f4f30ee63539e24 {
    constructor(app, heartbeatServiceProvider, appCheckServiceProvider, config){
        this.app = app;
        this.heartbeatServiceProvider = heartbeatServiceProvider;
        this.appCheckServiceProvider = appCheckServiceProvider;
        this.config = config;
        this.currentUser = null;
        this.emulatorConfig = null;
        this.operations = Promise.resolve();
        this.authStateSubscription = new $809b25475cc45ca0$var$Subscription(this);
        this.idTokenSubscription = new $809b25475cc45ca0$var$Subscription(this);
        this.beforeStateQueue = new $809b25475cc45ca0$var$AuthMiddlewareQueue(this);
        this.redirectUser = null;
        this.isProactiveRefreshEnabled = false;
        this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1;
        // Any network calls will set this to true and prevent subsequent emulator
        // initialization
        this._canInitEmulator = true;
        this._isInitialized = false;
        this._deleted = false;
        this._initializationPromise = null;
        this._popupRedirectResolver = null;
        this._errorFactory = $809b25475cc45ca0$var$_DEFAULT_AUTH_ERROR_FACTORY;
        this._agentRecaptchaConfig = null;
        this._tenantRecaptchaConfigs = {};
        this._projectPasswordPolicy = null;
        this._tenantPasswordPolicies = {};
        this._resolvePersistenceManagerAvailable = undefined;
        // Tracks the last notified UID for state change listeners to prevent
        // repeated calls to the callbacks. Undefined means it's never been
        // called, whereas null means it's been called with a signed out user
        this.lastNotifiedUid = undefined;
        this.languageCode = null;
        this.tenantId = null;
        this.settings = {
            appVerificationDisabledForTesting: false
        };
        this.frameworks = [];
        this.name = app.name;
        this.clientVersion = config.sdkClientVersion;
        // TODO(jamesdaniels) explore less hacky way to do this, cookie authentication needs
        // persistenceMananger to be available. see _getFinalTarget for more context
        this._persistenceManagerAvailable = new Promise((resolve)=>this._resolvePersistenceManagerAvailable = resolve);
    }
    _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {
        if (popupRedirectResolver) this._popupRedirectResolver = $809b25475cc45ca0$export$cf2f7c5792f80b46(popupRedirectResolver);
        // Have to check for app deletion throughout initialization (after each
        // promise resolution)
        this._initializationPromise = this.queue(async ()=>{
            var _a, _b, _c;
            if (this._deleted) return;
            this.persistenceManager = await $809b25475cc45ca0$var$PersistenceUserManager.create(this, persistenceHierarchy);
            (_a = this._resolvePersistenceManagerAvailable) === null || _a === void 0 || _a.call(this);
            if (this._deleted) return;
            // Initialize the resolver early if necessary (only applicable to web:
            // this will cause the iframe to load immediately in certain cases)
            if ((_b = this._popupRedirectResolver) === null || _b === void 0 ? void 0 : _b._shouldInitProactively) // If this fails, don't halt auth loading
            try {
                await this._popupRedirectResolver._initialize(this);
            } catch (e) {
            /* Ignore the error */ }
            await this.initializeCurrentUser(popupRedirectResolver);
            this.lastNotifiedUid = ((_c = this.currentUser) === null || _c === void 0 ? void 0 : _c.uid) || null;
            if (this._deleted) return;
            this._isInitialized = true;
        });
        return this._initializationPromise;
    }
    /**
     * If the persistence is changed in another window, the user manager will let us know
     */ async _onStorageEvent() {
        if (this._deleted) return;
        const user = await this.assertedPersistence.getCurrentUser();
        if (!this.currentUser && !user) // No change, do nothing (was signed out and remained signed out).
        return;
        // If the same user is to be synchronized.
        if (this.currentUser && user && this.currentUser.uid === user.uid) {
            // Data update, simply copy data changes.
            this._currentUser._assign(user);
            // If tokens changed from previous user tokens, this will trigger
            // notifyAuthListeners_.
            await this.currentUser.getIdToken();
            return;
        }
        // Update current Auth state. Either a new login or logout.
        // Skip blocking callbacks, they should not apply to a change in another tab.
        await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */ true);
    }
    async initializeCurrentUserFromIdToken(idToken) {
        try {
            const response = await $809b25475cc45ca0$var$getAccountInfo(this, {
                idToken: idToken
            });
            const user = await $809b25475cc45ca0$export$91477dc880baac21._fromGetAccountInfoResponse(this, response, idToken);
            await this.directlySetCurrentUser(user);
        } catch (err) {
            console.warn('FirebaseServerApp could not login user with provided authIdToken: ', err);
            await this.directlySetCurrentUser(null);
        }
    }
    async initializeCurrentUser(popupRedirectResolver) {
        var _a;
        if ((0, $12572052cab62175$export$643c8bc6c389f34e)(this.app)) {
            const idToken = this.app.settings.authIdToken;
            if (idToken) // Start the auth operation in the next tick to allow a moment for the customer's app to
            // attach an emulator, if desired.
            return new Promise((resolve)=>{
                setTimeout(()=>this.initializeCurrentUserFromIdToken(idToken).then(resolve, resolve));
            });
            else return this.directlySetCurrentUser(null);
        }
        // First check to see if we have a pending redirect event.
        const previouslyStoredUser = await this.assertedPersistence.getCurrentUser();
        let futureCurrentUser = previouslyStoredUser;
        let needsTocheckMiddleware = false;
        if (popupRedirectResolver && this.config.authDomain) {
            await this.getOrInitRedirectPersistenceManager();
            const redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;
            const storedUserEventId = futureCurrentUser === null || futureCurrentUser === void 0 ? void 0 : futureCurrentUser._redirectEventId;
            const result = await this.tryRedirectSignIn(popupRedirectResolver);
            // If the stored user (i.e. the old "currentUser") has a redirectId that
            // matches the redirect user, then we want to initially sign in with the
            // new user object from result.
            // TODO(samgho): More thoroughly test all of this
            if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && (result === null || result === void 0 ? void 0 : result.user)) {
                futureCurrentUser = result.user;
                needsTocheckMiddleware = true;
            }
        }
        // If no user in persistence, there is no current user. Set to null.
        if (!futureCurrentUser) return this.directlySetCurrentUser(null);
        if (!futureCurrentUser._redirectEventId) {
            // This isn't a redirect link operation, we can reload and bail.
            // First though, ensure that we check the middleware is happy.
            if (needsTocheckMiddleware) try {
                await this.beforeStateQueue.runMiddleware(futureCurrentUser);
            } catch (e) {
                futureCurrentUser = previouslyStoredUser;
                // We know this is available since the bit is only set when the
                // resolver is available
                this._popupRedirectResolver._overrideRedirectResult(this, ()=>Promise.reject(e));
            }
            if (futureCurrentUser) return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);
            else return this.directlySetCurrentUser(null);
        }
        $809b25475cc45ca0$export$24baa2b76016ce0e(this._popupRedirectResolver, this, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        await this.getOrInitRedirectPersistenceManager();
        // If the redirect user's event ID matches the current user's event ID,
        // DO NOT reload the current user, otherwise they'll be cleared from storage.
        // This is important for the reauthenticateWithRedirect() flow.
        if (this.redirectUser && this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) return this.directlySetCurrentUser(futureCurrentUser);
        return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);
    }
    async tryRedirectSignIn(redirectResolver) {
        // The redirect user needs to be checked (and signed in if available)
        // during auth initialization. All of the normal sign in and link/reauth
        // flows call back into auth and push things onto the promise queue. We
        // need to await the result of the redirect sign in *inside the promise
        // queue*. This presents a problem: we run into deadlock. See:
        //    ┌> [Initialization] ─────┐
        //    ┌> [<other queue tasks>] │
        //    └─ [getRedirectResult] <─┘
        //    where [] are tasks on the queue and arrows denote awaits
        // Initialization will never complete because it's waiting on something
        // that's waiting for initialization to complete!
        //
        // Instead, this method calls getRedirectResult() (stored in
        // _completeRedirectFn) with an optional parameter that instructs all of
        // the underlying auth operations to skip anything that mutates auth state.
        let result = null;
        try {
            // We know this._popupRedirectResolver is set since redirectResolver
            // is passed in. The _completeRedirectFn expects the unwrapped extern.
            result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);
        } catch (e) {
            // Swallow any errors here; the code can retrieve them in
            // getRedirectResult().
            await this._setRedirectUser(null);
        }
        return result;
    }
    async reloadAndSetCurrentUserOrClear(user) {
        try {
            await $809b25475cc45ca0$var$_reloadWithoutSaving(user);
        } catch (e) {
            if ((e === null || e === void 0 ? void 0 : e.code) !== `auth/${"network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ }`) // Something's wrong with the user's token. Log them out and remove
            // them from storage
            return this.directlySetCurrentUser(null);
        }
        return this.directlySetCurrentUser(user);
    }
    useDeviceLanguage() {
        this.languageCode = $809b25475cc45ca0$var$_getUserLanguage();
    }
    async _delete() {
        this._deleted = true;
    }
    async updateCurrentUser(userExtern) {
        if ((0, $12572052cab62175$export$643c8bc6c389f34e)(this.app)) return Promise.reject($809b25475cc45ca0$var$_serverAppCurrentUserOperationNotSupportedError(this));
        // The public updateCurrentUser method needs to make a copy of the user,
        // and also check that the project matches
        const user = userExtern ? (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(userExtern) : null;
        if (user) $809b25475cc45ca0$export$24baa2b76016ce0e(user.auth.config.apiKey === this.config.apiKey, this, "invalid-user-token" /* AuthErrorCode.INVALID_AUTH */ );
        return this._updateCurrentUser(user && user._clone(this));
    }
    async _updateCurrentUser(user, skipBeforeStateCallbacks = false) {
        if (this._deleted) return;
        if (user) $809b25475cc45ca0$export$24baa2b76016ce0e(this.tenantId === user.tenantId, this, "tenant-id-mismatch" /* AuthErrorCode.TENANT_ID_MISMATCH */ );
        if (!skipBeforeStateCallbacks) await this.beforeStateQueue.runMiddleware(user);
        return this.queue(async ()=>{
            await this.directlySetCurrentUser(user);
            this.notifyAuthListeners();
        });
    }
    async signOut() {
        if ((0, $12572052cab62175$export$643c8bc6c389f34e)(this.app)) return Promise.reject($809b25475cc45ca0$var$_serverAppCurrentUserOperationNotSupportedError(this));
        // Run first, to block _setRedirectUser() if any callbacks fail.
        await this.beforeStateQueue.runMiddleware(null);
        // Clear the redirect user when signOut is called
        if (this.redirectPersistenceManager || this._popupRedirectResolver) await this._setRedirectUser(null);
        // Prevent callbacks from being called again in _updateCurrentUser, as
        // they were already called in the first line.
        return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */ true);
    }
    setPersistence(persistence) {
        if ((0, $12572052cab62175$export$643c8bc6c389f34e)(this.app)) return Promise.reject($809b25475cc45ca0$var$_serverAppCurrentUserOperationNotSupportedError(this));
        return this.queue(async ()=>{
            await this.assertedPersistence.setPersistence($809b25475cc45ca0$export$cf2f7c5792f80b46(persistence));
        });
    }
    _getRecaptchaConfig() {
        if (this.tenantId == null) return this._agentRecaptchaConfig;
        else return this._tenantRecaptchaConfigs[this.tenantId];
    }
    async validatePassword(password) {
        if (!this._getPasswordPolicyInternal()) await this._updatePasswordPolicy();
        // Password policy will be defined after fetching.
        const passwordPolicy = this._getPasswordPolicyInternal();
        // Check that the policy schema version is supported by the SDK.
        // TODO: Update this logic to use a max supported policy schema version once we have multiple schema versions.
        if (passwordPolicy.schemaVersion !== this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION) return Promise.reject(this._errorFactory.create("unsupported-password-policy-schema-version" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */ , {}));
        return passwordPolicy.validatePassword(password);
    }
    _getPasswordPolicyInternal() {
        if (this.tenantId === null) return this._projectPasswordPolicy;
        else return this._tenantPasswordPolicies[this.tenantId];
    }
    async _updatePasswordPolicy() {
        const response = await $809b25475cc45ca0$var$_getPasswordPolicy(this);
        const passwordPolicy = new $809b25475cc45ca0$var$PasswordPolicyImpl(response);
        if (this.tenantId === null) this._projectPasswordPolicy = passwordPolicy;
        else this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;
    }
    _getPersistenceType() {
        return this.assertedPersistence.persistence.type;
    }
    _getPersistence() {
        return this.assertedPersistence.persistence;
    }
    _updateErrorMap(errorMap) {
        this._errorFactory = new (0, $ee1ab2624407a779$export$3fa6e1b18a3b2d40)('auth', 'Firebase', errorMap());
    }
    onAuthStateChanged(nextOrObserver, error, completed) {
        return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);
    }
    beforeAuthStateChanged(callback, onAbort) {
        return this.beforeStateQueue.pushCallback(callback, onAbort);
    }
    onIdTokenChanged(nextOrObserver, error, completed) {
        return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);
    }
    authStateReady() {
        return new Promise((resolve, reject)=>{
            if (this.currentUser) resolve();
            else {
                const unsubscribe = this.onAuthStateChanged(()=>{
                    unsubscribe();
                    resolve();
                }, reject);
            }
        });
    }
    /**
     * Revokes the given access token. Currently only supports Apple OAuth access tokens.
     */ async revokeAccessToken(token) {
        if (this.currentUser) {
            const idToken = await this.currentUser.getIdToken();
            // Generalize this to accept other providers once supported.
            const request = {
                providerId: 'apple.com',
                tokenType: "ACCESS_TOKEN" /* TokenType.ACCESS_TOKEN */ ,
                token: token,
                idToken: idToken
            };
            if (this.tenantId != null) request.tenantId = this.tenantId;
            await $809b25475cc45ca0$var$revokeToken(this, request);
        }
    }
    toJSON() {
        var _a;
        return {
            apiKey: this.config.apiKey,
            authDomain: this.config.authDomain,
            appName: this.name,
            currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()
        };
    }
    async _setRedirectUser(user, popupRedirectResolver) {
        const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);
        return user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user);
    }
    async getOrInitRedirectPersistenceManager(popupRedirectResolver) {
        if (!this.redirectPersistenceManager) {
            const resolver = popupRedirectResolver && $809b25475cc45ca0$export$cf2f7c5792f80b46(popupRedirectResolver) || this._popupRedirectResolver;
            $809b25475cc45ca0$export$24baa2b76016ce0e(resolver, this, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
            this.redirectPersistenceManager = await $809b25475cc45ca0$var$PersistenceUserManager.create(this, [
                $809b25475cc45ca0$export$cf2f7c5792f80b46(resolver._redirectPersistence)
            ], "redirectUser" /* KeyName.REDIRECT_USER */ );
            this.redirectUser = await this.redirectPersistenceManager.getCurrentUser();
        }
        return this.redirectPersistenceManager;
    }
    async _redirectUserForId(id) {
        var _a, _b;
        // Make sure we've cleared any pending persistence actions if we're not in
        // the initializer
        if (this._isInitialized) await this.queue(async ()=>{});
        if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) return this._currentUser;
        if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) return this.redirectUser;
        return null;
    }
    async _persistUserIfCurrent(user) {
        if (user === this.currentUser) return this.queue(async ()=>this.directlySetCurrentUser(user));
    }
    /** Notifies listeners only if the user is current */ _notifyListenersIfCurrent(user) {
        if (user === this.currentUser) this.notifyAuthListeners();
    }
    _key() {
        return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;
    }
    _startProactiveRefresh() {
        this.isProactiveRefreshEnabled = true;
        if (this.currentUser) this._currentUser._startProactiveRefresh();
    }
    _stopProactiveRefresh() {
        this.isProactiveRefreshEnabled = false;
        if (this.currentUser) this._currentUser._stopProactiveRefresh();
    }
    /** Returns the current user cast as the internal type */ get _currentUser() {
        return this.currentUser;
    }
    notifyAuthListeners() {
        var _a, _b;
        if (!this._isInitialized) return;
        this.idTokenSubscription.next(this.currentUser);
        const currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;
        if (this.lastNotifiedUid !== currentUid) {
            this.lastNotifiedUid = currentUid;
            this.authStateSubscription.next(this.currentUser);
        }
    }
    registerStateListener(subscription, nextOrObserver, error, completed) {
        if (this._deleted) return ()=>{};
        const cb = typeof nextOrObserver === 'function' ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);
        let isUnsubscribed = false;
        const promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;
        $809b25475cc45ca0$export$24baa2b76016ce0e(promise, this, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        // The callback needs to be called asynchronously per the spec.
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        promise.then(()=>{
            if (isUnsubscribed) return;
            cb(this.currentUser);
        });
        if (typeof nextOrObserver === 'function') {
            const unsubscribe = subscription.addObserver(nextOrObserver, error, completed);
            return ()=>{
                isUnsubscribed = true;
                unsubscribe();
            };
        } else {
            const unsubscribe = subscription.addObserver(nextOrObserver);
            return ()=>{
                isUnsubscribed = true;
                unsubscribe();
            };
        }
    }
    /**
     * Unprotected (from race conditions) method to set the current user. This
     * should only be called from within a queued callback. This is necessary
     * because the queue shouldn't rely on another queued callback.
     */ async directlySetCurrentUser(user) {
        if (this.currentUser && this.currentUser !== user) this._currentUser._stopProactiveRefresh();
        if (user && this.isProactiveRefreshEnabled) user._startProactiveRefresh();
        this.currentUser = user;
        if (user) await this.assertedPersistence.setCurrentUser(user);
        else await this.assertedPersistence.removeCurrentUser();
    }
    queue(action) {
        // In case something errors, the callback still should be called in order
        // to keep the promise chain alive
        this.operations = this.operations.then(action, action);
        return this.operations;
    }
    get assertedPersistence() {
        $809b25475cc45ca0$export$24baa2b76016ce0e(this.persistenceManager, this, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        return this.persistenceManager;
    }
    _logFramework(framework) {
        if (!framework || this.frameworks.includes(framework)) return;
        this.frameworks.push(framework);
        // Sort alphabetically so that "FirebaseCore-web,FirebaseUI-web" and
        // "FirebaseUI-web,FirebaseCore-web" aren't viewed as different.
        this.frameworks.sort();
        this.clientVersion = $809b25475cc45ca0$export$faec65b429be379(this.config.clientPlatform, this._getFrameworks());
    }
    _getFrameworks() {
        return this.frameworks;
    }
    async _getAdditionalHeaders() {
        var _a;
        // Additional headers on every request
        const headers = {
            ["X-Client-Version" /* HttpHeader.X_CLIENT_VERSION */ ]: this.clientVersion
        };
        if (this.app.options.appId) headers["X-Firebase-gmpid" /* HttpHeader.X_FIREBASE_GMPID */ ] = this.app.options.appId;
        // If the heartbeat service exists, add the heartbeat string
        const heartbeatsHeader = await ((_a = this.heartbeatServiceProvider.getImmediate({
            optional: true
        })) === null || _a === void 0 ? void 0 : _a.getHeartbeatsHeader());
        if (heartbeatsHeader) headers["X-Firebase-Client" /* HttpHeader.X_FIREBASE_CLIENT */ ] = heartbeatsHeader;
        // If the App Check service exists, add the App Check token in the headers
        const appCheckToken = await this._getAppCheckToken();
        if (appCheckToken) headers["X-Firebase-AppCheck" /* HttpHeader.X_FIREBASE_APP_CHECK */ ] = appCheckToken;
        return headers;
    }
    async _getAppCheckToken() {
        var _a;
        if ((0, $12572052cab62175$export$643c8bc6c389f34e)(this.app) && this.app.settings.appCheckToken) return this.app.settings.appCheckToken;
        const appCheckTokenResult = await ((_a = this.appCheckServiceProvider.getImmediate({
            optional: true
        })) === null || _a === void 0 ? void 0 : _a.getToken());
        if (appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.error) // Context: appCheck.getToken() will never throw even if an error happened.
        // In the error case, a dummy token will be returned along with an error field describing
        // the error. In general, we shouldn't care about the error condition and just use
        // the token (actual or dummy) to send requests.
        $809b25475cc45ca0$var$_logWarn(`Error while retrieving App Check token: ${appCheckTokenResult.error}`);
        return appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.token;
    }
}
/**
 * Method to be used to cast down to our private implementation of Auth.
 * It will also handle unwrapping from the compat type if necessary
 *
 * @param auth Auth object passed in from developer
 */ function $809b25475cc45ca0$export$23ebac1979863676(auth) {
    return (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(auth);
}
/** Helper class to wrap subscriber logic */ class $809b25475cc45ca0$var$Subscription {
    constructor(auth){
        this.auth = auth;
        this.observer = null;
        this.addObserver = (0, $ee1ab2624407a779$export$364097d812234b3f)((observer)=>this.observer = observer);
    }
    get next() {
        $809b25475cc45ca0$export$24baa2b76016ce0e(this.observer, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        return this.observer.next.bind(this.observer);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ let $809b25475cc45ca0$var$externalJSProvider = {
    async loadJS () {
        throw new Error('Unable to load external scripts');
    },
    recaptchaV2Script: '',
    recaptchaEnterpriseScript: '',
    gapiScript: ''
};
function $809b25475cc45ca0$var$_setExternalJSProvider(p) {
    $809b25475cc45ca0$var$externalJSProvider = p;
}
function $809b25475cc45ca0$var$_loadJS(url) {
    return $809b25475cc45ca0$var$externalJSProvider.loadJS(url);
}
function $809b25475cc45ca0$var$_recaptchaV2ScriptUrl() {
    return $809b25475cc45ca0$var$externalJSProvider.recaptchaV2Script;
}
function $809b25475cc45ca0$var$_recaptchaEnterpriseScriptUrl() {
    return $809b25475cc45ca0$var$externalJSProvider.recaptchaEnterpriseScript;
}
function $809b25475cc45ca0$var$_gapiScriptUrl() {
    return $809b25475cc45ca0$var$externalJSProvider.gapiScript;
}
function $809b25475cc45ca0$var$_generateCallbackName(prefix) {
    return `__${prefix}${Math.floor(Math.random() * 1000000)}`;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $809b25475cc45ca0$var$_SOLVE_TIME_MS = 500;
const $809b25475cc45ca0$var$_EXPIRATION_TIME_MS = 60000;
const $809b25475cc45ca0$var$_WIDGET_ID_START = 1000000000000;
class $809b25475cc45ca0$var$MockReCaptcha {
    constructor(auth){
        this.auth = auth;
        this.counter = $809b25475cc45ca0$var$_WIDGET_ID_START;
        this._widgets = new Map();
    }
    render(container, parameters) {
        const id = this.counter;
        this._widgets.set(id, new $809b25475cc45ca0$var$MockWidget(container, this.auth.name, parameters || {}));
        this.counter++;
        return id;
    }
    reset(optWidgetId) {
        var _a;
        const id = optWidgetId || $809b25475cc45ca0$var$_WIDGET_ID_START;
        (_a = this._widgets.get(id)) === null || _a === void 0 || _a.delete();
        this._widgets.delete(id);
    }
    getResponse(optWidgetId) {
        var _a;
        const id = optWidgetId || $809b25475cc45ca0$var$_WIDGET_ID_START;
        return ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.getResponse()) || '';
    }
    async execute(optWidgetId) {
        var _a;
        const id = optWidgetId || $809b25475cc45ca0$var$_WIDGET_ID_START;
        (_a = this._widgets.get(id)) === null || _a === void 0 || _a.execute();
        return '';
    }
}
class $809b25475cc45ca0$var$MockGreCAPTCHATopLevel {
    constructor(){
        this.enterprise = new $809b25475cc45ca0$var$MockGreCAPTCHA();
    }
    ready(callback) {
        callback();
    }
    execute(// eslint-disable-next-line @typescript-eslint/no-unused-vars
    _siteKey, _options) {
        return Promise.resolve('token');
    }
    render(// eslint-disable-next-line @typescript-eslint/no-unused-vars
    _container, _parameters) {
        return '';
    }
}
class $809b25475cc45ca0$var$MockGreCAPTCHA {
    ready(callback) {
        callback();
    }
    execute(// eslint-disable-next-line @typescript-eslint/no-unused-vars
    _siteKey, _options) {
        return Promise.resolve('token');
    }
    render(// eslint-disable-next-line @typescript-eslint/no-unused-vars
    _container, _parameters) {
        return '';
    }
}
class $809b25475cc45ca0$var$MockWidget {
    constructor(containerOrId, appName, params){
        this.params = params;
        this.timerId = null;
        this.deleted = false;
        this.responseToken = null;
        this.clickHandler = ()=>{
            this.execute();
        };
        const container = typeof containerOrId === 'string' ? document.getElementById(containerOrId) : containerOrId;
        $809b25475cc45ca0$export$24baa2b76016ce0e(container, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ , {
            appName: appName
        });
        this.container = container;
        this.isVisible = this.params.size !== 'invisible';
        if (this.isVisible) this.execute();
        else this.container.addEventListener('click', this.clickHandler);
    }
    getResponse() {
        this.checkIfDeleted();
        return this.responseToken;
    }
    delete() {
        this.checkIfDeleted();
        this.deleted = true;
        if (this.timerId) {
            clearTimeout(this.timerId);
            this.timerId = null;
        }
        this.container.removeEventListener('click', this.clickHandler);
    }
    execute() {
        this.checkIfDeleted();
        if (this.timerId) return;
        this.timerId = window.setTimeout(()=>{
            this.responseToken = $809b25475cc45ca0$var$generateRandomAlphaNumericString(50);
            const { callback: callback, 'expired-callback': expiredCallback } = this.params;
            if (callback) try {
                callback(this.responseToken);
            } catch (e) {}
            this.timerId = window.setTimeout(()=>{
                this.timerId = null;
                this.responseToken = null;
                if (expiredCallback) try {
                    expiredCallback();
                } catch (e) {}
                if (this.isVisible) this.execute();
            }, $809b25475cc45ca0$var$_EXPIRATION_TIME_MS);
        }, $809b25475cc45ca0$var$_SOLVE_TIME_MS);
    }
    checkIfDeleted() {
        if (this.deleted) throw new Error('reCAPTCHA mock was already deleted!');
    }
}
function $809b25475cc45ca0$var$generateRandomAlphaNumericString(len) {
    const chars = [];
    const allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    for(let i = 0; i < len; i++)chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));
    return chars.join('');
}
/* eslint-disable @typescript-eslint/no-require-imports */ const $809b25475cc45ca0$var$RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';
const $809b25475cc45ca0$var$FAKE_TOKEN = 'NO_RECAPTCHA';
class $809b25475cc45ca0$var$RecaptchaEnterpriseVerifier {
    /**
     *
     * @param authExtern - The corresponding Firebase {@link Auth} instance.
     *
     */ constructor(authExtern){
        /**
         * Identifies the type of application verifier (e.g. "recaptcha-enterprise").
         */ this.type = $809b25475cc45ca0$var$RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;
        this.auth = $809b25475cc45ca0$export$23ebac1979863676(authExtern);
    }
    /**
     * Executes the verification process.
     *
     * @returns A Promise for a token that can be used to assert the validity of a request.
     */ async verify(action = 'verify', forceRefresh = false) {
        async function retrieveSiteKey(auth) {
            if (!forceRefresh) {
                if (auth.tenantId == null && auth._agentRecaptchaConfig != null) return auth._agentRecaptchaConfig.siteKey;
                if (auth.tenantId != null && auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined) return auth._tenantRecaptchaConfigs[auth.tenantId].siteKey;
            }
            return new Promise(async (resolve, reject)=>{
                $809b25475cc45ca0$var$getRecaptchaConfig(auth, {
                    clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ ,
                    version: "RECAPTCHA_ENTERPRISE" /* RecaptchaVersion.ENTERPRISE */ 
                }).then((response)=>{
                    if (response.recaptchaKey === undefined) reject(new Error('recaptcha Enterprise site key undefined'));
                    else {
                        const config = new $809b25475cc45ca0$var$RecaptchaConfig(response);
                        if (auth.tenantId == null) auth._agentRecaptchaConfig = config;
                        else auth._tenantRecaptchaConfigs[auth.tenantId] = config;
                        return resolve(config.siteKey);
                    }
                }).catch((error)=>{
                    reject(error);
                });
            });
        }
        function retrieveRecaptchaToken(siteKey, resolve, reject) {
            const grecaptcha = window.grecaptcha;
            if ($809b25475cc45ca0$var$isEnterprise(grecaptcha)) grecaptcha.enterprise.ready(()=>{
                grecaptcha.enterprise.execute(siteKey, {
                    action: action
                }).then((token)=>{
                    resolve(token);
                }).catch(()=>{
                    resolve($809b25475cc45ca0$var$FAKE_TOKEN);
                });
            });
            else reject(Error('No reCAPTCHA enterprise script loaded.'));
        }
        // Returns Promise for a mock token when appVerificationDisabledForTesting is true.
        if (this.auth.settings.appVerificationDisabledForTesting) {
            const mockRecaptcha = new $809b25475cc45ca0$var$MockGreCAPTCHATopLevel();
            return mockRecaptcha.execute('siteKey', {
                action: 'verify'
            });
        }
        return new Promise((resolve, reject)=>{
            retrieveSiteKey(this.auth).then((siteKey)=>{
                if (!forceRefresh && $809b25475cc45ca0$var$isEnterprise(window.grecaptcha)) retrieveRecaptchaToken(siteKey, resolve, reject);
                else {
                    if (typeof window === 'undefined') {
                        reject(new Error('RecaptchaVerifier is only supported in browser'));
                        return;
                    }
                    let url = $809b25475cc45ca0$var$_recaptchaEnterpriseScriptUrl();
                    if (url.length !== 0) url += siteKey;
                    $809b25475cc45ca0$var$_loadJS(url).then(()=>{
                        retrieveRecaptchaToken(siteKey, resolve, reject);
                    }).catch((error)=>{
                        reject(error);
                    });
                }
            }).catch((error)=>{
                reject(error);
            });
        });
    }
}
async function $809b25475cc45ca0$var$injectRecaptchaFields(auth, request, action, isCaptchaResp = false, isFakeToken = false) {
    const verifier = new $809b25475cc45ca0$var$RecaptchaEnterpriseVerifier(auth);
    let captchaResponse;
    if (isFakeToken) captchaResponse = $809b25475cc45ca0$var$FAKE_TOKEN;
    else try {
        captchaResponse = await verifier.verify(action);
    } catch (error) {
        captchaResponse = await verifier.verify(action, true);
    }
    const newRequest = Object.assign({}, request);
    if (action === "mfaSmsEnrollment" /* RecaptchaActionName.MFA_SMS_ENROLLMENT */  || action === "mfaSmsSignIn" /* RecaptchaActionName.MFA_SMS_SIGNIN */ ) {
        if ('phoneEnrollmentInfo' in newRequest) {
            const phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;
            const recaptchaToken = newRequest.phoneEnrollmentInfo.recaptchaToken;
            Object.assign(newRequest, {
                'phoneEnrollmentInfo': {
                    phoneNumber: phoneNumber,
                    recaptchaToken: recaptchaToken,
                    captchaResponse: captchaResponse,
                    'clientType': "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ ,
                    'recaptchaVersion': "RECAPTCHA_ENTERPRISE" /* RecaptchaVersion.ENTERPRISE */ 
                }
            });
        } else if ('phoneSignInInfo' in newRequest) {
            const recaptchaToken = newRequest.phoneSignInInfo.recaptchaToken;
            Object.assign(newRequest, {
                'phoneSignInInfo': {
                    recaptchaToken: recaptchaToken,
                    captchaResponse: captchaResponse,
                    'clientType': "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ ,
                    'recaptchaVersion': "RECAPTCHA_ENTERPRISE" /* RecaptchaVersion.ENTERPRISE */ 
                }
            });
        }
        return newRequest;
    }
    if (!isCaptchaResp) Object.assign(newRequest, {
        captchaResponse: captchaResponse
    });
    else Object.assign(newRequest, {
        'captchaResp': captchaResponse
    });
    Object.assign(newRequest, {
        'clientType': "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ 
    });
    Object.assign(newRequest, {
        'recaptchaVersion': "RECAPTCHA_ENTERPRISE" /* RecaptchaVersion.ENTERPRISE */ 
    });
    return newRequest;
}
async function $809b25475cc45ca0$var$handleRecaptchaFlow(authInstance, request, actionName, actionMethod, recaptchaAuthProvider) {
    var _a, _b;
    if (recaptchaAuthProvider === "EMAIL_PASSWORD_PROVIDER" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */ ) {
        if ((_a = authInstance._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.isProviderEnabled("EMAIL_PASSWORD_PROVIDER" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */ )) {
            const requestWithRecaptcha = await $809b25475cc45ca0$var$injectRecaptchaFields(authInstance, request, actionName, actionName === "getOobCode" /* RecaptchaActionName.GET_OOB_CODE */ );
            return actionMethod(authInstance, requestWithRecaptcha);
        } else return actionMethod(authInstance, request).catch(async (error)=>{
            if (error.code === `auth/${"missing-recaptcha-token" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */ }`) {
                console.log(`${actionName} is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.`);
                const requestWithRecaptcha = await $809b25475cc45ca0$var$injectRecaptchaFields(authInstance, request, actionName, actionName === "getOobCode" /* RecaptchaActionName.GET_OOB_CODE */ );
                return actionMethod(authInstance, requestWithRecaptcha);
            } else return Promise.reject(error);
        });
    } else if (recaptchaAuthProvider === "PHONE_PROVIDER" /* RecaptchaAuthProvider.PHONE_PROVIDER */ ) {
        if ((_b = authInstance._getRecaptchaConfig()) === null || _b === void 0 ? void 0 : _b.isProviderEnabled("PHONE_PROVIDER" /* RecaptchaAuthProvider.PHONE_PROVIDER */ )) {
            const requestWithRecaptcha = await $809b25475cc45ca0$var$injectRecaptchaFields(authInstance, request, actionName);
            return actionMethod(authInstance, requestWithRecaptcha).catch(async (error)=>{
                var _a;
                if (((_a = authInstance._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.getProviderEnforcementState("PHONE_PROVIDER" /* RecaptchaAuthProvider.PHONE_PROVIDER */ )) === "AUDIT" /* EnforcementState.AUDIT */ ) // AUDIT mode
                {
                    if (error.code === `auth/${"missing-recaptcha-token" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */ }` || error.code === `auth/${"invalid-app-credential" /* AuthErrorCode.INVALID_APP_CREDENTIAL */ }`) {
                        console.log(`Failed to verify with reCAPTCHA Enterprise. Automatically triggering the reCAPTCHA v2 flow to complete the ${actionName} flow.`);
                        // reCAPTCHA Enterprise token is missing or reCAPTCHA Enterprise token
                        // check fails.
                        // Fallback to reCAPTCHA v2 flow.
                        const requestWithRecaptchaFields = await $809b25475cc45ca0$var$injectRecaptchaFields(authInstance, request, actionName, false, true // isFakeToken
                        );
                        // This will call the PhoneApiCaller to fetch and inject reCAPTCHA v2 token.
                        return actionMethod(authInstance, requestWithRecaptchaFields);
                    }
                }
                // ENFORCE mode or AUDIT mode with any other error.
                return Promise.reject(error);
            });
        } else {
            // Do reCAPTCHA v2 flow.
            const requestWithRecaptchaFields = await $809b25475cc45ca0$var$injectRecaptchaFields(authInstance, request, actionName, false, true // isFakeToken
            );
            // This will call the PhoneApiCaller to fetch and inject v2 token.
            return actionMethod(authInstance, requestWithRecaptchaFields);
        }
    } else return Promise.reject(recaptchaAuthProvider + ' provider is not supported.');
}
async function $809b25475cc45ca0$var$_initializeRecaptchaConfig(auth) {
    const authInternal = $809b25475cc45ca0$export$23ebac1979863676(auth);
    const response = await $809b25475cc45ca0$var$getRecaptchaConfig(authInternal, {
        clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ ,
        version: "RECAPTCHA_ENTERPRISE" /* RecaptchaVersion.ENTERPRISE */ 
    });
    const config = new $809b25475cc45ca0$var$RecaptchaConfig(response);
    if (authInternal.tenantId == null) authInternal._agentRecaptchaConfig = config;
    else authInternal._tenantRecaptchaConfigs[authInternal.tenantId] = config;
    if (config.isAnyProviderEnabled()) {
        const verifier = new $809b25475cc45ca0$var$RecaptchaEnterpriseVerifier(authInternal);
        verifier.verify();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Initializes an {@link Auth} instance with fine-grained control over
 * {@link Dependencies}.
 *
 * @remarks
 *
 * This function allows more control over the {@link Auth} instance than
 * {@link getAuth}. `getAuth` uses platform-specific defaults to supply
 * the {@link Dependencies}. In general, `getAuth` is the easiest way to
 * initialize Auth and works for most use cases. Use `initializeAuth` if you
 * need control over which persistence layer is used, or to minimize bundle
 * size if you're not using either `signInWithPopup` or `signInWithRedirect`.
 *
 * For example, if your app only uses anonymous accounts and you only want
 * accounts saved for the current session, initialize `Auth` with:
 *
 * ```js
 * const auth = initializeAuth(app, {
 *   persistence: browserSessionPersistence,
 *   popupRedirectResolver: undefined,
 * });
 * ```
 *
 * @public
 */ function $809b25475cc45ca0$export$3466f893ebf79586(app, deps) {
    const provider = (0, $12572052cab62175$export$fa0d6da0f5838f50)(app, 'auth');
    if (provider.isInitialized()) {
        const auth = provider.getImmediate();
        const initialOptions = provider.getOptions();
        if ((0, $ee1ab2624407a779$export$9cb4719e2e525b7a)(initialOptions, deps !== null && deps !== void 0 ? deps : {})) return auth;
        else $809b25475cc45ca0$export$28f7fcd39efa255(auth, "already-initialized" /* AuthErrorCode.ALREADY_INITIALIZED */ );
    }
    const auth = provider.initialize({
        options: deps
    });
    return auth;
}
function $809b25475cc45ca0$var$_initializeAuthInstance(auth, deps) {
    const persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];
    const hierarchy = (Array.isArray(persistence) ? persistence : [
        persistence
    ]).map($809b25475cc45ca0$export$cf2f7c5792f80b46);
    if (deps === null || deps === void 0 ? void 0 : deps.errorMap) auth._updateErrorMap(deps.errorMap);
    // This promise is intended to float; auth initialization happens in the
    // background, meanwhile the auth object may be used by the app.
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    auth._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);
}
/**
 * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production
 * Firebase Auth services.
 *
 * @remarks
 * This must be called synchronously immediately following the first call to
 * {@link initializeAuth}.  Do not use with production credentials as emulator
 * traffic is not encrypted.
 *
 *
 * @example
 * ```javascript
 * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').
 * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to
 * `true` to disable the warning banner attached to the DOM.
 *
 * @public
 */ function $809b25475cc45ca0$export$61196ced6d74a310(auth, url, options) {
    const authInternal = $809b25475cc45ca0$export$23ebac1979863676(auth);
    $809b25475cc45ca0$export$24baa2b76016ce0e(/^https?:\/\//.test(url), authInternal, "invalid-emulator-scheme" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */ );
    const disableWarnings = !!(options === null || options === void 0 ? void 0 : options.disableWarnings);
    const protocol = $809b25475cc45ca0$var$extractProtocol(url);
    const { host: host, port: port } = $809b25475cc45ca0$var$extractHostAndPort(url);
    const portStr = port === null ? '' : `:${port}`;
    // Always replace path with "/" (even if input url had no path at all, or had a different one).
    const emulator = {
        url: `${protocol}//${host}${portStr}/`
    };
    const emulatorConfig = Object.freeze({
        host: host,
        port: port,
        protocol: protocol.replace(':', ''),
        options: Object.freeze({
            disableWarnings: disableWarnings
        })
    });
    // There are a few scenarios to guard against if the Auth instance has already started:
    if (!authInternal._canInitEmulator) {
        // Applications may not initialize the emulator for the first time if Auth has already started
        // to make network requests.
        $809b25475cc45ca0$export$24baa2b76016ce0e(authInternal.config.emulator && authInternal.emulatorConfig, authInternal, "emulator-config-failed" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */ );
        // Applications may not alter the configuration of the emulator (aka pass a different config)
        // once Auth has started to make network requests.
        $809b25475cc45ca0$export$24baa2b76016ce0e((0, $ee1ab2624407a779$export$9cb4719e2e525b7a)(emulator, authInternal.config.emulator) && (0, $ee1ab2624407a779$export$9cb4719e2e525b7a)(emulatorConfig, authInternal.emulatorConfig), authInternal, "emulator-config-failed" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */ );
        // It's valid, however, to invoke connectAuthEmulator() after Auth has started making
        // connections, so long as the config matches the existing config. This results in a no-op.
        return;
    }
    authInternal.config.emulator = emulator;
    authInternal.emulatorConfig = emulatorConfig;
    authInternal.settings.appVerificationDisabledForTesting = true;
    // Workaround to get cookies in Firebase Studio
    if ((0, $ee1ab2624407a779$export$5b4d24b45140ad90)(host)) {
        (0, $ee1ab2624407a779$export$c0f0d0ce4283a937)(`${protocol}//${host}${portStr}`);
        (0, $ee1ab2624407a779$export$fd3d2954543183b1)('Auth', true);
    } else if (!disableWarnings) $809b25475cc45ca0$var$emitEmulatorWarning();
}
function $809b25475cc45ca0$var$extractProtocol(url) {
    const protocolEnd = url.indexOf(':');
    return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);
}
function $809b25475cc45ca0$var$extractHostAndPort(url) {
    const protocol = $809b25475cc45ca0$var$extractProtocol(url);
    const authority = /(\/\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.
    if (!authority) return {
        host: '',
        port: null
    };
    const hostAndPort = authority[2].split('@').pop() || ''; // Strip out "username:password@".
    const bracketedIPv6 = /^(\[[^\]]+\])(:|$)/.exec(hostAndPort);
    if (bracketedIPv6) {
        const host = bracketedIPv6[1];
        return {
            host: host,
            port: $809b25475cc45ca0$var$parsePort(hostAndPort.substr(host.length + 1))
        };
    } else {
        const [host, port] = hostAndPort.split(':');
        return {
            host: host,
            port: $809b25475cc45ca0$var$parsePort(port)
        };
    }
}
function $809b25475cc45ca0$var$parsePort(portStr) {
    if (!portStr) return null;
    const port = Number(portStr);
    if (isNaN(port)) return null;
    return port;
}
function $809b25475cc45ca0$var$emitEmulatorWarning() {
    function attachBanner() {
        const el = document.createElement('p');
        const sty = el.style;
        el.innerText = 'Running in emulator mode. Do not use with production credentials.';
        sty.position = 'fixed';
        sty.width = '100%';
        sty.backgroundColor = '#ffffff';
        sty.border = '.1em solid #000000';
        sty.color = '#b50000';
        sty.bottom = '0px';
        sty.left = '0px';
        sty.margin = '0px';
        sty.zIndex = '10000';
        sty.textAlign = 'center';
        el.classList.add('firebase-emulator-warning');
        document.body.appendChild(el);
    }
    if (typeof console !== 'undefined' && typeof console.info === 'function') console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials.");
    if (typeof window !== 'undefined' && typeof document !== 'undefined') {
        if (document.readyState === 'loading') window.addEventListener('DOMContentLoaded', attachBanner);
        else attachBanner();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Interface that represents the credentials returned by an {@link AuthProvider}.
 *
 * @remarks
 * Implementations specify the details about each auth provider's credential requirements.
 *
 * @public
 */ class $809b25475cc45ca0$export$3a1a48c8f6ef640e {
    /** @internal */ constructor(/**
     * The authentication provider ID for the credential.
     *
     * @remarks
     * For example, 'facebook.com', or 'google.com'.
     */ providerId, /**
     * The authentication sign in method for the credential.
     *
     * @remarks
     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or
     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method
     * identifier as returned in {@link fetchSignInMethodsForEmail}.
     */ signInMethod){
        this.providerId = providerId;
        this.signInMethod = signInMethod;
    }
    /**
     * Returns a JSON-serializable representation of this object.
     *
     * @returns a JSON-serializable representation of this object.
     */ toJSON() {
        return $809b25475cc45ca0$var$debugFail('not implemented');
    }
    /** @internal */ _getIdTokenResponse(_auth) {
        return $809b25475cc45ca0$var$debugFail('not implemented');
    }
    /** @internal */ _linkToIdToken(_auth, _idToken) {
        return $809b25475cc45ca0$var$debugFail('not implemented');
    }
    /** @internal */ _getReauthenticationResolver(_auth) {
        return $809b25475cc45ca0$var$debugFail('not implemented');
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function $809b25475cc45ca0$var$resetPassword(auth, request) {
    return $809b25475cc45ca0$var$_performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:resetPassword" /* Endpoint.RESET_PASSWORD */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
}
async function $809b25475cc45ca0$var$updateEmailPassword(auth, request) {
    return $809b25475cc45ca0$var$_performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:update" /* Endpoint.SET_ACCOUNT_INFO */ , request);
}
// Used for linking an email/password account to an existing idToken. Uses the same request/response
// format as updateEmailPassword.
async function $809b25475cc45ca0$var$linkEmailPassword(auth, request) {
    return $809b25475cc45ca0$var$_performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:signUp" /* Endpoint.SIGN_UP */ , request);
}
async function $809b25475cc45ca0$var$applyActionCode$1(auth, request) {
    return $809b25475cc45ca0$var$_performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:update" /* Endpoint.SET_ACCOUNT_INFO */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function $809b25475cc45ca0$var$signInWithPassword(auth, request) {
    return $809b25475cc45ca0$var$_performSignInRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:signInWithPassword" /* Endpoint.SIGN_IN_WITH_PASSWORD */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
}
async function $809b25475cc45ca0$var$sendOobCode(auth, request) {
    return $809b25475cc45ca0$var$_performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:sendOobCode" /* Endpoint.SEND_OOB_CODE */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
}
async function $809b25475cc45ca0$var$sendEmailVerification$1(auth, request) {
    return $809b25475cc45ca0$var$sendOobCode(auth, request);
}
async function $809b25475cc45ca0$var$sendPasswordResetEmail$1(auth, request) {
    return $809b25475cc45ca0$var$sendOobCode(auth, request);
}
async function $809b25475cc45ca0$var$sendSignInLinkToEmail$1(auth, request) {
    return $809b25475cc45ca0$var$sendOobCode(auth, request);
}
async function $809b25475cc45ca0$var$verifyAndChangeEmail(auth, request) {
    return $809b25475cc45ca0$var$sendOobCode(auth, request);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function $809b25475cc45ca0$var$signInWithEmailLink$1(auth, request) {
    return $809b25475cc45ca0$var$_performSignInRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:signInWithEmailLink" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
}
async function $809b25475cc45ca0$var$signInWithEmailLinkForLinking(auth, request) {
    return $809b25475cc45ca0$var$_performSignInRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:signInWithEmailLink" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Interface that represents the credentials returned by {@link EmailAuthProvider} for
 * {@link ProviderId}.PASSWORD
 *
 * @remarks
 * Covers both {@link SignInMethod}.EMAIL_PASSWORD and
 * {@link SignInMethod}.EMAIL_LINK.
 *
 * @public
 */ class $809b25475cc45ca0$export$a07804094c3ecf2d extends $809b25475cc45ca0$export$3a1a48c8f6ef640e {
    /** @internal */ constructor(/** @internal */ _email, /** @internal */ _password, signInMethod, /** @internal */ _tenantId = null){
        super("password" /* ProviderId.PASSWORD */ , signInMethod);
        this._email = _email;
        this._password = _password;
        this._tenantId = _tenantId;
    }
    /** @internal */ static _fromEmailAndPassword(email, password) {
        return new $809b25475cc45ca0$export$a07804094c3ecf2d(email, password, "password" /* SignInMethod.EMAIL_PASSWORD */ );
    }
    /** @internal */ static _fromEmailAndCode(email, oobCode, tenantId = null) {
        return new $809b25475cc45ca0$export$a07804094c3ecf2d(email, oobCode, "emailLink" /* SignInMethod.EMAIL_LINK */ , tenantId);
    }
    /** {@inheritdoc AuthCredential.toJSON} */ toJSON() {
        return {
            email: this._email,
            password: this._password,
            signInMethod: this.signInMethod,
            tenantId: this._tenantId
        };
    }
    /**
     * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.
     *
     * @param json - Either `object` or the stringified representation of the object. When string is
     * provided, `JSON.parse` would be called first.
     *
     * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.
     */ static fromJSON(json) {
        const obj = typeof json === 'string' ? JSON.parse(json) : json;
        if ((obj === null || obj === void 0 ? void 0 : obj.email) && (obj === null || obj === void 0 ? void 0 : obj.password)) {
            if (obj.signInMethod === "password" /* SignInMethod.EMAIL_PASSWORD */ ) return this._fromEmailAndPassword(obj.email, obj.password);
            else if (obj.signInMethod === "emailLink" /* SignInMethod.EMAIL_LINK */ ) return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);
        }
        return null;
    }
    /** @internal */ async _getIdTokenResponse(auth) {
        switch(this.signInMethod){
            case "password" /* SignInMethod.EMAIL_PASSWORD */ :
                const request = {
                    returnSecureToken: true,
                    email: this._email,
                    password: this._password,
                    clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ 
                };
                return $809b25475cc45ca0$var$handleRecaptchaFlow(auth, request, "signInWithPassword" /* RecaptchaActionName.SIGN_IN_WITH_PASSWORD */ , $809b25475cc45ca0$var$signInWithPassword, "EMAIL_PASSWORD_PROVIDER" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */ );
            case "emailLink" /* SignInMethod.EMAIL_LINK */ :
                return $809b25475cc45ca0$var$signInWithEmailLink$1(auth, {
                    email: this._email,
                    oobCode: this._password
                });
            default:
                $809b25475cc45ca0$export$28f7fcd39efa255(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        }
    }
    /** @internal */ async _linkToIdToken(auth, idToken) {
        switch(this.signInMethod){
            case "password" /* SignInMethod.EMAIL_PASSWORD */ :
                const request = {
                    idToken: idToken,
                    returnSecureToken: true,
                    email: this._email,
                    password: this._password,
                    clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ 
                };
                return $809b25475cc45ca0$var$handleRecaptchaFlow(auth, request, "signUpPassword" /* RecaptchaActionName.SIGN_UP_PASSWORD */ , $809b25475cc45ca0$var$linkEmailPassword, "EMAIL_PASSWORD_PROVIDER" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */ );
            case "emailLink" /* SignInMethod.EMAIL_LINK */ :
                return $809b25475cc45ca0$var$signInWithEmailLinkForLinking(auth, {
                    idToken: idToken,
                    email: this._email,
                    oobCode: this._password
                });
            default:
                $809b25475cc45ca0$export$28f7fcd39efa255(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        }
    }
    /** @internal */ _getReauthenticationResolver(auth) {
        return this._getIdTokenResponse(auth);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function $809b25475cc45ca0$var$signInWithIdp(auth, request) {
    return $809b25475cc45ca0$var$_performSignInRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:signInWithIdp" /* Endpoint.SIGN_IN_WITH_IDP */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $809b25475cc45ca0$var$IDP_REQUEST_URI$1 = 'http://localhost';
/**
 * Represents the OAuth credentials returned by an {@link OAuthProvider}.
 *
 * @remarks
 * Implementations specify the details about each auth provider's credential requirements.
 *
 * @public
 */ class $809b25475cc45ca0$export$3722cfe417b6ed86 extends $809b25475cc45ca0$export$3a1a48c8f6ef640e {
    constructor(){
        super(...arguments);
        this.pendingToken = null;
    }
    /** @internal */ static _fromParams(params) {
        const cred = new $809b25475cc45ca0$export$3722cfe417b6ed86(params.providerId, params.signInMethod);
        if (params.idToken || params.accessToken) {
            // OAuth 2 and either ID token or access token.
            if (params.idToken) cred.idToken = params.idToken;
            if (params.accessToken) cred.accessToken = params.accessToken;
            // Add nonce if available and no pendingToken is present.
            if (params.nonce && !params.pendingToken) cred.nonce = params.nonce;
            if (params.pendingToken) cred.pendingToken = params.pendingToken;
        } else if (params.oauthToken && params.oauthTokenSecret) {
            // OAuth 1 and OAuth token with token secret
            cred.accessToken = params.oauthToken;
            cred.secret = params.oauthTokenSecret;
        } else $809b25475cc45ca0$export$28f7fcd39efa255("argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        return cred;
    }
    /** {@inheritdoc AuthCredential.toJSON}  */ toJSON() {
        return {
            idToken: this.idToken,
            accessToken: this.accessToken,
            secret: this.secret,
            nonce: this.nonce,
            pendingToken: this.pendingToken,
            providerId: this.providerId,
            signInMethod: this.signInMethod
        };
    }
    /**
     * Static method to deserialize a JSON representation of an object into an
     * {@link  AuthCredential}.
     *
     * @param json - Input can be either Object or the stringified representation of the object.
     * When string is provided, JSON.parse would be called first.
     *
     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
     */ static fromJSON(json) {
        const obj = typeof json === 'string' ? JSON.parse(json) : json;
        const { providerId: providerId, signInMethod: signInMethod } = obj, rest = (0, $b7b472ff0da46e08$export$3c9a16f847548506)(obj, [
            "providerId",
            "signInMethod"
        ]);
        if (!providerId || !signInMethod) return null;
        const cred = new $809b25475cc45ca0$export$3722cfe417b6ed86(providerId, signInMethod);
        cred.idToken = rest.idToken || undefined;
        cred.accessToken = rest.accessToken || undefined;
        cred.secret = rest.secret;
        cred.nonce = rest.nonce;
        cred.pendingToken = rest.pendingToken || null;
        return cred;
    }
    /** @internal */ _getIdTokenResponse(auth) {
        const request = this.buildRequest();
        return $809b25475cc45ca0$var$signInWithIdp(auth, request);
    }
    /** @internal */ _linkToIdToken(auth, idToken) {
        const request = this.buildRequest();
        request.idToken = idToken;
        return $809b25475cc45ca0$var$signInWithIdp(auth, request);
    }
    /** @internal */ _getReauthenticationResolver(auth) {
        const request = this.buildRequest();
        request.autoCreate = false;
        return $809b25475cc45ca0$var$signInWithIdp(auth, request);
    }
    buildRequest() {
        const request = {
            requestUri: $809b25475cc45ca0$var$IDP_REQUEST_URI$1,
            returnSecureToken: true
        };
        if (this.pendingToken) request.pendingToken = this.pendingToken;
        else {
            const postBody = {};
            if (this.idToken) postBody['id_token'] = this.idToken;
            if (this.accessToken) postBody['access_token'] = this.accessToken;
            if (this.secret) postBody['oauth_token_secret'] = this.secret;
            postBody['providerId'] = this.providerId;
            if (this.nonce && !this.pendingToken) postBody['nonce'] = this.nonce;
            request.postBody = (0, $ee1ab2624407a779$export$ac4103b836844853)(postBody);
        }
        return request;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function $809b25475cc45ca0$var$sendPhoneVerificationCode(auth, request) {
    return $809b25475cc45ca0$var$_performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:sendVerificationCode" /* Endpoint.SEND_VERIFICATION_CODE */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
}
async function $809b25475cc45ca0$var$signInWithPhoneNumber$1(auth, request) {
    return $809b25475cc45ca0$var$_performSignInRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:signInWithPhoneNumber" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
}
async function $809b25475cc45ca0$var$linkWithPhoneNumber$1(auth, request) {
    const response = await $809b25475cc45ca0$var$_performSignInRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:signInWithPhoneNumber" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
    if (response.temporaryProof) throw $809b25475cc45ca0$var$_makeTaggedError(auth, "account-exists-with-different-credential" /* AuthErrorCode.NEED_CONFIRMATION */ , response);
    return response;
}
const $809b25475cc45ca0$var$VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {
    ["USER_NOT_FOUND" /* ServerError.USER_NOT_FOUND */ ]: "user-not-found" /* AuthErrorCode.USER_DELETED */ 
};
async function $809b25475cc45ca0$var$verifyPhoneNumberForExisting(auth, request) {
    const apiRequest = Object.assign(Object.assign({}, request), {
        operation: 'REAUTH'
    });
    return $809b25475cc45ca0$var$_performSignInRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:signInWithPhoneNumber" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, apiRequest), $809b25475cc45ca0$var$VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents the credentials returned by {@link PhoneAuthProvider}.
 *
 * @public
 */ class $809b25475cc45ca0$export$3a6d5c9ae78a2c08 extends $809b25475cc45ca0$export$3a1a48c8f6ef640e {
    constructor(params){
        super("phone" /* ProviderId.PHONE */ , "phone" /* SignInMethod.PHONE */ );
        this.params = params;
    }
    /** @internal */ static _fromVerification(verificationId, verificationCode) {
        return new $809b25475cc45ca0$export$3a6d5c9ae78a2c08({
            verificationId: verificationId,
            verificationCode: verificationCode
        });
    }
    /** @internal */ static _fromTokenResponse(phoneNumber, temporaryProof) {
        return new $809b25475cc45ca0$export$3a6d5c9ae78a2c08({
            phoneNumber: phoneNumber,
            temporaryProof: temporaryProof
        });
    }
    /** @internal */ _getIdTokenResponse(auth) {
        return $809b25475cc45ca0$var$signInWithPhoneNumber$1(auth, this._makeVerificationRequest());
    }
    /** @internal */ _linkToIdToken(auth, idToken) {
        return $809b25475cc45ca0$var$linkWithPhoneNumber$1(auth, Object.assign({
            idToken: idToken
        }, this._makeVerificationRequest()));
    }
    /** @internal */ _getReauthenticationResolver(auth) {
        return $809b25475cc45ca0$var$verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());
    }
    /** @internal */ _makeVerificationRequest() {
        const { temporaryProof: temporaryProof, phoneNumber: phoneNumber, verificationId: verificationId, verificationCode: verificationCode } = this.params;
        if (temporaryProof && phoneNumber) return {
            temporaryProof: temporaryProof,
            phoneNumber: phoneNumber
        };
        return {
            sessionInfo: verificationId,
            code: verificationCode
        };
    }
    /** {@inheritdoc AuthCredential.toJSON} */ toJSON() {
        const obj = {
            providerId: this.providerId
        };
        if (this.params.phoneNumber) obj.phoneNumber = this.params.phoneNumber;
        if (this.params.temporaryProof) obj.temporaryProof = this.params.temporaryProof;
        if (this.params.verificationCode) obj.verificationCode = this.params.verificationCode;
        if (this.params.verificationId) obj.verificationId = this.params.verificationId;
        return obj;
    }
    /** Generates a phone credential based on a plain object or a JSON string. */ static fromJSON(json) {
        if (typeof json === 'string') json = JSON.parse(json);
        const { verificationId: verificationId, verificationCode: verificationCode, phoneNumber: phoneNumber, temporaryProof: temporaryProof } = json;
        if (!verificationCode && !verificationId && !phoneNumber && !temporaryProof) return null;
        return new $809b25475cc45ca0$export$3a6d5c9ae78a2c08({
            verificationId: verificationId,
            verificationCode: verificationCode,
            phoneNumber: phoneNumber,
            temporaryProof: temporaryProof
        });
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Maps the mode string in action code URL to Action Code Info operation.
 *
 * @param mode
 */ function $809b25475cc45ca0$var$parseMode(mode) {
    switch(mode){
        case 'recoverEmail':
            return "RECOVER_EMAIL" /* ActionCodeOperation.RECOVER_EMAIL */ ;
        case 'resetPassword':
            return "PASSWORD_RESET" /* ActionCodeOperation.PASSWORD_RESET */ ;
        case 'signIn':
            return "EMAIL_SIGNIN" /* ActionCodeOperation.EMAIL_SIGNIN */ ;
        case 'verifyEmail':
            return "VERIFY_EMAIL" /* ActionCodeOperation.VERIFY_EMAIL */ ;
        case 'verifyAndChangeEmail':
            return "VERIFY_AND_CHANGE_EMAIL" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ;
        case 'revertSecondFactorAddition':
            return "REVERT_SECOND_FACTOR_ADDITION" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */ ;
        default:
            return null;
    }
}
/**
 * Helper to parse FDL links
 *
 * @param url
 */ function $809b25475cc45ca0$var$parseDeepLink(url) {
    const link = (0, $ee1ab2624407a779$export$c1271ca4c8a70741)((0, $ee1ab2624407a779$export$1a8408415472d8ed)(url))['link'];
    // Double link case (automatic redirect).
    const doubleDeepLink = link ? (0, $ee1ab2624407a779$export$c1271ca4c8a70741)((0, $ee1ab2624407a779$export$1a8408415472d8ed)(link))['deep_link_id'] : null;
    // iOS custom scheme links.
    const iOSDeepLink = (0, $ee1ab2624407a779$export$c1271ca4c8a70741)((0, $ee1ab2624407a779$export$1a8408415472d8ed)(url))['deep_link_id'];
    const iOSDoubleDeepLink = iOSDeepLink ? (0, $ee1ab2624407a779$export$c1271ca4c8a70741)((0, $ee1ab2624407a779$export$1a8408415472d8ed)(iOSDeepLink))['link'] : null;
    return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;
}
/**
 * A utility class to parse email action URLs such as password reset, email verification,
 * email link sign in, etc.
 *
 * @public
 */ class $809b25475cc45ca0$export$3b513254972cfc9c {
    /**
     * @param actionLink - The link from which to extract the URL.
     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
     *
     * @internal
     */ constructor(actionLink){
        var _a, _b, _c, _d, _e, _f;
        const searchParams = (0, $ee1ab2624407a779$export$c1271ca4c8a70741)((0, $ee1ab2624407a779$export$1a8408415472d8ed)(actionLink));
        const apiKey = (_a = searchParams["apiKey" /* QueryField.API_KEY */ ]) !== null && _a !== void 0 ? _a : null;
        const code = (_b = searchParams["oobCode" /* QueryField.CODE */ ]) !== null && _b !== void 0 ? _b : null;
        const operation = $809b25475cc45ca0$var$parseMode((_c = searchParams["mode" /* QueryField.MODE */ ]) !== null && _c !== void 0 ? _c : null);
        // Validate API key, code and mode.
        $809b25475cc45ca0$export$24baa2b76016ce0e(apiKey && code && operation, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        this.apiKey = apiKey;
        this.operation = operation;
        this.code = code;
        this.continueUrl = (_d = searchParams["continueUrl" /* QueryField.CONTINUE_URL */ ]) !== null && _d !== void 0 ? _d : null;
        this.languageCode = (_e = searchParams["lang" /* QueryField.LANGUAGE_CODE */ ]) !== null && _e !== void 0 ? _e : null;
        this.tenantId = (_f = searchParams["tenantId" /* QueryField.TENANT_ID */ ]) !== null && _f !== void 0 ? _f : null;
    }
    /**
     * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,
     * otherwise returns null.
     *
     * @param link  - The email action link string.
     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
     *
     * @public
     */ static parseLink(link) {
        const actionLink = $809b25475cc45ca0$var$parseDeepLink(link);
        try {
            return new $809b25475cc45ca0$export$3b513254972cfc9c(actionLink);
        } catch (_a) {
            return null;
        }
    }
}
/**
 * Parses the email action link string and returns an {@link ActionCodeURL} if
 * the link is valid, otherwise returns null.
 *
 * @public
 */ function $809b25475cc45ca0$export$21579262ef46735b(link) {
    return $809b25475cc45ca0$export$3b513254972cfc9c.parseLink(link);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating {@link EmailAuthCredential}.
 *
 * @public
 */ class $809b25475cc45ca0$export$71cec2538cb2c617 {
    constructor(){
        /**
         * Always set to {@link ProviderId}.PASSWORD, even for email link.
         */ this.providerId = $809b25475cc45ca0$export$71cec2538cb2c617.PROVIDER_ID;
    }
    /**
     * Initialize an {@link AuthCredential} using an email and password.
     *
     * @example
     * ```javascript
     * const authCredential = EmailAuthProvider.credential(email, password);
     * const userCredential = await signInWithCredential(auth, authCredential);
     * ```
     *
     * @example
     * ```javascript
     * const userCredential = await signInWithEmailAndPassword(auth, email, password);
     * ```
     *
     * @param email - Email address.
     * @param password - User account password.
     * @returns The auth provider credential.
     */ static credential(email, password) {
        return $809b25475cc45ca0$export$a07804094c3ecf2d._fromEmailAndPassword(email, password);
    }
    /**
     * Initialize an {@link AuthCredential} using an email and an email link after a sign in with
     * email link operation.
     *
     * @example
     * ```javascript
     * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);
     * const userCredential = await signInWithCredential(auth, authCredential);
     * ```
     *
     * @example
     * ```javascript
     * await sendSignInLinkToEmail(auth, email);
     * // Obtain emailLink from user.
     * const userCredential = await signInWithEmailLink(auth, email, emailLink);
     * ```
     *
     * @param auth - The {@link Auth} instance used to verify the link.
     * @param email - Email address.
     * @param emailLink - Sign-in email link.
     * @returns - The auth provider credential.
     */ static credentialWithLink(email, emailLink) {
        const actionCodeUrl = $809b25475cc45ca0$export$3b513254972cfc9c.parseLink(emailLink);
        $809b25475cc45ca0$export$24baa2b76016ce0e(actionCodeUrl, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        return $809b25475cc45ca0$export$a07804094c3ecf2d._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);
    }
}
/**
 * Always set to {@link ProviderId}.PASSWORD, even for email link.
 */ $809b25475cc45ca0$export$71cec2538cb2c617.PROVIDER_ID = "password" /* ProviderId.PASSWORD */ ;
/**
 * Always set to {@link SignInMethod}.EMAIL_PASSWORD.
 */ $809b25475cc45ca0$export$71cec2538cb2c617.EMAIL_PASSWORD_SIGN_IN_METHOD = "password" /* SignInMethod.EMAIL_PASSWORD */ ;
/**
 * Always set to {@link SignInMethod}.EMAIL_LINK.
 */ $809b25475cc45ca0$export$71cec2538cb2c617.EMAIL_LINK_SIGN_IN_METHOD = "emailLink" /* SignInMethod.EMAIL_LINK */ ;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The base class for all Federated providers (OAuth (including OIDC), SAML).
 *
 * This class is not meant to be instantiated directly.
 *
 * @public
 */ class $809b25475cc45ca0$var$FederatedAuthProvider {
    /**
     * Constructor for generic OAuth providers.
     *
     * @param providerId - Provider for which credentials should be generated.
     */ constructor(providerId){
        this.providerId = providerId;
        /** @internal */ this.defaultLanguageCode = null;
        /** @internal */ this.customParameters = {};
    }
    /**
     * Set the language gode.
     *
     * @param languageCode - language code
     */ setDefaultLanguage(languageCode) {
        this.defaultLanguageCode = languageCode;
    }
    /**
     * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in
     * operations.
     *
     * @remarks
     * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,
     * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.
     *
     * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.
     */ setCustomParameters(customOAuthParameters) {
        this.customParameters = customOAuthParameters;
        return this;
    }
    /**
     * Retrieve the current list of {@link CustomParameters}.
     */ getCustomParameters() {
        return this.customParameters;
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Common code to all OAuth providers. This is separate from the
 * {@link OAuthProvider} so that child providers (like
 * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.
 * Instead, they rely on a static `credential` method.
 */ class $809b25475cc45ca0$var$BaseOAuthProvider extends $809b25475cc45ca0$var$FederatedAuthProvider {
    constructor(){
        super(...arguments);
        /** @internal */ this.scopes = [];
    }
    /**
     * Add an OAuth scope to the credential.
     *
     * @param scope - Provider OAuth scope to add.
     */ addScope(scope) {
        // If not already added, add scope to list.
        if (!this.scopes.includes(scope)) this.scopes.push(scope);
        return this;
    }
    /**
     * Retrieve the current list of OAuth scopes.
     */ getScopes() {
        return [
            ...this.scopes
        ];
    }
}
/**
 * Provider for generating generic {@link OAuthCredential}.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new OAuthProvider('google.com');
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('profile');
 * provider.addScope('email');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a OAuth Access Token for the provider.
 *   const credential = provider.credentialFromResult(auth, result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new OAuthProvider('google.com');
 * provider.addScope('profile');
 * provider.addScope('email');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a OAuth Access Token for the provider.
 * const credential = provider.credentialFromResult(auth, result);
 * const token = credential.accessToken;
 * ```
 * @public
 */ class $809b25475cc45ca0$export$71511d61b312f219 extends $809b25475cc45ca0$var$BaseOAuthProvider {
    /**
     * Creates an {@link OAuthCredential} from a JSON string or a plain object.
     * @param json - A plain object or a JSON string
     */ static credentialFromJSON(json) {
        const obj = typeof json === 'string' ? JSON.parse(json) : json;
        $809b25475cc45ca0$export$24baa2b76016ce0e('providerId' in obj && 'signInMethod' in obj, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        return $809b25475cc45ca0$export$3722cfe417b6ed86._fromParams(obj);
    }
    /**
     * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.
     *
     * @remarks
     * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of
     * the raw nonce must match the nonce field in the ID token.
     *
     * @example
     * ```javascript
     * // `googleUser` from the onsuccess Google Sign In callback.
     * // Initialize a generate OAuth provider with a `google.com` providerId.
     * const provider = new OAuthProvider('google.com');
     * const credential = provider.credential({
     *   idToken: googleUser.getAuthResponse().id_token,
     * });
     * const result = await signInWithCredential(credential);
     * ```
     *
     * @param params - Either the options object containing the ID token, access token and raw nonce
     * or the ID token string.
     */ credential(params) {
        return this._credential(Object.assign(Object.assign({}, params), {
            nonce: params.rawNonce
        }));
    }
    /** An internal credential method that accepts more permissive options */ _credential(params) {
        $809b25475cc45ca0$export$24baa2b76016ce0e(params.idToken || params.accessToken, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        // For OAuthCredential, sign in method is same as providerId.
        return $809b25475cc45ca0$export$3722cfe417b6ed86._fromParams(Object.assign(Object.assign({}, params), {
            providerId: this.providerId,
            signInMethod: this.providerId
        }));
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return $809b25475cc45ca0$export$71511d61b312f219.oauthCredentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return $809b25475cc45ca0$export$71511d61b312f219.oauthCredentialFromTaggedObject(error.customData || {});
    }
    static oauthCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) return null;
        const { oauthIdToken: oauthIdToken, oauthAccessToken: oauthAccessToken, oauthTokenSecret: oauthTokenSecret, pendingToken: pendingToken, nonce: nonce, providerId: providerId } = tokenResponse;
        if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) return null;
        if (!providerId) return null;
        try {
            return new $809b25475cc45ca0$export$71511d61b312f219(providerId)._credential({
                idToken: oauthIdToken,
                accessToken: oauthAccessToken,
                nonce: nonce,
                pendingToken: pendingToken
            });
        } catch (e) {
            return null;
        }
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('user_birthday');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Facebook Access Token.
 *   const credential = FacebookAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new FacebookAuthProvider();
 * provider.addScope('user_birthday');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Facebook Access Token.
 * const credential = FacebookAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * ```
 *
 * @public
 */ class $809b25475cc45ca0$export$78acf4525d8a74c4 extends $809b25475cc45ca0$var$BaseOAuthProvider {
    constructor(){
        super("facebook.com" /* ProviderId.FACEBOOK */ );
    }
    /**
     * Creates a credential for Facebook.
     *
     * @example
     * ```javascript
     * // `event` from the Facebook auth.authResponseChange callback.
     * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);
     * const result = await signInWithCredential(credential);
     * ```
     *
     * @param accessToken - Facebook access token.
     */ static credential(accessToken) {
        return $809b25475cc45ca0$export$3722cfe417b6ed86._fromParams({
            providerId: $809b25475cc45ca0$export$78acf4525d8a74c4.PROVIDER_ID,
            signInMethod: $809b25475cc45ca0$export$78acf4525d8a74c4.FACEBOOK_SIGN_IN_METHOD,
            accessToken: accessToken
        });
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return $809b25475cc45ca0$export$78acf4525d8a74c4.credentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return $809b25475cc45ca0$export$78acf4525d8a74c4.credentialFromTaggedObject(error.customData || {});
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) return null;
        if (!tokenResponse.oauthAccessToken) return null;
        try {
            return $809b25475cc45ca0$export$78acf4525d8a74c4.credential(tokenResponse.oauthAccessToken);
        } catch (_a) {
            return null;
        }
    }
}
/** Always set to {@link SignInMethod}.FACEBOOK. */ $809b25475cc45ca0$export$78acf4525d8a74c4.FACEBOOK_SIGN_IN_METHOD = "facebook.com" /* SignInMethod.FACEBOOK */ ;
/** Always set to {@link ProviderId}.FACEBOOK. */ $809b25475cc45ca0$export$78acf4525d8a74c4.PROVIDER_ID = "facebook.com" /* ProviderId.FACEBOOK */ ;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new GoogleAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('profile');
 * provider.addScope('email');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Google Access Token.
 *   const credential = GoogleAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new GoogleAuthProvider();
 * provider.addScope('profile');
 * provider.addScope('email');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Google Access Token.
 * const credential = GoogleAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * ```
 *
 * @public
 */ class $809b25475cc45ca0$export$8743009a87fcb00f extends $809b25475cc45ca0$var$BaseOAuthProvider {
    constructor(){
        super("google.com" /* ProviderId.GOOGLE */ );
        this.addScope('profile');
    }
    /**
     * Creates a credential for Google. At least one of ID token and access token is required.
     *
     * @example
     * ```javascript
     * // \`googleUser\` from the onsuccess Google Sign In callback.
     * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);
     * const result = await signInWithCredential(credential);
     * ```
     *
     * @param idToken - Google ID token.
     * @param accessToken - Google access token.
     */ static credential(idToken, accessToken) {
        return $809b25475cc45ca0$export$3722cfe417b6ed86._fromParams({
            providerId: $809b25475cc45ca0$export$8743009a87fcb00f.PROVIDER_ID,
            signInMethod: $809b25475cc45ca0$export$8743009a87fcb00f.GOOGLE_SIGN_IN_METHOD,
            idToken: idToken,
            accessToken: accessToken
        });
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return $809b25475cc45ca0$export$8743009a87fcb00f.credentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return $809b25475cc45ca0$export$8743009a87fcb00f.credentialFromTaggedObject(error.customData || {});
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) return null;
        const { oauthIdToken: oauthIdToken, oauthAccessToken: oauthAccessToken } = tokenResponse;
        if (!oauthIdToken && !oauthAccessToken) // This could be an oauth 1 credential or a phone credential
        return null;
        try {
            return $809b25475cc45ca0$export$8743009a87fcb00f.credential(oauthIdToken, oauthAccessToken);
        } catch (_a) {
            return null;
        }
    }
}
/** Always set to {@link SignInMethod}.GOOGLE. */ $809b25475cc45ca0$export$8743009a87fcb00f.GOOGLE_SIGN_IN_METHOD = "google.com" /* SignInMethod.GOOGLE */ ;
/** Always set to {@link ProviderId}.GOOGLE. */ $809b25475cc45ca0$export$8743009a87fcb00f.PROVIDER_ID = "google.com" /* ProviderId.GOOGLE */ ;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.
 *
 * @remarks
 * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use
 * the {@link signInWithPopup} handler:
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new GithubAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('repo');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a GitHub Access Token.
 *   const credential = GithubAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new GithubAuthProvider();
 * provider.addScope('repo');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a GitHub Access Token.
 * const credential = GithubAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * ```
 * @public
 */ class $809b25475cc45ca0$export$dc98b0b04f4c7758 extends $809b25475cc45ca0$var$BaseOAuthProvider {
    constructor(){
        super("github.com" /* ProviderId.GITHUB */ );
    }
    /**
     * Creates a credential for GitHub.
     *
     * @param accessToken - GitHub access token.
     */ static credential(accessToken) {
        return $809b25475cc45ca0$export$3722cfe417b6ed86._fromParams({
            providerId: $809b25475cc45ca0$export$dc98b0b04f4c7758.PROVIDER_ID,
            signInMethod: $809b25475cc45ca0$export$dc98b0b04f4c7758.GITHUB_SIGN_IN_METHOD,
            accessToken: accessToken
        });
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return $809b25475cc45ca0$export$dc98b0b04f4c7758.credentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return $809b25475cc45ca0$export$dc98b0b04f4c7758.credentialFromTaggedObject(error.customData || {});
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) return null;
        if (!tokenResponse.oauthAccessToken) return null;
        try {
            return $809b25475cc45ca0$export$dc98b0b04f4c7758.credential(tokenResponse.oauthAccessToken);
        } catch (_a) {
            return null;
        }
    }
}
/** Always set to {@link SignInMethod}.GITHUB. */ $809b25475cc45ca0$export$dc98b0b04f4c7758.GITHUB_SIGN_IN_METHOD = "github.com" /* SignInMethod.GITHUB */ ;
/** Always set to {@link ProviderId}.GITHUB. */ $809b25475cc45ca0$export$dc98b0b04f4c7758.PROVIDER_ID = "github.com" /* ProviderId.GITHUB */ ;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $809b25475cc45ca0$var$IDP_REQUEST_URI = 'http://localhost';
/**
 * @public
 */ class $809b25475cc45ca0$export$738ab4df8bf92ae9 extends $809b25475cc45ca0$export$3a1a48c8f6ef640e {
    /** @internal */ constructor(providerId, pendingToken){
        super(providerId, providerId);
        this.pendingToken = pendingToken;
    }
    /** @internal */ _getIdTokenResponse(auth) {
        const request = this.buildRequest();
        return $809b25475cc45ca0$var$signInWithIdp(auth, request);
    }
    /** @internal */ _linkToIdToken(auth, idToken) {
        const request = this.buildRequest();
        request.idToken = idToken;
        return $809b25475cc45ca0$var$signInWithIdp(auth, request);
    }
    /** @internal */ _getReauthenticationResolver(auth) {
        const request = this.buildRequest();
        request.autoCreate = false;
        return $809b25475cc45ca0$var$signInWithIdp(auth, request);
    }
    /** {@inheritdoc AuthCredential.toJSON}  */ toJSON() {
        return {
            signInMethod: this.signInMethod,
            providerId: this.providerId,
            pendingToken: this.pendingToken
        };
    }
    /**
     * Static method to deserialize a JSON representation of an object into an
     * {@link  AuthCredential}.
     *
     * @param json - Input can be either Object or the stringified representation of the object.
     * When string is provided, JSON.parse would be called first.
     *
     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
     */ static fromJSON(json) {
        const obj = typeof json === 'string' ? JSON.parse(json) : json;
        const { providerId: providerId, signInMethod: signInMethod, pendingToken: pendingToken } = obj;
        if (!providerId || !signInMethod || !pendingToken || providerId !== signInMethod) return null;
        return new $809b25475cc45ca0$export$738ab4df8bf92ae9(providerId, pendingToken);
    }
    /**
     * Helper static method to avoid exposing the constructor to end users.
     *
     * @internal
     */ static _create(providerId, pendingToken) {
        return new $809b25475cc45ca0$export$738ab4df8bf92ae9(providerId, pendingToken);
    }
    buildRequest() {
        return {
            requestUri: $809b25475cc45ca0$var$IDP_REQUEST_URI,
            returnSecureToken: true,
            pendingToken: this.pendingToken
        };
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $809b25475cc45ca0$var$SAML_PROVIDER_PREFIX = 'saml.';
/**
 * An {@link AuthProvider} for SAML.
 *
 * @public
 */ class $809b25475cc45ca0$export$3d8c2f653ac9d0b9 extends $809b25475cc45ca0$var$FederatedAuthProvider {
    /**
     * Constructor. The providerId must start with "saml."
     * @param providerId - SAML provider ID.
     */ constructor(providerId){
        $809b25475cc45ca0$export$24baa2b76016ce0e(providerId.startsWith($809b25475cc45ca0$var$SAML_PROVIDER_PREFIX), "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        super(providerId);
    }
    /**
     * Generates an {@link AuthCredential} from a {@link UserCredential} after a
     * successful SAML flow completes.
     *
     * @remarks
     *
     * For example, to get an {@link AuthCredential}, you could write the
     * following code:
     *
     * ```js
     * const userCredential = await signInWithPopup(auth, samlProvider);
     * const credential = SAMLAuthProvider.credentialFromResult(userCredential);
     * ```
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return $809b25475cc45ca0$export$3d8c2f653ac9d0b9.samlCredentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return $809b25475cc45ca0$export$3d8c2f653ac9d0b9.samlCredentialFromTaggedObject(error.customData || {});
    }
    /**
     * Creates an {@link AuthCredential} from a JSON string or a plain object.
     * @param json - A plain object or a JSON string
     */ static credentialFromJSON(json) {
        const credential = $809b25475cc45ca0$export$738ab4df8bf92ae9.fromJSON(json);
        $809b25475cc45ca0$export$24baa2b76016ce0e(credential, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        return credential;
    }
    static samlCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) return null;
        const { pendingToken: pendingToken, providerId: providerId } = tokenResponse;
        if (!pendingToken || !providerId) return null;
        try {
            return $809b25475cc45ca0$export$738ab4df8bf92ae9._create(providerId, pendingToken);
        } catch (e) {
            return null;
        }
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new TwitterAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Twitter Access Token and Secret.
 *   const credential = TwitterAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 *   const secret = credential.secret;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new TwitterAuthProvider();
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Twitter Access Token and Secret.
 * const credential = TwitterAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * const secret = credential.secret;
 * ```
 *
 * @public
 */ class $809b25475cc45ca0$export$34aec0b863436764 extends $809b25475cc45ca0$var$BaseOAuthProvider {
    constructor(){
        super("twitter.com" /* ProviderId.TWITTER */ );
    }
    /**
     * Creates a credential for Twitter.
     *
     * @param token - Twitter access token.
     * @param secret - Twitter secret.
     */ static credential(token, secret) {
        return $809b25475cc45ca0$export$3722cfe417b6ed86._fromParams({
            providerId: $809b25475cc45ca0$export$34aec0b863436764.PROVIDER_ID,
            signInMethod: $809b25475cc45ca0$export$34aec0b863436764.TWITTER_SIGN_IN_METHOD,
            oauthToken: token,
            oauthTokenSecret: secret
        });
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return $809b25475cc45ca0$export$34aec0b863436764.credentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return $809b25475cc45ca0$export$34aec0b863436764.credentialFromTaggedObject(error.customData || {});
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) return null;
        const { oauthAccessToken: oauthAccessToken, oauthTokenSecret: oauthTokenSecret } = tokenResponse;
        if (!oauthAccessToken || !oauthTokenSecret) return null;
        try {
            return $809b25475cc45ca0$export$34aec0b863436764.credential(oauthAccessToken, oauthTokenSecret);
        } catch (_a) {
            return null;
        }
    }
}
/** Always set to {@link SignInMethod}.TWITTER. */ $809b25475cc45ca0$export$34aec0b863436764.TWITTER_SIGN_IN_METHOD = "twitter.com" /* SignInMethod.TWITTER */ ;
/** Always set to {@link ProviderId}.TWITTER. */ $809b25475cc45ca0$export$34aec0b863436764.PROVIDER_ID = "twitter.com" /* ProviderId.TWITTER */ ;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function $809b25475cc45ca0$var$signUp(auth, request) {
    return $809b25475cc45ca0$var$_performSignInRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:signUp" /* Endpoint.SIGN_UP */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $809b25475cc45ca0$var$UserCredentialImpl {
    constructor(params){
        this.user = params.user;
        this.providerId = params.providerId;
        this._tokenResponse = params._tokenResponse;
        this.operationType = params.operationType;
    }
    static async _fromIdTokenResponse(auth, operationType, idTokenResponse, isAnonymous = false) {
        const user = await $809b25475cc45ca0$export$91477dc880baac21._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);
        const providerId = $809b25475cc45ca0$var$providerIdForResponse(idTokenResponse);
        const userCred = new $809b25475cc45ca0$var$UserCredentialImpl({
            user: user,
            providerId: providerId,
            _tokenResponse: idTokenResponse,
            operationType: operationType
        });
        return userCred;
    }
    static async _forOperation(user, operationType, response) {
        await user._updateTokensIfNecessary(response, /* reload */ true);
        const providerId = $809b25475cc45ca0$var$providerIdForResponse(response);
        return new $809b25475cc45ca0$var$UserCredentialImpl({
            user: user,
            providerId: providerId,
            _tokenResponse: response,
            operationType: operationType
        });
    }
}
function $809b25475cc45ca0$var$providerIdForResponse(response) {
    if (response.providerId) return response.providerId;
    if ('phoneNumber' in response) return "phone" /* ProviderId.PHONE */ ;
    return null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Asynchronously signs in as an anonymous user.
 *
 * @remarks
 * If there is already an anonymous user signed in, that user will be returned; otherwise, a
 * new anonymous user identity will be created and returned.
 *
 * This method is not supported by {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * @param auth - The {@link Auth} instance.
 *
 * @public
 */ async function $809b25475cc45ca0$export$3c2fa207a37baaea(auth) {
    var _a;
    if ((0, $12572052cab62175$export$643c8bc6c389f34e)(auth.app)) return Promise.reject($809b25475cc45ca0$var$_serverAppCurrentUserOperationNotSupportedError(auth));
    const authInternal = $809b25475cc45ca0$export$23ebac1979863676(auth);
    await authInternal._initializationPromise;
    if ((_a = authInternal.currentUser) === null || _a === void 0 ? void 0 : _a.isAnonymous) // If an anonymous user is already signed in, no need to sign them in again.
    return new $809b25475cc45ca0$var$UserCredentialImpl({
        user: authInternal.currentUser,
        providerId: null,
        operationType: "signIn" /* OperationType.SIGN_IN */ 
    });
    const response = await $809b25475cc45ca0$var$signUp(authInternal, {
        returnSecureToken: true
    });
    const userCredential = await $809b25475cc45ca0$var$UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* OperationType.SIGN_IN */ , response, true);
    await authInternal._updateCurrentUser(userCredential.user);
    return userCredential;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $809b25475cc45ca0$var$MultiFactorError extends (0, $ee1ab2624407a779$export$dd24e9cd51226c56) {
    constructor(auth, error, operationType, user){
        var _a;
        super(error.code, error.message);
        this.operationType = operationType;
        this.user = user;
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(this, $809b25475cc45ca0$var$MultiFactorError.prototype);
        this.customData = {
            appName: auth.name,
            tenantId: (_a = auth.tenantId) !== null && _a !== void 0 ? _a : undefined,
            _serverResponse: error.customData._serverResponse,
            operationType: operationType
        };
    }
    static _fromErrorAndOperation(auth, error, operationType, user) {
        return new $809b25475cc45ca0$var$MultiFactorError(auth, error, operationType, user);
    }
}
function $809b25475cc45ca0$var$_processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {
    const idTokenProvider = operationType === "reauthenticate" /* OperationType.REAUTHENTICATE */  ? credential._getReauthenticationResolver(auth) : credential._getIdTokenResponse(auth);
    return idTokenProvider.catch((error)=>{
        if (error.code === `auth/${"multi-factor-auth-required" /* AuthErrorCode.MFA_REQUIRED */ }`) throw $809b25475cc45ca0$var$MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);
        throw error;
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Takes a set of UserInfo provider data and converts it to a set of names
 */ function $809b25475cc45ca0$var$providerDataAsNames(providerData) {
    return new Set(providerData.map(({ providerId: providerId })=>providerId).filter((pid)=>!!pid));
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Unlinks a provider from a user account.
 *
 * @param user - The user.
 * @param providerId - The provider to unlink.
 *
 * @public
 */ async function $809b25475cc45ca0$export$8a5498727ef6be21(user, providerId) {
    const userInternal = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(user);
    await $809b25475cc45ca0$var$_assertLinkedStatus(true, userInternal, providerId);
    const { providerUserInfo: providerUserInfo } = await $809b25475cc45ca0$var$deleteLinkedAccounts(userInternal.auth, {
        idToken: await userInternal.getIdToken(),
        deleteProvider: [
            providerId
        ]
    });
    const providersLeft = $809b25475cc45ca0$var$providerDataAsNames(providerUserInfo || []);
    userInternal.providerData = userInternal.providerData.filter((pd)=>providersLeft.has(pd.providerId));
    if (!providersLeft.has("phone" /* ProviderId.PHONE */ )) userInternal.phoneNumber = null;
    await userInternal.auth._persistUserIfCurrent(userInternal);
    return userInternal;
}
async function $809b25475cc45ca0$var$_link$1(user, credential, bypassAuthState = false) {
    const response = await $809b25475cc45ca0$var$_logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);
    return $809b25475cc45ca0$var$UserCredentialImpl._forOperation(user, "link" /* OperationType.LINK */ , response);
}
async function $809b25475cc45ca0$var$_assertLinkedStatus(expected, user, provider) {
    await $809b25475cc45ca0$var$_reloadWithoutSaving(user);
    const providerIds = $809b25475cc45ca0$var$providerDataAsNames(user.providerData);
    const code = expected === false ? "provider-already-linked" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */  : "no-such-provider" /* AuthErrorCode.NO_SUCH_PROVIDER */ ;
    $809b25475cc45ca0$export$24baa2b76016ce0e(providerIds.has(provider) === expected, user.auth, code);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function $809b25475cc45ca0$var$_reauthenticate(user, credential, bypassAuthState = false) {
    const { auth: auth } = user;
    if ((0, $12572052cab62175$export$643c8bc6c389f34e)(auth.app)) return Promise.reject($809b25475cc45ca0$var$_serverAppCurrentUserOperationNotSupportedError(auth));
    const operationType = "reauthenticate" /* OperationType.REAUTHENTICATE */ ;
    try {
        const response = await $809b25475cc45ca0$var$_logoutIfInvalidated(user, $809b25475cc45ca0$var$_processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);
        $809b25475cc45ca0$export$24baa2b76016ce0e(response.idToken, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        const parsed = $809b25475cc45ca0$var$_parseToken(response.idToken);
        $809b25475cc45ca0$export$24baa2b76016ce0e(parsed, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        const { sub: localId } = parsed;
        $809b25475cc45ca0$export$24baa2b76016ce0e(user.uid === localId, auth, "user-mismatch" /* AuthErrorCode.USER_MISMATCH */ );
        return $809b25475cc45ca0$var$UserCredentialImpl._forOperation(user, operationType, response);
    } catch (e) {
        // Convert user deleted error into user mismatch
        if ((e === null || e === void 0 ? void 0 : e.code) === `auth/${"user-not-found" /* AuthErrorCode.USER_DELETED */ }`) $809b25475cc45ca0$export$28f7fcd39efa255(auth, "user-mismatch" /* AuthErrorCode.USER_MISMATCH */ );
        throw e;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function $809b25475cc45ca0$var$_signInWithCredential(auth, credential, bypassAuthState = false) {
    if ((0, $12572052cab62175$export$643c8bc6c389f34e)(auth.app)) return Promise.reject($809b25475cc45ca0$var$_serverAppCurrentUserOperationNotSupportedError(auth));
    const operationType = "signIn" /* OperationType.SIGN_IN */ ;
    const response = await $809b25475cc45ca0$var$_processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);
    const userCredential = await $809b25475cc45ca0$var$UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);
    if (!bypassAuthState) await auth._updateCurrentUser(userCredential.user);
    return userCredential;
}
/**
 * Asynchronously signs in with the given credentials.
 *
 * @remarks
 * An {@link AuthProvider} can be used to generate the credential.
 *
 * This method is not supported by {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * @param auth - The {@link Auth} instance.
 * @param credential - The auth credential.
 *
 * @public
 */ async function $809b25475cc45ca0$export$ce26c07117d59d6a(auth, credential) {
    return $809b25475cc45ca0$var$_signInWithCredential($809b25475cc45ca0$export$23ebac1979863676(auth), credential);
}
/**
 * Links the user account with the given credentials.
 *
 * @remarks
 * An {@link AuthProvider} can be used to generate the credential.
 *
 * @param user - The user.
 * @param credential - The auth credential.
 *
 * @public
 */ async function $809b25475cc45ca0$export$6559d589eb85fbb6(user, credential) {
    const userInternal = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(user);
    await $809b25475cc45ca0$var$_assertLinkedStatus(false, userInternal, credential.providerId);
    return $809b25475cc45ca0$var$_link$1(userInternal, credential);
}
/**
 * Re-authenticates a user using a fresh credential.
 *
 * @remarks
 * Use before operations such as {@link updatePassword} that require tokens from recent sign-in
 * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error
 * or a `TOKEN_EXPIRED` error.
 *
 * This method is not supported on any {@link User} signed in by {@link Auth} instances
 * created with a {@link @firebase/app#FirebaseServerApp}.
 *
 * @param user - The user.
 * @param credential - The auth credential.
 *
 * @public
 */ async function $809b25475cc45ca0$export$efca4cbe5dd06740(user, credential) {
    return $809b25475cc45ca0$var$_reauthenticate((0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(user), credential);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function $809b25475cc45ca0$var$signInWithCustomToken$1(auth, request) {
    return $809b25475cc45ca0$var$_performSignInRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:signInWithCustomToken" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Asynchronously signs in using a custom token.
 *
 * @remarks
 * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must
 * be generated by an auth backend using the
 * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}
 * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .
 *
 * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.
 *
 * This method is not supported by {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * @param auth - The {@link Auth} instance.
 * @param customToken - The custom token to sign in with.
 *
 * @public
 */ async function $809b25475cc45ca0$export$a8550f7dbe79f93a(auth, customToken) {
    if ((0, $12572052cab62175$export$643c8bc6c389f34e)(auth.app)) return Promise.reject($809b25475cc45ca0$var$_serverAppCurrentUserOperationNotSupportedError(auth));
    const authInternal = $809b25475cc45ca0$export$23ebac1979863676(auth);
    const response = await $809b25475cc45ca0$var$signInWithCustomToken$1(authInternal, {
        token: customToken,
        returnSecureToken: true
    });
    const cred = await $809b25475cc45ca0$var$UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* OperationType.SIGN_IN */ , response);
    await authInternal._updateCurrentUser(cred.user);
    return cred;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $809b25475cc45ca0$var$MultiFactorInfoImpl {
    constructor(factorId, response){
        this.factorId = factorId;
        this.uid = response.mfaEnrollmentId;
        this.enrollmentTime = new Date(response.enrolledAt).toUTCString();
        this.displayName = response.displayName;
    }
    static _fromServerResponse(auth, enrollment) {
        if ('phoneInfo' in enrollment) return $809b25475cc45ca0$var$PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);
        else if ('totpInfo' in enrollment) return $809b25475cc45ca0$var$TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);
        return $809b25475cc45ca0$export$28f7fcd39efa255(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    }
}
class $809b25475cc45ca0$var$PhoneMultiFactorInfoImpl extends $809b25475cc45ca0$var$MultiFactorInfoImpl {
    constructor(response){
        super("phone" /* FactorId.PHONE */ , response);
        this.phoneNumber = response.phoneInfo;
    }
    static _fromServerResponse(_auth, enrollment) {
        return new $809b25475cc45ca0$var$PhoneMultiFactorInfoImpl(enrollment);
    }
}
class $809b25475cc45ca0$var$TotpMultiFactorInfoImpl extends $809b25475cc45ca0$var$MultiFactorInfoImpl {
    constructor(response){
        super("totp" /* FactorId.TOTP */ , response);
    }
    static _fromServerResponse(_auth, enrollment) {
        return new $809b25475cc45ca0$var$TotpMultiFactorInfoImpl(enrollment);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $809b25475cc45ca0$var$_setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {
    var _a;
    $809b25475cc45ca0$export$24baa2b76016ce0e(((_a = actionCodeSettings.url) === null || _a === void 0 ? void 0 : _a.length) > 0, auth, "invalid-continue-uri" /* AuthErrorCode.INVALID_CONTINUE_URI */ );
    $809b25475cc45ca0$export$24baa2b76016ce0e(typeof actionCodeSettings.dynamicLinkDomain === 'undefined' || actionCodeSettings.dynamicLinkDomain.length > 0, auth, "invalid-dynamic-link-domain" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */ );
    $809b25475cc45ca0$export$24baa2b76016ce0e(typeof actionCodeSettings.linkDomain === 'undefined' || actionCodeSettings.linkDomain.length > 0, auth, "invalid-hosting-link-domain" /* AuthErrorCode.INVALID_HOSTING_LINK_DOMAIN */ );
    request.continueUrl = actionCodeSettings.url;
    request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;
    request.linkDomain = actionCodeSettings.linkDomain;
    request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;
    if (actionCodeSettings.iOS) {
        $809b25475cc45ca0$export$24baa2b76016ce0e(actionCodeSettings.iOS.bundleId.length > 0, auth, "missing-ios-bundle-id" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */ );
        request.iOSBundleId = actionCodeSettings.iOS.bundleId;
    }
    if (actionCodeSettings.android) {
        $809b25475cc45ca0$export$24baa2b76016ce0e(actionCodeSettings.android.packageName.length > 0, auth, "missing-android-pkg-name" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */ );
        request.androidInstallApp = actionCodeSettings.android.installApp;
        request.androidMinimumVersionCode = actionCodeSettings.android.minimumVersion;
        request.androidPackageName = actionCodeSettings.android.packageName;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Updates the password policy cached in the {@link Auth} instance if a policy is already
 * cached for the project or tenant.
 *
 * @remarks
 * We only fetch the password policy if the password did not meet policy requirements and
 * there is an existing policy cached. A developer must call validatePassword at least
 * once for the cache to be automatically updated.
 *
 * @param auth - The {@link Auth} instance.
 *
 * @private
 */ async function $809b25475cc45ca0$var$recachePasswordPolicy(auth) {
    const authInternal = $809b25475cc45ca0$export$23ebac1979863676(auth);
    if (authInternal._getPasswordPolicyInternal()) await authInternal._updatePasswordPolicy();
}
/**
 * Sends a password reset email to the given email address. This method does not throw an error when
 * there's no user account with the given email address and
 * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}
 * is enabled.
 *
 * @remarks
 * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in
 * the email sent to the user, along with the new password specified by the user.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);
 * // Obtain code from user.
 * await confirmPasswordReset('user@example.com', code);
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */ async function $809b25475cc45ca0$export$2e2af4578d910ddf(auth, email, actionCodeSettings) {
    const authInternal = $809b25475cc45ca0$export$23ebac1979863676(auth);
    const request = {
        requestType: "PASSWORD_RESET" /* ActionCodeOperation.PASSWORD_RESET */ ,
        email: email,
        clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ 
    };
    if (actionCodeSettings) $809b25475cc45ca0$var$_setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);
    await $809b25475cc45ca0$var$handleRecaptchaFlow(authInternal, request, "getOobCode" /* RecaptchaActionName.GET_OOB_CODE */ , $809b25475cc45ca0$var$sendPasswordResetEmail$1, "EMAIL_PASSWORD_PROVIDER" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */ );
}
/**
 * Completes the password reset process, given a confirmation code and new password.
 *
 * @param auth - The {@link Auth} instance.
 * @param oobCode - A confirmation code sent to the user.
 * @param newPassword - The new password.
 *
 * @public
 */ async function $809b25475cc45ca0$export$a93c5207d687da10(auth, oobCode, newPassword) {
    await $809b25475cc45ca0$var$resetPassword((0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(auth), {
        oobCode: oobCode,
        newPassword: newPassword
    }).catch(async (error)=>{
        if (error.code === `auth/${"password-does-not-meet-requirements" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */ }`) $809b25475cc45ca0$var$recachePasswordPolicy(auth);
        throw error;
    });
// Do not return the email.
}
/**
 * Applies a verification code sent to the user by email or other out-of-band mechanism.
 *
 * @param auth - The {@link Auth} instance.
 * @param oobCode - A verification code sent to the user.
 *
 * @public
 */ async function $809b25475cc45ca0$export$c3950d9923825c02(auth, oobCode) {
    await $809b25475cc45ca0$var$applyActionCode$1((0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(auth), {
        oobCode: oobCode
    });
}
/**
 * Checks a verification code sent to the user by email or other out-of-band mechanism.
 *
 * @returns metadata about the code.
 *
 * @param auth - The {@link Auth} instance.
 * @param oobCode - A verification code sent to the user.
 *
 * @public
 */ async function $809b25475cc45ca0$export$a9c996f45e5784d0(auth, oobCode) {
    const authModular = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(auth);
    const response = await $809b25475cc45ca0$var$resetPassword(authModular, {
        oobCode: oobCode
    });
    // Email could be empty only if the request type is EMAIL_SIGNIN or
    // VERIFY_AND_CHANGE_EMAIL.
    // New email should not be empty if the request type is
    // VERIFY_AND_CHANGE_EMAIL.
    // Multi-factor info could not be empty if the request type is
    // REVERT_SECOND_FACTOR_ADDITION.
    const operation = response.requestType;
    $809b25475cc45ca0$export$24baa2b76016ce0e(operation, authModular, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    switch(operation){
        case "EMAIL_SIGNIN" /* ActionCodeOperation.EMAIL_SIGNIN */ :
            break;
        case "VERIFY_AND_CHANGE_EMAIL" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ :
            $809b25475cc45ca0$export$24baa2b76016ce0e(response.newEmail, authModular, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
            break;
        case "REVERT_SECOND_FACTOR_ADDITION" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */ :
            $809b25475cc45ca0$export$24baa2b76016ce0e(response.mfaInfo, authModular, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        // fall through
        default:
            $809b25475cc45ca0$export$24baa2b76016ce0e(response.email, authModular, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    }
    // The multi-factor info for revert second factor addition
    let multiFactorInfo = null;
    if (response.mfaInfo) multiFactorInfo = $809b25475cc45ca0$var$MultiFactorInfoImpl._fromServerResponse($809b25475cc45ca0$export$23ebac1979863676(authModular), response.mfaInfo);
    return {
        data: {
            email: (response.requestType === "VERIFY_AND_CHANGE_EMAIL" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */  ? response.newEmail : response.email) || null,
            previousEmail: (response.requestType === "VERIFY_AND_CHANGE_EMAIL" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */  ? response.email : response.newEmail) || null,
            multiFactorInfo: multiFactorInfo
        },
        operation: operation
    };
}
/**
 * Checks a password reset code sent to the user by email or other out-of-band mechanism.
 *
 * @returns the user's email address if valid.
 *
 * @param auth - The {@link Auth} instance.
 * @param code - A verification code sent to the user.
 *
 * @public
 */ async function $809b25475cc45ca0$export$7910e0436ed8d1de(auth, code) {
    const { data: data } = await $809b25475cc45ca0$export$a9c996f45e5784d0((0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(auth), code);
    // Email should always be present since a code was sent to it
    return data.email;
}
/**
 * Creates a new user account associated with the specified email address and password.
 *
 * @remarks
 * On successful creation of the user account, this user will also be signed in to your application.
 *
 * User account creation can fail if the account already exists or the password is invalid.
 *
 * This method is not supported on {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * Note: The email address acts as a unique identifier for the user and enables an email-based
 * password reset. This function will create a new user account and set the initial user password.
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param password - The user's chosen password.
 *
 * @public
 */ async function $809b25475cc45ca0$export$555508cbc6add439(auth, email, password) {
    if ((0, $12572052cab62175$export$643c8bc6c389f34e)(auth.app)) return Promise.reject($809b25475cc45ca0$var$_serverAppCurrentUserOperationNotSupportedError(auth));
    const authInternal = $809b25475cc45ca0$export$23ebac1979863676(auth);
    const request = {
        returnSecureToken: true,
        email: email,
        password: password,
        clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ 
    };
    const signUpResponse = $809b25475cc45ca0$var$handleRecaptchaFlow(authInternal, request, "signUpPassword" /* RecaptchaActionName.SIGN_UP_PASSWORD */ , $809b25475cc45ca0$var$signUp, "EMAIL_PASSWORD_PROVIDER" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */ );
    const response = await signUpResponse.catch((error)=>{
        if (error.code === `auth/${"password-does-not-meet-requirements" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */ }`) $809b25475cc45ca0$var$recachePasswordPolicy(auth);
        throw error;
    });
    const userCredential = await $809b25475cc45ca0$var$UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* OperationType.SIGN_IN */ , response);
    await authInternal._updateCurrentUser(userCredential.user);
    return userCredential;
}
/**
 * Asynchronously signs in using an email and password.
 *
 * @remarks
 * Fails with an error if the email address and password do not match. When
 * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}
 * is enabled, this method fails with "auth/invalid-credential" in case of an invalid
 * email/password.
 *
 * This method is not supported on {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * Note: The user's password is NOT the password used to access the user's email account. The
 * email address serves as a unique identifier for the user, and the password is used to access
 * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.
 *
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The users email address.
 * @param password - The users password.
 *
 * @public
 */ function $809b25475cc45ca0$export$2219238a014317b0(auth, email, password) {
    if ((0, $12572052cab62175$export$643c8bc6c389f34e)(auth.app)) return Promise.reject($809b25475cc45ca0$var$_serverAppCurrentUserOperationNotSupportedError(auth));
    return $809b25475cc45ca0$export$ce26c07117d59d6a((0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(auth), $809b25475cc45ca0$export$71cec2538cb2c617.credential(email, password)).catch(async (error)=>{
        if (error.code === `auth/${"password-does-not-meet-requirements" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */ }`) $809b25475cc45ca0$var$recachePasswordPolicy(auth);
        throw error;
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Sends a sign-in email link to the user with the specified email.
 *
 * @remarks
 * The sign-in operation has to always be completed in the app unlike other out of band email
 * actions (password reset and email verifications). This is because, at the end of the flow,
 * the user is expected to be signed in and their Auth state persisted within the app.
 *
 * To complete sign in with the email link, call {@link signInWithEmailLink} with the email
 * address and the email link supplied in the email sent to the user.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);
 * // Obtain emailLink from the user.
 * if(isSignInWithEmailLink(auth, emailLink)) {
 *   await signInWithEmailLink(auth, 'user@example.com', emailLink);
 * }
 * ```
 *
 * @param authInternal - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */ async function $809b25475cc45ca0$export$4c3d22f3d993c33f(auth, email, actionCodeSettings) {
    const authInternal = $809b25475cc45ca0$export$23ebac1979863676(auth);
    const request = {
        requestType: "EMAIL_SIGNIN" /* ActionCodeOperation.EMAIL_SIGNIN */ ,
        email: email,
        clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ 
    };
    function setActionCodeSettings(request, actionCodeSettings) {
        $809b25475cc45ca0$export$24baa2b76016ce0e(actionCodeSettings.handleCodeInApp, authInternal, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        if (actionCodeSettings) $809b25475cc45ca0$var$_setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);
    }
    setActionCodeSettings(request, actionCodeSettings);
    await $809b25475cc45ca0$var$handleRecaptchaFlow(authInternal, request, "getOobCode" /* RecaptchaActionName.GET_OOB_CODE */ , $809b25475cc45ca0$var$sendSignInLinkToEmail$1, "EMAIL_PASSWORD_PROVIDER" /* RecaptchaAuthProvider.EMAIL_PASSWORD_PROVIDER */ );
}
/**
 * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.
 *
 * @param auth - The {@link Auth} instance.
 * @param emailLink - The link sent to the user's email address.
 *
 * @public
 */ function $809b25475cc45ca0$export$f787f51d84a910ad(auth, emailLink) {
    const actionCodeUrl = $809b25475cc45ca0$export$3b513254972cfc9c.parseLink(emailLink);
    return (actionCodeUrl === null || actionCodeUrl === void 0 ? void 0 : actionCodeUrl.operation) === "EMAIL_SIGNIN" /* ActionCodeOperation.EMAIL_SIGNIN */ ;
}
/**
 * Asynchronously signs in using an email and sign-in email link.
 *
 * @remarks
 * If no link is passed, the link is inferred from the current URL.
 *
 * Fails with an error if the email address is invalid or OTP in email link expires.
 *
 * This method is not supported by {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);
 * // Obtain emailLink from the user.
 * if(isSignInWithEmailLink(auth, emailLink)) {
 *   await signInWithEmailLink(auth, 'user@example.com', emailLink);
 * }
 * ```
 *
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param emailLink - The link sent to the user's email address.
 *
 * @public
 */ async function $809b25475cc45ca0$export$c9170ad7d4cd7e57(auth, email, emailLink) {
    if ((0, $12572052cab62175$export$643c8bc6c389f34e)(auth.app)) return Promise.reject($809b25475cc45ca0$var$_serverAppCurrentUserOperationNotSupportedError(auth));
    const authModular = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(auth);
    const credential = $809b25475cc45ca0$export$71cec2538cb2c617.credentialWithLink(email, emailLink || $809b25475cc45ca0$var$_getCurrentUrl());
    // Check if the tenant ID in the email link matches the tenant ID on Auth
    // instance.
    $809b25475cc45ca0$export$24baa2b76016ce0e(credential._tenantId === (authModular.tenantId || null), authModular, "tenant-id-mismatch" /* AuthErrorCode.TENANT_ID_MISMATCH */ );
    return $809b25475cc45ca0$export$ce26c07117d59d6a(authModular, credential);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function $809b25475cc45ca0$var$createAuthUri(auth, request) {
    return $809b25475cc45ca0$var$_performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:createAuthUri" /* Endpoint.CREATE_AUTH_URI */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Gets the list of possible sign in methods for the given email address. This method returns an
 * empty list when
 * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}
 * is enabled, irrespective of the number of authentication methods available for the given email.
 *
 * @remarks
 * This is useful to differentiate methods of sign-in for the same provider, eg.
 * {@link EmailAuthProvider} which has 2 methods of sign-in,
 * {@link SignInMethod}.EMAIL_PASSWORD and
 * {@link SignInMethod}.EMAIL_LINK.
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 *
 * Deprecated. Migrating off of this method is recommended as a security best-practice.
 * Learn more in the Identity Platform documentation for
 * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}.
 * @public
 */ async function $809b25475cc45ca0$export$ee7c8ad385a60b7b(auth, email) {
    // createAuthUri returns an error if continue URI is not http or https.
    // For environments like Cordova, Chrome extensions, native frameworks, file
    // systems, etc, use http://localhost as continue URL.
    const continueUri = $809b25475cc45ca0$var$_isHttpOrHttps() ? $809b25475cc45ca0$var$_getCurrentUrl() : 'http://localhost';
    const request = {
        identifier: email,
        continueUri: continueUri
    };
    const { signinMethods: signinMethods } = await $809b25475cc45ca0$var$createAuthUri((0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(auth), request);
    return signinMethods || [];
}
/**
 * Sends a verification email to a user.
 *
 * @remarks
 * The verification process is completed by calling {@link applyActionCode}.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendEmailVerification(user, actionCodeSettings);
 * // Obtain code from the user.
 * await applyActionCode(auth, code);
 * ```
 *
 * @param user - The user.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */ async function $809b25475cc45ca0$export$995eb9fca571757(user, actionCodeSettings) {
    const userInternal = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(user);
    const idToken = await user.getIdToken();
    const request = {
        requestType: "VERIFY_EMAIL" /* ActionCodeOperation.VERIFY_EMAIL */ ,
        idToken: idToken
    };
    if (actionCodeSettings) $809b25475cc45ca0$var$_setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
    const { email: email } = await $809b25475cc45ca0$var$sendEmailVerification$1(userInternal.auth, request);
    if (email !== user.email) await user.reload();
}
/**
 * Sends a verification email to a new email address.
 *
 * @remarks
 * The user's email will be updated to the new one after being verified.
 *
 * If you have a custom email action handler, you can complete the verification process by calling
 * {@link applyActionCode}.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);
 * // Obtain code from the user.
 * await applyActionCode(auth, code);
 * ```
 *
 * @param user - The user.
 * @param newEmail - The new email address to be verified before update.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */ async function $809b25475cc45ca0$export$f38c853ae54ed474(user, newEmail, actionCodeSettings) {
    const userInternal = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(user);
    const idToken = await user.getIdToken();
    const request = {
        requestType: "VERIFY_AND_CHANGE_EMAIL" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ,
        idToken: idToken,
        newEmail: newEmail
    };
    if (actionCodeSettings) $809b25475cc45ca0$var$_setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
    const { email: email } = await $809b25475cc45ca0$var$verifyAndChangeEmail(userInternal.auth, request);
    if (email !== user.email) // If the local copy of the email on user is outdated, reload the
    // user.
    await user.reload();
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function $809b25475cc45ca0$var$updateProfile$1(auth, request) {
    return $809b25475cc45ca0$var$_performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v1/accounts:update" /* Endpoint.SET_ACCOUNT_INFO */ , request);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Updates a user's profile data.
 *
 * @param user - The user.
 * @param profile - The profile's `displayName` and `photoURL` to update.
 *
 * @public
 */ async function $809b25475cc45ca0$export$ab83b03e4111b1d0(user, { displayName: displayName, photoURL: photoUrl }) {
    if (displayName === undefined && photoUrl === undefined) return;
    const userInternal = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(user);
    const idToken = await userInternal.getIdToken();
    const profileRequest = {
        idToken: idToken,
        displayName: displayName,
        photoUrl: photoUrl,
        returnSecureToken: true
    };
    const response = await $809b25475cc45ca0$var$_logoutIfInvalidated(userInternal, $809b25475cc45ca0$var$updateProfile$1(userInternal.auth, profileRequest));
    userInternal.displayName = response.displayName || null;
    userInternal.photoURL = response.photoUrl || null;
    // Update the password provider as well
    const passwordProvider = userInternal.providerData.find(({ providerId: providerId })=>providerId === "password" /* ProviderId.PASSWORD */ );
    if (passwordProvider) {
        passwordProvider.displayName = userInternal.displayName;
        passwordProvider.photoURL = userInternal.photoURL;
    }
    await userInternal._updateTokensIfNecessary(response);
}
/**
 * Updates the user's email address.
 *
 * @remarks
 * An email will be sent to the original email address (if it was set) that allows to revoke the
 * email address change, in order to protect them from account hijacking.
 *
 * This method is not supported on any {@link User} signed in by {@link Auth} instances
 * created with a {@link @firebase/app#FirebaseServerApp}.
 *
 * Important: this is a security sensitive operation that requires the user to have recently signed
 * in. If this requirement isn't met, ask the user to authenticate again and then call
 * {@link reauthenticateWithCredential}.
 *
 * @param user - The user.
 * @param newEmail - The new email address.
 *
 * Throws "auth/operation-not-allowed" error when
 * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}
 * is enabled.
 * Deprecated - Use {@link verifyBeforeUpdateEmail} instead.
 *
 * @public
 */ function $809b25475cc45ca0$export$1a82df3d29112e01(user, newEmail) {
    const userInternal = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(user);
    if ((0, $12572052cab62175$export$643c8bc6c389f34e)(userInternal.auth.app)) return Promise.reject($809b25475cc45ca0$var$_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));
    return $809b25475cc45ca0$var$updateEmailOrPassword(userInternal, newEmail, null);
}
/**
 * Updates the user's password.
 *
 * @remarks
 * Important: this is a security sensitive operation that requires the user to have recently signed
 * in. If this requirement isn't met, ask the user to authenticate again and then call
 * {@link reauthenticateWithCredential}.
 *
 * @param user - The user.
 * @param newPassword - The new password.
 *
 * @public
 */ function $809b25475cc45ca0$export$306ddfe3a8403e2(user, newPassword) {
    return $809b25475cc45ca0$var$updateEmailOrPassword((0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(user), null, newPassword);
}
async function $809b25475cc45ca0$var$updateEmailOrPassword(user, email, password) {
    const { auth: auth } = user;
    const idToken = await user.getIdToken();
    const request = {
        idToken: idToken,
        returnSecureToken: true
    };
    if (email) request.email = email;
    if (password) request.password = password;
    const response = await $809b25475cc45ca0$var$_logoutIfInvalidated(user, $809b25475cc45ca0$var$updateEmailPassword(auth, request));
    await user._updateTokensIfNecessary(response, /* reload */ true);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Parse the `AdditionalUserInfo` from the ID token response.
 *
 */ function $809b25475cc45ca0$var$_fromIdTokenResponse(idTokenResponse) {
    var _a, _b;
    if (!idTokenResponse) return null;
    const { providerId: providerId } = idTokenResponse;
    const profile = idTokenResponse.rawUserInfo ? JSON.parse(idTokenResponse.rawUserInfo) : {};
    const isNewUser = idTokenResponse.isNewUser || idTokenResponse.kind === "identitytoolkit#SignupNewUserResponse" /* IdTokenResponseKind.SignupNewUser */ ;
    if (!providerId && (idTokenResponse === null || idTokenResponse === void 0 ? void 0 : idTokenResponse.idToken)) {
        const signInProvider = (_b = (_a = $809b25475cc45ca0$var$_parseToken(idTokenResponse.idToken)) === null || _a === void 0 ? void 0 : _a.firebase) === null || _b === void 0 ? void 0 : _b['sign_in_provider'];
        if (signInProvider) {
            const filteredProviderId = signInProvider !== "anonymous" /* ProviderId.ANONYMOUS */  && signInProvider !== "custom" /* ProviderId.CUSTOM */  ? signInProvider : null;
            // Uses generic class in accordance with the legacy SDK.
            return new $809b25475cc45ca0$var$GenericAdditionalUserInfo(isNewUser, filteredProviderId);
        }
    }
    if (!providerId) return null;
    switch(providerId){
        case "facebook.com" /* ProviderId.FACEBOOK */ :
            return new $809b25475cc45ca0$var$FacebookAdditionalUserInfo(isNewUser, profile);
        case "github.com" /* ProviderId.GITHUB */ :
            return new $809b25475cc45ca0$var$GithubAdditionalUserInfo(isNewUser, profile);
        case "google.com" /* ProviderId.GOOGLE */ :
            return new $809b25475cc45ca0$var$GoogleAdditionalUserInfo(isNewUser, profile);
        case "twitter.com" /* ProviderId.TWITTER */ :
            return new $809b25475cc45ca0$var$TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);
        case "custom" /* ProviderId.CUSTOM */ :
        case "anonymous" /* ProviderId.ANONYMOUS */ :
            return new $809b25475cc45ca0$var$GenericAdditionalUserInfo(isNewUser, null);
        default:
            return new $809b25475cc45ca0$var$GenericAdditionalUserInfo(isNewUser, providerId, profile);
    }
}
class $809b25475cc45ca0$var$GenericAdditionalUserInfo {
    constructor(isNewUser, providerId, profile = {}){
        this.isNewUser = isNewUser;
        this.providerId = providerId;
        this.profile = profile;
    }
}
class $809b25475cc45ca0$var$FederatedAdditionalUserInfoWithUsername extends $809b25475cc45ca0$var$GenericAdditionalUserInfo {
    constructor(isNewUser, providerId, profile, username){
        super(isNewUser, providerId, profile);
        this.username = username;
    }
}
class $809b25475cc45ca0$var$FacebookAdditionalUserInfo extends $809b25475cc45ca0$var$GenericAdditionalUserInfo {
    constructor(isNewUser, profile){
        super(isNewUser, "facebook.com" /* ProviderId.FACEBOOK */ , profile);
    }
}
class $809b25475cc45ca0$var$GithubAdditionalUserInfo extends $809b25475cc45ca0$var$FederatedAdditionalUserInfoWithUsername {
    constructor(isNewUser, profile){
        super(isNewUser, "github.com" /* ProviderId.GITHUB */ , profile, typeof (profile === null || profile === void 0 ? void 0 : profile.login) === 'string' ? profile === null || profile === void 0 ? void 0 : profile.login : null);
    }
}
class $809b25475cc45ca0$var$GoogleAdditionalUserInfo extends $809b25475cc45ca0$var$GenericAdditionalUserInfo {
    constructor(isNewUser, profile){
        super(isNewUser, "google.com" /* ProviderId.GOOGLE */ , profile);
    }
}
class $809b25475cc45ca0$var$TwitterAdditionalUserInfo extends $809b25475cc45ca0$var$FederatedAdditionalUserInfoWithUsername {
    constructor(isNewUser, profile, screenName){
        super(isNewUser, "twitter.com" /* ProviderId.TWITTER */ , profile, screenName);
    }
}
/**
 * Extracts provider specific {@link AdditionalUserInfo} for the given credential.
 *
 * @param userCredential - The user credential.
 *
 * @public
 */ function $809b25475cc45ca0$export$d24c54395ce0c509(userCredential) {
    const { user: user, _tokenResponse: _tokenResponse } = userCredential;
    if (user.isAnonymous && !_tokenResponse) // Handle the special case where signInAnonymously() gets called twice.
    // No network call is made so there's nothing to actually fill this in
    return {
        providerId: null,
        isNewUser: false,
        profile: null
    };
    return $809b25475cc45ca0$var$_fromIdTokenResponse(_tokenResponse);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Non-optional auth methods.
/**
 * Changes the type of persistence on the {@link Auth} instance for the currently saved
 * `Auth` session and applies this type of persistence for future sign-in requests, including
 * sign-in with redirect requests.
 *
 * @remarks
 * This makes it easy for a user signing in to specify whether their session should be
 * remembered or not. It also makes it easier to never persist the `Auth` state for applications
 * that are shared by other users or have sensitive data.
 *
 * This method does not work in a Node.js environment or with {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * @example
 * ```javascript
 * setPersistence(auth, browserSessionPersistence);
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param persistence - The {@link Persistence} to use.
 * @returns A `Promise` that resolves once the persistence change has completed
 *
 * @public
 */ function $809b25475cc45ca0$export$625550452a3fa3ec(auth, persistence) {
    return (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(auth).setPersistence(persistence);
}
/**
 * Loads the reCAPTCHA configuration into the `Auth` instance.
 *
 * @remarks
 * This will load the reCAPTCHA config, which indicates whether the reCAPTCHA
 * verification flow should be triggered for each auth provider, into the
 * current Auth session.
 *
 * If initializeRecaptchaConfig() is not invoked, the auth flow will always start
 * without reCAPTCHA verification. If the provider is configured to require reCAPTCHA
 * verification, the SDK will transparently load the reCAPTCHA config and restart the
 * auth flows.
 *
 * Thus, by calling this optional method, you will reduce the latency of future auth flows.
 * Loading the reCAPTCHA config early will also enhance the signal collected by reCAPTCHA.
 *
 * This method does not work in a Node.js environment.
 *
 * @example
 * ```javascript
 * initializeRecaptchaConfig(auth);
 * ```
 *
 * @param auth - The {@link Auth} instance.
 *
 * @public
 */ function $809b25475cc45ca0$export$90a7f3efeed30595(auth) {
    return $809b25475cc45ca0$var$_initializeRecaptchaConfig(auth);
}
/**
 * Validates the password against the password policy configured for the project or tenant.
 *
 * @remarks
 * If no tenant ID is set on the `Auth` instance, then this method will use the password
 * policy configured for the project. Otherwise, this method will use the policy configured
 * for the tenant. If a password policy has not been configured, then the default policy
 * configured for all projects will be used.
 *
 * If an auth flow fails because a submitted password does not meet the password policy
 * requirements and this method has previously been called, then this method will use the
 * most recent policy available when called again.
 *
 * @example
 * ```javascript
 * validatePassword(auth, 'some-password');
 * ```
 *
 * @param auth The {@link Auth} instance.
 * @param password The password to validate.
 *
 * @public
 */ async function $809b25475cc45ca0$export$efccba1c4a2ef57b(auth, password) {
    const authInternal = $809b25475cc45ca0$export$23ebac1979863676(auth);
    return authInternal.validatePassword(password);
}
/**
 * Adds an observer for changes to the signed-in user's ID token.
 *
 * @remarks
 * This includes sign-in, sign-out, and token refresh events.
 * This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.
 *
 * @param auth - The {@link Auth} instance.
 * @param nextOrObserver - callback triggered on change.
 * @param error - Deprecated. This callback is never triggered. Errors
 * on signing in/out can be caught in promises returned from
 * sign-in/sign-out functions.
 * @param completed - Deprecated. This callback is never triggered.
 *
 * @public
 */ function $809b25475cc45ca0$export$d141bba7fdc215a3(auth, nextOrObserver, error, completed) {
    return (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(auth).onIdTokenChanged(nextOrObserver, error, completed);
}
/**
 * Adds a blocking callback that runs before an auth state change
 * sets a new user.
 *
 * @param auth - The {@link Auth} instance.
 * @param callback - callback triggered before new user value is set.
 *   If this throws, it blocks the user from being set.
 * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`
 *   callback throws, allowing you to undo any side effects.
 */ function $809b25475cc45ca0$export$4a5767248b18ef41(auth, callback, onAbort) {
    return (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(auth).beforeAuthStateChanged(callback, onAbort);
}
/**
 * Adds an observer for changes to the user's sign-in state.
 *
 * @remarks
 * To keep the old behavior, see {@link onIdTokenChanged}.
 *
 * @param auth - The {@link Auth} instance.
 * @param nextOrObserver - callback triggered on change.
 * @param error - Deprecated. This callback is never triggered. Errors
 * on signing in/out can be caught in promises returned from
 * sign-in/sign-out functions.
 * @param completed - Deprecated. This callback is never triggered.
 *
 * @public
 */ function $809b25475cc45ca0$export$df995fae86a55f06(auth, nextOrObserver, error, completed) {
    return (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(auth).onAuthStateChanged(nextOrObserver, error, completed);
}
/**
 * Sets the current language to the default device/browser preference.
 *
 * @param auth - The {@link Auth} instance.
 *
 * @public
 */ function $809b25475cc45ca0$export$ef35774e6d314e91(auth) {
    (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(auth).useDeviceLanguage();
}
/**
 * Asynchronously sets the provided user as {@link Auth.currentUser} on the
 * {@link Auth} instance.
 *
 * @remarks
 * A new instance copy of the user provided will be made and set as currentUser.
 *
 * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners
 * like other sign in methods.
 *
 * The operation fails with an error if the user to be updated belongs to a different Firebase
 * project.
 *
 * This method is not supported by {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * @param auth - The {@link Auth} instance.
 * @param user - The new {@link User}.
 *
 * @public
 */ function $809b25475cc45ca0$export$e7094788287c5e9b(auth, user) {
    return (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(auth).updateCurrentUser(user);
}
/**
 * Signs out the current user.
 *
 * @remarks
 * This method is not supported by {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * @param auth - The {@link Auth} instance.
 *
 * @public
 */ function $809b25475cc45ca0$export$96f57966bedc81b4(auth) {
    return (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(auth).signOut();
}
/**
 * Revokes the given access token. Currently only supports Apple OAuth access tokens.
 *
 * @param auth - The {@link Auth} instance.
 * @param token - The Apple OAuth access token.
 *
 * @public
 */ function $809b25475cc45ca0$export$a9c23c6ac3fc3eca(auth, token) {
    const authInternal = $809b25475cc45ca0$export$23ebac1979863676(auth);
    return authInternal.revokeAccessToken(token);
}
/**
 * Deletes and signs out the user.
 *
 * @remarks
 * Important: this is a security-sensitive operation that requires the user to have recently
 * signed in. If this requirement isn't met, ask the user to authenticate again and then call
 * {@link reauthenticateWithCredential}.
 *
 * @param user - The user.
 *
 * @public
 */ async function $809b25475cc45ca0$export$2329c99376c9d0a4(user) {
    return (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(user).delete();
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $809b25475cc45ca0$var$MultiFactorSessionImpl {
    constructor(type, credential, user){
        this.type = type;
        this.credential = credential;
        this.user = user;
    }
    static _fromIdtoken(idToken, user) {
        return new $809b25475cc45ca0$var$MultiFactorSessionImpl("enroll" /* MultiFactorSessionType.ENROLL */ , idToken, user);
    }
    static _fromMfaPendingCredential(mfaPendingCredential) {
        return new $809b25475cc45ca0$var$MultiFactorSessionImpl("signin" /* MultiFactorSessionType.SIGN_IN */ , mfaPendingCredential);
    }
    toJSON() {
        const key = this.type === "enroll" /* MultiFactorSessionType.ENROLL */  ? 'idToken' : 'pendingCredential';
        return {
            multiFactorSession: {
                [key]: this.credential
            }
        };
    }
    static fromJSON(obj) {
        var _a, _b;
        if (obj === null || obj === void 0 ? void 0 : obj.multiFactorSession) {
            if ((_a = obj.multiFactorSession) === null || _a === void 0 ? void 0 : _a.pendingCredential) return $809b25475cc45ca0$var$MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);
            else if ((_b = obj.multiFactorSession) === null || _b === void 0 ? void 0 : _b.idToken) return $809b25475cc45ca0$var$MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);
        }
        return null;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $809b25475cc45ca0$var$MultiFactorResolverImpl {
    constructor(session, hints, signInResolver){
        this.session = session;
        this.hints = hints;
        this.signInResolver = signInResolver;
    }
    /** @internal */ static _fromError(authExtern, error) {
        const auth = $809b25475cc45ca0$export$23ebac1979863676(authExtern);
        const serverResponse = error.customData._serverResponse;
        const hints = (serverResponse.mfaInfo || []).map((enrollment)=>$809b25475cc45ca0$var$MultiFactorInfoImpl._fromServerResponse(auth, enrollment));
        $809b25475cc45ca0$export$24baa2b76016ce0e(serverResponse.mfaPendingCredential, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        const session = $809b25475cc45ca0$var$MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);
        return new $809b25475cc45ca0$var$MultiFactorResolverImpl(session, hints, async (assertion)=>{
            const mfaResponse = await assertion._process(auth, session);
            // Clear out the unneeded fields from the old login response
            delete serverResponse.mfaInfo;
            delete serverResponse.mfaPendingCredential;
            // Use in the new token & refresh token in the old response
            const idTokenResponse = Object.assign(Object.assign({}, serverResponse), {
                idToken: mfaResponse.idToken,
                refreshToken: mfaResponse.refreshToken
            });
            // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case
            switch(error.operationType){
                case "signIn" /* OperationType.SIGN_IN */ :
                    const userCredential = await $809b25475cc45ca0$var$UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse);
                    await auth._updateCurrentUser(userCredential.user);
                    return userCredential;
                case "reauthenticate" /* OperationType.REAUTHENTICATE */ :
                    $809b25475cc45ca0$export$24baa2b76016ce0e(error.user, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
                    return $809b25475cc45ca0$var$UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse);
                default:
                    $809b25475cc45ca0$export$28f7fcd39efa255(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
            }
        });
    }
    async resolveSignIn(assertionExtern) {
        const assertion = assertionExtern;
        return this.signInResolver(assertion);
    }
}
/**
 * Provides a {@link MultiFactorResolver} suitable for completion of a
 * multi-factor flow.
 *
 * @param auth - The {@link Auth} instance.
 * @param error - The {@link MultiFactorError} raised during a sign-in, or
 * reauthentication operation.
 *
 * @public
 */ function $809b25475cc45ca0$export$493d36ec626b6698(auth, error) {
    var _a;
    const authModular = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(auth);
    const errorInternal = error;
    $809b25475cc45ca0$export$24baa2b76016ce0e(error.customData.operationType, authModular, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
    $809b25475cc45ca0$export$24baa2b76016ce0e((_a = errorInternal.customData._serverResponse) === null || _a === void 0 ? void 0 : _a.mfaPendingCredential, authModular, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
    return $809b25475cc45ca0$var$MultiFactorResolverImpl._fromError(authModular, errorInternal);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $809b25475cc45ca0$var$startEnrollPhoneMfa(auth, request) {
    return $809b25475cc45ca0$var$_performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v2/accounts/mfaEnrollment:start" /* Endpoint.START_MFA_ENROLLMENT */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
}
function $809b25475cc45ca0$var$finalizeEnrollPhoneMfa(auth, request) {
    return $809b25475cc45ca0$var$_performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v2/accounts/mfaEnrollment:finalize" /* Endpoint.FINALIZE_MFA_ENROLLMENT */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
}
function $809b25475cc45ca0$var$startEnrollTotpMfa(auth, request) {
    return $809b25475cc45ca0$var$_performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v2/accounts/mfaEnrollment:start" /* Endpoint.START_MFA_ENROLLMENT */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
}
function $809b25475cc45ca0$var$finalizeEnrollTotpMfa(auth, request) {
    return $809b25475cc45ca0$var$_performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v2/accounts/mfaEnrollment:finalize" /* Endpoint.FINALIZE_MFA_ENROLLMENT */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
}
function $809b25475cc45ca0$var$withdrawMfa(auth, request) {
    return $809b25475cc45ca0$var$_performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v2/accounts/mfaEnrollment:withdraw" /* Endpoint.WITHDRAW_MFA */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
}
class $809b25475cc45ca0$var$MultiFactorUserImpl {
    constructor(user){
        this.user = user;
        this.enrolledFactors = [];
        user._onReload((userInfo)=>{
            if (userInfo.mfaInfo) this.enrolledFactors = userInfo.mfaInfo.map((enrollment)=>$809b25475cc45ca0$var$MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment));
        });
    }
    static _fromUser(user) {
        return new $809b25475cc45ca0$var$MultiFactorUserImpl(user);
    }
    async getSession() {
        return $809b25475cc45ca0$var$MultiFactorSessionImpl._fromIdtoken(await this.user.getIdToken(), this.user);
    }
    async enroll(assertionExtern, displayName) {
        const assertion = assertionExtern;
        const session = await this.getSession();
        const finalizeMfaResponse = await $809b25475cc45ca0$var$_logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName));
        // New tokens will be issued after enrollment of the new second factors.
        // They need to be updated on the user.
        await this.user._updateTokensIfNecessary(finalizeMfaResponse);
        // The user needs to be reloaded to get the new multi-factor information
        // from server. USER_RELOADED event will be triggered and `enrolledFactors`
        // will be updated.
        return this.user.reload();
    }
    async unenroll(infoOrUid) {
        const mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;
        const idToken = await this.user.getIdToken();
        try {
            const idTokenResponse = await $809b25475cc45ca0$var$_logoutIfInvalidated(this.user, $809b25475cc45ca0$var$withdrawMfa(this.user.auth, {
                idToken: idToken,
                mfaEnrollmentId: mfaEnrollmentId
            }));
            // Remove the second factor from the user's list.
            this.enrolledFactors = this.enrolledFactors.filter(({ uid: uid })=>uid !== mfaEnrollmentId);
            // Depending on whether the backend decided to revoke the user's session,
            // the tokenResponse may be empty. If the tokens were not updated (and they
            // are now invalid), reloading the user will discover this and invalidate
            // the user's state accordingly.
            await this.user._updateTokensIfNecessary(idTokenResponse);
            await this.user.reload();
        } catch (e) {
            throw e;
        }
    }
}
const $809b25475cc45ca0$var$multiFactorUserCache = new WeakMap();
/**
 * The {@link MultiFactorUser} corresponding to the user.
 *
 * @remarks
 * This is used to access all multi-factor properties and operations related to the user.
 *
 * @param user - The user.
 *
 * @public
 */ function $809b25475cc45ca0$export$1fbe638ecf81657e(user) {
    const userModular = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(user);
    if (!$809b25475cc45ca0$var$multiFactorUserCache.has(userModular)) $809b25475cc45ca0$var$multiFactorUserCache.set(userModular, $809b25475cc45ca0$var$MultiFactorUserImpl._fromUser(userModular));
    return $809b25475cc45ca0$var$multiFactorUserCache.get(userModular);
}
const $809b25475cc45ca0$var$STORAGE_AVAILABLE_KEY = '__sak';
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // There are two different browser persistence types: local and session.
// Both have the same implementation but use a different underlying storage
// object.
class $809b25475cc45ca0$var$BrowserPersistenceClass {
    constructor(storageRetriever, type){
        this.storageRetriever = storageRetriever;
        this.type = type;
    }
    _isAvailable() {
        try {
            if (!this.storage) return Promise.resolve(false);
            this.storage.setItem($809b25475cc45ca0$var$STORAGE_AVAILABLE_KEY, '1');
            this.storage.removeItem($809b25475cc45ca0$var$STORAGE_AVAILABLE_KEY);
            return Promise.resolve(true);
        } catch (_a) {
            return Promise.resolve(false);
        }
    }
    _set(key, value) {
        this.storage.setItem(key, JSON.stringify(value));
        return Promise.resolve();
    }
    _get(key) {
        const json = this.storage.getItem(key);
        return Promise.resolve(json ? JSON.parse(json) : null);
    }
    _remove(key) {
        this.storage.removeItem(key);
        return Promise.resolve();
    }
    get storage() {
        return this.storageRetriever();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // The polling period in case events are not supported
const $809b25475cc45ca0$var$_POLLING_INTERVAL_MS$1 = 1000;
// The IE 10 localStorage cross tab synchronization delay in milliseconds
const $809b25475cc45ca0$var$IE10_LOCAL_STORAGE_SYNC_DELAY = 10;
class $809b25475cc45ca0$var$BrowserLocalPersistence extends $809b25475cc45ca0$var$BrowserPersistenceClass {
    constructor(){
        super(()=>window.localStorage, "LOCAL" /* PersistenceType.LOCAL */ );
        this.boundEventHandler = (event, poll)=>this.onStorageEvent(event, poll);
        this.listeners = {};
        this.localCache = {};
        // setTimeout return value is platform specific
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.pollTimer = null;
        // Whether to use polling instead of depending on window events
        this.fallbackToPolling = $809b25475cc45ca0$var$_isMobileBrowser();
        this._shouldAllowMigration = true;
    }
    forAllChangedKeys(cb) {
        // Check all keys with listeners on them.
        for (const key of Object.keys(this.listeners)){
            // Get value from localStorage.
            const newValue = this.storage.getItem(key);
            const oldValue = this.localCache[key];
            // If local map value does not match, trigger listener with storage event.
            // Differentiate this simulated event from the real storage event.
            if (newValue !== oldValue) cb(key, oldValue, newValue);
        }
    }
    onStorageEvent(event, poll = false) {
        // Key would be null in some situations, like when localStorage is cleared
        if (!event.key) {
            this.forAllChangedKeys((key, _oldValue, newValue)=>{
                this.notifyListeners(key, newValue);
            });
            return;
        }
        const key = event.key;
        // Check the mechanism how this event was detected.
        // The first event will dictate the mechanism to be used.
        if (poll) // Environment detects storage changes via polling.
        // Remove storage event listener to prevent possible event duplication.
        this.detachListener();
        else // Environment detects storage changes via storage event listener.
        // Remove polling listener to prevent possible event duplication.
        this.stopPolling();
        const triggerListeners = ()=>{
            // Keep local map up to date in case storage event is triggered before
            // poll.
            const storedValue = this.storage.getItem(key);
            if (!poll && this.localCache[key] === storedValue) // Real storage event which has already been detected, do nothing.
            // This seems to trigger in some IE browsers for some reason.
            return;
            this.notifyListeners(key, storedValue);
        };
        const storedValue = this.storage.getItem(key);
        if ($809b25475cc45ca0$var$_isIE10() && storedValue !== event.newValue && event.newValue !== event.oldValue) // IE 10 has this weird bug where a storage event would trigger with the
        // correct key, oldValue and newValue but localStorage.getItem(key) does
        // not yield the updated value until a few milliseconds. This ensures
        // this recovers from that situation.
        setTimeout(triggerListeners, $809b25475cc45ca0$var$IE10_LOCAL_STORAGE_SYNC_DELAY);
        else triggerListeners();
    }
    notifyListeners(key, value) {
        this.localCache[key] = value;
        const listeners = this.listeners[key];
        if (listeners) for (const listener of Array.from(listeners))listener(value ? JSON.parse(value) : value);
    }
    startPolling() {
        this.stopPolling();
        this.pollTimer = setInterval(()=>{
            this.forAllChangedKeys((key, oldValue, newValue)=>{
                this.onStorageEvent(new StorageEvent('storage', {
                    key: key,
                    oldValue: oldValue,
                    newValue: newValue
                }), /* poll */ true);
            });
        }, $809b25475cc45ca0$var$_POLLING_INTERVAL_MS$1);
    }
    stopPolling() {
        if (this.pollTimer) {
            clearInterval(this.pollTimer);
            this.pollTimer = null;
        }
    }
    attachListener() {
        window.addEventListener('storage', this.boundEventHandler);
    }
    detachListener() {
        window.removeEventListener('storage', this.boundEventHandler);
    }
    _addListener(key, listener) {
        if (Object.keys(this.listeners).length === 0) {
            // Whether browser can detect storage event when it had already been pushed to the background.
            // This may happen in some mobile browsers. A localStorage change in the foreground window
            // will not be detected in the background window via the storage event.
            // This was detected in iOS 7.x mobile browsers
            if (this.fallbackToPolling) this.startPolling();
            else this.attachListener();
        }
        if (!this.listeners[key]) {
            this.listeners[key] = new Set();
            // Populate the cache to avoid spuriously triggering on first poll.
            this.localCache[key] = this.storage.getItem(key);
        }
        this.listeners[key].add(listener);
    }
    _removeListener(key, listener) {
        if (this.listeners[key]) {
            this.listeners[key].delete(listener);
            if (this.listeners[key].size === 0) delete this.listeners[key];
        }
        if (Object.keys(this.listeners).length === 0) {
            this.detachListener();
            this.stopPolling();
        }
    }
    // Update local cache on base operations:
    async _set(key, value) {
        await super._set(key, value);
        this.localCache[key] = JSON.stringify(value);
    }
    async _get(key) {
        const value = await super._get(key);
        this.localCache[key] = JSON.stringify(value);
        return value;
    }
    async _remove(key) {
        await super._remove(key);
        delete this.localCache[key];
    }
}
$809b25475cc45ca0$var$BrowserLocalPersistence.type = 'LOCAL';
/**
 * An implementation of {@link Persistence} of type `LOCAL` using `localStorage`
 * for the underlying storage.
 *
 * @public
 */ const $809b25475cc45ca0$export$8b22cf2602fb60ce = $809b25475cc45ca0$var$BrowserLocalPersistence;
/**
 * @license
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $809b25475cc45ca0$var$POLLING_INTERVAL_MS = 1000;
// Pull a cookie value from document.cookie
function $809b25475cc45ca0$var$getDocumentCookie(name) {
    var _a, _b;
    const escapedName = name.replace(/[\\^$.*+?()[\]{}|]/g, '\\$&');
    const matcher = RegExp(`${escapedName}=([^;]+)`);
    return (_b = (_a = document.cookie.match(matcher)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : null;
}
// Produce a sanitized cookie name from the persistence key
function $809b25475cc45ca0$var$getCookieName(key) {
    // __HOST- doesn't work in localhost https://issues.chromium.org/issues/40196122 but it has
    // desirable security properties, so lets use a different cookie name while in dev-mode.
    // Already checked isSecureContext in _isAvailable, so if it's http we're hitting local.
    const isDevMode = window.location.protocol === 'http:';
    return `${isDevMode ? '__dev_' : '__HOST-'}FIREBASE_${key.split(':')[3]}`;
}
class $809b25475cc45ca0$var$CookiePersistence {
    constructor(){
        this.type = "COOKIE" /* PersistenceType.COOKIE */ ;
        this.listenerUnsubscribes = new Map();
    }
    // used to get the URL to the backend to proxy to
    _getFinalTarget(originalUrl) {
        const url = new URL(`${window.location.origin}/__cookies__`);
        url.searchParams.set('finalTarget', originalUrl);
        return url;
    }
    // To be a usable persistence method in a chain browserCookiePersistence ensures that
    // prerequisites have been met, namely that we're in a secureContext, navigator and document are
    // available and cookies are enabled. Not all UAs support these method, so fallback accordingly.
    async _isAvailable() {
        var _a;
        if (typeof isSecureContext === 'boolean' && !isSecureContext) return false;
        if (typeof navigator === 'undefined' || typeof document === 'undefined') return false;
        return (_a = navigator.cookieEnabled) !== null && _a !== void 0 ? _a : true;
    }
    // Set should be a noop as we expect middleware to handle this
    async _set(_key, _value) {
        return;
    }
    // Attempt to get the cookie from cookieStore, fallback to document.cookie
    async _get(key) {
        if (!this._isAvailable()) return null;
        const name = $809b25475cc45ca0$var$getCookieName(key);
        if (window.cookieStore) {
            const cookie = await window.cookieStore.get(name);
            return cookie === null || cookie === void 0 ? void 0 : cookie.value;
        }
        return $809b25475cc45ca0$var$getDocumentCookie(name);
    }
    // Log out by overriding the idToken with a sentinel value of ""
    async _remove(key) {
        if (!this._isAvailable()) return;
        // To make sure we don't hit signout over and over again, only do this operation if we need to
        // with the logout sentinel value of "" this can cause race conditions. Unnecessary set-cookie
        // headers will reduce CDN hit rates too.
        const existingValue = await this._get(key);
        if (!existingValue) return;
        const name = $809b25475cc45ca0$var$getCookieName(key);
        document.cookie = `${name}=;Max-Age=34560000;Partitioned;Secure;SameSite=Strict;Path=/;Priority=High`;
        await fetch(`/__cookies__`, {
            method: 'DELETE'
        }).catch(()=>undefined);
    }
    // Listen for cookie changes, both cookieStore and fallback to polling document.cookie
    _addListener(key, listener) {
        if (!this._isAvailable()) return;
        const name = $809b25475cc45ca0$var$getCookieName(key);
        if (window.cookieStore) {
            const cb = (event)=>{
                const changedCookie = event.changed.find((change)=>change.name === name);
                if (changedCookie) listener(changedCookie.value);
                const deletedCookie = event.deleted.find((change)=>change.name === name);
                if (deletedCookie) listener(null);
            };
            const unsubscribe = ()=>window.cookieStore.removeEventListener('change', cb);
            this.listenerUnsubscribes.set(listener, unsubscribe);
            return window.cookieStore.addEventListener('change', cb);
        }
        let lastValue = $809b25475cc45ca0$var$getDocumentCookie(name);
        const interval = setInterval(()=>{
            const currentValue = $809b25475cc45ca0$var$getDocumentCookie(name);
            if (currentValue !== lastValue) {
                listener(currentValue);
                lastValue = currentValue;
            }
        }, $809b25475cc45ca0$var$POLLING_INTERVAL_MS);
        const unsubscribe = ()=>clearInterval(interval);
        this.listenerUnsubscribes.set(listener, unsubscribe);
    }
    _removeListener(_key, listener) {
        const unsubscribe = this.listenerUnsubscribes.get(listener);
        if (!unsubscribe) return;
        unsubscribe();
        this.listenerUnsubscribes.delete(listener);
    }
}
$809b25475cc45ca0$var$CookiePersistence.type = 'COOKIE';
/**
 * An implementation of {@link Persistence} of type `COOKIE`, for use on the client side in
 * applications leveraging hybrid rendering and middleware.
 *
 * @remarks This persistence method requires companion middleware to function, such as that provided
 * by {@link https://firebaseopensource.com/projects/firebaseextended/reactfire/ | ReactFire} for
 * NextJS.
 * @beta
 */ const $809b25475cc45ca0$export$407448d2b89b1813 = $809b25475cc45ca0$var$CookiePersistence;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $809b25475cc45ca0$var$BrowserSessionPersistence extends $809b25475cc45ca0$var$BrowserPersistenceClass {
    constructor(){
        super(()=>window.sessionStorage, "SESSION" /* PersistenceType.SESSION */ );
    }
    _addListener(_key, _listener) {
        // Listeners are not supported for session storage since it cannot be shared across windows
        return;
    }
    _removeListener(_key, _listener) {
        // Listeners are not supported for session storage since it cannot be shared across windows
        return;
    }
}
$809b25475cc45ca0$var$BrowserSessionPersistence.type = 'SESSION';
/**
 * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`
 * for the underlying storage.
 *
 * @public
 */ const $809b25475cc45ca0$export$db3b6bfb95261072 = $809b25475cc45ca0$var$BrowserSessionPersistence;
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.
 *
 * @param promises - Array of promises to wait on.
 */ function $809b25475cc45ca0$var$_allSettled(promises) {
    return Promise.all(promises.map(async (promise)=>{
        try {
            const value = await promise;
            return {
                fulfilled: true,
                value: value
            };
        } catch (reason) {
            return {
                fulfilled: false,
                reason: reason
            };
        }
    }));
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Interface class for receiving messages.
 *
 */ class $809b25475cc45ca0$var$Receiver {
    constructor(eventTarget){
        this.eventTarget = eventTarget;
        this.handlersMap = {};
        this.boundEventHandler = this.handleEvent.bind(this);
    }
    /**
     * Obtain an instance of a Receiver for a given event target, if none exists it will be created.
     *
     * @param eventTarget - An event target (such as window or self) through which the underlying
     * messages will be received.
     */ static _getInstance(eventTarget) {
        // The results are stored in an array since objects can't be keys for other
        // objects. In addition, setting a unique property on an event target as a
        // hash map key may not be allowed due to CORS restrictions.
        const existingInstance = this.receivers.find((receiver)=>receiver.isListeningto(eventTarget));
        if (existingInstance) return existingInstance;
        const newInstance = new $809b25475cc45ca0$var$Receiver(eventTarget);
        this.receivers.push(newInstance);
        return newInstance;
    }
    isListeningto(eventTarget) {
        return this.eventTarget === eventTarget;
    }
    /**
     * Fans out a MessageEvent to the appropriate listeners.
     *
     * @remarks
     * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have
     * finished processing.
     *
     * @param event - The MessageEvent.
     *
     */ async handleEvent(event) {
        const messageEvent = event;
        const { eventId: eventId, eventType: eventType, data: data } = messageEvent.data;
        const handlers = this.handlersMap[eventType];
        if (!(handlers === null || handlers === void 0 ? void 0 : handlers.size)) return;
        messageEvent.ports[0].postMessage({
            status: "ack" /* _Status.ACK */ ,
            eventId: eventId,
            eventType: eventType
        });
        const promises = Array.from(handlers).map(async (handler)=>handler(messageEvent.origin, data));
        const response = await $809b25475cc45ca0$var$_allSettled(promises);
        messageEvent.ports[0].postMessage({
            status: "done" /* _Status.DONE */ ,
            eventId: eventId,
            eventType: eventType,
            response: response
        });
    }
    /**
     * Subscribe an event handler for a particular event.
     *
     * @param eventType - Event name to subscribe to.
     * @param eventHandler - The event handler which should receive the events.
     *
     */ _subscribe(eventType, eventHandler) {
        if (Object.keys(this.handlersMap).length === 0) this.eventTarget.addEventListener('message', this.boundEventHandler);
        if (!this.handlersMap[eventType]) this.handlersMap[eventType] = new Set();
        this.handlersMap[eventType].add(eventHandler);
    }
    /**
     * Unsubscribe an event handler from a particular event.
     *
     * @param eventType - Event name to unsubscribe from.
     * @param eventHandler - Optional event handler, if none provided, unsubscribe all handlers on this event.
     *
     */ _unsubscribe(eventType, eventHandler) {
        if (this.handlersMap[eventType] && eventHandler) this.handlersMap[eventType].delete(eventHandler);
        if (!eventHandler || this.handlersMap[eventType].size === 0) delete this.handlersMap[eventType];
        if (Object.keys(this.handlersMap).length === 0) this.eventTarget.removeEventListener('message', this.boundEventHandler);
    }
}
$809b25475cc45ca0$var$Receiver.receivers = [];
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $809b25475cc45ca0$export$c03999cb2f36933f(prefix = '', digits = 10) {
    let random = '';
    for(let i = 0; i < digits; i++)random += Math.floor(Math.random() * 10);
    return prefix + random;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Interface for sending messages and waiting for a completion response.
 *
 */ class $809b25475cc45ca0$var$Sender {
    constructor(target){
        this.target = target;
        this.handlers = new Set();
    }
    /**
     * Unsubscribe the handler and remove it from our tracking Set.
     *
     * @param handler - The handler to unsubscribe.
     */ removeMessageHandler(handler) {
        if (handler.messageChannel) {
            handler.messageChannel.port1.removeEventListener('message', handler.onMessage);
            handler.messageChannel.port1.close();
        }
        this.handlers.delete(handler);
    }
    /**
     * Send a message to the Receiver located at {@link target}.
     *
     * @remarks
     * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the
     * receiver has had a chance to fully process the event.
     *
     * @param eventType - Type of event to send.
     * @param data - The payload of the event.
     * @param timeout - Timeout for waiting on an ACK from the receiver.
     *
     * @returns An array of settled promises from all the handlers that were listening on the receiver.
     */ async _send(eventType, data, timeout = 50 /* _TimeoutDuration.ACK */ ) {
        const messageChannel = typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;
        if (!messageChannel) throw new Error("connection_unavailable" /* _MessageError.CONNECTION_UNAVAILABLE */ );
        // Node timers and browser timers return fundamentally different types.
        // We don't actually care what the value is but TS won't accept unknown and
        // we can't cast properly in both environments.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        let completionTimer;
        let handler;
        return new Promise((resolve, reject)=>{
            const eventId = $809b25475cc45ca0$export$c03999cb2f36933f('', 20);
            messageChannel.port1.start();
            const ackTimer = setTimeout(()=>{
                reject(new Error("unsupported_event" /* _MessageError.UNSUPPORTED_EVENT */ ));
            }, timeout);
            handler = {
                messageChannel: messageChannel,
                onMessage (event) {
                    const messageEvent = event;
                    if (messageEvent.data.eventId !== eventId) return;
                    switch(messageEvent.data.status){
                        case "ack" /* _Status.ACK */ :
                            // The receiver should ACK first.
                            clearTimeout(ackTimer);
                            completionTimer = setTimeout(()=>{
                                reject(new Error("timeout" /* _MessageError.TIMEOUT */ ));
                            }, 3000 /* _TimeoutDuration.COMPLETION */ );
                            break;
                        case "done" /* _Status.DONE */ :
                            // Once the receiver's handlers are finished we will get the results.
                            clearTimeout(completionTimer);
                            resolve(messageEvent.data.response);
                            break;
                        default:
                            clearTimeout(ackTimer);
                            clearTimeout(completionTimer);
                            reject(new Error("invalid_response" /* _MessageError.INVALID_RESPONSE */ ));
                            break;
                    }
                }
            };
            this.handlers.add(handler);
            messageChannel.port1.addEventListener('message', handler.onMessage);
            this.target.postMessage({
                eventType: eventType,
                eventId: eventId,
                data: data
            }, [
                messageChannel.port2
            ]);
        }).finally(()=>{
            if (handler) this.removeMessageHandler(handler);
        });
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Lazy accessor for window, since the compat layer won't tree shake this out,
 * we need to make sure not to mess with window unless we have to
 */ function $809b25475cc45ca0$var$_window() {
    return window;
}
function $809b25475cc45ca0$var$_setWindowLocation(url) {
    $809b25475cc45ca0$var$_window().location.href = url;
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $809b25475cc45ca0$var$_isWorker() {
    return typeof $809b25475cc45ca0$var$_window()['WorkerGlobalScope'] !== 'undefined' && typeof $809b25475cc45ca0$var$_window()['importScripts'] === 'function';
}
async function $809b25475cc45ca0$var$_getActiveServiceWorker() {
    if (!(navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker)) return null;
    try {
        const registration = await navigator.serviceWorker.ready;
        return registration.active;
    } catch (_a) {
        return null;
    }
}
function $809b25475cc45ca0$var$_getServiceWorkerController() {
    var _a;
    return ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) === null || _a === void 0 ? void 0 : _a.controller) || null;
}
function $809b25475cc45ca0$var$_getWorkerGlobalScope() {
    return $809b25475cc45ca0$var$_isWorker() ? self : null;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $809b25475cc45ca0$var$DB_NAME = 'firebaseLocalStorageDb';
const $809b25475cc45ca0$var$DB_VERSION = 1;
const $809b25475cc45ca0$var$DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';
const $809b25475cc45ca0$var$DB_DATA_KEYPATH = 'fbase_key';
/**
 * Promise wrapper for IDBRequest
 *
 * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6
 *
 */ class $809b25475cc45ca0$var$DBPromise {
    constructor(request){
        this.request = request;
    }
    toPromise() {
        return new Promise((resolve, reject)=>{
            this.request.addEventListener('success', ()=>{
                resolve(this.request.result);
            });
            this.request.addEventListener('error', ()=>{
                reject(this.request.error);
            });
        });
    }
}
function $809b25475cc45ca0$var$getObjectStore(db, isReadWrite) {
    return db.transaction([
        $809b25475cc45ca0$var$DB_OBJECTSTORE_NAME
    ], isReadWrite ? 'readwrite' : 'readonly').objectStore($809b25475cc45ca0$var$DB_OBJECTSTORE_NAME);
}
function $809b25475cc45ca0$var$_deleteDatabase() {
    const request = indexedDB.deleteDatabase($809b25475cc45ca0$var$DB_NAME);
    return new $809b25475cc45ca0$var$DBPromise(request).toPromise();
}
function $809b25475cc45ca0$var$_openDatabase() {
    const request = indexedDB.open($809b25475cc45ca0$var$DB_NAME, $809b25475cc45ca0$var$DB_VERSION);
    return new Promise((resolve, reject)=>{
        request.addEventListener('error', ()=>{
            reject(request.error);
        });
        request.addEventListener('upgradeneeded', ()=>{
            const db = request.result;
            try {
                db.createObjectStore($809b25475cc45ca0$var$DB_OBJECTSTORE_NAME, {
                    keyPath: $809b25475cc45ca0$var$DB_DATA_KEYPATH
                });
            } catch (e) {
                reject(e);
            }
        });
        request.addEventListener('success', async ()=>{
            const db = request.result;
            // Strange bug that occurs in Firefox when multiple tabs are opened at the
            // same time. The only way to recover seems to be deleting the database
            // and re-initializing it.
            // https://github.com/firebase/firebase-js-sdk/issues/634
            if (!db.objectStoreNames.contains($809b25475cc45ca0$var$DB_OBJECTSTORE_NAME)) {
                // Need to close the database or else you get a `blocked` event
                db.close();
                await $809b25475cc45ca0$var$_deleteDatabase();
                resolve(await $809b25475cc45ca0$var$_openDatabase());
            } else resolve(db);
        });
    });
}
async function $809b25475cc45ca0$var$_putObject(db, key, value) {
    const request = $809b25475cc45ca0$var$getObjectStore(db, true).put({
        [$809b25475cc45ca0$var$DB_DATA_KEYPATH]: key,
        value: value
    });
    return new $809b25475cc45ca0$var$DBPromise(request).toPromise();
}
async function $809b25475cc45ca0$var$getObject(db, key) {
    const request = $809b25475cc45ca0$var$getObjectStore(db, false).get(key);
    const data = await new $809b25475cc45ca0$var$DBPromise(request).toPromise();
    return data === undefined ? null : data.value;
}
function $809b25475cc45ca0$var$_deleteObject(db, key) {
    const request = $809b25475cc45ca0$var$getObjectStore(db, true).delete(key);
    return new $809b25475cc45ca0$var$DBPromise(request).toPromise();
}
const $809b25475cc45ca0$var$_POLLING_INTERVAL_MS = 800;
const $809b25475cc45ca0$var$_TRANSACTION_RETRY_COUNT = 3;
class $809b25475cc45ca0$var$IndexedDBLocalPersistence {
    constructor(){
        this.type = "LOCAL" /* PersistenceType.LOCAL */ ;
        this._shouldAllowMigration = true;
        this.listeners = {};
        this.localCache = {};
        // setTimeout return value is platform specific
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.pollTimer = null;
        this.pendingWrites = 0;
        this.receiver = null;
        this.sender = null;
        this.serviceWorkerReceiverAvailable = false;
        this.activeServiceWorker = null;
        // Fire & forget the service worker registration as it may never resolve
        this._workerInitializationPromise = this.initializeServiceWorkerMessaging().then(()=>{}, ()=>{});
    }
    async _openDb() {
        if (this.db) return this.db;
        this.db = await $809b25475cc45ca0$var$_openDatabase();
        return this.db;
    }
    async _withRetries(op) {
        let numAttempts = 0;
        while(true)try {
            const db = await this._openDb();
            return await op(db);
        } catch (e) {
            if (numAttempts++ > $809b25475cc45ca0$var$_TRANSACTION_RETRY_COUNT) throw e;
            if (this.db) {
                this.db.close();
                this.db = undefined;
            }
        // TODO: consider adding exponential backoff
        }
    }
    /**
     * IndexedDB events do not propagate from the main window to the worker context.  We rely on a
     * postMessage interface to send these events to the worker ourselves.
     */ async initializeServiceWorkerMessaging() {
        return $809b25475cc45ca0$var$_isWorker() ? this.initializeReceiver() : this.initializeSender();
    }
    /**
     * As the worker we should listen to events from the main window.
     */ async initializeReceiver() {
        this.receiver = $809b25475cc45ca0$var$Receiver._getInstance($809b25475cc45ca0$var$_getWorkerGlobalScope());
        // Refresh from persistence if we receive a KeyChanged message.
        this.receiver._subscribe("keyChanged" /* _EventType.KEY_CHANGED */ , async (_origin, data)=>{
            const keys = await this._poll();
            return {
                keyProcessed: keys.includes(data.key)
            };
        });
        // Let the sender know that we are listening so they give us more timeout.
        this.receiver._subscribe("ping" /* _EventType.PING */ , async (_origin, _data)=>{
            return [
                "keyChanged" /* _EventType.KEY_CHANGED */ 
            ];
        });
    }
    /**
     * As the main window, we should let the worker know when keys change (set and remove).
     *
     * @remarks
     * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}
     * may not resolve.
     */ async initializeSender() {
        var _a, _b;
        // Check to see if there's an active service worker.
        this.activeServiceWorker = await $809b25475cc45ca0$var$_getActiveServiceWorker();
        if (!this.activeServiceWorker) return;
        this.sender = new $809b25475cc45ca0$var$Sender(this.activeServiceWorker);
        // Ping the service worker to check what events they can handle.
        const results = await this.sender._send("ping" /* _EventType.PING */ , {}, 800 /* _TimeoutDuration.LONG_ACK */ );
        if (!results) return;
        if (((_a = results[0]) === null || _a === void 0 ? void 0 : _a.fulfilled) && ((_b = results[0]) === null || _b === void 0 ? void 0 : _b.value.includes("keyChanged" /* _EventType.KEY_CHANGED */ ))) this.serviceWorkerReceiverAvailable = true;
    }
    /**
     * Let the worker know about a changed key, the exact key doesn't technically matter since the
     * worker will just trigger a full sync anyway.
     *
     * @remarks
     * For now, we only support one service worker per page.
     *
     * @param key - Storage key which changed.
     */ async notifyServiceWorker(key) {
        if (!this.sender || !this.activeServiceWorker || $809b25475cc45ca0$var$_getServiceWorkerController() !== this.activeServiceWorker) return;
        try {
            await this.sender._send("keyChanged" /* _EventType.KEY_CHANGED */ , {
                key: key
            }, // Use long timeout if receiver has previously responded to a ping from us.
            this.serviceWorkerReceiverAvailable ? 800 /* _TimeoutDuration.LONG_ACK */  : 50 /* _TimeoutDuration.ACK */ );
        } catch (_a) {
        // This is a best effort approach. Ignore errors.
        }
    }
    async _isAvailable() {
        try {
            if (!indexedDB) return false;
            const db = await $809b25475cc45ca0$var$_openDatabase();
            await $809b25475cc45ca0$var$_putObject(db, $809b25475cc45ca0$var$STORAGE_AVAILABLE_KEY, '1');
            await $809b25475cc45ca0$var$_deleteObject(db, $809b25475cc45ca0$var$STORAGE_AVAILABLE_KEY);
            return true;
        } catch (_a) {}
        return false;
    }
    async _withPendingWrite(write) {
        this.pendingWrites++;
        try {
            await write();
        } finally{
            this.pendingWrites--;
        }
    }
    async _set(key, value) {
        return this._withPendingWrite(async ()=>{
            await this._withRetries((db)=>$809b25475cc45ca0$var$_putObject(db, key, value));
            this.localCache[key] = value;
            return this.notifyServiceWorker(key);
        });
    }
    async _get(key) {
        const obj = await this._withRetries((db)=>$809b25475cc45ca0$var$getObject(db, key));
        this.localCache[key] = obj;
        return obj;
    }
    async _remove(key) {
        return this._withPendingWrite(async ()=>{
            await this._withRetries((db)=>$809b25475cc45ca0$var$_deleteObject(db, key));
            delete this.localCache[key];
            return this.notifyServiceWorker(key);
        });
    }
    async _poll() {
        // TODO: check if we need to fallback if getAll is not supported
        const result = await this._withRetries((db)=>{
            const getAllRequest = $809b25475cc45ca0$var$getObjectStore(db, false).getAll();
            return new $809b25475cc45ca0$var$DBPromise(getAllRequest).toPromise();
        });
        if (!result) return [];
        // If we have pending writes in progress abort, we'll get picked up on the next poll
        if (this.pendingWrites !== 0) return [];
        const keys = [];
        const keysInResult = new Set();
        if (result.length !== 0) for (const { fbase_key: key, value: value } of result){
            keysInResult.add(key);
            if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {
                this.notifyListeners(key, value);
                keys.push(key);
            }
        }
        for (const localKey of Object.keys(this.localCache))if (this.localCache[localKey] && !keysInResult.has(localKey)) {
            // Deleted
            this.notifyListeners(localKey, null);
            keys.push(localKey);
        }
        return keys;
    }
    notifyListeners(key, newValue) {
        this.localCache[key] = newValue;
        const listeners = this.listeners[key];
        if (listeners) for (const listener of Array.from(listeners))listener(newValue);
    }
    startPolling() {
        this.stopPolling();
        this.pollTimer = setInterval(async ()=>this._poll(), $809b25475cc45ca0$var$_POLLING_INTERVAL_MS);
    }
    stopPolling() {
        if (this.pollTimer) {
            clearInterval(this.pollTimer);
            this.pollTimer = null;
        }
    }
    _addListener(key, listener) {
        if (Object.keys(this.listeners).length === 0) this.startPolling();
        if (!this.listeners[key]) {
            this.listeners[key] = new Set();
            // Populate the cache to avoid spuriously triggering on first poll.
            this._get(key); // This can happen in the background async and we can return immediately.
        }
        this.listeners[key].add(listener);
    }
    _removeListener(key, listener) {
        if (this.listeners[key]) {
            this.listeners[key].delete(listener);
            if (this.listeners[key].size === 0) delete this.listeners[key];
        }
        if (Object.keys(this.listeners).length === 0) this.stopPolling();
    }
}
$809b25475cc45ca0$var$IndexedDBLocalPersistence.type = 'LOCAL';
/**
 * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`
 * for the underlying storage.
 *
 * @public
 */ const $809b25475cc45ca0$export$23f2a1d2818174ef = $809b25475cc45ca0$var$IndexedDBLocalPersistence;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $809b25475cc45ca0$var$startSignInPhoneMfa(auth, request) {
    return $809b25475cc45ca0$var$_performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v2/accounts/mfaSignIn:start" /* Endpoint.START_MFA_SIGN_IN */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
}
function $809b25475cc45ca0$var$finalizeSignInPhoneMfa(auth, request) {
    return $809b25475cc45ca0$var$_performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v2/accounts/mfaSignIn:finalize" /* Endpoint.FINALIZE_MFA_SIGN_IN */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
}
function $809b25475cc45ca0$var$finalizeSignInTotpMfa(auth, request) {
    return $809b25475cc45ca0$var$_performApiRequest(auth, "POST" /* HttpMethod.POST */ , "/v2/accounts/mfaSignIn:finalize" /* Endpoint.FINALIZE_MFA_SIGN_IN */ , $809b25475cc45ca0$var$_addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // ReCaptcha will load using the same callback, so the callback function needs
// to be kept around
const $809b25475cc45ca0$var$_JSLOAD_CALLBACK = $809b25475cc45ca0$var$_generateCallbackName('rcb');
const $809b25475cc45ca0$var$NETWORK_TIMEOUT_DELAY = new $809b25475cc45ca0$var$Delay(30000, 60000);
/**
 * Loader for the GReCaptcha library. There should only ever be one of this.
 */ class $809b25475cc45ca0$var$ReCaptchaLoaderImpl {
    constructor(){
        var _a;
        this.hostLanguage = '';
        this.counter = 0;
        /**
         * Check for `render()` method. `window.grecaptcha` will exist if the Enterprise
         * version of the ReCAPTCHA script was loaded by someone else (e.g. App Check) but
         * `window.grecaptcha.render()` will not. Another load will add it.
         */ this.librarySeparatelyLoaded = !!((_a = $809b25475cc45ca0$var$_window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render);
    }
    load(auth, hl = '') {
        $809b25475cc45ca0$export$24baa2b76016ce0e($809b25475cc45ca0$var$isHostLanguageValid(hl), auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        if (this.shouldResolveImmediately(hl) && $809b25475cc45ca0$var$isV2($809b25475cc45ca0$var$_window().grecaptcha)) return Promise.resolve($809b25475cc45ca0$var$_window().grecaptcha);
        return new Promise((resolve, reject)=>{
            const networkTimeout = $809b25475cc45ca0$var$_window().setTimeout(()=>{
                reject($809b25475cc45ca0$export$890c4ad488842ce7(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ ));
            }, $809b25475cc45ca0$var$NETWORK_TIMEOUT_DELAY.get());
            $809b25475cc45ca0$var$_window()[$809b25475cc45ca0$var$_JSLOAD_CALLBACK] = ()=>{
                $809b25475cc45ca0$var$_window().clearTimeout(networkTimeout);
                delete $809b25475cc45ca0$var$_window()[$809b25475cc45ca0$var$_JSLOAD_CALLBACK];
                const recaptcha = $809b25475cc45ca0$var$_window().grecaptcha;
                if (!recaptcha || !$809b25475cc45ca0$var$isV2(recaptcha)) {
                    reject($809b25475cc45ca0$export$890c4ad488842ce7(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ ));
                    return;
                }
                // Wrap the recaptcha render function so that we know if the developer has
                // called it separately
                const render = recaptcha.render;
                recaptcha.render = (container, params)=>{
                    const widgetId = render(container, params);
                    this.counter++;
                    return widgetId;
                };
                this.hostLanguage = hl;
                resolve(recaptcha);
            };
            const url = `${$809b25475cc45ca0$var$_recaptchaV2ScriptUrl()}?${(0, $ee1ab2624407a779$export$ac4103b836844853)({
                onload: $809b25475cc45ca0$var$_JSLOAD_CALLBACK,
                render: 'explicit',
                hl: hl
            })}`;
            $809b25475cc45ca0$var$_loadJS(url).catch(()=>{
                clearTimeout(networkTimeout);
                reject($809b25475cc45ca0$export$890c4ad488842ce7(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ ));
            });
        });
    }
    clearedOneInstance() {
        this.counter--;
    }
    shouldResolveImmediately(hl) {
        var _a;
        // We can resolve immediately if:
        //   • grecaptcha is already defined AND (
        //     1. the requested language codes are the same OR
        //     2. there exists already a ReCaptcha on the page
        //     3. the library was already loaded by the app
        // In cases (2) and (3), we _can't_ reload as it would break the recaptchas
        // that are already in the page
        return !!((_a = $809b25475cc45ca0$var$_window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render) && (hl === this.hostLanguage || this.counter > 0 || this.librarySeparatelyLoaded);
    }
}
function $809b25475cc45ca0$var$isHostLanguageValid(hl) {
    return hl.length <= 6 && /^\s*[a-zA-Z0-9\-]*\s*$/.test(hl);
}
class $809b25475cc45ca0$var$MockReCaptchaLoaderImpl {
    async load(auth) {
        return new $809b25475cc45ca0$var$MockReCaptcha(auth);
    }
    clearedOneInstance() {}
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $809b25475cc45ca0$var$RECAPTCHA_VERIFIER_TYPE = 'recaptcha';
const $809b25475cc45ca0$var$DEFAULT_PARAMS = {
    theme: 'light',
    type: 'image'
};
/**
 * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.
 *
 * @remarks
 * `RecaptchaVerifier` does not work in a Node.js environment.
 *
 * @public
 */ class $809b25475cc45ca0$export$db202ddc8be9136 {
    /**
     * @param authExtern - The corresponding Firebase {@link Auth} instance.
     *
     * @param containerOrId - The reCAPTCHA container parameter.
     *
     * @remarks
     * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a
     * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to
     * an element ID. The corresponding element must also must be in the DOM at the time of
     * initialization.
     *
     * @param parameters - The optional reCAPTCHA parameters.
     *
     * @remarks
     * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for
     * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will
     * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value
     * 'invisible'.
     */ constructor(authExtern, containerOrId, parameters = Object.assign({}, $809b25475cc45ca0$var$DEFAULT_PARAMS)){
        this.parameters = parameters;
        /**
         * The application verifier type.
         *
         * @remarks
         * For a reCAPTCHA verifier, this is 'recaptcha'.
         */ this.type = $809b25475cc45ca0$var$RECAPTCHA_VERIFIER_TYPE;
        this.destroyed = false;
        this.widgetId = null;
        this.tokenChangeListeners = new Set();
        this.renderPromise = null;
        this.recaptcha = null;
        this.auth = $809b25475cc45ca0$export$23ebac1979863676(authExtern);
        this.isInvisible = this.parameters.size === 'invisible';
        $809b25475cc45ca0$export$24baa2b76016ce0e(typeof document !== 'undefined', this.auth, "operation-not-supported-in-this-environment" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */ );
        const container = typeof containerOrId === 'string' ? document.getElementById(containerOrId) : containerOrId;
        $809b25475cc45ca0$export$24baa2b76016ce0e(container, this.auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        this.container = container;
        this.parameters.callback = this.makeTokenCallback(this.parameters.callback);
        this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting ? new $809b25475cc45ca0$var$MockReCaptchaLoaderImpl() : new $809b25475cc45ca0$var$ReCaptchaLoaderImpl();
        this.validateStartingState();
    // TODO: Figure out if sdk version is needed
    }
    /**
     * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.
     *
     * @returns A Promise for the reCAPTCHA token.
     */ async verify() {
        this.assertNotDestroyed();
        const id = await this.render();
        const recaptcha = this.getAssertedRecaptcha();
        const response = recaptcha.getResponse(id);
        if (response) return response;
        return new Promise((resolve)=>{
            const tokenChange = (token)=>{
                if (!token) return; // Ignore token expirations.
                this.tokenChangeListeners.delete(tokenChange);
                resolve(token);
            };
            this.tokenChangeListeners.add(tokenChange);
            if (this.isInvisible) recaptcha.execute(id);
        });
    }
    /**
     * Renders the reCAPTCHA widget on the page.
     *
     * @returns A Promise that resolves with the reCAPTCHA widget ID.
     */ render() {
        try {
            this.assertNotDestroyed();
        } catch (e) {
            // This method returns a promise. Since it's not async (we want to return the
            // _same_ promise if rendering is still occurring), the API surface should
            // reject with the error rather than just throw
            return Promise.reject(e);
        }
        if (this.renderPromise) return this.renderPromise;
        this.renderPromise = this.makeRenderPromise().catch((e)=>{
            this.renderPromise = null;
            throw e;
        });
        return this.renderPromise;
    }
    /** @internal */ _reset() {
        this.assertNotDestroyed();
        if (this.widgetId !== null) this.getAssertedRecaptcha().reset(this.widgetId);
    }
    /**
     * Clears the reCAPTCHA widget from the page and destroys the instance.
     */ clear() {
        this.assertNotDestroyed();
        this.destroyed = true;
        this._recaptchaLoader.clearedOneInstance();
        if (!this.isInvisible) this.container.childNodes.forEach((node)=>{
            this.container.removeChild(node);
        });
    }
    validateStartingState() {
        $809b25475cc45ca0$export$24baa2b76016ce0e(!this.parameters.sitekey, this.auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        $809b25475cc45ca0$export$24baa2b76016ce0e(this.isInvisible || !this.container.hasChildNodes(), this.auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        $809b25475cc45ca0$export$24baa2b76016ce0e(typeof document !== 'undefined', this.auth, "operation-not-supported-in-this-environment" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */ );
    }
    makeTokenCallback(existing) {
        return (token)=>{
            this.tokenChangeListeners.forEach((listener)=>listener(token));
            if (typeof existing === 'function') existing(token);
            else if (typeof existing === 'string') {
                const globalFunc = $809b25475cc45ca0$var$_window()[existing];
                if (typeof globalFunc === 'function') globalFunc(token);
            }
        };
    }
    assertNotDestroyed() {
        $809b25475cc45ca0$export$24baa2b76016ce0e(!this.destroyed, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    }
    async makeRenderPromise() {
        await this.init();
        if (!this.widgetId) {
            let container = this.container;
            if (!this.isInvisible) {
                const guaranteedEmpty = document.createElement('div');
                container.appendChild(guaranteedEmpty);
                container = guaranteedEmpty;
            }
            this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);
        }
        return this.widgetId;
    }
    async init() {
        $809b25475cc45ca0$export$24baa2b76016ce0e($809b25475cc45ca0$var$_isHttpOrHttps() && !$809b25475cc45ca0$var$_isWorker(), this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        await $809b25475cc45ca0$var$domReady();
        this.recaptcha = await this._recaptchaLoader.load(this.auth, this.auth.languageCode || undefined);
        const siteKey = await $809b25475cc45ca0$var$getRecaptchaParams(this.auth);
        $809b25475cc45ca0$export$24baa2b76016ce0e(siteKey, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        this.parameters.sitekey = siteKey;
    }
    getAssertedRecaptcha() {
        $809b25475cc45ca0$export$24baa2b76016ce0e(this.recaptcha, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        return this.recaptcha;
    }
}
function $809b25475cc45ca0$var$domReady() {
    let resolver = null;
    return new Promise((resolve)=>{
        if (document.readyState === 'complete') {
            resolve();
            return;
        }
        // Document not ready, wait for load before resolving.
        // Save resolver, so we can remove listener in case it was externally
        // cancelled.
        resolver = ()=>resolve();
        window.addEventListener('load', resolver);
    }).catch((e)=>{
        if (resolver) window.removeEventListener('load', resolver);
        throw e;
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $809b25475cc45ca0$var$ConfirmationResultImpl {
    constructor(verificationId, onConfirmation){
        this.verificationId = verificationId;
        this.onConfirmation = onConfirmation;
    }
    confirm(verificationCode) {
        const authCredential = $809b25475cc45ca0$export$3a6d5c9ae78a2c08._fromVerification(this.verificationId, verificationCode);
        return this.onConfirmation(authCredential);
    }
}
/**
 * Asynchronously signs in using a phone number.
 *
 * @remarks
 * This method sends a code via SMS to the given
 * phone number, and returns a {@link ConfirmationResult}. After the user
 * provides the code sent to their phone, call {@link ConfirmationResult.confirm}
 * with the code to sign the user in.
 *
 * For abuse prevention, this method requires a {@link ApplicationVerifier}.
 * This SDK includes an implementation based on reCAPTCHA v2, {@link RecaptchaVerifier}.
 * This function can work on other platforms that do not support the
 * {@link RecaptchaVerifier} (like React Native), but you need to use a
 * third-party {@link ApplicationVerifier} implementation.
 *
 * If you've enabled project-level reCAPTCHA Enterprise bot protection in
 * Enforce mode, you can omit the {@link ApplicationVerifier}.
 *
 * This method does not work in a Node.js environment or with {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * @example
 * ```javascript
 * // 'recaptcha-container' is the ID of an element in the DOM.
 * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');
 * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
 * // Obtain a verificationCode from the user.
 * const credential = await confirmationResult.confirm(verificationCode);
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
 * @param appVerifier - The {@link ApplicationVerifier}.
 *
 * @public
 */ async function $809b25475cc45ca0$export$2408f22a0fab9ae5(auth, phoneNumber, appVerifier) {
    if ((0, $12572052cab62175$export$643c8bc6c389f34e)(auth.app)) return Promise.reject($809b25475cc45ca0$var$_serverAppCurrentUserOperationNotSupportedError(auth));
    const authInternal = $809b25475cc45ca0$export$23ebac1979863676(auth);
    const verificationId = await $809b25475cc45ca0$var$_verifyPhoneNumber(authInternal, phoneNumber, (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(appVerifier));
    return new $809b25475cc45ca0$var$ConfirmationResultImpl(verificationId, (cred)=>$809b25475cc45ca0$export$ce26c07117d59d6a(authInternal, cred));
}
/**
 * Links the user account with the given phone number.
 *
 * @remarks
 * This method does not work in a Node.js environment.
 *
 * @param user - The user.
 * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
 * @param appVerifier - The {@link ApplicationVerifier}.
 *
 * @public
 */ async function $809b25475cc45ca0$export$882b5998b3b9117c(user, phoneNumber, appVerifier) {
    const userInternal = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(user);
    await $809b25475cc45ca0$var$_assertLinkedStatus(false, userInternal, "phone" /* ProviderId.PHONE */ );
    const verificationId = await $809b25475cc45ca0$var$_verifyPhoneNumber(userInternal.auth, phoneNumber, (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(appVerifier));
    return new $809b25475cc45ca0$var$ConfirmationResultImpl(verificationId, (cred)=>$809b25475cc45ca0$export$6559d589eb85fbb6(userInternal, cred));
}
/**
 * Re-authenticates a user using a fresh phone credential.
 *
 * @remarks
 * Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.
 *
 * This method does not work in a Node.js environment or on any {@link User} signed in by
 * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.
 *
 * @param user - The user.
 * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
 * @param appVerifier - The {@link ApplicationVerifier}.
 *
 * @public
 */ async function $809b25475cc45ca0$export$43caf9889c228507(user, phoneNumber, appVerifier) {
    const userInternal = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(user);
    if ((0, $12572052cab62175$export$643c8bc6c389f34e)(userInternal.auth.app)) return Promise.reject($809b25475cc45ca0$var$_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));
    const verificationId = await $809b25475cc45ca0$var$_verifyPhoneNumber(userInternal.auth, phoneNumber, (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(appVerifier));
    return new $809b25475cc45ca0$var$ConfirmationResultImpl(verificationId, (cred)=>$809b25475cc45ca0$export$efca4cbe5dd06740(userInternal, cred));
}
/**
 * Returns a verification ID to be used in conjunction with the SMS code that is sent.
 *
 */ async function $809b25475cc45ca0$var$_verifyPhoneNumber(auth, options, verifier) {
    var _a;
    if (!auth._getRecaptchaConfig()) try {
        await $809b25475cc45ca0$var$_initializeRecaptchaConfig(auth);
    } catch (error) {
        // If an error occurs while fetching the config, there is no way to know the enablement state
        // of Phone provider, so we proceed with recaptcha V2 verification.
        // The error is likely "recaptchaKey undefined", as reCAPTCHA Enterprise is not
        // enabled for any provider.
        console.log('Failed to initialize reCAPTCHA Enterprise config. Triggering the reCAPTCHA v2 verification.');
    }
    try {
        let phoneInfoOptions;
        if (typeof options === 'string') phoneInfoOptions = {
            phoneNumber: options
        };
        else phoneInfoOptions = options;
        if ('session' in phoneInfoOptions) {
            const session = phoneInfoOptions.session;
            if ('phoneNumber' in phoneInfoOptions) {
                $809b25475cc45ca0$export$24baa2b76016ce0e(session.type === "enroll" /* MultiFactorSessionType.ENROLL */ , auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
                const startPhoneMfaEnrollmentRequest = {
                    idToken: session.credential,
                    phoneEnrollmentInfo: {
                        phoneNumber: phoneInfoOptions.phoneNumber,
                        clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ 
                    }
                };
                const startEnrollPhoneMfaActionCallback = async (authInstance, request)=>{
                    // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.
                    if (request.phoneEnrollmentInfo.captchaResponse === $809b25475cc45ca0$var$FAKE_TOKEN) {
                        $809b25475cc45ca0$export$24baa2b76016ce0e((verifier === null || verifier === void 0 ? void 0 : verifier.type) === $809b25475cc45ca0$var$RECAPTCHA_VERIFIER_TYPE, authInstance, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
                        const requestWithRecaptchaV2 = await $809b25475cc45ca0$var$injectRecaptchaV2Token(authInstance, request, verifier);
                        return $809b25475cc45ca0$var$startEnrollPhoneMfa(authInstance, requestWithRecaptchaV2);
                    }
                    return $809b25475cc45ca0$var$startEnrollPhoneMfa(authInstance, request);
                };
                const startPhoneMfaEnrollmentResponse = $809b25475cc45ca0$var$handleRecaptchaFlow(auth, startPhoneMfaEnrollmentRequest, "mfaSmsEnrollment" /* RecaptchaActionName.MFA_SMS_ENROLLMENT */ , startEnrollPhoneMfaActionCallback, "PHONE_PROVIDER" /* RecaptchaAuthProvider.PHONE_PROVIDER */ );
                const response = await startPhoneMfaEnrollmentResponse.catch((error)=>{
                    return Promise.reject(error);
                });
                return response.phoneSessionInfo.sessionInfo;
            } else {
                $809b25475cc45ca0$export$24baa2b76016ce0e(session.type === "signin" /* MultiFactorSessionType.SIGN_IN */ , auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
                const mfaEnrollmentId = ((_a = phoneInfoOptions.multiFactorHint) === null || _a === void 0 ? void 0 : _a.uid) || phoneInfoOptions.multiFactorUid;
                $809b25475cc45ca0$export$24baa2b76016ce0e(mfaEnrollmentId, auth, "missing-multi-factor-info" /* AuthErrorCode.MISSING_MFA_INFO */ );
                const startPhoneMfaSignInRequest = {
                    mfaPendingCredential: session.credential,
                    mfaEnrollmentId: mfaEnrollmentId,
                    phoneSignInInfo: {
                        clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ 
                    }
                };
                const startSignInPhoneMfaActionCallback = async (authInstance, request)=>{
                    // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.
                    if (request.phoneSignInInfo.captchaResponse === $809b25475cc45ca0$var$FAKE_TOKEN) {
                        $809b25475cc45ca0$export$24baa2b76016ce0e((verifier === null || verifier === void 0 ? void 0 : verifier.type) === $809b25475cc45ca0$var$RECAPTCHA_VERIFIER_TYPE, authInstance, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
                        const requestWithRecaptchaV2 = await $809b25475cc45ca0$var$injectRecaptchaV2Token(authInstance, request, verifier);
                        return $809b25475cc45ca0$var$startSignInPhoneMfa(authInstance, requestWithRecaptchaV2);
                    }
                    return $809b25475cc45ca0$var$startSignInPhoneMfa(authInstance, request);
                };
                const startPhoneMfaSignInResponse = $809b25475cc45ca0$var$handleRecaptchaFlow(auth, startPhoneMfaSignInRequest, "mfaSmsSignIn" /* RecaptchaActionName.MFA_SMS_SIGNIN */ , startSignInPhoneMfaActionCallback, "PHONE_PROVIDER" /* RecaptchaAuthProvider.PHONE_PROVIDER */ );
                const response = await startPhoneMfaSignInResponse.catch((error)=>{
                    return Promise.reject(error);
                });
                return response.phoneResponseInfo.sessionInfo;
            }
        } else {
            const sendPhoneVerificationCodeRequest = {
                phoneNumber: phoneInfoOptions.phoneNumber,
                clientType: "CLIENT_TYPE_WEB" /* RecaptchaClientType.WEB */ 
            };
            const sendPhoneVerificationCodeActionCallback = async (authInstance, request)=>{
                // If reCAPTCHA Enterprise token is FAKE_TOKEN, fetch reCAPTCHA v2 token and inject into request.
                if (request.captchaResponse === $809b25475cc45ca0$var$FAKE_TOKEN) {
                    $809b25475cc45ca0$export$24baa2b76016ce0e((verifier === null || verifier === void 0 ? void 0 : verifier.type) === $809b25475cc45ca0$var$RECAPTCHA_VERIFIER_TYPE, authInstance, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
                    const requestWithRecaptchaV2 = await $809b25475cc45ca0$var$injectRecaptchaV2Token(authInstance, request, verifier);
                    return $809b25475cc45ca0$var$sendPhoneVerificationCode(authInstance, requestWithRecaptchaV2);
                }
                return $809b25475cc45ca0$var$sendPhoneVerificationCode(authInstance, request);
            };
            const sendPhoneVerificationCodeResponse = $809b25475cc45ca0$var$handleRecaptchaFlow(auth, sendPhoneVerificationCodeRequest, "sendVerificationCode" /* RecaptchaActionName.SEND_VERIFICATION_CODE */ , sendPhoneVerificationCodeActionCallback, "PHONE_PROVIDER" /* RecaptchaAuthProvider.PHONE_PROVIDER */ );
            const response = await sendPhoneVerificationCodeResponse.catch((error)=>{
                return Promise.reject(error);
            });
            return response.sessionInfo;
        }
    } finally{
        verifier === null || verifier === void 0 || verifier._reset();
    }
}
/**
 * Updates the user's phone number.
 *
 * @remarks
 * This method does not work in a Node.js environment or on any {@link User} signed in by
 * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.
 *
 * @example
 * ```
 * // 'recaptcha-container' is the ID of an element in the DOM.
 * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');
 * const provider = new PhoneAuthProvider(auth);
 * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);
 * // Obtain the verificationCode from the user.
 * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
 * await updatePhoneNumber(user, phoneCredential);
 * ```
 *
 * @param user - The user.
 * @param credential - A credential authenticating the new phone number.
 *
 * @public
 */ async function $809b25475cc45ca0$export$3b14a55fb2447963(user, credential) {
    const userInternal = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(user);
    if ((0, $12572052cab62175$export$643c8bc6c389f34e)(userInternal.auth.app)) return Promise.reject($809b25475cc45ca0$var$_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));
    await $809b25475cc45ca0$var$_link$1(userInternal, credential);
}
// Helper function that fetches and injects a reCAPTCHA v2 token into the request.
async function $809b25475cc45ca0$var$injectRecaptchaV2Token(auth, request, recaptchaV2Verifier) {
    $809b25475cc45ca0$export$24baa2b76016ce0e(recaptchaV2Verifier.type === $809b25475cc45ca0$var$RECAPTCHA_VERIFIER_TYPE, auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
    const recaptchaV2Token = await recaptchaV2Verifier.verify();
    $809b25475cc45ca0$export$24baa2b76016ce0e(typeof recaptchaV2Token === 'string', auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
    const newRequest = Object.assign({}, request);
    if ('phoneEnrollmentInfo' in newRequest) {
        const phoneNumber = newRequest.phoneEnrollmentInfo.phoneNumber;
        const captchaResponse = newRequest.phoneEnrollmentInfo.captchaResponse;
        const clientType = newRequest.phoneEnrollmentInfo.clientType;
        const recaptchaVersion = newRequest.phoneEnrollmentInfo.recaptchaVersion;
        Object.assign(newRequest, {
            'phoneEnrollmentInfo': {
                phoneNumber: phoneNumber,
                recaptchaToken: recaptchaV2Token,
                captchaResponse: captchaResponse,
                clientType: clientType,
                recaptchaVersion: recaptchaVersion
            }
        });
        return newRequest;
    } else if ('phoneSignInInfo' in newRequest) {
        const captchaResponse = newRequest.phoneSignInInfo.captchaResponse;
        const clientType = newRequest.phoneSignInInfo.clientType;
        const recaptchaVersion = newRequest.phoneSignInInfo.recaptchaVersion;
        Object.assign(newRequest, {
            'phoneSignInInfo': {
                recaptchaToken: recaptchaV2Token,
                captchaResponse: captchaResponse,
                clientType: clientType,
                recaptchaVersion: recaptchaVersion
            }
        });
        return newRequest;
    } else {
        Object.assign(newRequest, {
            'recaptchaToken': recaptchaV2Token
        });
        return newRequest;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating an {@link PhoneAuthCredential}.
 *
 * @remarks
 * `PhoneAuthProvider` does not work in a Node.js environment.
 *
 * @example
 * ```javascript
 * // 'recaptcha-container' is the ID of an element in the DOM.
 * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');
 * const provider = new PhoneAuthProvider(auth);
 * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);
 * // Obtain the verificationCode from the user.
 * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
 * const userCredential = await signInWithCredential(auth, phoneCredential);
 * ```
 *
 * @public
 */ class $809b25475cc45ca0$export$56c0d5a1e737357d {
    /**
     * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.
     *
     */ constructor(auth){
        /** Always set to {@link ProviderId}.PHONE. */ this.providerId = $809b25475cc45ca0$export$56c0d5a1e737357d.PROVIDER_ID;
        this.auth = $809b25475cc45ca0$export$23ebac1979863676(auth);
    }
    /**
     *
     * Starts a phone number authentication flow by sending a verification code to the given phone
     * number.
     *
     * @example
     * ```javascript
     * const provider = new PhoneAuthProvider(auth);
     * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);
     * // Obtain verificationCode from the user.
     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
     * const userCredential = await signInWithCredential(auth, authCredential);
     * ```
     *
     * @example
     * An alternative flow is provided using the `signInWithPhoneNumber` method.
     * ```javascript
     * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
     * // Obtain verificationCode from the user.
     * const userCredential = confirmationResult.confirm(verificationCode);
     * ```
     *
     * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in
     * E.164 format (e.g. +16505550101).
     * @param applicationVerifier - An {@link ApplicationVerifier}, which prevents
     * requests from unauthorized clients. This SDK includes an implementation
     * based on reCAPTCHA v2, {@link RecaptchaVerifier}. If you've enabled
     * reCAPTCHA Enterprise bot protection in Enforce mode, this parameter is
     * optional; in all other configurations, the parameter is required.
     *
     * @returns A Promise for a verification ID that can be passed to
     * {@link PhoneAuthProvider.credential} to identify this flow.
     */ verifyPhoneNumber(phoneOptions, applicationVerifier) {
        return $809b25475cc45ca0$var$_verifyPhoneNumber(this.auth, phoneOptions, (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(applicationVerifier));
    }
    /**
     * Creates a phone auth credential, given the verification ID from
     * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's
     * mobile device.
     *
     * @example
     * ```javascript
     * const provider = new PhoneAuthProvider(auth);
     * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);
     * // Obtain verificationCode from the user.
     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
     * const userCredential = signInWithCredential(auth, authCredential);
     * ```
     *
     * @example
     * An alternative flow is provided using the `signInWithPhoneNumber` method.
     * ```javascript
     * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
     * // Obtain verificationCode from the user.
     * const userCredential = await confirmationResult.confirm(verificationCode);
     * ```
     *
     * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.
     * @param verificationCode - The verification code sent to the user's mobile device.
     *
     * @returns The auth provider credential.
     */ static credential(verificationId, verificationCode) {
        return $809b25475cc45ca0$export$3a6d5c9ae78a2c08._fromVerification(verificationId, verificationCode);
    }
    /**
     * Generates an {@link AuthCredential} from a {@link UserCredential}.
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        const credential = userCredential;
        return $809b25475cc45ca0$export$56c0d5a1e737357d.credentialFromTaggedObject(credential);
    }
    /**
     * Returns an {@link AuthCredential} when passed an error.
     *
     * @remarks
     *
     * This method works for errors like
     * `auth/account-exists-with-different-credentials`. This is useful for
     * recovering when attempting to set a user's phone number but the number
     * in question is already tied to another account. For example, the following
     * code tries to update the current user's phone number, and if that
     * fails, links the user with the account associated with that number:
     *
     * ```js
     * const provider = new PhoneAuthProvider(auth);
     * const verificationId = await provider.verifyPhoneNumber(number, verifier);
     * try {
     *   const code = ''; // Prompt the user for the verification code
     *   await updatePhoneNumber(
     *       auth.currentUser,
     *       PhoneAuthProvider.credential(verificationId, code));
     * } catch (e) {
     *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {
     *     const cred = PhoneAuthProvider.credentialFromError(e);
     *     await linkWithCredential(auth.currentUser, cred);
     *   }
     * }
     *
     * // At this point, auth.currentUser.phoneNumber === number.
     * ```
     *
     * @param error - The error to generate a credential from.
     */ static credentialFromError(error) {
        return $809b25475cc45ca0$export$56c0d5a1e737357d.credentialFromTaggedObject(error.customData || {});
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
        if (!tokenResponse) return null;
        const { phoneNumber: phoneNumber, temporaryProof: temporaryProof } = tokenResponse;
        if (phoneNumber && temporaryProof) return $809b25475cc45ca0$export$3a6d5c9ae78a2c08._fromTokenResponse(phoneNumber, temporaryProof);
        return null;
    }
}
/** Always set to {@link ProviderId}.PHONE. */ $809b25475cc45ca0$export$56c0d5a1e737357d.PROVIDER_ID = "phone" /* ProviderId.PHONE */ ;
/** Always set to {@link SignInMethod}.PHONE. */ $809b25475cc45ca0$export$56c0d5a1e737357d.PHONE_SIGN_IN_METHOD = "phone" /* SignInMethod.PHONE */ ;
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Chooses a popup/redirect resolver to use. This prefers the override (which
 * is directly passed in), and falls back to the property set on the auth
 * object. If neither are available, this function errors w/ an argument error.
 */ function $809b25475cc45ca0$var$_withDefaultResolver(auth, resolverOverride) {
    if (resolverOverride) return $809b25475cc45ca0$export$cf2f7c5792f80b46(resolverOverride);
    $809b25475cc45ca0$export$24baa2b76016ce0e(auth._popupRedirectResolver, auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
    return auth._popupRedirectResolver;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $809b25475cc45ca0$var$IdpCredential extends $809b25475cc45ca0$export$3a1a48c8f6ef640e {
    constructor(params){
        super("custom" /* ProviderId.CUSTOM */ , "custom" /* ProviderId.CUSTOM */ );
        this.params = params;
    }
    _getIdTokenResponse(auth) {
        return $809b25475cc45ca0$var$signInWithIdp(auth, this._buildIdpRequest());
    }
    _linkToIdToken(auth, idToken) {
        return $809b25475cc45ca0$var$signInWithIdp(auth, this._buildIdpRequest(idToken));
    }
    _getReauthenticationResolver(auth) {
        return $809b25475cc45ca0$var$signInWithIdp(auth, this._buildIdpRequest());
    }
    _buildIdpRequest(idToken) {
        const request = {
            requestUri: this.params.requestUri,
            sessionId: this.params.sessionId,
            postBody: this.params.postBody,
            tenantId: this.params.tenantId,
            pendingToken: this.params.pendingToken,
            returnSecureToken: true,
            returnIdpCredential: true
        };
        if (idToken) request.idToken = idToken;
        return request;
    }
}
function $809b25475cc45ca0$var$_signIn(params) {
    return $809b25475cc45ca0$var$_signInWithCredential(params.auth, new $809b25475cc45ca0$var$IdpCredential(params), params.bypassAuthState);
}
function $809b25475cc45ca0$var$_reauth(params) {
    const { auth: auth, user: user } = params;
    $809b25475cc45ca0$export$24baa2b76016ce0e(user, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    return $809b25475cc45ca0$var$_reauthenticate(user, new $809b25475cc45ca0$var$IdpCredential(params), params.bypassAuthState);
}
async function $809b25475cc45ca0$var$_link(params) {
    const { auth: auth, user: user } = params;
    $809b25475cc45ca0$export$24baa2b76016ce0e(user, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    return $809b25475cc45ca0$var$_link$1(user, new $809b25475cc45ca0$var$IdpCredential(params), params.bypassAuthState);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Popup event manager. Handles the popup's entire lifecycle; listens to auth
 * events
 */ class $809b25475cc45ca0$var$AbstractPopupRedirectOperation {
    constructor(auth, filter, resolver, user, bypassAuthState = false){
        this.auth = auth;
        this.resolver = resolver;
        this.user = user;
        this.bypassAuthState = bypassAuthState;
        this.pendingPromise = null;
        this.eventManager = null;
        this.filter = Array.isArray(filter) ? filter : [
            filter
        ];
    }
    execute() {
        return new Promise(async (resolve, reject)=>{
            this.pendingPromise = {
                resolve: resolve,
                reject: reject
            };
            try {
                this.eventManager = await this.resolver._initialize(this.auth);
                await this.onExecution();
                this.eventManager.registerConsumer(this);
            } catch (e) {
                this.reject(e);
            }
        });
    }
    async onAuthEvent(event) {
        const { urlResponse: urlResponse, sessionId: sessionId, postBody: postBody, tenantId: tenantId, error: error, type: type } = event;
        if (error) {
            this.reject(error);
            return;
        }
        const params = {
            auth: this.auth,
            requestUri: urlResponse,
            sessionId: sessionId,
            tenantId: tenantId || undefined,
            postBody: postBody || undefined,
            user: this.user,
            bypassAuthState: this.bypassAuthState
        };
        try {
            this.resolve(await this.getIdpTask(type)(params));
        } catch (e) {
            this.reject(e);
        }
    }
    onError(error) {
        this.reject(error);
    }
    getIdpTask(type) {
        switch(type){
            case "signInViaPopup" /* AuthEventType.SIGN_IN_VIA_POPUP */ :
            case "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */ :
                return $809b25475cc45ca0$var$_signIn;
            case "linkViaPopup" /* AuthEventType.LINK_VIA_POPUP */ :
            case "linkViaRedirect" /* AuthEventType.LINK_VIA_REDIRECT */ :
                return $809b25475cc45ca0$var$_link;
            case "reauthViaPopup" /* AuthEventType.REAUTH_VIA_POPUP */ :
            case "reauthViaRedirect" /* AuthEventType.REAUTH_VIA_REDIRECT */ :
                return $809b25475cc45ca0$var$_reauth;
            default:
                $809b25475cc45ca0$export$28f7fcd39efa255(this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        }
    }
    resolve(cred) {
        $809b25475cc45ca0$export$d66dc83d8cfc8dd(this.pendingPromise, 'Pending promise was never set');
        this.pendingPromise.resolve(cred);
        this.unregisterAndCleanUp();
    }
    reject(error) {
        $809b25475cc45ca0$export$d66dc83d8cfc8dd(this.pendingPromise, 'Pending promise was never set');
        this.pendingPromise.reject(error);
        this.unregisterAndCleanUp();
    }
    unregisterAndCleanUp() {
        if (this.eventManager) this.eventManager.unregisterConsumer(this);
        this.pendingPromise = null;
        this.cleanUp();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $809b25475cc45ca0$var$_POLL_WINDOW_CLOSE_TIMEOUT = new $809b25475cc45ca0$var$Delay(2000, 10000);
/**
 * Authenticates a Firebase client using a popup-based OAuth authentication flow.
 *
 * @remarks
 * If succeeds, returns the signed in user along with the provider's credential. If sign in was
 * unsuccessful, returns an error object containing additional information about the error.
 *
 * This method does not work in a Node.js environment or with {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new FacebookAuthProvider();
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Facebook Access Token.
 * const credential = provider.credentialFromResult(auth, result);
 * const token = credential.accessToken;
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ async function $809b25475cc45ca0$export$4368d992c4eafac0(auth, provider, resolver) {
    if ((0, $12572052cab62175$export$643c8bc6c389f34e)(auth.app)) return Promise.reject($809b25475cc45ca0$export$890c4ad488842ce7(auth, "operation-not-supported-in-this-environment" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */ ));
    const authInternal = $809b25475cc45ca0$export$23ebac1979863676(auth);
    $809b25475cc45ca0$var$_assertInstanceOf(auth, provider, $809b25475cc45ca0$var$FederatedAuthProvider);
    const resolverInternal = $809b25475cc45ca0$var$_withDefaultResolver(authInternal, resolver);
    const action = new $809b25475cc45ca0$var$PopupOperation(authInternal, "signInViaPopup" /* AuthEventType.SIGN_IN_VIA_POPUP */ , provider, resolverInternal);
    return action.executeNotNull();
}
/**
 * Reauthenticates the current user with the specified {@link OAuthProvider} using a pop-up based
 * OAuth flow.
 *
 * @remarks
 * If the reauthentication is successful, the returned result will contain the user and the
 * provider's credential.
 *
 * This method does not work in a Node.js environment or on any {@link User} signed in by
 * {@link Auth} instances created with a {@link @firebase/app#FirebaseServerApp}.
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new FacebookAuthProvider();
 * const result = await signInWithPopup(auth, provider);
 * // Reauthenticate using a popup.
 * await reauthenticateWithPopup(result.user, provider);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ async function $809b25475cc45ca0$export$2d1720544b23b823(user, provider, resolver) {
    const userInternal = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(user);
    if ((0, $12572052cab62175$export$643c8bc6c389f34e)(userInternal.auth.app)) return Promise.reject($809b25475cc45ca0$export$890c4ad488842ce7(userInternal.auth, "operation-not-supported-in-this-environment" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */ ));
    $809b25475cc45ca0$var$_assertInstanceOf(userInternal.auth, provider, $809b25475cc45ca0$var$FederatedAuthProvider);
    const resolverInternal = $809b25475cc45ca0$var$_withDefaultResolver(userInternal.auth, resolver);
    const action = new $809b25475cc45ca0$var$PopupOperation(userInternal.auth, "reauthViaPopup" /* AuthEventType.REAUTH_VIA_POPUP */ , provider, resolverInternal, userInternal);
    return action.executeNotNull();
}
/**
 * Links the authenticated provider to the user account using a pop-up based OAuth flow.
 *
 * @remarks
 * If the linking is successful, the returned result will contain the user and the provider's credential.
 *
 * This method does not work in a Node.js environment.
 *
 * @example
 * ```javascript
 * // Sign in using some other provider.
 * const result = await signInWithEmailAndPassword(auth, email, password);
 * // Link using a popup.
 * const provider = new FacebookAuthProvider();
 * await linkWithPopup(result.user, provider);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ async function $809b25475cc45ca0$export$f1e1789686576879(user, provider, resolver) {
    const userInternal = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(user);
    $809b25475cc45ca0$var$_assertInstanceOf(userInternal.auth, provider, $809b25475cc45ca0$var$FederatedAuthProvider);
    const resolverInternal = $809b25475cc45ca0$var$_withDefaultResolver(userInternal.auth, resolver);
    const action = new $809b25475cc45ca0$var$PopupOperation(userInternal.auth, "linkViaPopup" /* AuthEventType.LINK_VIA_POPUP */ , provider, resolverInternal, userInternal);
    return action.executeNotNull();
}
/**
 * Popup event manager. Handles the popup's entire lifecycle; listens to auth
 * events
 *
 */ class $809b25475cc45ca0$var$PopupOperation extends $809b25475cc45ca0$var$AbstractPopupRedirectOperation {
    constructor(auth, filter, provider, resolver, user){
        super(auth, filter, resolver, user);
        this.provider = provider;
        this.authWindow = null;
        this.pollId = null;
        if ($809b25475cc45ca0$var$PopupOperation.currentPopupAction) $809b25475cc45ca0$var$PopupOperation.currentPopupAction.cancel();
        $809b25475cc45ca0$var$PopupOperation.currentPopupAction = this;
    }
    async executeNotNull() {
        const result = await this.execute();
        $809b25475cc45ca0$export$24baa2b76016ce0e(result, this.auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        return result;
    }
    async onExecution() {
        $809b25475cc45ca0$export$d66dc83d8cfc8dd(this.filter.length === 1, 'Popup operations only handle one event');
        const eventId = $809b25475cc45ca0$export$c03999cb2f36933f();
        this.authWindow = await this.resolver._openPopup(this.auth, this.provider, this.filter[0], eventId);
        this.authWindow.associatedEvent = eventId;
        // Check for web storage support and origin validation _after_ the popup is
        // loaded. These operations are slow (~1 second or so) Rather than
        // waiting on them before opening the window, optimistically open the popup
        // and check for storage support at the same time. If storage support is
        // not available, this will cause the whole thing to reject properly. It
        // will also close the popup, but since the promise has already rejected,
        // the popup closed by user poll will reject into the void.
        this.resolver._originValidation(this.auth).catch((e)=>{
            this.reject(e);
        });
        this.resolver._isIframeWebStorageSupported(this.auth, (isSupported)=>{
            if (!isSupported) this.reject($809b25475cc45ca0$export$890c4ad488842ce7(this.auth, "web-storage-unsupported" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */ ));
        });
        // Handle user closure. Notice this does *not* use await
        this.pollUserCancellation();
    }
    get eventId() {
        var _a;
        return ((_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.associatedEvent) || null;
    }
    cancel() {
        this.reject($809b25475cc45ca0$export$890c4ad488842ce7(this.auth, "cancelled-popup-request" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */ ));
    }
    cleanUp() {
        if (this.authWindow) this.authWindow.close();
        if (this.pollId) window.clearTimeout(this.pollId);
        this.authWindow = null;
        this.pollId = null;
        $809b25475cc45ca0$var$PopupOperation.currentPopupAction = null;
    }
    pollUserCancellation() {
        const poll = ()=>{
            var _a, _b;
            if ((_b = (_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.closed) {
                // Make sure that there is sufficient time for whatever action to
                // complete. The window could have closed but the sign in network
                // call could still be in flight. This is specifically true for
                // Firefox or if the opener is in an iframe, in which case the oauth
                // helper closes the popup.
                this.pollId = window.setTimeout(()=>{
                    this.pollId = null;
                    this.reject($809b25475cc45ca0$export$890c4ad488842ce7(this.auth, "popup-closed-by-user" /* AuthErrorCode.POPUP_CLOSED_BY_USER */ ));
                }, 8000 /* _Timeout.AUTH_EVENT */ );
                return;
            }
            this.pollId = window.setTimeout(poll, $809b25475cc45ca0$var$_POLL_WINDOW_CLOSE_TIMEOUT.get());
        };
        poll();
    }
}
// Only one popup is ever shown at once. The lifecycle of the current popup
// can be managed / cancelled by the constructor.
$809b25475cc45ca0$var$PopupOperation.currentPopupAction = null;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $809b25475cc45ca0$var$PENDING_REDIRECT_KEY = 'pendingRedirect';
// We only get one redirect outcome for any one auth, so just store it
// in here.
const $809b25475cc45ca0$var$redirectOutcomeMap = new Map();
class $809b25475cc45ca0$var$RedirectAction extends $809b25475cc45ca0$var$AbstractPopupRedirectOperation {
    constructor(auth, resolver, bypassAuthState = false){
        super(auth, [
            "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */ ,
            "linkViaRedirect" /* AuthEventType.LINK_VIA_REDIRECT */ ,
            "reauthViaRedirect" /* AuthEventType.REAUTH_VIA_REDIRECT */ ,
            "unknown" /* AuthEventType.UNKNOWN */ 
        ], resolver, undefined, bypassAuthState);
        this.eventId = null;
    }
    /**
     * Override the execute function; if we already have a redirect result, then
     * just return it.
     */ async execute() {
        let readyOutcome = $809b25475cc45ca0$var$redirectOutcomeMap.get(this.auth._key());
        if (!readyOutcome) {
            try {
                const hasPendingRedirect = await $809b25475cc45ca0$var$_getAndClearPendingRedirectStatus(this.resolver, this.auth);
                const result = hasPendingRedirect ? await super.execute() : null;
                readyOutcome = ()=>Promise.resolve(result);
            } catch (e) {
                readyOutcome = ()=>Promise.reject(e);
            }
            $809b25475cc45ca0$var$redirectOutcomeMap.set(this.auth._key(), readyOutcome);
        }
        // If we're not bypassing auth state, the ready outcome should be set to
        // null.
        if (!this.bypassAuthState) $809b25475cc45ca0$var$redirectOutcomeMap.set(this.auth._key(), ()=>Promise.resolve(null));
        return readyOutcome();
    }
    async onAuthEvent(event) {
        if (event.type === "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */ ) return super.onAuthEvent(event);
        else if (event.type === "unknown" /* AuthEventType.UNKNOWN */ ) {
            // This is a sentinel value indicating there's no pending redirect
            this.resolve(null);
            return;
        }
        if (event.eventId) {
            const user = await this.auth._redirectUserForId(event.eventId);
            if (user) {
                this.user = user;
                return super.onAuthEvent(event);
            } else this.resolve(null);
        }
    }
    async onExecution() {}
    cleanUp() {}
}
async function $809b25475cc45ca0$var$_getAndClearPendingRedirectStatus(resolver, auth) {
    const key = $809b25475cc45ca0$var$pendingRedirectKey(auth);
    const persistence = $809b25475cc45ca0$var$resolverPersistence(resolver);
    if (!await persistence._isAvailable()) return false;
    const hasPendingRedirect = await persistence._get(key) === 'true';
    await persistence._remove(key);
    return hasPendingRedirect;
}
async function $809b25475cc45ca0$var$_setPendingRedirectStatus(resolver, auth) {
    return $809b25475cc45ca0$var$resolverPersistence(resolver)._set($809b25475cc45ca0$var$pendingRedirectKey(auth), 'true');
}
function $809b25475cc45ca0$export$a05254e7c3aeba6e() {
    $809b25475cc45ca0$var$redirectOutcomeMap.clear();
}
function $809b25475cc45ca0$export$b9a6b53f9be3734(auth, result) {
    $809b25475cc45ca0$var$redirectOutcomeMap.set(auth._key(), result);
}
function $809b25475cc45ca0$var$resolverPersistence(resolver) {
    return $809b25475cc45ca0$export$cf2f7c5792f80b46(resolver._redirectPersistence);
}
function $809b25475cc45ca0$var$pendingRedirectKey(auth) {
    return $809b25475cc45ca0$export$53a70dd1ebbae346($809b25475cc45ca0$var$PENDING_REDIRECT_KEY, auth.config.apiKey, auth.name);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Authenticates a Firebase client using a full-page redirect flow.
 *
 * @remarks
 * To handle the results and errors for this operation, refer to {@link getRedirectResult}.
 * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices
 * | best practices} when using {@link signInWithRedirect}.
 *
 * This method does not work in a Node.js environment or with {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * // You can add additional scopes to the provider:
 * provider.addScope('user_birthday');
 * // Start a sign in process for an unauthenticated user.
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Facebook Access Token.
 *   const credential = provider.credentialFromResult(auth, result);
 *   const token = credential.accessToken;
 * }
 * // As this API can be used for sign-in, linking and reauthentication,
 * // check the operationType to determine what triggered this redirect
 * // operation.
 * const operationType = result.operationType;
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ function $809b25475cc45ca0$export$39b482c5e57630a8(auth, provider, resolver) {
    return $809b25475cc45ca0$var$_signInWithRedirect(auth, provider, resolver);
}
async function $809b25475cc45ca0$var$_signInWithRedirect(auth, provider, resolver) {
    if ((0, $12572052cab62175$export$643c8bc6c389f34e)(auth.app)) return Promise.reject($809b25475cc45ca0$var$_serverAppCurrentUserOperationNotSupportedError(auth));
    const authInternal = $809b25475cc45ca0$export$23ebac1979863676(auth);
    $809b25475cc45ca0$var$_assertInstanceOf(auth, provider, $809b25475cc45ca0$var$FederatedAuthProvider);
    // Wait for auth initialization to complete, this will process pending redirects and clear the
    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new
    // redirect and creating a PENDING_REDIRECT_KEY entry.
    await authInternal._initializationPromise;
    const resolverInternal = $809b25475cc45ca0$var$_withDefaultResolver(authInternal, resolver);
    await $809b25475cc45ca0$var$_setPendingRedirectStatus(resolverInternal, authInternal);
    return resolverInternal._openRedirect(authInternal, provider, "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */ );
}
/**
 * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.
 * @remarks
 * To handle the results and errors for this operation, refer to {@link getRedirectResult}.
 * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices
 * | best practices} when using {@link reauthenticateWithRedirect}.
 *
 * This method does not work in a Node.js environment or with {@link Auth} instances
 * created with a {@link @firebase/app#FirebaseServerApp}.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * const result = await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * // Reauthenticate using a redirect.
 * await reauthenticateWithRedirect(result.user, provider);
 * // This will again trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ function $809b25475cc45ca0$export$35e795649ee09318(user, provider, resolver) {
    return $809b25475cc45ca0$var$_reauthenticateWithRedirect(user, provider, resolver);
}
async function $809b25475cc45ca0$var$_reauthenticateWithRedirect(user, provider, resolver) {
    const userInternal = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(user);
    $809b25475cc45ca0$var$_assertInstanceOf(userInternal.auth, provider, $809b25475cc45ca0$var$FederatedAuthProvider);
    if ((0, $12572052cab62175$export$643c8bc6c389f34e)(userInternal.auth.app)) return Promise.reject($809b25475cc45ca0$var$_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));
    // Wait for auth initialization to complete, this will process pending redirects and clear the
    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new
    // redirect and creating a PENDING_REDIRECT_KEY entry.
    await userInternal.auth._initializationPromise;
    // Allow the resolver to error before persisting the redirect user
    const resolverInternal = $809b25475cc45ca0$var$_withDefaultResolver(userInternal.auth, resolver);
    await $809b25475cc45ca0$var$_setPendingRedirectStatus(resolverInternal, userInternal.auth);
    const eventId = await $809b25475cc45ca0$var$prepareUserForRedirect(userInternal);
    return resolverInternal._openRedirect(userInternal.auth, provider, "reauthViaRedirect" /* AuthEventType.REAUTH_VIA_REDIRECT */ , eventId);
}
/**
 * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.
 * @remarks
 * To handle the results and errors for this operation, refer to {@link getRedirectResult}.
 * Follow the {@link https://firebase.google.com/docs/auth/web/redirect-best-practices
 * | best practices} when using {@link linkWithRedirect}.
 *
 * This method does not work in a Node.js environment or with {@link Auth} instances
 * created with a {@link @firebase/app#FirebaseServerApp}.
 *
 * @example
 * ```javascript
 * // Sign in using some other provider.
 * const result = await signInWithEmailAndPassword(auth, email, password);
 * // Link using a redirect.
 * const provider = new FacebookAuthProvider();
 * await linkWithRedirect(result.user, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ function $809b25475cc45ca0$export$dda1d9f60106f0e9(user, provider, resolver) {
    return $809b25475cc45ca0$var$_linkWithRedirect(user, provider, resolver);
}
async function $809b25475cc45ca0$var$_linkWithRedirect(user, provider, resolver) {
    const userInternal = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(user);
    $809b25475cc45ca0$var$_assertInstanceOf(userInternal.auth, provider, $809b25475cc45ca0$var$FederatedAuthProvider);
    // Wait for auth initialization to complete, this will process pending redirects and clear the
    // PENDING_REDIRECT_KEY in persistence. This should be completed before starting a new
    // redirect and creating a PENDING_REDIRECT_KEY entry.
    await userInternal.auth._initializationPromise;
    // Allow the resolver to error before persisting the redirect user
    const resolverInternal = $809b25475cc45ca0$var$_withDefaultResolver(userInternal.auth, resolver);
    await $809b25475cc45ca0$var$_assertLinkedStatus(false, userInternal, provider.providerId);
    await $809b25475cc45ca0$var$_setPendingRedirectStatus(resolverInternal, userInternal.auth);
    const eventId = await $809b25475cc45ca0$var$prepareUserForRedirect(userInternal);
    return resolverInternal._openRedirect(userInternal.auth, provider, "linkViaRedirect" /* AuthEventType.LINK_VIA_REDIRECT */ , eventId);
}
/**
 * Returns a {@link UserCredential} from the redirect-based sign-in flow.
 *
 * @remarks
 * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an
 * error. If no redirect operation was called, returns `null`.
 *
 * This method does not work in a Node.js environment or with {@link Auth} instances created with a
 * {@link @firebase/app#FirebaseServerApp}.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * // You can add additional scopes to the provider:
 * provider.addScope('user_birthday');
 * // Start a sign in process for an unauthenticated user.
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Facebook Access Token.
 *   const credential = provider.credentialFromResult(auth, result);
 *   const token = credential.accessToken;
 * }
 * // As this API can be used for sign-in, linking and reauthentication,
 * // check the operationType to determine what triggered this redirect
 * // operation.
 * const operationType = result.operationType;
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ async function $809b25475cc45ca0$export$342063e11d6c3cad(auth, resolver) {
    await $809b25475cc45ca0$export$23ebac1979863676(auth)._initializationPromise;
    return $809b25475cc45ca0$export$a33b77bbdbb8366c(auth, resolver, false);
}
async function $809b25475cc45ca0$export$a33b77bbdbb8366c(auth, resolverExtern, bypassAuthState = false) {
    if ((0, $12572052cab62175$export$643c8bc6c389f34e)(auth.app)) return Promise.reject($809b25475cc45ca0$var$_serverAppCurrentUserOperationNotSupportedError(auth));
    const authInternal = $809b25475cc45ca0$export$23ebac1979863676(auth);
    const resolver = $809b25475cc45ca0$var$_withDefaultResolver(authInternal, resolverExtern);
    const action = new $809b25475cc45ca0$var$RedirectAction(authInternal, resolver, bypassAuthState);
    const result = await action.execute();
    if (result && !bypassAuthState) {
        delete result.user._redirectEventId;
        await authInternal._persistUserIfCurrent(result.user);
        await authInternal._setRedirectUser(null, resolverExtern);
    }
    return result;
}
async function $809b25475cc45ca0$var$prepareUserForRedirect(user) {
    const eventId = $809b25475cc45ca0$export$c03999cb2f36933f(`${user.uid}:::`);
    user._redirectEventId = eventId;
    await user.auth._setRedirectUser(user);
    await user.auth._persistUserIfCurrent(user);
    return eventId;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // The amount of time to store the UIDs of seen events; this is
// set to 10 min by default
const $809b25475cc45ca0$var$EVENT_DUPLICATION_CACHE_DURATION_MS = 600000;
class $809b25475cc45ca0$export$158acd800e1ef08b {
    constructor(auth){
        this.auth = auth;
        this.cachedEventUids = new Set();
        this.consumers = new Set();
        this.queuedRedirectEvent = null;
        this.hasHandledPotentialRedirect = false;
        this.lastProcessedEventTime = Date.now();
    }
    registerConsumer(authEventConsumer) {
        this.consumers.add(authEventConsumer);
        if (this.queuedRedirectEvent && this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {
            this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);
            this.saveEventToCache(this.queuedRedirectEvent);
            this.queuedRedirectEvent = null;
        }
    }
    unregisterConsumer(authEventConsumer) {
        this.consumers.delete(authEventConsumer);
    }
    onEvent(event) {
        // Check if the event has already been handled
        if (this.hasEventBeenHandled(event)) return false;
        let handled = false;
        this.consumers.forEach((consumer)=>{
            if (this.isEventForConsumer(event, consumer)) {
                handled = true;
                this.sendToConsumer(event, consumer);
                this.saveEventToCache(event);
            }
        });
        if (this.hasHandledPotentialRedirect || !$809b25475cc45ca0$var$isRedirectEvent(event)) // If we've already seen a redirect before, or this is a popup event,
        // bail now
        return handled;
        this.hasHandledPotentialRedirect = true;
        // If the redirect wasn't handled, hang on to it
        if (!handled) {
            this.queuedRedirectEvent = event;
            handled = true;
        }
        return handled;
    }
    sendToConsumer(event, consumer) {
        var _a;
        if (event.error && !$809b25475cc45ca0$var$isNullRedirectEvent(event)) {
            const code = ((_a = event.error.code) === null || _a === void 0 ? void 0 : _a.split('auth/')[1]) || "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ ;
            consumer.onError($809b25475cc45ca0$export$890c4ad488842ce7(this.auth, code));
        } else consumer.onAuthEvent(event);
    }
    isEventForConsumer(event, consumer) {
        const eventIdMatches = consumer.eventId === null || !!event.eventId && event.eventId === consumer.eventId;
        return consumer.filter.includes(event.type) && eventIdMatches;
    }
    hasEventBeenHandled(event) {
        if (Date.now() - this.lastProcessedEventTime >= $809b25475cc45ca0$var$EVENT_DUPLICATION_CACHE_DURATION_MS) this.cachedEventUids.clear();
        return this.cachedEventUids.has($809b25475cc45ca0$var$eventUid(event));
    }
    saveEventToCache(event) {
        this.cachedEventUids.add($809b25475cc45ca0$var$eventUid(event));
        this.lastProcessedEventTime = Date.now();
    }
}
function $809b25475cc45ca0$var$eventUid(e) {
    return [
        e.type,
        e.eventId,
        e.sessionId,
        e.tenantId
    ].filter((v)=>v).join('-');
}
function $809b25475cc45ca0$var$isNullRedirectEvent({ type: type, error: error }) {
    return type === "unknown" /* AuthEventType.UNKNOWN */  && (error === null || error === void 0 ? void 0 : error.code) === `auth/${"no-auth-event" /* AuthErrorCode.NO_AUTH_EVENT */ }`;
}
function $809b25475cc45ca0$var$isRedirectEvent(event) {
    switch(event.type){
        case "signInViaRedirect" /* AuthEventType.SIGN_IN_VIA_REDIRECT */ :
        case "linkViaRedirect" /* AuthEventType.LINK_VIA_REDIRECT */ :
        case "reauthViaRedirect" /* AuthEventType.REAUTH_VIA_REDIRECT */ :
            return true;
        case "unknown" /* AuthEventType.UNKNOWN */ :
            return $809b25475cc45ca0$var$isNullRedirectEvent(event);
        default:
            return false;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function $809b25475cc45ca0$export$91c6e00c14e7e6fd(auth, request = {}) {
    return $809b25475cc45ca0$var$_performApiRequest(auth, "GET" /* HttpMethod.GET */ , "/v1/projects" /* Endpoint.GET_PROJECT_CONFIG */ , request);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $809b25475cc45ca0$var$IP_ADDRESS_REGEX = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
const $809b25475cc45ca0$var$HTTP_REGEX = /^https?/;
async function $809b25475cc45ca0$var$_validateOrigin(auth) {
    // Skip origin validation if we are in an emulated environment
    if (auth.config.emulator) return;
    const { authorizedDomains: authorizedDomains } = await $809b25475cc45ca0$export$91c6e00c14e7e6fd(auth);
    for (const domain of authorizedDomains)try {
        if ($809b25475cc45ca0$var$matchDomain(domain)) return;
    } catch (_a) {
    // Do nothing if there's a URL error; just continue searching
    }
    // In the old SDK, this error also provides helpful messages.
    $809b25475cc45ca0$export$28f7fcd39efa255(auth, "unauthorized-domain" /* AuthErrorCode.INVALID_ORIGIN */ );
}
function $809b25475cc45ca0$var$matchDomain(expected) {
    const currentUrl = $809b25475cc45ca0$var$_getCurrentUrl();
    const { protocol: protocol, hostname: hostname } = new URL(currentUrl);
    if (expected.startsWith('chrome-extension://')) {
        const ceUrl = new URL(expected);
        if (ceUrl.hostname === '' && hostname === '') // For some reason we're not parsing chrome URLs properly
        return protocol === 'chrome-extension:' && expected.replace('chrome-extension://', '') === currentUrl.replace('chrome-extension://', '');
        return protocol === 'chrome-extension:' && ceUrl.hostname === hostname;
    }
    if (!$809b25475cc45ca0$var$HTTP_REGEX.test(protocol)) return false;
    if ($809b25475cc45ca0$var$IP_ADDRESS_REGEX.test(expected)) // The domain has to be exactly equal to the pattern, as an IP domain will
    // only contain the IP, no extra character.
    return hostname === expected;
    // Dots in pattern should be escaped.
    const escapedDomainPattern = expected.replace(/\./g, '\\.');
    // Non ip address domains.
    // domain.com = *.domain.com OR domain.com
    const re = new RegExp('^(.+\\.' + escapedDomainPattern + '|' + escapedDomainPattern + ')$', 'i');
    return re.test(hostname);
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $809b25475cc45ca0$var$NETWORK_TIMEOUT = new $809b25475cc45ca0$var$Delay(30000, 60000);
/**
 * Reset unloaded GApi modules. If gapi.load fails due to a network error,
 * it will stop working after a retrial. This is a hack to fix this issue.
 */ function $809b25475cc45ca0$var$resetUnloadedGapiModules() {
    // Clear last failed gapi.load state to force next gapi.load to first
    // load the failed gapi.iframes module.
    // Get gapix.beacon context.
    const beacon = $809b25475cc45ca0$var$_window().___jsl;
    // Get current hint.
    if (beacon === null || beacon === void 0 ? void 0 : beacon.H) // Get gapi hint.
    for (const hint of Object.keys(beacon.H)){
        // Requested modules.
        beacon.H[hint].r = beacon.H[hint].r || [];
        // Loaded modules.
        beacon.H[hint].L = beacon.H[hint].L || [];
        // Set requested modules to a copy of the loaded modules.
        beacon.H[hint].r = [
            ...beacon.H[hint].L
        ];
        // Clear pending callbacks.
        if (beacon.CP) for(let i = 0; i < beacon.CP.length; i++)// Remove all failed pending callbacks.
        beacon.CP[i] = null;
    }
}
function $809b25475cc45ca0$var$loadGapi(auth) {
    return new Promise((resolve, reject)=>{
        var _a, _b, _c;
        // Function to run when gapi.load is ready.
        function loadGapiIframe() {
            // The developer may have tried to previously run gapi.load and failed.
            // Run this to fix that.
            $809b25475cc45ca0$var$resetUnloadedGapiModules();
            gapi.load('gapi.iframes', {
                callback: ()=>{
                    resolve(gapi.iframes.getContext());
                },
                ontimeout: ()=>{
                    // The above reset may be sufficient, but having this reset after
                    // failure ensures that if the developer calls gapi.load after the
                    // connection is re-established and before another attempt to embed
                    // the iframe, it would work and would not be broken because of our
                    // failed attempt.
                    // Timeout when gapi.iframes.Iframe not loaded.
                    $809b25475cc45ca0$var$resetUnloadedGapiModules();
                    reject($809b25475cc45ca0$export$890c4ad488842ce7(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ ));
                },
                timeout: $809b25475cc45ca0$var$NETWORK_TIMEOUT.get()
            });
        }
        if ((_b = (_a = $809b25475cc45ca0$var$_window().gapi) === null || _a === void 0 ? void 0 : _a.iframes) === null || _b === void 0 ? void 0 : _b.Iframe) // If gapi.iframes.Iframe available, resolve.
        resolve(gapi.iframes.getContext());
        else if (!!((_c = $809b25475cc45ca0$var$_window().gapi) === null || _c === void 0 ? void 0 : _c.load)) // Gapi loader ready, load gapi.iframes.
        loadGapiIframe();
        else {
            // Create a new iframe callback when this is called so as not to overwrite
            // any previous defined callback. This happens if this method is called
            // multiple times in parallel and could result in the later callback
            // overwriting the previous one. This would end up with a iframe
            // timeout.
            const cbName = $809b25475cc45ca0$var$_generateCallbackName('iframefcb');
            // GApi loader not available, dynamically load platform.js.
            $809b25475cc45ca0$var$_window()[cbName] = ()=>{
                // GApi loader should be ready.
                if (!!gapi.load) loadGapiIframe();
                else // Gapi loader failed, throw error.
                reject($809b25475cc45ca0$export$890c4ad488842ce7(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ ));
            };
            // Load GApi loader.
            return $809b25475cc45ca0$var$_loadJS(`${$809b25475cc45ca0$var$_gapiScriptUrl()}?onload=${cbName}`).catch((e)=>reject(e));
        }
    }).catch((error)=>{
        // Reset cached promise to allow for retrial.
        $809b25475cc45ca0$var$cachedGApiLoader = null;
        throw error;
    });
}
let $809b25475cc45ca0$var$cachedGApiLoader = null;
function $809b25475cc45ca0$var$_loadGapi(auth) {
    $809b25475cc45ca0$var$cachedGApiLoader = $809b25475cc45ca0$var$cachedGApiLoader || $809b25475cc45ca0$var$loadGapi(auth);
    return $809b25475cc45ca0$var$cachedGApiLoader;
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $809b25475cc45ca0$var$PING_TIMEOUT = new $809b25475cc45ca0$var$Delay(5000, 15000);
const $809b25475cc45ca0$var$IFRAME_PATH = '__/auth/iframe';
const $809b25475cc45ca0$var$EMULATED_IFRAME_PATH = 'emulator/auth/iframe';
const $809b25475cc45ca0$var$IFRAME_ATTRIBUTES = {
    style: {
        position: 'absolute',
        top: '-100px',
        width: '1px',
        height: '1px'
    },
    'aria-hidden': 'true',
    tabindex: '-1'
};
// Map from apiHost to endpoint ID for passing into iframe. In current SDK, apiHost can be set to
// anything (not from a list of endpoints with IDs as in legacy), so this is the closest we can get.
const $809b25475cc45ca0$var$EID_FROM_APIHOST = new Map([
    [
        "identitytoolkit.googleapis.com" /* DefaultConfig.API_HOST */ ,
        'p'
    ],
    [
        'staging-identitytoolkit.sandbox.googleapis.com',
        's'
    ],
    [
        'test-identitytoolkit.sandbox.googleapis.com',
        't'
    ] // test
]);
function $809b25475cc45ca0$var$getIframeUrl(auth) {
    const config = auth.config;
    $809b25475cc45ca0$export$24baa2b76016ce0e(config.authDomain, auth, "auth-domain-config-required" /* AuthErrorCode.MISSING_AUTH_DOMAIN */ );
    const url = config.emulator ? $809b25475cc45ca0$var$_emulatorUrl(config, $809b25475cc45ca0$var$EMULATED_IFRAME_PATH) : `https://${auth.config.authDomain}/${$809b25475cc45ca0$var$IFRAME_PATH}`;
    const params = {
        apiKey: config.apiKey,
        appName: auth.name,
        v: (0, $12572052cab62175$export$31499a9cd224b78c)
    };
    const eid = $809b25475cc45ca0$var$EID_FROM_APIHOST.get(auth.config.apiHost);
    if (eid) params.eid = eid;
    const frameworks = auth._getFrameworks();
    if (frameworks.length) params.fw = frameworks.join(',');
    return `${url}?${(0, $ee1ab2624407a779$export$ac4103b836844853)(params).slice(1)}`;
}
async function $809b25475cc45ca0$var$_openIframe(auth) {
    const context = await $809b25475cc45ca0$var$_loadGapi(auth);
    const gapi1 = $809b25475cc45ca0$var$_window().gapi;
    $809b25475cc45ca0$export$24baa2b76016ce0e(gapi1, auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
    return context.open({
        where: document.body,
        url: $809b25475cc45ca0$var$getIframeUrl(auth),
        messageHandlersFilter: gapi1.iframes.CROSS_ORIGIN_IFRAMES_FILTER,
        attributes: $809b25475cc45ca0$var$IFRAME_ATTRIBUTES,
        dontclear: true
    }, (iframe)=>new Promise(async (resolve, reject)=>{
            await iframe.restyle({
                // Prevent iframe from closing on mouse out.
                setHideOnLeave: false
            });
            const networkError = $809b25475cc45ca0$export$890c4ad488842ce7(auth, "network-request-failed" /* AuthErrorCode.NETWORK_REQUEST_FAILED */ );
            // Confirm iframe is correctly loaded.
            // To fallback on failure, set a timeout.
            const networkErrorTimer = $809b25475cc45ca0$var$_window().setTimeout(()=>{
                reject(networkError);
            }, $809b25475cc45ca0$var$PING_TIMEOUT.get());
            // Clear timer and resolve pending iframe ready promise.
            function clearTimerAndResolve() {
                $809b25475cc45ca0$var$_window().clearTimeout(networkErrorTimer);
                resolve(iframe);
            }
            // This returns an IThenable. However the reject part does not call
            // when the iframe is not loaded.
            iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, ()=>{
                reject(networkError);
            });
        }));
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $809b25475cc45ca0$var$BASE_POPUP_OPTIONS = {
    location: 'yes',
    resizable: 'yes',
    statusbar: 'yes',
    toolbar: 'no'
};
const $809b25475cc45ca0$var$DEFAULT_WIDTH = 500;
const $809b25475cc45ca0$var$DEFAULT_HEIGHT = 600;
const $809b25475cc45ca0$var$TARGET_BLANK = '_blank';
const $809b25475cc45ca0$var$FIREFOX_EMPTY_URL = 'http://localhost';
class $809b25475cc45ca0$export$2ed0fc6709e59212 {
    constructor(window1){
        this.window = window1;
        this.associatedEvent = null;
    }
    close() {
        if (this.window) try {
            this.window.close();
        } catch (e) {}
    }
}
function $809b25475cc45ca0$var$_open(auth, url, name, width = $809b25475cc45ca0$var$DEFAULT_WIDTH, height = $809b25475cc45ca0$var$DEFAULT_HEIGHT) {
    const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();
    const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();
    let target = '';
    const options = Object.assign(Object.assign({}, $809b25475cc45ca0$var$BASE_POPUP_OPTIONS), {
        width: width.toString(),
        height: height.toString(),
        top: top,
        left: left
    });
    // Chrome iOS 7 and 8 is returning an undefined popup win when target is
    // specified, even though the popup is not necessarily blocked.
    const ua = (0, $ee1ab2624407a779$export$c36915b22ce77c19)().toLowerCase();
    if (name) target = $809b25475cc45ca0$var$_isChromeIOS(ua) ? $809b25475cc45ca0$var$TARGET_BLANK : name;
    if ($809b25475cc45ca0$var$_isFirefox(ua)) {
        // Firefox complains when invalid URLs are popped out. Hacky way to bypass.
        url = url || $809b25475cc45ca0$var$FIREFOX_EMPTY_URL;
        // Firefox disables by default scrolling on popup windows, which can create
        // issues when the user has many Google accounts, for instance.
        options.scrollbars = 'yes';
    }
    const optionsString = Object.entries(options).reduce((accum, [key, value])=>`${accum}${key}=${value},`, '');
    if ($809b25475cc45ca0$var$_isIOSStandalone(ua) && target !== '_self') {
        $809b25475cc45ca0$var$openAsNewWindowIOS(url || '', target);
        return new $809b25475cc45ca0$export$2ed0fc6709e59212(null);
    }
    // about:blank getting sanitized causing browsers like IE/Edge to display
    // brief error message before redirecting to handler.
    const newWin = window.open(url || '', target, optionsString);
    $809b25475cc45ca0$export$24baa2b76016ce0e(newWin, auth, "popup-blocked" /* AuthErrorCode.POPUP_BLOCKED */ );
    // Flaky on IE edge, encapsulate with a try and catch.
    try {
        newWin.focus();
    } catch (e) {}
    return new $809b25475cc45ca0$export$2ed0fc6709e59212(newWin);
}
function $809b25475cc45ca0$var$openAsNewWindowIOS(url, target) {
    const el = document.createElement('a');
    el.href = url;
    el.target = target;
    const click = document.createEvent('MouseEvent');
    click.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);
    el.dispatchEvent(click);
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * URL for Authentication widget which will initiate the OAuth handshake
 *
 * @internal
 */ const $809b25475cc45ca0$var$WIDGET_PATH = '__/auth/handler';
/**
 * URL for emulated environment
 *
 * @internal
 */ const $809b25475cc45ca0$var$EMULATOR_WIDGET_PATH = 'emulator/auth/handler';
/**
 * Fragment name for the App Check token that gets passed to the widget
 *
 * @internal
 */ const $809b25475cc45ca0$var$FIREBASE_APP_CHECK_FRAGMENT_ID = encodeURIComponent('fac');
async function $809b25475cc45ca0$export$3d12bd131bb975d1(auth, provider, authType, redirectUrl, eventId, additionalParams) {
    $809b25475cc45ca0$export$24baa2b76016ce0e(auth.config.authDomain, auth, "auth-domain-config-required" /* AuthErrorCode.MISSING_AUTH_DOMAIN */ );
    $809b25475cc45ca0$export$24baa2b76016ce0e(auth.config.apiKey, auth, "invalid-api-key" /* AuthErrorCode.INVALID_API_KEY */ );
    const params = {
        apiKey: auth.config.apiKey,
        appName: auth.name,
        authType: authType,
        redirectUrl: redirectUrl,
        v: (0, $12572052cab62175$export$31499a9cd224b78c),
        eventId: eventId
    };
    if (provider instanceof $809b25475cc45ca0$var$FederatedAuthProvider) {
        provider.setDefaultLanguage(auth.languageCode);
        params.providerId = provider.providerId || '';
        if (!(0, $ee1ab2624407a779$export$dd1bc94b04021eeb)(provider.getCustomParameters())) params.customParameters = JSON.stringify(provider.getCustomParameters());
        // TODO set additionalParams from the provider as well?
        for (const [key, value] of Object.entries(additionalParams || {}))params[key] = value;
    }
    if (provider instanceof $809b25475cc45ca0$var$BaseOAuthProvider) {
        const scopes = provider.getScopes().filter((scope)=>scope !== '');
        if (scopes.length > 0) params.scopes = scopes.join(',');
    }
    if (auth.tenantId) params.tid = auth.tenantId;
    // TODO: maybe set eid as endpointId
    // TODO: maybe set fw as Frameworks.join(",")
    const paramsDict = params;
    for (const key of Object.keys(paramsDict))if (paramsDict[key] === undefined) delete paramsDict[key];
    // Sets the App Check token to pass to the widget
    const appCheckToken = await auth._getAppCheckToken();
    const appCheckTokenFragment = appCheckToken ? `#${$809b25475cc45ca0$var$FIREBASE_APP_CHECK_FRAGMENT_ID}=${encodeURIComponent(appCheckToken)}` : '';
    // Start at index 1 to skip the leading '&' in the query string
    return `${$809b25475cc45ca0$var$getHandlerBase(auth)}?${(0, $ee1ab2624407a779$export$ac4103b836844853)(paramsDict).slice(1)}${appCheckTokenFragment}`;
}
function $809b25475cc45ca0$var$getHandlerBase({ config: config }) {
    if (!config.emulator) return `https://${config.authDomain}/${$809b25475cc45ca0$var$WIDGET_PATH}`;
    return $809b25475cc45ca0$var$_emulatorUrl(config, $809b25475cc45ca0$var$EMULATOR_WIDGET_PATH);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The special web storage event
 *
 */ const $809b25475cc45ca0$var$WEB_STORAGE_SUPPORT_KEY = 'webStorageSupport';
class $809b25475cc45ca0$var$BrowserPopupRedirectResolver {
    constructor(){
        this.eventManagers = {};
        this.iframes = {};
        this.originValidationPromises = {};
        this._redirectPersistence = $809b25475cc45ca0$export$db3b6bfb95261072;
        this._completeRedirectFn = $809b25475cc45ca0$export$a33b77bbdbb8366c;
        this._overrideRedirectResult = $809b25475cc45ca0$export$b9a6b53f9be3734;
    }
    // Wrapping in async even though we don't await anywhere in order
    // to make sure errors are raised as promise rejections
    async _openPopup(auth, provider, authType, eventId) {
        var _a;
        $809b25475cc45ca0$export$d66dc83d8cfc8dd((_a = this.eventManagers[auth._key()]) === null || _a === void 0 ? void 0 : _a.manager, '_initialize() not called before _openPopup()');
        const url = await $809b25475cc45ca0$export$3d12bd131bb975d1(auth, provider, authType, $809b25475cc45ca0$var$_getCurrentUrl(), eventId);
        return $809b25475cc45ca0$var$_open(auth, url, $809b25475cc45ca0$export$c03999cb2f36933f());
    }
    async _openRedirect(auth, provider, authType, eventId) {
        await this._originValidation(auth);
        const url = await $809b25475cc45ca0$export$3d12bd131bb975d1(auth, provider, authType, $809b25475cc45ca0$var$_getCurrentUrl(), eventId);
        $809b25475cc45ca0$var$_setWindowLocation(url);
        return new Promise(()=>{});
    }
    _initialize(auth) {
        const key = auth._key();
        if (this.eventManagers[key]) {
            const { manager: manager, promise: promise } = this.eventManagers[key];
            if (manager) return Promise.resolve(manager);
            else {
                $809b25475cc45ca0$export$d66dc83d8cfc8dd(promise, 'If manager is not set, promise should be');
                return promise;
            }
        }
        const promise = this.initAndGetManager(auth);
        this.eventManagers[key] = {
            promise: promise
        };
        // If the promise is rejected, the key should be removed so that the
        // operation can be retried later.
        promise.catch(()=>{
            delete this.eventManagers[key];
        });
        return promise;
    }
    async initAndGetManager(auth) {
        const iframe = await $809b25475cc45ca0$var$_openIframe(auth);
        const manager = new $809b25475cc45ca0$export$158acd800e1ef08b(auth);
        iframe.register('authEvent', (iframeEvent)=>{
            $809b25475cc45ca0$export$24baa2b76016ce0e(iframeEvent === null || iframeEvent === void 0 ? void 0 : iframeEvent.authEvent, auth, "invalid-auth-event" /* AuthErrorCode.INVALID_AUTH_EVENT */ );
            // TODO: Consider splitting redirect and popup events earlier on
            const handled = manager.onEvent(iframeEvent.authEvent);
            return {
                status: handled ? "ACK" /* GapiOutcome.ACK */  : "ERROR" /* GapiOutcome.ERROR */ 
            };
        }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
        this.eventManagers[auth._key()] = {
            manager: manager
        };
        this.iframes[auth._key()] = iframe;
        return manager;
    }
    _isIframeWebStorageSupported(auth, cb) {
        const iframe = this.iframes[auth._key()];
        iframe.send($809b25475cc45ca0$var$WEB_STORAGE_SUPPORT_KEY, {
            type: $809b25475cc45ca0$var$WEB_STORAGE_SUPPORT_KEY
        }, (result)=>{
            var _a;
            const isSupported = (_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a[$809b25475cc45ca0$var$WEB_STORAGE_SUPPORT_KEY];
            if (isSupported !== undefined) cb(!!isSupported);
            $809b25475cc45ca0$export$28f7fcd39efa255(auth, "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
    }
    _originValidation(auth) {
        const key = auth._key();
        if (!this.originValidationPromises[key]) this.originValidationPromises[key] = $809b25475cc45ca0$var$_validateOrigin(auth);
        return this.originValidationPromises[key];
    }
    get _shouldInitProactively() {
        // Mobile browsers and Safari need to optimistically initialize
        return $809b25475cc45ca0$var$_isMobileBrowser() || $809b25475cc45ca0$var$_isSafari() || $809b25475cc45ca0$export$92108d983e8ee699();
    }
}
/**
 * An implementation of {@link PopupRedirectResolver} suitable for browser
 * based applications.
 *
 * @remarks
 * This method does not work in a Node.js environment.
 *
 * @public
 */ const $809b25475cc45ca0$export$953cecd6e717a553 = $809b25475cc45ca0$var$BrowserPopupRedirectResolver;
class $809b25475cc45ca0$var$MultiFactorAssertionImpl {
    constructor(factorId){
        this.factorId = factorId;
    }
    _process(auth, session, displayName) {
        switch(session.type){
            case "enroll" /* MultiFactorSessionType.ENROLL */ :
                return this._finalizeEnroll(auth, session.credential, displayName);
            case "signin" /* MultiFactorSessionType.SIGN_IN */ :
                return this._finalizeSignIn(auth, session.credential);
            default:
                return $809b25475cc45ca0$var$debugFail('unexpected MultiFactorSessionType');
        }
    }
}
/**
 * {@inheritdoc PhoneMultiFactorAssertion}
 *
 * @public
 */ class $809b25475cc45ca0$var$PhoneMultiFactorAssertionImpl extends $809b25475cc45ca0$var$MultiFactorAssertionImpl {
    constructor(credential){
        super("phone" /* FactorId.PHONE */ );
        this.credential = credential;
    }
    /** @internal */ static _fromCredential(credential) {
        return new $809b25475cc45ca0$var$PhoneMultiFactorAssertionImpl(credential);
    }
    /** @internal */ _finalizeEnroll(auth, idToken, displayName) {
        return $809b25475cc45ca0$var$finalizeEnrollPhoneMfa(auth, {
            idToken: idToken,
            displayName: displayName,
            phoneVerificationInfo: this.credential._makeVerificationRequest()
        });
    }
    /** @internal */ _finalizeSignIn(auth, mfaPendingCredential) {
        return $809b25475cc45ca0$var$finalizeSignInPhoneMfa(auth, {
            mfaPendingCredential: mfaPendingCredential,
            phoneVerificationInfo: this.credential._makeVerificationRequest()
        });
    }
}
/**
 * Provider for generating a {@link PhoneMultiFactorAssertion}.
 *
 * @public
 */ class $809b25475cc45ca0$export$7ccc53e8f1e7dfc5 {
    constructor(){}
    /**
     * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.
     *
     * @remarks
     * This method does not work in a Node.js environment.
     *
     * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.
     * @returns A {@link PhoneMultiFactorAssertion} which can be used with
     * {@link MultiFactorResolver.resolveSignIn}
     */ static assertion(credential) {
        return $809b25475cc45ca0$var$PhoneMultiFactorAssertionImpl._fromCredential(credential);
    }
}
/**
 * The identifier of the phone second factor: `phone`.
 */ $809b25475cc45ca0$export$7ccc53e8f1e7dfc5.FACTOR_ID = 'phone';
/**
 * Provider for generating a {@link TotpMultiFactorAssertion}.
 *
 * @public
 */ class $809b25475cc45ca0$export$971d5caa766a69d7 {
    /**
     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of
     * the TOTP (time-based one-time password) second factor.
     * This assertion is used to complete enrollment in TOTP second factor.
     *
     * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.
     * @param oneTimePassword One-time password from TOTP App.
     * @returns A {@link TotpMultiFactorAssertion} which can be used with
     * {@link MultiFactorUser.enroll}.
     */ static assertionForEnrollment(secret, oneTimePassword) {
        return $809b25475cc45ca0$var$TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);
    }
    /**
     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.
     * This assertion is used to complete signIn with TOTP as the second factor.
     *
     * @param enrollmentId identifies the enrolled TOTP second factor.
     * @param oneTimePassword One-time password from TOTP App.
     * @returns A {@link TotpMultiFactorAssertion} which can be used with
     * {@link MultiFactorResolver.resolveSignIn}.
     */ static assertionForSignIn(enrollmentId, oneTimePassword) {
        return $809b25475cc45ca0$var$TotpMultiFactorAssertionImpl._fromEnrollmentId(enrollmentId, oneTimePassword);
    }
    /**
     * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.
     * Creates a TOTP secret as part of enrolling a TOTP second factor.
     * Used for generating a QR code URL or inputting into a TOTP app.
     * This method uses the auth instance corresponding to the user in the multiFactorSession.
     *
     * @param session The {@link MultiFactorSession} that the user is part of.
     * @returns A promise to {@link TotpSecret}.
     */ static async generateSecret(session) {
        var _a;
        const mfaSession = session;
        $809b25475cc45ca0$export$24baa2b76016ce0e(typeof ((_a = mfaSession.user) === null || _a === void 0 ? void 0 : _a.auth) !== 'undefined', "internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
        const response = await $809b25475cc45ca0$var$startEnrollTotpMfa(mfaSession.user.auth, {
            idToken: mfaSession.credential,
            totpEnrollmentInfo: {}
        });
        return $809b25475cc45ca0$export$ae1af26003f05816._fromStartTotpMfaEnrollmentResponse(response, mfaSession.user.auth);
    }
}
/**
 * The identifier of the TOTP second factor: `totp`.
 */ $809b25475cc45ca0$export$971d5caa766a69d7.FACTOR_ID = "totp" /* FactorId.TOTP */ ;
class $809b25475cc45ca0$var$TotpMultiFactorAssertionImpl extends $809b25475cc45ca0$var$MultiFactorAssertionImpl {
    constructor(otp, enrollmentId, secret){
        super("totp" /* FactorId.TOTP */ );
        this.otp = otp;
        this.enrollmentId = enrollmentId;
        this.secret = secret;
    }
    /** @internal */ static _fromSecret(secret, otp) {
        return new $809b25475cc45ca0$var$TotpMultiFactorAssertionImpl(otp, undefined, secret);
    }
    /** @internal */ static _fromEnrollmentId(enrollmentId, otp) {
        return new $809b25475cc45ca0$var$TotpMultiFactorAssertionImpl(otp, enrollmentId);
    }
    /** @internal */ async _finalizeEnroll(auth, idToken, displayName) {
        $809b25475cc45ca0$export$24baa2b76016ce0e(typeof this.secret !== 'undefined', auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        return $809b25475cc45ca0$var$finalizeEnrollTotpMfa(auth, {
            idToken: idToken,
            displayName: displayName,
            totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)
        });
    }
    /** @internal */ async _finalizeSignIn(auth, mfaPendingCredential) {
        $809b25475cc45ca0$export$24baa2b76016ce0e(this.enrollmentId !== undefined && this.otp !== undefined, auth, "argument-error" /* AuthErrorCode.ARGUMENT_ERROR */ );
        const totpVerificationInfo = {
            verificationCode: this.otp
        };
        return $809b25475cc45ca0$var$finalizeSignInTotpMfa(auth, {
            mfaPendingCredential: mfaPendingCredential,
            mfaEnrollmentId: this.enrollmentId,
            totpVerificationInfo: totpVerificationInfo
        });
    }
}
/**
 * Provider for generating a {@link TotpMultiFactorAssertion}.
 *
 * Stores the shared secret key and other parameters to generate time-based OTPs.
 * Implements methods to retrieve the shared secret key and generate a QR code URL.
 * @public
 */ class $809b25475cc45ca0$export$ae1af26003f05816 {
    // The public members are declared outside the constructor so the docs can be generated.
    constructor(secretKey, hashingAlgorithm, codeLength, codeIntervalSeconds, enrollmentCompletionDeadline, sessionInfo, auth){
        this.sessionInfo = sessionInfo;
        this.auth = auth;
        this.secretKey = secretKey;
        this.hashingAlgorithm = hashingAlgorithm;
        this.codeLength = codeLength;
        this.codeIntervalSeconds = codeIntervalSeconds;
        this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;
    }
    /** @internal */ static _fromStartTotpMfaEnrollmentResponse(response, auth) {
        return new $809b25475cc45ca0$export$ae1af26003f05816(response.totpSessionInfo.sharedSecretKey, response.totpSessionInfo.hashingAlgorithm, response.totpSessionInfo.verificationCodeLength, response.totpSessionInfo.periodSec, new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(), response.totpSessionInfo.sessionInfo, auth);
    }
    /** @internal */ _makeTotpVerificationInfo(otp) {
        return {
            sessionInfo: this.sessionInfo,
            verificationCode: otp
        };
    }
    /**
     * Returns a QR code URL as described in
     * https://github.com/google/google-authenticator/wiki/Key-Uri-Format
     * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.
     * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.
     *
     * @param accountName the name of the account/app along with a user identifier.
     * @param issuer issuer of the TOTP (likely the app name).
     * @returns A QR code URL string.
     */ generateQrCodeUrl(accountName, issuer) {
        var _a;
        let useDefaults = false;
        if ($809b25475cc45ca0$var$_isEmptyString(accountName) || $809b25475cc45ca0$var$_isEmptyString(issuer)) useDefaults = true;
        if (useDefaults) {
            if ($809b25475cc45ca0$var$_isEmptyString(accountName)) accountName = ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.email) || 'unknownuser';
            if ($809b25475cc45ca0$var$_isEmptyString(issuer)) issuer = this.auth.name;
        }
        return `otpauth://totp/${issuer}:${accountName}?secret=${this.secretKey}&issuer=${issuer}&algorithm=${this.hashingAlgorithm}&digits=${this.codeLength}`;
    }
}
/** @internal */ function $809b25475cc45ca0$var$_isEmptyString(input) {
    return typeof input === 'undefined' || (input === null || input === void 0 ? void 0 : input.length) === 0;
}
var $809b25475cc45ca0$var$name = "@firebase/auth";
var $809b25475cc45ca0$var$version = "1.10.6";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $809b25475cc45ca0$var$AuthInterop {
    constructor(auth){
        this.auth = auth;
        this.internalListeners = new Map();
    }
    getUid() {
        var _a;
        this.assertAuthConfigured();
        return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;
    }
    async getToken(forceRefresh) {
        this.assertAuthConfigured();
        await this.auth._initializationPromise;
        if (!this.auth.currentUser) return null;
        const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);
        return {
            accessToken: accessToken
        };
    }
    addAuthTokenListener(listener) {
        this.assertAuthConfigured();
        if (this.internalListeners.has(listener)) return;
        const unsubscribe = this.auth.onIdTokenChanged((user)=>{
            listener((user === null || user === void 0 ? void 0 : user.stsTokenManager.accessToken) || null);
        });
        this.internalListeners.set(listener, unsubscribe);
        this.updateProactiveRefresh();
    }
    removeAuthTokenListener(listener) {
        this.assertAuthConfigured();
        const unsubscribe = this.internalListeners.get(listener);
        if (!unsubscribe) return;
        this.internalListeners.delete(listener);
        unsubscribe();
        this.updateProactiveRefresh();
    }
    assertAuthConfigured() {
        $809b25475cc45ca0$export$24baa2b76016ce0e(this.auth._initializationPromise, "dependent-sdk-initialized-before-auth" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */ );
    }
    updateProactiveRefresh() {
        if (this.internalListeners.size > 0) this.auth._startProactiveRefresh();
        else this.auth._stopProactiveRefresh();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $809b25475cc45ca0$var$getVersionForPlatform(clientPlatform) {
    switch(clientPlatform){
        case "Node" /* ClientPlatform.NODE */ :
            return 'node';
        case "ReactNative" /* ClientPlatform.REACT_NATIVE */ :
            return 'rn';
        case "Worker" /* ClientPlatform.WORKER */ :
            return 'webworker';
        case "Cordova" /* ClientPlatform.CORDOVA */ :
            return 'cordova';
        case "WebExtension" /* ClientPlatform.WEB_EXTENSION */ :
            return 'web-extension';
        default:
            return undefined;
    }
}
/** @internal */ function $809b25475cc45ca0$var$registerAuth(clientPlatform) {
    (0, $12572052cab62175$export$c930050e7bb63965)(new (0, $7d2fc2186abbee8c$export$16fa2f45be04daa8)("auth" /* _ComponentName.AUTH */ , (container, { options: deps })=>{
        const app = container.getProvider('app').getImmediate();
        const heartbeatServiceProvider = container.getProvider('heartbeat');
        const appCheckServiceProvider = container.getProvider('app-check-internal');
        const { apiKey: apiKey, authDomain: authDomain } = app.options;
        $809b25475cc45ca0$export$24baa2b76016ce0e(apiKey && !apiKey.includes(':'), "invalid-api-key" /* AuthErrorCode.INVALID_API_KEY */ , {
            appName: app.name
        });
        const config = {
            apiKey: apiKey,
            authDomain: authDomain,
            clientPlatform: clientPlatform,
            apiHost: "identitytoolkit.googleapis.com" /* DefaultConfig.API_HOST */ ,
            tokenApiHost: "securetoken.googleapis.com" /* DefaultConfig.TOKEN_API_HOST */ ,
            apiScheme: "https" /* DefaultConfig.API_SCHEME */ ,
            sdkClientVersion: $809b25475cc45ca0$export$faec65b429be379(clientPlatform)
        };
        const authInstance = new $809b25475cc45ca0$export$9f4f30ee63539e24(app, heartbeatServiceProvider, appCheckServiceProvider, config);
        $809b25475cc45ca0$var$_initializeAuthInstance(authInstance, deps);
        return authInstance;
    }, "PUBLIC" /* ComponentType.PUBLIC */ )/**
         * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()
         * For why we do this, See go/firebase-next-auth-init
         */ .setInstantiationMode("EXPLICIT" /* InstantiationMode.EXPLICIT */ )/**
         * Because all firebase products that depend on auth depend on auth-internal directly,
         * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.
         */ .setInstanceCreatedCallback((container, _instanceIdentifier, _instance)=>{
        const authInternalProvider = container.getProvider("auth-internal" /* _ComponentName.AUTH_INTERNAL */ );
        authInternalProvider.initialize();
    }));
    (0, $12572052cab62175$export$c930050e7bb63965)(new (0, $7d2fc2186abbee8c$export$16fa2f45be04daa8)("auth-internal" /* _ComponentName.AUTH_INTERNAL */ , (container)=>{
        const auth = $809b25475cc45ca0$export$23ebac1979863676(container.getProvider("auth" /* _ComponentName.AUTH */ ).getImmediate());
        return ((auth)=>new $809b25475cc45ca0$var$AuthInterop(auth))(auth);
    }, "PRIVATE" /* ComponentType.PRIVATE */ ).setInstantiationMode("EXPLICIT" /* InstantiationMode.EXPLICIT */ ));
    (0, $12572052cab62175$export$d29d5299a7137abc)($809b25475cc45ca0$var$name, $809b25475cc45ca0$var$version, $809b25475cc45ca0$var$getVersionForPlatform(clientPlatform));
    // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation
    (0, $12572052cab62175$export$d29d5299a7137abc)($809b25475cc45ca0$var$name, $809b25475cc45ca0$var$version, 'esm2017');
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $809b25475cc45ca0$var$DEFAULT_ID_TOKEN_MAX_AGE = 300;
const $809b25475cc45ca0$var$authIdTokenMaxAge = (0, $ee1ab2624407a779$export$5539a1a3afe87d6)('authIdTokenMaxAge') || $809b25475cc45ca0$var$DEFAULT_ID_TOKEN_MAX_AGE;
let $809b25475cc45ca0$var$lastPostedIdToken = null;
const $809b25475cc45ca0$var$mintCookieFactory = (url)=>async (user)=>{
        const idTokenResult = user && await user.getIdTokenResult();
        const idTokenAge = idTokenResult && (new Date().getTime() - Date.parse(idTokenResult.issuedAtTime)) / 1000;
        if (idTokenAge && idTokenAge > $809b25475cc45ca0$var$authIdTokenMaxAge) return;
        // Specifically trip null => undefined when logged out, to delete any existing cookie
        const idToken = idTokenResult === null || idTokenResult === void 0 ? void 0 : idTokenResult.token;
        if ($809b25475cc45ca0$var$lastPostedIdToken === idToken) return;
        $809b25475cc45ca0$var$lastPostedIdToken = idToken;
        await fetch(url, {
            method: idToken ? 'POST' : 'DELETE',
            headers: idToken ? {
                'Authorization': `Bearer ${idToken}`
            } : {}
        });
    };
/**
 * Returns the Auth instance associated with the provided {@link @firebase/app#FirebaseApp}.
 * If no instance exists, initializes an Auth instance with platform-specific default dependencies.
 *
 * @param app - The Firebase App.
 *
 * @public
 */ function $809b25475cc45ca0$export$ffb5f4729a158638(app = (0, $12572052cab62175$export$f9962582c9e66d99)()) {
    const provider = (0, $12572052cab62175$export$fa0d6da0f5838f50)(app, 'auth');
    if (provider.isInitialized()) return provider.getImmediate();
    const auth = $809b25475cc45ca0$export$3466f893ebf79586(app, {
        popupRedirectResolver: $809b25475cc45ca0$export$953cecd6e717a553,
        persistence: [
            $809b25475cc45ca0$export$23f2a1d2818174ef,
            $809b25475cc45ca0$export$8b22cf2602fb60ce,
            $809b25475cc45ca0$export$db3b6bfb95261072
        ]
    });
    const authTokenSyncPath = (0, $ee1ab2624407a779$export$5539a1a3afe87d6)('authTokenSyncURL');
    // Only do the Cookie exchange in a secure context
    if (authTokenSyncPath && typeof isSecureContext === 'boolean' && isSecureContext) {
        // Don't allow urls (XSS possibility), only paths on the same domain
        const authTokenSyncUrl = new URL(authTokenSyncPath, location.origin);
        if (location.origin === authTokenSyncUrl.origin) {
            const mintCookie = $809b25475cc45ca0$var$mintCookieFactory(authTokenSyncUrl.toString());
            $809b25475cc45ca0$export$4a5767248b18ef41(auth, mintCookie, ()=>mintCookie(auth.currentUser));
            $809b25475cc45ca0$export$d141bba7fdc215a3(auth, (user)=>mintCookie(user));
        }
    }
    const authEmulatorHost = (0, $ee1ab2624407a779$export$9c11895284c8adad)('auth');
    if (authEmulatorHost) $809b25475cc45ca0$export$61196ced6d74a310(auth, `http://${authEmulatorHost}`);
    return auth;
}
function $809b25475cc45ca0$var$getScriptParentElement() {
    var _a, _b;
    return (_b = (_a = document.getElementsByTagName('head')) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : document;
}
$809b25475cc45ca0$var$_setExternalJSProvider({
    loadJS (url) {
        // TODO: consider adding timeout support & cancellation
        return new Promise((resolve, reject)=>{
            const el = document.createElement('script');
            el.setAttribute('src', url);
            el.onload = resolve;
            el.onerror = (e)=>{
                const error = $809b25475cc45ca0$export$890c4ad488842ce7("internal-error" /* AuthErrorCode.INTERNAL_ERROR */ );
                error.customData = e;
                reject(error);
            };
            el.type = 'text/javascript';
            el.charset = 'UTF-8';
            $809b25475cc45ca0$var$getScriptParentElement().appendChild(el);
        });
    },
    gapiScript: 'https://apis.google.com/js/api.js',
    recaptchaV2Script: 'https://www.google.com/recaptcha/api.js',
    recaptchaEnterpriseScript: 'https://www.google.com/recaptcha/enterprise.js?render='
});
$809b25475cc45ca0$var$registerAuth("Browser" /* ClientPlatform.BROWSER */ );











// src/firebase/firebaseConfig.jsx

var $7f933e6b9be2b379$var$name = "firebase";
var $7f933e6b9be2b379$var$version = "11.8.1";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ (0, $12572052cab62175$export$d29d5299a7137abc)($7f933e6b9be2b379$var$name, $7f933e6b9be2b379$var$version, 'app');






var $14f4276f57578bf7$exports = {};
// shim for using process in browser
var $14f4276f57578bf7$var$process = $14f4276f57578bf7$exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var $14f4276f57578bf7$var$cachedSetTimeout;
var $14f4276f57578bf7$var$cachedClearTimeout;
function $14f4276f57578bf7$var$defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function $14f4276f57578bf7$var$defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') $14f4276f57578bf7$var$cachedSetTimeout = setTimeout;
        else $14f4276f57578bf7$var$cachedSetTimeout = $14f4276f57578bf7$var$defaultSetTimout;
    } catch (e) {
        $14f4276f57578bf7$var$cachedSetTimeout = $14f4276f57578bf7$var$defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') $14f4276f57578bf7$var$cachedClearTimeout = clearTimeout;
        else $14f4276f57578bf7$var$cachedClearTimeout = $14f4276f57578bf7$var$defaultClearTimeout;
    } catch (e) {
        $14f4276f57578bf7$var$cachedClearTimeout = $14f4276f57578bf7$var$defaultClearTimeout;
    }
})();
function $14f4276f57578bf7$var$runTimeout(fun) {
    if ($14f4276f57578bf7$var$cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if (($14f4276f57578bf7$var$cachedSetTimeout === $14f4276f57578bf7$var$defaultSetTimout || !$14f4276f57578bf7$var$cachedSetTimeout) && setTimeout) {
        $14f4276f57578bf7$var$cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $14f4276f57578bf7$var$cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return $14f4276f57578bf7$var$cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return $14f4276f57578bf7$var$cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function $14f4276f57578bf7$var$runClearTimeout(marker) {
    if ($14f4276f57578bf7$var$cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if (($14f4276f57578bf7$var$cachedClearTimeout === $14f4276f57578bf7$var$defaultClearTimeout || !$14f4276f57578bf7$var$cachedClearTimeout) && clearTimeout) {
        $14f4276f57578bf7$var$cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $14f4276f57578bf7$var$cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return $14f4276f57578bf7$var$cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return $14f4276f57578bf7$var$cachedClearTimeout.call(this, marker);
        }
    }
}
var $14f4276f57578bf7$var$queue = [];
var $14f4276f57578bf7$var$draining = false;
var $14f4276f57578bf7$var$currentQueue;
var $14f4276f57578bf7$var$queueIndex = -1;
function $14f4276f57578bf7$var$cleanUpNextTick() {
    if (!$14f4276f57578bf7$var$draining || !$14f4276f57578bf7$var$currentQueue) return;
    $14f4276f57578bf7$var$draining = false;
    if ($14f4276f57578bf7$var$currentQueue.length) $14f4276f57578bf7$var$queue = $14f4276f57578bf7$var$currentQueue.concat($14f4276f57578bf7$var$queue);
    else $14f4276f57578bf7$var$queueIndex = -1;
    if ($14f4276f57578bf7$var$queue.length) $14f4276f57578bf7$var$drainQueue();
}
function $14f4276f57578bf7$var$drainQueue() {
    if ($14f4276f57578bf7$var$draining) return;
    var timeout = $14f4276f57578bf7$var$runTimeout($14f4276f57578bf7$var$cleanUpNextTick);
    $14f4276f57578bf7$var$draining = true;
    var len = $14f4276f57578bf7$var$queue.length;
    while(len){
        $14f4276f57578bf7$var$currentQueue = $14f4276f57578bf7$var$queue;
        $14f4276f57578bf7$var$queue = [];
        while(++$14f4276f57578bf7$var$queueIndex < len)if ($14f4276f57578bf7$var$currentQueue) $14f4276f57578bf7$var$currentQueue[$14f4276f57578bf7$var$queueIndex].run();
        $14f4276f57578bf7$var$queueIndex = -1;
        len = $14f4276f57578bf7$var$queue.length;
    }
    $14f4276f57578bf7$var$currentQueue = null;
    $14f4276f57578bf7$var$draining = false;
    $14f4276f57578bf7$var$runClearTimeout(timeout);
}
$14f4276f57578bf7$var$process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    $14f4276f57578bf7$var$queue.push(new $14f4276f57578bf7$var$Item(fun, args));
    if ($14f4276f57578bf7$var$queue.length === 1 && !$14f4276f57578bf7$var$draining) $14f4276f57578bf7$var$runTimeout($14f4276f57578bf7$var$drainQueue);
};
// v8 likes predictible objects
function $14f4276f57578bf7$var$Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
$14f4276f57578bf7$var$Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
$14f4276f57578bf7$var$process.title = 'browser';
$14f4276f57578bf7$var$process.browser = true;
$14f4276f57578bf7$var$process.env = {};
$14f4276f57578bf7$var$process.argv = [];
$14f4276f57578bf7$var$process.version = ''; // empty string to avoid regexp issues
$14f4276f57578bf7$var$process.versions = {};
function $14f4276f57578bf7$var$noop() {}
$14f4276f57578bf7$var$process.on = $14f4276f57578bf7$var$noop;
$14f4276f57578bf7$var$process.addListener = $14f4276f57578bf7$var$noop;
$14f4276f57578bf7$var$process.once = $14f4276f57578bf7$var$noop;
$14f4276f57578bf7$var$process.off = $14f4276f57578bf7$var$noop;
$14f4276f57578bf7$var$process.removeListener = $14f4276f57578bf7$var$noop;
$14f4276f57578bf7$var$process.removeAllListeners = $14f4276f57578bf7$var$noop;
$14f4276f57578bf7$var$process.emit = $14f4276f57578bf7$var$noop;
$14f4276f57578bf7$var$process.prependListener = $14f4276f57578bf7$var$noop;
$14f4276f57578bf7$var$process.prependOnceListener = $14f4276f57578bf7$var$noop;
$14f4276f57578bf7$var$process.listeners = function(name) {
    return [];
};
$14f4276f57578bf7$var$process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
$14f4276f57578bf7$var$process.cwd = function() {
    return '/';
};
$14f4276f57578bf7$var$process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
$14f4276f57578bf7$var$process.umask = function() {
    return 0;
};


const $ae31471d52481ece$var$name = "@firebase/database";
const $ae31471d52481ece$var$version = "1.0.19";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** The semver (www.semver.org) version of the SDK. */ let $ae31471d52481ece$var$SDK_VERSION = '';
/**
 * SDK_VERSION should be set before any database instance is created
 * @internal
 */ function $ae31471d52481ece$export$c9fb972242fcb3c4(version) {
    $ae31471d52481ece$var$SDK_VERSION = version;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Wraps a DOM Storage object and:
 * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.
 * - prefixes names with "firebase:" to avoid collisions with app data.
 *
 * We automatically (see storage.js) create two such wrappers, one for sessionStorage,
 * and one for localStorage.
 *
 */ class $ae31471d52481ece$var$DOMStorageWrapper {
    /**
     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)
     */ constructor(domStorage_){
        this.domStorage_ = domStorage_;
        // Use a prefix to avoid collisions with other stuff saved by the app.
        this.prefix_ = 'firebase:';
    }
    /**
     * @param key - The key to save the value under
     * @param value - The value being stored, or null to remove the key.
     */ set(key, value) {
        if (value == null) this.domStorage_.removeItem(this.prefixedName_(key));
        else this.domStorage_.setItem(this.prefixedName_(key), (0, $ee1ab2624407a779$export$fac44ee5b035f737)(value));
    }
    /**
     * @returns The value that was stored under this key, or null
     */ get(key) {
        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));
        if (storedVal == null) return null;
        else return (0, $ee1ab2624407a779$export$c5a53ce6a17cf18d)(storedVal);
    }
    remove(key) {
        this.domStorage_.removeItem(this.prefixedName_(key));
    }
    prefixedName_(name) {
        return this.prefix_ + name;
    }
    toString() {
        return this.domStorage_.toString();
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An in-memory storage implementation that matches the API of DOMStorageWrapper
 * (TODO: create interface for both to implement).
 */ class $ae31471d52481ece$var$MemoryStorage {
    constructor(){
        this.cache_ = {};
        this.isInMemoryStorage = true;
    }
    set(key, value) {
        if (value == null) delete this.cache_[key];
        else this.cache_[key] = value;
    }
    get(key) {
        if ((0, $ee1ab2624407a779$export$2344b14b097df817)(this.cache_, key)) return this.cache_[key];
        return null;
    }
    remove(key) {
        delete this.cache_[key];
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.
 * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change
 * to reflect this type
 *
 * @param domStorageName - Name of the underlying storage object
 *   (e.g. 'localStorage' or 'sessionStorage').
 * @returns Turning off type information until a common interface is defined.
 */ const $ae31471d52481ece$var$createStoragefor = function(domStorageName) {
    try {
        // NOTE: just accessing "localStorage" or "window['localStorage']" may throw a security exception,
        // so it must be inside the try/catch.
        if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {
            // Need to test cache. Just because it's here doesn't mean it works
            const domStorage = window[domStorageName];
            domStorage.setItem('firebase:sentinel', 'cache');
            domStorage.removeItem('firebase:sentinel');
            return new $ae31471d52481ece$var$DOMStorageWrapper(domStorage);
        }
    } catch (e) {}
    // Failed to create wrapper.  Just return in-memory storage.
    // TODO: log?
    return new $ae31471d52481ece$var$MemoryStorage();
};
/** A storage object that lasts across sessions */ const $ae31471d52481ece$var$PersistentStorage = $ae31471d52481ece$var$createStoragefor('localStorage');
/** A storage object that only lasts one session */ const $ae31471d52481ece$var$SessionStorage = $ae31471d52481ece$var$createStoragefor('sessionStorage');
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $ae31471d52481ece$var$logClient = new (0, $429b88c59f76915c$export$efa9a398d6368992)('@firebase/database');
/**
 * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).
 */ const $ae31471d52481ece$var$LUIDGenerator = function() {
    let id = 1;
    return function() {
        return id++;
    };
}();
/**
 * Sha1 hash of the input string
 * @param str - The string to hash
 * @returns {!string} The resulting hash
 */ const $ae31471d52481ece$var$sha1 = function(str) {
    const utf8Bytes = (0, $ee1ab2624407a779$export$655666783217a925)(str);
    const sha1 = new (0, $ee1ab2624407a779$export$c85d589bf4e25fef)();
    sha1.update(utf8Bytes);
    const sha1Bytes = sha1.digest();
    return (0, $ee1ab2624407a779$export$b3b2de96497acc47).encodeByteArray(sha1Bytes);
};
const $ae31471d52481ece$var$buildLogMessage_ = function(...varArgs) {
    let message = '';
    for(let i = 0; i < varArgs.length; i++){
        const arg = varArgs[i];
        if (Array.isArray(arg) || arg && typeof arg === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any
        typeof arg.length === 'number') message += $ae31471d52481ece$var$buildLogMessage_.apply(null, arg);
        else if (typeof arg === 'object') message += (0, $ee1ab2624407a779$export$fac44ee5b035f737)(arg);
        else message += arg;
        message += ' ';
    }
    return message;
};
/**
 * Use this for all debug messages in Firebase.
 */ let $ae31471d52481ece$var$logger = null;
/**
 * Flag to check for log availability on first log message
 */ let $ae31471d52481ece$var$firstLog_ = true;
/**
 * The implementation of Firebase.enableLogging (defined here to break dependencies)
 * @param logger_ - A flag to turn on logging, or a custom logger
 * @param persistent - Whether or not to persist logging settings across refreshes
 */ const $ae31471d52481ece$var$enableLogging$1 = function(logger_, persistent) {
    (0, $ee1ab2624407a779$export$a7a9523472993e97)(!persistent || logger_ === true || logger_ === false, "Can't turn on custom loggers persistently.");
    if (logger_ === true) {
        $ae31471d52481ece$var$logClient.logLevel = (0, $429b88c59f76915c$export$243e62d78d3b544d).VERBOSE;
        $ae31471d52481ece$var$logger = $ae31471d52481ece$var$logClient.log.bind($ae31471d52481ece$var$logClient);
        if (persistent) $ae31471d52481ece$var$SessionStorage.set('logging_enabled', true);
    } else if (typeof logger_ === 'function') $ae31471d52481ece$var$logger = logger_;
    else {
        $ae31471d52481ece$var$logger = null;
        $ae31471d52481ece$var$SessionStorage.remove('logging_enabled');
    }
};
const $ae31471d52481ece$var$log = function(...varArgs) {
    if ($ae31471d52481ece$var$firstLog_ === true) {
        $ae31471d52481ece$var$firstLog_ = false;
        if ($ae31471d52481ece$var$logger === null && $ae31471d52481ece$var$SessionStorage.get('logging_enabled') === true) $ae31471d52481ece$var$enableLogging$1(true);
    }
    if ($ae31471d52481ece$var$logger) {
        const message = $ae31471d52481ece$var$buildLogMessage_.apply(null, varArgs);
        $ae31471d52481ece$var$logger(message);
    }
};
const $ae31471d52481ece$var$logWrapper = function(prefix) {
    return function(...varArgs) {
        $ae31471d52481ece$var$log(prefix, ...varArgs);
    };
};
const $ae31471d52481ece$var$error = function(...varArgs) {
    const message = 'FIREBASE INTERNAL ERROR: ' + $ae31471d52481ece$var$buildLogMessage_(...varArgs);
    $ae31471d52481ece$var$logClient.error(message);
};
const $ae31471d52481ece$var$fatal = function(...varArgs) {
    const message = `FIREBASE FATAL ERROR: ${$ae31471d52481ece$var$buildLogMessage_(...varArgs)}`;
    $ae31471d52481ece$var$logClient.error(message);
    throw new Error(message);
};
const $ae31471d52481ece$var$warn = function(...varArgs) {
    const message = 'FIREBASE WARNING: ' + $ae31471d52481ece$var$buildLogMessage_(...varArgs);
    $ae31471d52481ece$var$logClient.warn(message);
};
/**
 * Logs a warning if the containing page uses https. Called when a call to new Firebase
 * does not use https.
 */ const $ae31471d52481ece$var$warnIfPageIsSecure = function() {
    // Be very careful accessing browser globals. Who knows what may or may not exist.
    if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) $ae31471d52481ece$var$warn("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");
};
/**
 * Returns true if data is NaN, or +/- Infinity.
 */ const $ae31471d52481ece$var$isInvalidJSONNumber = function(data) {
    return typeof data === 'number' && (data !== data || // NaN
    data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);
};
const $ae31471d52481ece$var$executeWhenDOMReady = function(fn) {
    if ((0, $ee1ab2624407a779$export$5d1d834fbbf8bab7)() || document.readyState === 'complete') fn();
    else {
        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which
        // fire before onload), but fall back to onload.
        let called = false;
        const wrappedFn = function() {
            if (!document.body) {
                setTimeout(wrappedFn, Math.floor(10));
                return;
            }
            if (!called) {
                called = true;
                fn();
            }
        };
        if (document.addEventListener) {
            document.addEventListener('DOMContentLoaded', wrappedFn, false);
            // fallback to onload.
            window.addEventListener('load', wrappedFn, false);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        } else if (document.attachEvent) {
            // IE.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            document.attachEvent('onreadystatechange', ()=>{
                if (document.readyState === 'complete') wrappedFn();
            });
            // fallback to onload.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            window.attachEvent('onload', wrappedFn);
        // jQuery has an extra hack for IE that we could employ (based on
        // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.
        // I'm hoping we don't need it.
        }
    }
};
/**
 * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names
 */ const $ae31471d52481ece$var$MIN_NAME = '[MIN_NAME]';
/**
 * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names
 */ const $ae31471d52481ece$var$MAX_NAME = '[MAX_NAME]';
/**
 * Compares valid Firebase key names, plus min and max name
 */ const $ae31471d52481ece$var$nameCompare = function(a, b) {
    if (a === b) return 0;
    else if (a === $ae31471d52481ece$var$MIN_NAME || b === $ae31471d52481ece$var$MAX_NAME) return -1;
    else if (b === $ae31471d52481ece$var$MIN_NAME || a === $ae31471d52481ece$var$MAX_NAME) return 1;
    else {
        const aAsInt = $ae31471d52481ece$var$tryParseInt(a), bAsInt = $ae31471d52481ece$var$tryParseInt(b);
        if (aAsInt !== null) {
            if (bAsInt !== null) return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;
            else return -1;
        } else if (bAsInt !== null) return 1;
        else return a < b ? -1 : 1;
    }
};
/**
 * @returns {!number} comparison result.
 */ const $ae31471d52481ece$var$stringCompare = function(a, b) {
    if (a === b) return 0;
    else if (a < b) return -1;
    else return 1;
};
const $ae31471d52481ece$var$requireKey = function(key, obj) {
    if (obj && key in obj) return obj[key];
    else throw new Error('Missing required key (' + key + ') in object: ' + (0, $ee1ab2624407a779$export$fac44ee5b035f737)(obj));
};
const $ae31471d52481ece$var$ObjectToUniqueKey = function(obj) {
    if (typeof obj !== 'object' || obj === null) return (0, $ee1ab2624407a779$export$fac44ee5b035f737)(obj);
    const keys = [];
    // eslint-disable-next-line guard-for-in
    for(const k in obj)keys.push(k);
    // Export as json, but with the keys sorted.
    keys.sort();
    let key = '{';
    for(let i = 0; i < keys.length; i++){
        if (i !== 0) key += ',';
        key += (0, $ee1ab2624407a779$export$fac44ee5b035f737)(keys[i]);
        key += ':';
        key += $ae31471d52481ece$var$ObjectToUniqueKey(obj[keys[i]]);
    }
    key += '}';
    return key;
};
/**
 * Splits a string into a number of smaller segments of maximum size
 * @param str - The string
 * @param segsize - The maximum number of chars in the string.
 * @returns The string, split into appropriately-sized chunks
 */ const $ae31471d52481ece$var$splitStringBySize = function(str, segsize) {
    const len = str.length;
    if (len <= segsize) return [
        str
    ];
    const dataSegs = [];
    for(let c = 0; c < len; c += segsize)if (c + segsize > len) dataSegs.push(str.substring(c, len));
    else dataSegs.push(str.substring(c, c + segsize));
    return dataSegs;
};
/**
 * Apply a function to each (key, value) pair in an object or
 * apply a function to each (index, value) pair in an array
 * @param obj - The object or array to iterate over
 * @param fn - The function to apply
 */ function $ae31471d52481ece$var$each(obj, fn) {
    for(const key in obj)if (obj.hasOwnProperty(key)) fn(key, obj[key]);
}
/**
 * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)
 * I made one modification at the end and removed the NaN / Infinity
 * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.
 * @param v - A double
 *
 */ const $ae31471d52481ece$var$doubleToIEEE754String = function(v) {
    (0, $ee1ab2624407a779$export$a7a9523472993e97)(!$ae31471d52481ece$var$isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL
    const ebits = 11, fbits = 52;
    const bias = (1 << ebits - 1) - 1;
    let s, e, f, ln, i;
    // Compute sign, exponent, fraction
    // Skip NaN / Infinity handling --MJL.
    if (v === 0) {
        e = 0;
        f = 0;
        s = 1 / v === -Infinity ? 1 : 0;
    } else {
        s = v < 0;
        v = Math.abs(v);
        if (v >= Math.pow(2, 1 - bias)) {
            // Normalized
            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);
            e = ln + bias;
            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));
        } else {
            // Denormalized
            e = 0;
            f = Math.round(v / Math.pow(2, 1 - bias - fbits));
        }
    }
    // Pack sign, exponent, fraction
    const bits = [];
    for(i = fbits; i; i -= 1){
        bits.push(f % 2 ? 1 : 0);
        f = Math.floor(f / 2);
    }
    for(i = ebits; i; i -= 1){
        bits.push(e % 2 ? 1 : 0);
        e = Math.floor(e / 2);
    }
    bits.push(s ? 1 : 0);
    bits.reverse();
    const str = bits.join('');
    // Return the data as a hex string. --MJL
    let hexByteString = '';
    for(i = 0; i < 64; i += 8){
        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);
        if (hexByte.length === 1) hexByte = '0' + hexByte;
        hexByteString = hexByteString + hexByte;
    }
    return hexByteString.toLowerCase();
};
/**
 * Used to detect if we're in a Chrome content script (which executes in an
 * isolated environment where long-polling doesn't work).
 */ const $ae31471d52481ece$var$isChromeExtensionContentScript = function() {
    return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));
};
/**
 * Used to detect if we're in a Windows 8 Store app.
 */ const $ae31471d52481ece$var$isWindowsStoreApp = function() {
    // Check for the presence of a couple WinRT globals
    return typeof Windows === 'object' && typeof Windows.UI === 'object';
};
/**
 * Converts a server error code to a JavaScript Error
 */ function $ae31471d52481ece$var$errorForServerCode(code, query) {
    let reason = 'Unknown Error';
    if (code === 'too_big') reason = "The data requested exceeds the maximum size that can be accessed with a single request.";
    else if (code === 'permission_denied') reason = "Client doesn't have permission to access the desired data.";
    else if (code === 'unavailable') reason = 'The service is unavailable';
    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    error.code = code.toUpperCase();
    return error;
}
/**
 * Used to test for integer-looking strings
 */ const $ae31471d52481ece$var$INTEGER_REGEXP_ = new RegExp('^-?(0*)\\d{1,10}$');
/**
 * For use in keys, the minimum possible 32-bit integer.
 */ const $ae31471d52481ece$var$INTEGER_32_MIN = -2147483648;
/**
 * For use in keys, the maximum possible 32-bit integer.
 */ const $ae31471d52481ece$var$INTEGER_32_MAX = 2147483647;
/**
 * If the string contains a 32-bit integer, return it.  Else return null.
 */ const $ae31471d52481ece$var$tryParseInt = function(str) {
    if ($ae31471d52481ece$var$INTEGER_REGEXP_.test(str)) {
        const intVal = Number(str);
        if (intVal >= $ae31471d52481ece$var$INTEGER_32_MIN && intVal <= $ae31471d52481ece$var$INTEGER_32_MAX) return intVal;
    }
    return null;
};
/**
 * Helper to run some code but catch any exceptions and re-throw them later.
 * Useful for preventing user callbacks from breaking internal code.
 *
 * Re-throwing the exception from a setTimeout is a little evil, but it's very
 * convenient (we don't have to try to figure out when is a safe point to
 * re-throw it), and the behavior seems reasonable:
 *
 * * If you aren't pausing on exceptions, you get an error in the console with
 *   the correct stack trace.
 * * If you're pausing on all exceptions, the debugger will pause on your
 *   exception and then again when we rethrow it.
 * * If you're only pausing on uncaught exceptions, the debugger will only pause
 *   on us re-throwing it.
 *
 * @param fn - The code to guard.
 */ const $ae31471d52481ece$var$exceptionGuard = function(fn) {
    try {
        fn();
    } catch (e) {
        // Re-throw exception when it's safe.
        setTimeout(()=>{
            // It used to be that "throw e" would result in a good console error with
            // relevant context, but as of Chrome 39, you just get the firebase.js
            // file/line number where we re-throw it, which is useless. So we log
            // e.stack explicitly.
            const stack = e.stack || '';
            $ae31471d52481ece$var$warn('Exception was thrown by user callback.', stack);
            throw e;
        }, Math.floor(0));
    }
};
/**
 * @returns {boolean} true if we think we're currently being crawled.
 */ const $ae31471d52481ece$var$beingCrawled = function() {
    const userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || '';
    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we
    // believe to support JavaScript/AJAX rendering.
    // NOTE: Google Webmaster Tools doesn't really belong, but their "This is how a visitor to your website
    // would have seen the page" is flaky if we don't treat it as a crawler.
    return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;
};
/**
 * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.
 *
 * It is removed with clearTimeout() as normal.
 *
 * @param fn - Function to run.
 * @param time - Milliseconds to wait before running.
 * @returns The setTimeout() return value.
 */ const $ae31471d52481ece$var$setTimeoutNonBlocking = function(fn, time) {
    const timeout = setTimeout(fn, time);
    // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.
    if (typeof timeout === 'number' && // @ts-ignore Is only defined in Deno environments.
    typeof Deno !== 'undefined' && // @ts-ignore Deno and unrefTimer are only defined in Deno environments.
    Deno['unrefTimer']) // @ts-ignore Deno and unrefTimer are only defined in Deno environments.
    Deno.unrefTimer(timeout);
    else if (typeof timeout === 'object' && timeout['unref']) // eslint-disable-next-line @typescript-eslint/no-explicit-any
    timeout['unref']();
    return timeout;
};
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Abstraction around AppCheck's token fetching capabilities.
 */ class $ae31471d52481ece$var$AppCheckTokenProvider {
    constructor(app, appCheckProvider){
        this.appCheckProvider = appCheckProvider;
        this.appName = app.name;
        if ((0, $12572052cab62175$export$643c8bc6c389f34e)(app) && app.settings.appCheckToken) this.serverAppAppCheckToken = app.settings.appCheckToken;
        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({
            optional: true
        });
        if (!this.appCheck) appCheckProvider === null || appCheckProvider === void 0 || appCheckProvider.get().then((appCheck)=>this.appCheck = appCheck);
    }
    getToken(forceRefresh) {
        if (this.serverAppAppCheckToken) {
            if (forceRefresh) throw new Error('Attempted reuse of `FirebaseServerApp.appCheckToken` after previous usage failed.');
            return Promise.resolve({
                token: this.serverAppAppCheckToken
            });
        }
        if (!this.appCheck) return new Promise((resolve, reject)=>{
            // Support delayed initialization of FirebaseAppCheck. This allows our
            // customers to initialize the RTDB SDK before initializing Firebase
            // AppCheck and ensures that all requests are authenticated if a token
            // becomes available before the timeout below expires.
            setTimeout(()=>{
                if (this.appCheck) this.getToken(forceRefresh).then(resolve, reject);
                else resolve(null);
            }, 0);
        });
        return this.appCheck.getToken(forceRefresh);
    }
    addTokenChangeListener(listener) {
        var _a;
        (_a = this.appCheckProvider) === null || _a === void 0 || _a.get().then((appCheck)=>appCheck.addTokenListener(listener));
    }
    notifyForInvalidToken() {
        $ae31471d52481ece$var$warn(`Provided AppCheck credentials for the app named "${this.appName}" ` + 'are invalid. This usually indicates your app was not initialized correctly.');
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Abstraction around FirebaseApp's token fetching capabilities.
 */ class $ae31471d52481ece$var$FirebaseAuthTokenProvider {
    constructor(appName_, firebaseOptions_, authProvider_){
        this.appName_ = appName_;
        this.firebaseOptions_ = firebaseOptions_;
        this.authProvider_ = authProvider_;
        this.auth_ = null;
        this.auth_ = authProvider_.getImmediate({
            optional: true
        });
        if (!this.auth_) authProvider_.onInit((auth)=>this.auth_ = auth);
    }
    getToken(forceRefresh) {
        if (!this.auth_) return new Promise((resolve, reject)=>{
            // Support delayed initialization of FirebaseAuth. This allows our
            // customers to initialize the RTDB SDK before initializing Firebase
            // Auth and ensures that all requests are authenticated if a token
            // becomes available before the timeout below expires.
            setTimeout(()=>{
                if (this.auth_) this.getToken(forceRefresh).then(resolve, reject);
                else resolve(null);
            }, 0);
        });
        return this.auth_.getToken(forceRefresh).catch((error)=>{
            // TODO: Need to figure out all the cases this is raised and whether
            // this makes sense.
            if (error && error.code === 'auth/token-not-initialized') {
                $ae31471d52481ece$var$log('Got auth/token-not-initialized error.  Treating as null token.');
                return null;
            } else return Promise.reject(error);
        });
    }
    addTokenChangeListener(listener) {
        // TODO: We might want to wrap the listener and call it with no args to
        // avoid a leaky abstraction, but that makes removing the listener harder.
        if (this.auth_) this.auth_.addAuthTokenListener(listener);
        else this.authProvider_.get().then((auth)=>auth.addAuthTokenListener(listener));
    }
    removeTokenChangeListener(listener) {
        this.authProvider_.get().then((auth)=>auth.removeAuthTokenListener(listener));
    }
    notifyForInvalidToken() {
        let errorMessage = 'Provided authentication credentials for the app named "' + this.appName_ + '" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';
        if ('credential' in this.firebaseOptions_) errorMessage += 'Make sure the "credential" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.';
        else if ('serviceAccount' in this.firebaseOptions_) errorMessage += 'Make sure the "serviceAccount" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.';
        else errorMessage += 'Make sure the "apiKey" and "databaseURL" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.';
        $ae31471d52481ece$var$warn(errorMessage);
    }
}
/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */ class $ae31471d52481ece$var$EmulatorTokenProvider {
    constructor(accessToken){
        this.accessToken = accessToken;
    }
    getToken(forceRefresh) {
        return Promise.resolve({
            accessToken: this.accessToken
        });
    }
    addTokenChangeListener(listener) {
        // Invoke the listener immediately to match the behavior in Firebase Auth
        // (see packages/auth/src/auth.js#L1807)
        listener(this.accessToken);
    }
    removeTokenChangeListener(listener) {}
    notifyForInvalidToken() {}
}
/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */ $ae31471d52481ece$var$EmulatorTokenProvider.OWNER = 'owner';
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $ae31471d52481ece$var$PROTOCOL_VERSION = '5';
const $ae31471d52481ece$var$VERSION_PARAM = 'v';
const $ae31471d52481ece$var$TRANSPORT_SESSION_PARAM = 's';
const $ae31471d52481ece$var$REFERER_PARAM = 'r';
const $ae31471d52481ece$var$FORGE_REF = 'f';
// Matches console.firebase.google.com, firebase-console-*.corp.google.com and
// firebase.corp.google.com
const $ae31471d52481ece$var$FORGE_DOMAIN_RE = /(console\.firebase|firebase-console-\w+\.corp|firebase\.corp)\.google\.com/;
const $ae31471d52481ece$var$LAST_SESSION_PARAM = 'ls';
const $ae31471d52481ece$var$APPLICATION_ID_PARAM = 'p';
const $ae31471d52481ece$var$APP_CHECK_TOKEN_PARAM = 'ac';
const $ae31471d52481ece$var$WEBSOCKET = 'websocket';
const $ae31471d52481ece$var$LONG_POLLING = 'long_polling';
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A class that holds metadata about a Repo object
 */ class $ae31471d52481ece$var$RepoInfo {
    /**
     * @param host - Hostname portion of the url for the repo
     * @param secure - Whether or not this repo is accessed over ssl
     * @param namespace - The namespace represented by the repo
     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).
     * @param nodeAdmin - Whether this instance uses Admin SDK credentials
     * @param persistenceKey - Override the default session persistence storage key
     */ constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false, isUsingEmulator = false, emulatorOptions = null){
        this.secure = secure;
        this.namespace = namespace;
        this.webSocketOnly = webSocketOnly;
        this.nodeAdmin = nodeAdmin;
        this.persistenceKey = persistenceKey;
        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;
        this.isUsingEmulator = isUsingEmulator;
        this.emulatorOptions = emulatorOptions;
        this._host = host.toLowerCase();
        this._domain = this._host.substr(this._host.indexOf('.') + 1);
        this.internalHost = $ae31471d52481ece$var$PersistentStorage.get('host:' + host) || this._host;
    }
    isCacheableHost() {
        return this.internalHost.substr(0, 2) === 's-';
    }
    isCustomHost() {
        return this._domain !== 'firebaseio.com' && this._domain !== 'firebaseio-demo.com';
    }
    get host() {
        return this._host;
    }
    set host(newHost) {
        if (newHost !== this.internalHost) {
            this.internalHost = newHost;
            if (this.isCacheableHost()) $ae31471d52481ece$var$PersistentStorage.set('host:' + this._host, this.internalHost);
        }
    }
    toString() {
        let str = this.toURLString();
        if (this.persistenceKey) str += '<' + this.persistenceKey + '>';
        return str;
    }
    toURLString() {
        const protocol = this.secure ? 'https://' : 'http://';
        const query = this.includeNamespaceInQueryParams ? `?ns=${this.namespace}` : '';
        return `${protocol}${this.host}/${query}`;
    }
}
function $ae31471d52481ece$var$repoInfoNeedsQueryParam(repoInfo) {
    return repoInfo.host !== repoInfo.internalHost || repoInfo.isCustomHost() || repoInfo.includeNamespaceInQueryParams;
}
/**
 * Returns the websocket URL for this repo
 * @param repoInfo - RepoInfo object
 * @param type - of connection
 * @param params - list
 * @returns The URL for this repo
 */ function $ae31471d52481ece$var$repoInfoConnectionURL(repoInfo, type, params) {
    (0, $ee1ab2624407a779$export$a7a9523472993e97)(typeof type === 'string', 'typeof type must == string');
    (0, $ee1ab2624407a779$export$a7a9523472993e97)(typeof params === 'object', 'typeof params must == object');
    let connURL;
    if (type === $ae31471d52481ece$var$WEBSOCKET) connURL = (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';
    else if (type === $ae31471d52481ece$var$LONG_POLLING) connURL = (repoInfo.secure ? 'https://' : 'http://') + repoInfo.internalHost + '/.lp?';
    else throw new Error('Unknown connection type: ' + type);
    if ($ae31471d52481ece$var$repoInfoNeedsQueryParam(repoInfo)) params['ns'] = repoInfo.namespace;
    const pairs = [];
    $ae31471d52481ece$var$each(params, (key, value)=>{
        pairs.push(key + '=' + value);
    });
    return connURL + pairs.join('&');
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Tracks a collection of stats.
 */ class $ae31471d52481ece$var$StatsCollection {
    constructor(){
        this.counters_ = {};
    }
    incrementCounter(name, amount = 1) {
        if (!(0, $ee1ab2624407a779$export$2344b14b097df817)(this.counters_, name)) this.counters_[name] = 0;
        this.counters_[name] += amount;
    }
    get() {
        return (0, $ee1ab2624407a779$export$6c40052bed430212)(this.counters_);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $ae31471d52481ece$var$collections = {};
const $ae31471d52481ece$var$reporters = {};
function $ae31471d52481ece$var$statsManagerGetCollection(repoInfo) {
    const hashString = repoInfo.toString();
    if (!$ae31471d52481ece$var$collections[hashString]) $ae31471d52481ece$var$collections[hashString] = new $ae31471d52481ece$var$StatsCollection();
    return $ae31471d52481ece$var$collections[hashString];
}
function $ae31471d52481ece$var$statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {
    const hashString = repoInfo.toString();
    if (!$ae31471d52481ece$var$reporters[hashString]) $ae31471d52481ece$var$reporters[hashString] = creatorFunction();
    return $ae31471d52481ece$var$reporters[hashString];
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * This class ensures the packets from the server arrive in order
 * This class takes data from the server and ensures it gets passed into the callbacks in order.
 */ class $ae31471d52481ece$var$PacketReceiver {
    /**
     * @param onMessage_
     */ constructor(onMessage_){
        this.onMessage_ = onMessage_;
        this.pendingResponses = [];
        this.currentResponseNum = 0;
        this.closeAfterResponse = -1;
        this.onClose = null;
    }
    closeAfter(responseNum, callback) {
        this.closeAfterResponse = responseNum;
        this.onClose = callback;
        if (this.closeAfterResponse < this.currentResponseNum) {
            this.onClose();
            this.onClose = null;
        }
    }
    /**
     * Each message from the server comes with a response number, and an array of data. The responseNumber
     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all
     * browsers will respond in the same order as the requests we sent
     */ handleResponse(requestNum, data) {
        this.pendingResponses[requestNum] = data;
        while(this.pendingResponses[this.currentResponseNum]){
            const toProcess = this.pendingResponses[this.currentResponseNum];
            delete this.pendingResponses[this.currentResponseNum];
            for(let i = 0; i < toProcess.length; ++i)if (toProcess[i]) $ae31471d52481ece$var$exceptionGuard(()=>{
                this.onMessage_(toProcess[i]);
            });
            if (this.currentResponseNum === this.closeAfterResponse) {
                if (this.onClose) {
                    this.onClose();
                    this.onClose = null;
                }
                break;
            }
            this.currentResponseNum++;
        }
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // URL query parameters associated with longpolling
const $ae31471d52481ece$var$FIREBASE_LONGPOLL_START_PARAM = 'start';
const $ae31471d52481ece$var$FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';
const $ae31471d52481ece$var$FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';
const $ae31471d52481ece$var$FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';
const $ae31471d52481ece$var$FIREBASE_LONGPOLL_ID_PARAM = 'id';
const $ae31471d52481ece$var$FIREBASE_LONGPOLL_PW_PARAM = 'pw';
const $ae31471d52481ece$var$FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';
const $ae31471d52481ece$var$FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';
const $ae31471d52481ece$var$FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';
const $ae31471d52481ece$var$FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';
const $ae31471d52481ece$var$FIREBASE_LONGPOLL_DATA_PARAM = 'd';
const $ae31471d52481ece$var$FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';
//Data size constants.
//TODO: Perf: the maximum length actually differs from browser to browser.
// We should check what browser we're on and set accordingly.
const $ae31471d52481ece$var$MAX_URL_DATA_SIZE = 1870;
const $ae31471d52481ece$var$SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=
const $ae31471d52481ece$var$MAX_PAYLOAD_SIZE = $ae31471d52481ece$var$MAX_URL_DATA_SIZE - $ae31471d52481ece$var$SEG_HEADER_SIZE;
/**
 * Keepalive period
 * send a fresh request at minimum every 25 seconds. Opera has a maximum request
 * length of 30 seconds that we can't exceed.
 */ const $ae31471d52481ece$var$KEEPALIVE_REQUEST_INTERVAL = 25000;
/**
 * How long to wait before aborting a long-polling connection attempt.
 */ const $ae31471d52481ece$var$LP_CONNECT_TIMEOUT = 30000;
/**
 * This class manages a single long-polling connection.
 */ class $ae31471d52481ece$var$BrowserPollConnection {
    /**
     * @param connId An identifier for this connection, used for logging
     * @param repoInfo The info for the endpoint to send data to.
     * @param applicationId The Firebase App ID for this project.
     * @param appCheckToken The AppCheck token for this client.
     * @param authToken The AuthToken to use for this connection.
     * @param transportSessionId Optional transportSessionid if we are
     * reconnecting for an existing transport session
     * @param lastSessionId Optional lastSessionId if the PersistentConnection has
     * already created a connection previously
     */ constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId){
        this.connId = connId;
        this.repoInfo = repoInfo;
        this.applicationId = applicationId;
        this.appCheckToken = appCheckToken;
        this.authToken = authToken;
        this.transportSessionId = transportSessionId;
        this.lastSessionId = lastSessionId;
        this.bytesSent = 0;
        this.bytesReceived = 0;
        this.everConnected_ = false;
        this.log_ = $ae31471d52481ece$var$logWrapper(connId);
        this.stats_ = $ae31471d52481ece$var$statsManagerGetCollection(repoInfo);
        this.urlFn = (params)=>{
            // Always add the token if we have one.
            if (this.appCheckToken) params[$ae31471d52481ece$var$APP_CHECK_TOKEN_PARAM] = this.appCheckToken;
            return $ae31471d52481ece$var$repoInfoConnectionURL(repoInfo, $ae31471d52481ece$var$LONG_POLLING, params);
        };
    }
    /**
     * @param onMessage - Callback when messages arrive
     * @param onDisconnect - Callback with connection lost.
     */ open(onMessage, onDisconnect) {
        this.curSegmentNum = 0;
        this.onDisconnect_ = onDisconnect;
        this.myPacketOrderer = new $ae31471d52481ece$var$PacketReceiver(onMessage);
        this.isClosed_ = false;
        this.connectTimeoutTimer_ = setTimeout(()=>{
            this.log_('Timed out trying to connect.');
            // Make sure we clear the host cache
            this.onClosed_();
            this.connectTimeoutTimer_ = null;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        }, Math.floor($ae31471d52481ece$var$LP_CONNECT_TIMEOUT));
        // Ensure we delay the creation of the iframe until the DOM is loaded.
        $ae31471d52481ece$var$executeWhenDOMReady(()=>{
            if (this.isClosed_) return;
            //Set up a callback that gets triggered once a connection is set up.
            this.scriptTagHolder = new $ae31471d52481ece$var$FirebaseIFrameScriptHolder((...args)=>{
                const [command, arg1, arg2, arg3, arg4] = args;
                this.incrementIncomingBytes_(args);
                if (!this.scriptTagHolder) return; // we closed the connection.
                if (this.connectTimeoutTimer_) {
                    clearTimeout(this.connectTimeoutTimer_);
                    this.connectTimeoutTimer_ = null;
                }
                this.everConnected_ = true;
                if (command === $ae31471d52481ece$var$FIREBASE_LONGPOLL_START_PARAM) {
                    this.id = arg1;
                    this.password = arg2;
                } else if (command === $ae31471d52481ece$var$FIREBASE_LONGPOLL_CLOSE_COMMAND) {
                    // Don't clear the host cache. We got a response from the server, so we know it's reachable
                    if (arg1) {
                        // We aren't expecting any more data (other than what the server's already in the process of sending us
                        // through our already open polls), so don't send any more.
                        this.scriptTagHolder.sendNewPolls = false;
                        // arg1 in this case is the last response number sent by the server. We should try to receive
                        // all of the responses up to this one before closing
                        this.myPacketOrderer.closeAfter(arg1, ()=>{
                            this.onClosed_();
                        });
                    } else this.onClosed_();
                } else throw new Error('Unrecognized command received: ' + command);
            }, (...args)=>{
                const [pN, data] = args;
                this.incrementIncomingBytes_(args);
                this.myPacketOrderer.handleResponse(pN, data);
            }, ()=>{
                this.onClosed_();
            }, this.urlFn);
            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results
            //from cache.
            const urlParams = {};
            urlParams[$ae31471d52481ece$var$FIREBASE_LONGPOLL_START_PARAM] = 't';
            urlParams[$ae31471d52481ece$var$FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);
            if (this.scriptTagHolder.uniqueCallbackIdentifier) urlParams[$ae31471d52481ece$var$FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = this.scriptTagHolder.uniqueCallbackIdentifier;
            urlParams[$ae31471d52481ece$var$VERSION_PARAM] = $ae31471d52481ece$var$PROTOCOL_VERSION;
            if (this.transportSessionId) urlParams[$ae31471d52481ece$var$TRANSPORT_SESSION_PARAM] = this.transportSessionId;
            if (this.lastSessionId) urlParams[$ae31471d52481ece$var$LAST_SESSION_PARAM] = this.lastSessionId;
            if (this.applicationId) urlParams[$ae31471d52481ece$var$APPLICATION_ID_PARAM] = this.applicationId;
            if (this.appCheckToken) urlParams[$ae31471d52481ece$var$APP_CHECK_TOKEN_PARAM] = this.appCheckToken;
            if (typeof location !== 'undefined' && location.hostname && $ae31471d52481ece$var$FORGE_DOMAIN_RE.test(location.hostname)) urlParams[$ae31471d52481ece$var$REFERER_PARAM] = $ae31471d52481ece$var$FORGE_REF;
            const connectURL = this.urlFn(urlParams);
            this.log_('Connecting via long-poll to ' + connectURL);
            this.scriptTagHolder.addTag(connectURL, ()=>{
            /* do nothing */ });
        });
    }
    /**
     * Call this when a handshake has completed successfully and we want to consider the connection established
     */ start() {
        this.scriptTagHolder.startLongPoll(this.id, this.password);
        this.addDisconnectPingFrame(this.id, this.password);
    }
    /**
     * Forces long polling to be considered as a potential transport
     */ static forceAllow() {
        $ae31471d52481ece$var$BrowserPollConnection.forceAllow_ = true;
    }
    /**
     * Forces longpolling to not be considered as a potential transport
     */ static forceDisallow() {
        $ae31471d52481ece$var$BrowserPollConnection.forceDisallow_ = true;
    }
    // Static method, use string literal so it can be accessed in a generic way
    static isAvailable() {
        if ((0, $ee1ab2624407a779$export$5d1d834fbbf8bab7)()) return false;
        else if ($ae31471d52481ece$var$BrowserPollConnection.forceAllow_) return true;
        else // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in
        // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).
        return !$ae31471d52481ece$var$BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !$ae31471d52481ece$var$isChromeExtensionContentScript() && !$ae31471d52481ece$var$isWindowsStoreApp();
    }
    /**
     * No-op for polling
     */ markConnectionHealthy() {}
    /**
     * Stops polling and cleans up the iframe
     */ shutdown_() {
        this.isClosed_ = true;
        if (this.scriptTagHolder) {
            this.scriptTagHolder.close();
            this.scriptTagHolder = null;
        }
        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.
        if (this.myDisconnFrame) {
            document.body.removeChild(this.myDisconnFrame);
            this.myDisconnFrame = null;
        }
        if (this.connectTimeoutTimer_) {
            clearTimeout(this.connectTimeoutTimer_);
            this.connectTimeoutTimer_ = null;
        }
    }
    /**
     * Triggered when this transport is closed
     */ onClosed_() {
        if (!this.isClosed_) {
            this.log_('Longpoll is closing itself');
            this.shutdown_();
            if (this.onDisconnect_) {
                this.onDisconnect_(this.everConnected_);
                this.onDisconnect_ = null;
            }
        }
    }
    /**
     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server
     * that we've left.
     */ close() {
        if (!this.isClosed_) {
            this.log_('Longpoll is being closed.');
            this.shutdown_();
        }
    }
    /**
     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then
     * broken into chunks (since URLs have a small maximum length).
     * @param data - The JSON data to transmit.
     */ send(data) {
        const dataStr = (0, $ee1ab2624407a779$export$fac44ee5b035f737)(data);
        this.bytesSent += dataStr.length;
        this.stats_.incrementCounter('bytes_sent', dataStr.length);
        //first, lets get the base64-encoded data
        const base64data = (0, $ee1ab2624407a779$export$e510a73ee562749)(dataStr);
        //We can only fit a certain amount in each URL, so we need to split this request
        //up into multiple pieces if it doesn't fit in one request.
        const dataSegs = $ae31471d52481ece$var$splitStringBySize(base64data, $ae31471d52481ece$var$MAX_PAYLOAD_SIZE);
        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number
        //of segments so that we can reassemble the packet on the server.
        for(let i = 0; i < dataSegs.length; i++){
            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);
            this.curSegmentNum++;
        }
    }
    /**
     * This is how we notify the server that we're leaving.
     * We aren't able to send requests with DHTML on a window close event, but we can
     * trigger XHR requests in some browsers (everything but Opera basically).
     */ addDisconnectPingFrame(id, pw) {
        if ((0, $ee1ab2624407a779$export$5d1d834fbbf8bab7)()) return;
        this.myDisconnFrame = document.createElement('iframe');
        const urlParams = {};
        urlParams[$ae31471d52481ece$var$FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';
        urlParams[$ae31471d52481ece$var$FIREBASE_LONGPOLL_ID_PARAM] = id;
        urlParams[$ae31471d52481ece$var$FIREBASE_LONGPOLL_PW_PARAM] = pw;
        this.myDisconnFrame.src = this.urlFn(urlParams);
        this.myDisconnFrame.style.display = 'none';
        document.body.appendChild(this.myDisconnFrame);
    }
    /**
     * Used to track the bytes received by this client
     */ incrementIncomingBytes_(args) {
        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.
        const bytesReceived = (0, $ee1ab2624407a779$export$fac44ee5b035f737)(args).length;
        this.bytesReceived += bytesReceived;
        this.stats_.incrementCounter('bytes_received', bytesReceived);
    }
}
/*********************************************************************************************
 * A wrapper around an iframe that is used as a long-polling script holder.
 *********************************************************************************************/ class $ae31471d52481ece$var$FirebaseIFrameScriptHolder {
    /**
     * @param commandCB - The callback to be called when control commands are received from the server.
     * @param onMessageCB - The callback to be triggered when responses arrive from the server.
     * @param onDisconnect - The callback to be triggered when this tag holder is closed
     * @param urlFn - A function that provides the URL of the endpoint to send data to.
     */ constructor(commandCB, onMessageCB, onDisconnect, urlFn){
        this.onDisconnect = onDisconnect;
        this.urlFn = urlFn;
        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause
        //problems in some browsers.
        this.outstandingRequests = new Set();
        //A queue of the pending segments waiting for transmission to the server.
        this.pendingSegs = [];
        //A serial number. We use this for two things:
        // 1) A way to ensure the browser doesn't cache responses to polls
        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The
        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute
        //    JSONP code in the order it was added to the iframe.
        this.currentSerial = Math.floor(Math.random() * 100000000);
        // This gets set to false when we're "closing down" the connection (e.g. we're switching transports but there's still
        // incoming data from the server that we're waiting for).
        this.sendNewPolls = true;
        if (!(0, $ee1ab2624407a779$export$5d1d834fbbf8bab7)()) {
            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the
            //iframes where we put the long-polling script tags. We have two callbacks:
            //   1) Command Callback - Triggered for control issues, like starting a connection.
            //   2) Message Callback - Triggered when new data arrives.
            this.uniqueCallbackIdentifier = $ae31471d52481ece$var$LUIDGenerator();
            window[$ae31471d52481ece$var$FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;
            window[$ae31471d52481ece$var$FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;
            //Create an iframe for us to add script tags to.
            this.myIFrame = $ae31471d52481ece$var$FirebaseIFrameScriptHolder.createIFrame_();
            // Set the iframe's contents.
            let script = '';
            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient
            // for ie9, but ie8 needs to do it again in the document itself.
            if (this.myIFrame.src && this.myIFrame.src.substr(0, 11) === 'javascript:') {
                const currentDomain = document.domain;
                script = '<script>document.domain="' + currentDomain + '";</script>';
            }
            const iframeContents = '<html><body>' + script + '</body></html>';
            try {
                this.myIFrame.doc.open();
                this.myIFrame.doc.write(iframeContents);
                this.myIFrame.doc.close();
            } catch (e) {
                $ae31471d52481ece$var$log('frame writing exception');
                if (e.stack) $ae31471d52481ece$var$log(e.stack);
                $ae31471d52481ece$var$log(e);
            }
        } else {
            this.commandCB = commandCB;
            this.onMessageCB = onMessageCB;
        }
    }
    /**
     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can
     * actually use.
     */ static createIFrame_() {
        const iframe = document.createElement('iframe');
        iframe.style.display = 'none';
        // This is necessary in order to initialize the document inside the iframe
        if (document.body) {
            document.body.appendChild(iframe);
            try {
                // If document.domain has been modified in IE, this will throw an error, and we need to set the
                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute
                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.
                const a = iframe.contentWindow.document;
                if (!a) // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.
                $ae31471d52481ece$var$log('No IE domain setting required');
            } catch (e) {
                const domain = document.domain;
                iframe.src = "javascript:void((function(){document.open();document.domain='" + domain + "';document.close();})())";
            }
        } else // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this
        // never gets hit.
        throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';
        // Get the document of the iframe in a browser-specific way.
        if (iframe.contentDocument) iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari
        else if (iframe.contentWindow) iframe.doc = iframe.contentWindow.document; // Internet Explorer
        else if (iframe.document) // eslint-disable-next-line @typescript-eslint/no-explicit-any
        iframe.doc = iframe.document; //others?
        return iframe;
    }
    /**
     * Cancel all outstanding queries and remove the frame.
     */ close() {
        //Mark this iframe as dead, so no new requests are sent.
        this.alive = false;
        if (this.myIFrame) {
            //We have to actually remove all of the html inside this iframe before removing it from the
            //window, or IE will continue loading and executing the script tags we've already added, which
            //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.
            this.myIFrame.doc.body.textContent = '';
            setTimeout(()=>{
                if (this.myIFrame !== null) {
                    document.body.removeChild(this.myIFrame);
                    this.myIFrame = null;
                }
            }, Math.floor(0));
        }
        // Protect from being called recursively.
        const onDisconnect = this.onDisconnect;
        if (onDisconnect) {
            this.onDisconnect = null;
            onDisconnect();
        }
    }
    /**
     * Actually start the long-polling session by adding the first script tag(s) to the iframe.
     * @param id - The ID of this connection
     * @param pw - The password for this connection
     */ startLongPoll(id, pw) {
        this.myID = id;
        this.myPW = pw;
        this.alive = true;
        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.
        while(this.newRequest_());
    }
    /**
     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't
     * too many outstanding requests and we are still alive.
     *
     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if
     * needed.
     */ newRequest_() {
        // We keep one outstanding request open all the time to receive data, but if we need to send data
        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically
        // close the old request.
        if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {
            //construct our url
            this.currentSerial++;
            const urlParams = {};
            urlParams[$ae31471d52481ece$var$FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
            urlParams[$ae31471d52481ece$var$FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
            urlParams[$ae31471d52481ece$var$FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;
            let theURL = this.urlFn(urlParams);
            //Now add as much data as we can.
            let curDataString = '';
            let i = 0;
            while(this.pendingSegs.length > 0){
                //first, lets see if the next segment will fit.
                const nextSeg = this.pendingSegs[0];
                if (nextSeg.d.length + $ae31471d52481ece$var$SEG_HEADER_SIZE + curDataString.length <= $ae31471d52481ece$var$MAX_URL_DATA_SIZE) {
                    //great, the segment will fit. Lets append it.
                    const theSeg = this.pendingSegs.shift();
                    curDataString = curDataString + '&' + $ae31471d52481ece$var$FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + $ae31471d52481ece$var$FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + $ae31471d52481ece$var$FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;
                    i++;
                } else break;
            }
            theURL = theURL + curDataString;
            this.addLongPollTag_(theURL, this.currentSerial);
            return true;
        } else return false;
    }
    /**
     * Queue a packet for transmission to the server.
     * @param segnum - A sequential id for this packet segment used for reassembly
     * @param totalsegs - The total number of segments in this packet
     * @param data - The data for this segment.
     */ enqueueSegment(segnum, totalsegs, data) {
        //add this to the queue of segments to send.
        this.pendingSegs.push({
            seg: segnum,
            ts: totalsegs,
            d: data
        });
        //send the data immediately if there isn't already data being transmitted, unless
        //startLongPoll hasn't been called yet.
        if (this.alive) this.newRequest_();
    }
    /**
     * Add a script tag for a regular long-poll request.
     * @param url - The URL of the script tag.
     * @param serial - The serial number of the request.
     */ addLongPollTag_(url, serial) {
        //remember that we sent this request.
        this.outstandingRequests.add(serial);
        const doNewRequest = ()=>{
            this.outstandingRequests.delete(serial);
            this.newRequest_();
        };
        // If this request doesn't return on its own accord (by the server sending us some data), we'll
        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.
        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor($ae31471d52481ece$var$KEEPALIVE_REQUEST_INTERVAL));
        const readyStateCB = ()=>{
            // Request completed.  Cancel the keepalive.
            clearTimeout(keepaliveTimeout);
            // Trigger a new request so we can continue receiving data.
            doNewRequest();
        };
        this.addTag(url, readyStateCB);
    }
    /**
     * Add an arbitrary script tag to the iframe.
     * @param url - The URL for the script tag source.
     * @param loadCB - A callback to be triggered once the script has loaded.
     */ addTag(url, loadCB) {
        if ((0, $ee1ab2624407a779$export$5d1d834fbbf8bab7)()) // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.doNodeLongPoll(url, loadCB);
        else setTimeout(()=>{
            try {
                // if we're already closed, don't add this poll
                if (!this.sendNewPolls) return;
                const newScript = this.myIFrame.doc.createElement('script');
                newScript.type = 'text/javascript';
                newScript.async = true;
                newScript.src = url;
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                newScript.onload = newScript.onreadystatechange = function() {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    const rstate = newScript.readyState;
                    if (!rstate || rstate === 'loaded' || rstate === 'complete') {
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        newScript.onload = newScript.onreadystatechange = null;
                        if (newScript.parentNode) newScript.parentNode.removeChild(newScript);
                        loadCB();
                    }
                };
                newScript.onerror = ()=>{
                    $ae31471d52481ece$var$log('Long-poll script failed to load: ' + url);
                    this.sendNewPolls = false;
                    this.close();
                };
                this.myIFrame.doc.body.appendChild(newScript);
            } catch (e) {
            // TODO: we should make this error visible somehow
            }
        }, Math.floor(1));
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $ae31471d52481ece$var$WEBSOCKET_MAX_FRAME_SIZE = 16384;
const $ae31471d52481ece$var$WEBSOCKET_KEEPALIVE_INTERVAL = 45000;
let $ae31471d52481ece$var$WebSocketImpl = null;
if (typeof MozWebSocket !== 'undefined') $ae31471d52481ece$var$WebSocketImpl = MozWebSocket;
else if (typeof WebSocket !== 'undefined') $ae31471d52481ece$var$WebSocketImpl = WebSocket;
/**
 * Create a new websocket connection with the given callbacks.
 */ class $ae31471d52481ece$var$WebSocketConnection {
    /**
     * @param connId identifier for this transport
     * @param repoInfo The info for the websocket endpoint.
     * @param applicationId The Firebase App ID for this project.
     * @param appCheckToken The App Check Token for this client.
     * @param authToken The Auth Token for this client.
     * @param transportSessionId Optional transportSessionId if this is connecting
     * to an existing transport session
     * @param lastSessionId Optional lastSessionId if there was a previous
     * connection
     */ constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId){
        this.connId = connId;
        this.applicationId = applicationId;
        this.appCheckToken = appCheckToken;
        this.authToken = authToken;
        this.keepaliveTimer = null;
        this.frames = null;
        this.totalFrames = 0;
        this.bytesSent = 0;
        this.bytesReceived = 0;
        this.log_ = $ae31471d52481ece$var$logWrapper(this.connId);
        this.stats_ = $ae31471d52481ece$var$statsManagerGetCollection(repoInfo);
        this.connURL = $ae31471d52481ece$var$WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);
        this.nodeAdmin = repoInfo.nodeAdmin;
    }
    /**
     * @param repoInfo - The info for the websocket endpoint.
     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport
     *                                         session
     * @param lastSessionId - Optional lastSessionId if there was a previous connection
     * @returns connection url
     */ static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {
        const urlParams = {};
        urlParams[$ae31471d52481ece$var$VERSION_PARAM] = $ae31471d52481ece$var$PROTOCOL_VERSION;
        if (!(0, $ee1ab2624407a779$export$5d1d834fbbf8bab7)() && typeof location !== 'undefined' && location.hostname && $ae31471d52481ece$var$FORGE_DOMAIN_RE.test(location.hostname)) urlParams[$ae31471d52481ece$var$REFERER_PARAM] = $ae31471d52481ece$var$FORGE_REF;
        if (transportSessionId) urlParams[$ae31471d52481ece$var$TRANSPORT_SESSION_PARAM] = transportSessionId;
        if (lastSessionId) urlParams[$ae31471d52481ece$var$LAST_SESSION_PARAM] = lastSessionId;
        if (appCheckToken) urlParams[$ae31471d52481ece$var$APP_CHECK_TOKEN_PARAM] = appCheckToken;
        if (applicationId) urlParams[$ae31471d52481ece$var$APPLICATION_ID_PARAM] = applicationId;
        return $ae31471d52481ece$var$repoInfoConnectionURL(repoInfo, $ae31471d52481ece$var$WEBSOCKET, urlParams);
    }
    /**
     * @param onMessage - Callback when messages arrive
     * @param onDisconnect - Callback with connection lost.
     */ open(onMessage, onDisconnect) {
        this.onDisconnect = onDisconnect;
        this.onMessage = onMessage;
        this.log_('Websocket connecting to ' + this.connURL);
        this.everConnected_ = false;
        // Assume failure until proven otherwise.
        $ae31471d52481ece$var$PersistentStorage.set('previous_websocket_failure', true);
        try {
            let options;
            if ((0, $ee1ab2624407a779$export$5d1d834fbbf8bab7)()) {
                const device = this.nodeAdmin ? 'AdminNode' : 'Node';
                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>
                options = {
                    headers: {
                        'User-Agent': `Firebase/${$ae31471d52481ece$var$PROTOCOL_VERSION}/${$ae31471d52481ece$var$SDK_VERSION}/${$14f4276f57578bf7$exports.platform}/${device}`,
                        'X-Firebase-GMPID': this.applicationId || ''
                    }
                };
                // If using Node with admin creds, AppCheck-related checks are unnecessary.
                // Note that we send the credentials here even if they aren't admin credentials, which is
                // not a problem.
                // Note that this header is just used to bypass appcheck, and the token should still be sent
                // through the websocket connection once it is established.
                if (this.authToken) options.headers['Authorization'] = `Bearer ${this.authToken}`;
                if (this.appCheckToken) options.headers['X-Firebase-AppCheck'] = this.appCheckToken;
                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.
                const env = {};
                const proxy = this.connURL.indexOf('wss://') === 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];
                if (proxy) options['proxy'] = {
                    origin: proxy
                };
            }
            this.mySock = new $ae31471d52481ece$var$WebSocketImpl(this.connURL, [], options);
        } catch (e) {
            this.log_('Error instantiating WebSocket.');
            const error = e.message || e.data;
            if (error) this.log_(error);
            this.onClosed_();
            return;
        }
        this.mySock.onopen = ()=>{
            this.log_('Websocket connected.');
            this.everConnected_ = true;
        };
        this.mySock.onclose = ()=>{
            this.log_('Websocket connection was disconnected.');
            this.mySock = null;
            this.onClosed_();
        };
        this.mySock.onmessage = (m)=>{
            this.handleIncomingFrame(m);
        };
        this.mySock.onerror = (e)=>{
            this.log_('WebSocket error.  Closing connection.');
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const error = e.message || e.data;
            if (error) this.log_(error);
            this.onClosed_();
        };
    }
    /**
     * No-op for websockets, we don't need to do anything once the connection is confirmed as open
     */ start() {}
    static forceDisallow() {
        $ae31471d52481ece$var$WebSocketConnection.forceDisallow_ = true;
    }
    static isAvailable() {
        let isOldAndroid = false;
        if (typeof navigator !== 'undefined' && navigator.userAgent) {
            const oldAndroidRegex = /Android ([0-9]{0,}\.[0-9]{0,})/;
            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);
            if (oldAndroidMatch && oldAndroidMatch.length > 1) {
                if (parseFloat(oldAndroidMatch[1]) < 4.4) isOldAndroid = true;
            }
        }
        return !isOldAndroid && $ae31471d52481ece$var$WebSocketImpl !== null && !$ae31471d52481ece$var$WebSocketConnection.forceDisallow_;
    }
    /**
     * Returns true if we previously failed to connect with this transport.
     */ static previouslyFailed() {
        // If our persistent storage is actually only in-memory storage,
        // we default to assuming that it previously failed to be safe.
        return $ae31471d52481ece$var$PersistentStorage.isInMemoryStorage || $ae31471d52481ece$var$PersistentStorage.get('previous_websocket_failure') === true;
    }
    markConnectionHealthy() {
        $ae31471d52481ece$var$PersistentStorage.remove('previous_websocket_failure');
    }
    appendFrame_(data) {
        this.frames.push(data);
        if (this.frames.length === this.totalFrames) {
            const fullMess = this.frames.join('');
            this.frames = null;
            const jsonMess = (0, $ee1ab2624407a779$export$c5a53ce6a17cf18d)(fullMess);
            //handle the message
            this.onMessage(jsonMess);
        }
    }
    /**
     * @param frameCount - The number of frames we are expecting from the server
     */ handleNewFrameCount_(frameCount) {
        this.totalFrames = frameCount;
        this.frames = [];
    }
    /**
     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1
     * @returns Any remaining data to be process, or null if there is none
     */ extractFrameCount_(data) {
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(this.frames === null, 'We already have a frame buffer');
        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced
        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508
        if (data.length <= 6) {
            const frameCount = Number(data);
            if (!isNaN(frameCount)) {
                this.handleNewFrameCount_(frameCount);
                return null;
            }
        }
        this.handleNewFrameCount_(1);
        return data;
    }
    /**
     * Process a websocket frame that has arrived from the server.
     * @param mess - The frame data
     */ handleIncomingFrame(mess) {
        if (this.mySock === null) return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.
        const data = mess['data'];
        this.bytesReceived += data.length;
        this.stats_.incrementCounter('bytes_received', data.length);
        this.resetKeepAlive();
        if (this.frames !== null) // we're buffering
        this.appendFrame_(data);
        else {
            // try to parse out a frame count, otherwise, assume 1 and process it
            const remainingData = this.extractFrameCount_(data);
            if (remainingData !== null) this.appendFrame_(remainingData);
        }
    }
    /**
     * Send a message to the server
     * @param data - The JSON object to transmit
     */ send(data) {
        this.resetKeepAlive();
        const dataStr = (0, $ee1ab2624407a779$export$fac44ee5b035f737)(data);
        this.bytesSent += dataStr.length;
        this.stats_.incrementCounter('bytes_sent', dataStr.length);
        //We can only fit a certain amount in each websocket frame, so we need to split this request
        //up into multiple pieces if it doesn't fit in one request.
        const dataSegs = $ae31471d52481ece$var$splitStringBySize(dataStr, $ae31471d52481ece$var$WEBSOCKET_MAX_FRAME_SIZE);
        //Send the length header
        if (dataSegs.length > 1) this.sendString_(String(dataSegs.length));
        //Send the actual data in segments.
        for(let i = 0; i < dataSegs.length; i++)this.sendString_(dataSegs[i]);
    }
    shutdown_() {
        this.isClosed_ = true;
        if (this.keepaliveTimer) {
            clearInterval(this.keepaliveTimer);
            this.keepaliveTimer = null;
        }
        if (this.mySock) {
            this.mySock.close();
            this.mySock = null;
        }
    }
    onClosed_() {
        if (!this.isClosed_) {
            this.log_('WebSocket is closing itself');
            this.shutdown_();
            // since this is an internal close, trigger the close listener
            if (this.onDisconnect) {
                this.onDisconnect(this.everConnected_);
                this.onDisconnect = null;
            }
        }
    }
    /**
     * External-facing close handler.
     * Close the websocket and kill the connection.
     */ close() {
        if (!this.isClosed_) {
            this.log_('WebSocket is being closed');
            this.shutdown_();
        }
    }
    /**
     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after
     * the last activity.
     */ resetKeepAlive() {
        clearInterval(this.keepaliveTimer);
        this.keepaliveTimer = setInterval(()=>{
            //If there has been no websocket activity for a while, send a no-op
            if (this.mySock) this.sendString_('0');
            this.resetKeepAlive();
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        }, Math.floor($ae31471d52481ece$var$WEBSOCKET_KEEPALIVE_INTERVAL));
    }
    /**
     * Send a string over the websocket.
     *
     * @param str - String to send.
     */ sendString_(str) {
        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()
        // calls for some unknown reason.  We treat these as an error and disconnect.
        // See https://app.asana.com/0/58926111402292/68021340250410
        try {
            this.mySock.send(str);
        } catch (e) {
            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');
            setTimeout(this.onClosed_.bind(this), 0);
        }
    }
}
/**
 * Number of response before we consider the connection "healthy."
 */ $ae31471d52481ece$var$WebSocketConnection.responsesRequiredToBeHealthy = 2;
/**
 * Time to wait for the connection te become healthy before giving up.
 */ $ae31471d52481ece$var$WebSocketConnection.healthyTimeout = 30000;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Currently simplistic, this class manages what transport a Connection should use at various stages of its
 * lifecycle.
 *
 * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if
 * they are available.
 */ class $ae31471d52481ece$var$TransportManager {
    static get ALL_TRANSPORTS() {
        return [
            $ae31471d52481ece$var$BrowserPollConnection,
            $ae31471d52481ece$var$WebSocketConnection
        ];
    }
    /**
     * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after
     * TransportManager has already set up transports_
     */ static get IS_TRANSPORT_INITIALIZED() {
        return this.globalTransportInitialized_;
    }
    /**
     * @param repoInfo - Metadata around the namespace we're connecting to
     */ constructor(repoInfo){
        this.initTransports_(repoInfo);
    }
    initTransports_(repoInfo) {
        const isWebSocketsAvailable = $ae31471d52481ece$var$WebSocketConnection && $ae31471d52481ece$var$WebSocketConnection['isAvailable']();
        let isSkipPollConnection = isWebSocketsAvailable && !$ae31471d52481ece$var$WebSocketConnection.previouslyFailed();
        if (repoInfo.webSocketOnly) {
            if (!isWebSocketsAvailable) $ae31471d52481ece$var$warn("wss:// URL used, but browser isn't known to support websockets.  Trying anyway.");
            isSkipPollConnection = true;
        }
        if (isSkipPollConnection) this.transports_ = [
            $ae31471d52481ece$var$WebSocketConnection
        ];
        else {
            const transports = this.transports_ = [];
            for (const transport of $ae31471d52481ece$var$TransportManager.ALL_TRANSPORTS)if (transport && transport['isAvailable']()) transports.push(transport);
            $ae31471d52481ece$var$TransportManager.globalTransportInitialized_ = true;
        }
    }
    /**
     * @returns The constructor for the initial transport to use
     */ initialTransport() {
        if (this.transports_.length > 0) return this.transports_[0];
        else throw new Error('No transports available');
    }
    /**
     * @returns The constructor for the next transport, or null
     */ upgradeTransport() {
        if (this.transports_.length > 1) return this.transports_[1];
        else return null;
    }
}
// Keeps track of whether the TransportManager has already chosen a transport to use
$ae31471d52481ece$var$TransportManager.globalTransportInitialized_ = false;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Abort upgrade attempt if it takes longer than 60s.
const $ae31471d52481ece$var$UPGRADE_TIMEOUT = 60000;
// For some transports (WebSockets), we need to "validate" the transport by exchanging a few requests and responses.
// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.
const $ae31471d52481ece$var$DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;
// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)
// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout
// but we've sent/received enough bytes, we don't cancel the connection.
const $ae31471d52481ece$var$BYTES_SENT_HEALTHY_OVERRIDE = 10240;
const $ae31471d52481ece$var$BYTES_RECEIVED_HEALTHY_OVERRIDE = 102400;
const $ae31471d52481ece$var$MESSAGE_TYPE = 't';
const $ae31471d52481ece$var$MESSAGE_DATA = 'd';
const $ae31471d52481ece$var$CONTROL_SHUTDOWN = 's';
const $ae31471d52481ece$var$CONTROL_RESET = 'r';
const $ae31471d52481ece$var$CONTROL_ERROR = 'e';
const $ae31471d52481ece$var$CONTROL_PONG = 'o';
const $ae31471d52481ece$var$SWITCH_ACK = 'a';
const $ae31471d52481ece$var$END_TRANSMISSION = 'n';
const $ae31471d52481ece$var$PING = 'p';
const $ae31471d52481ece$var$SERVER_HELLO = 'h';
/**
 * Creates a new real-time connection to the server using whichever method works
 * best in the current browser.
 */ class $ae31471d52481ece$var$Connection {
    /**
     * @param id - an id for this connection
     * @param repoInfo_ - the info for the endpoint to connect to
     * @param applicationId_ - the Firebase App ID for this project
     * @param appCheckToken_ - The App Check Token for this device.
     * @param authToken_ - The auth token for this session.
     * @param onMessage_ - the callback to be triggered when a server-push message arrives
     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.
     * @param onDisconnect_ - the callback to be triggered when a connection was lost
     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.
     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server
     */ constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId){
        this.id = id;
        this.repoInfo_ = repoInfo_;
        this.applicationId_ = applicationId_;
        this.appCheckToken_ = appCheckToken_;
        this.authToken_ = authToken_;
        this.onMessage_ = onMessage_;
        this.onReady_ = onReady_;
        this.onDisconnect_ = onDisconnect_;
        this.onKill_ = onKill_;
        this.lastSessionId = lastSessionId;
        this.connectionCount = 0;
        this.pendingDataMessages = [];
        this.state_ = 0 /* RealtimeState.CONNECTING */ ;
        this.log_ = $ae31471d52481ece$var$logWrapper('c:' + this.id + ':');
        this.transportManager_ = new $ae31471d52481ece$var$TransportManager(repoInfo_);
        this.log_('Connection created');
        this.start_();
    }
    /**
     * Starts a connection attempt
     */ start_() {
        const conn = this.transportManager_.initialTransport();
        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);
        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
        // can consider the transport healthy.
        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;
        const onMessageReceived = this.connReceiver_(this.conn_);
        const onConnectionLost = this.disconnReceiver_(this.conn_);
        this.tx_ = this.conn_;
        this.rx_ = this.conn_;
        this.secondaryConn_ = null;
        this.isHealthy_ = false;
        /*
         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.
         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.
         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should
         * still have the context of your originating frame.
         */ setTimeout(()=>{
            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it
            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);
        }, Math.floor(0));
        const healthyTimeoutMS = conn['healthyTimeout'] || 0;
        if (healthyTimeoutMS > 0) this.healthyTimeout_ = $ae31471d52481ece$var$setTimeoutNonBlocking(()=>{
            this.healthyTimeout_ = null;
            if (!this.isHealthy_) {
                if (this.conn_ && this.conn_.bytesReceived > $ae31471d52481ece$var$BYTES_RECEIVED_HEALTHY_OVERRIDE) {
                    this.log_('Connection exceeded healthy timeout but has received ' + this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');
                    this.isHealthy_ = true;
                    this.conn_.markConnectionHealthy();
                } else if (this.conn_ && this.conn_.bytesSent > $ae31471d52481ece$var$BYTES_SENT_HEALTHY_OVERRIDE) this.log_('Connection exceeded healthy timeout but has sent ' + this.conn_.bytesSent + ' bytes.  Leaving connection alive.');
                else {
                    this.log_('Closing unhealthy connection after timeout.');
                    this.close();
                }
            }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        }, Math.floor(healthyTimeoutMS));
    }
    nextTransportId_() {
        return 'c:' + this.id + ':' + this.connectionCount++;
    }
    disconnReceiver_(conn) {
        return (everConnected)=>{
            if (conn === this.conn_) this.onConnectionLost_(everConnected);
            else if (conn === this.secondaryConn_) {
                this.log_('Secondary connection lost.');
                this.onSecondaryConnectionLost_();
            } else this.log_('closing an old connection');
        };
    }
    connReceiver_(conn) {
        return (message)=>{
            if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */ ) {
                if (conn === this.rx_) this.onPrimaryMessageReceived_(message);
                else if (conn === this.secondaryConn_) this.onSecondaryMessageReceived_(message);
                else this.log_('message on old connection');
            }
        };
    }
    /**
     * @param dataMsg - An arbitrary data message to be sent to the server
     */ sendRequest(dataMsg) {
        // wrap in a data message envelope and send it on
        const msg = {
            t: 'd',
            d: dataMsg
        };
        this.sendData_(msg);
    }
    tryCleanupConnection() {
        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {
            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);
            this.conn_ = this.secondaryConn_;
            this.secondaryConn_ = null;
        // the server will shutdown the old connection
        }
    }
    onSecondaryControl_(controlData) {
        if ($ae31471d52481ece$var$MESSAGE_TYPE in controlData) {
            const cmd = controlData[$ae31471d52481ece$var$MESSAGE_TYPE];
            if (cmd === $ae31471d52481ece$var$SWITCH_ACK) this.upgradeIfSecondaryHealthy_();
            else if (cmd === $ae31471d52481ece$var$CONTROL_RESET) {
                // Most likely the session wasn't valid. Abandon the switch attempt
                this.log_('Got a reset on secondary, closing it');
                this.secondaryConn_.close();
                // If we were already using this connection for something, than we need to fully close
                if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) this.close();
            } else if (cmd === $ae31471d52481ece$var$CONTROL_PONG) {
                this.log_('got pong on secondary.');
                this.secondaryResponsesRequired_--;
                this.upgradeIfSecondaryHealthy_();
            }
        }
    }
    onSecondaryMessageReceived_(parsedData) {
        const layer = $ae31471d52481ece$var$requireKey('t', parsedData);
        const data = $ae31471d52481ece$var$requireKey('d', parsedData);
        if (layer === 'c') this.onSecondaryControl_(data);
        else if (layer === 'd') // got a data message, but we're still second connection. Need to buffer it up
        this.pendingDataMessages.push(data);
        else throw new Error('Unknown protocol layer: ' + layer);
    }
    upgradeIfSecondaryHealthy_() {
        if (this.secondaryResponsesRequired_ <= 0) {
            this.log_('Secondary connection is healthy.');
            this.isHealthy_ = true;
            this.secondaryConn_.markConnectionHealthy();
            this.proceedWithUpgrade_();
        } else {
            // Send a ping to make sure the connection is healthy.
            this.log_('sending ping on secondary.');
            this.secondaryConn_.send({
                t: 'c',
                d: {
                    t: $ae31471d52481ece$var$PING,
                    d: {}
                }
            });
        }
    }
    proceedWithUpgrade_() {
        // tell this connection to consider itself open
        this.secondaryConn_.start();
        // send ack
        this.log_('sending client ack on secondary');
        this.secondaryConn_.send({
            t: 'c',
            d: {
                t: $ae31471d52481ece$var$SWITCH_ACK,
                d: {}
            }
        });
        // send end packet on primary transport, switch to sending on this one
        // can receive on this one, buffer responses until end received on primary transport
        this.log_('Ending transmission on primary');
        this.conn_.send({
            t: 'c',
            d: {
                t: $ae31471d52481ece$var$END_TRANSMISSION,
                d: {}
            }
        });
        this.tx_ = this.secondaryConn_;
        this.tryCleanupConnection();
    }
    onPrimaryMessageReceived_(parsedData) {
        // Must refer to parsedData properties in quotes, so closure doesn't touch them.
        const layer = $ae31471d52481ece$var$requireKey('t', parsedData);
        const data = $ae31471d52481ece$var$requireKey('d', parsedData);
        if (layer === 'c') this.onControl_(data);
        else if (layer === 'd') this.onDataMessage_(data);
    }
    onDataMessage_(message) {
        this.onPrimaryResponse_();
        // We don't do anything with data messages, just kick them up a level
        this.onMessage_(message);
    }
    onPrimaryResponse_() {
        if (!this.isHealthy_) {
            this.primaryResponsesRequired_--;
            if (this.primaryResponsesRequired_ <= 0) {
                this.log_('Primary connection is healthy.');
                this.isHealthy_ = true;
                this.conn_.markConnectionHealthy();
            }
        }
    }
    onControl_(controlData) {
        const cmd = $ae31471d52481ece$var$requireKey($ae31471d52481ece$var$MESSAGE_TYPE, controlData);
        if ($ae31471d52481ece$var$MESSAGE_DATA in controlData) {
            const payload = controlData[$ae31471d52481ece$var$MESSAGE_DATA];
            if (cmd === $ae31471d52481ece$var$SERVER_HELLO) {
                const handshakePayload = Object.assign({}, payload);
                if (this.repoInfo_.isUsingEmulator) // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.
                handshakePayload.h = this.repoInfo_.host;
                this.onHandshake_(handshakePayload);
            } else if (cmd === $ae31471d52481ece$var$END_TRANSMISSION) {
                this.log_('recvd end transmission on primary');
                this.rx_ = this.secondaryConn_;
                for(let i = 0; i < this.pendingDataMessages.length; ++i)this.onDataMessage_(this.pendingDataMessages[i]);
                this.pendingDataMessages = [];
                this.tryCleanupConnection();
            } else if (cmd === $ae31471d52481ece$var$CONTROL_SHUTDOWN) // This was previously the 'onKill' callback passed to the lower-level connection
            // payload in this case is the reason for the shutdown. Generally a human-readable error
            this.onConnectionShutdown_(payload);
            else if (cmd === $ae31471d52481ece$var$CONTROL_RESET) // payload in this case is the host we should contact
            this.onReset_(payload);
            else if (cmd === $ae31471d52481ece$var$CONTROL_ERROR) $ae31471d52481ece$var$error('Server Error: ' + payload);
            else if (cmd === $ae31471d52481ece$var$CONTROL_PONG) {
                this.log_('got pong on primary.');
                this.onPrimaryResponse_();
                this.sendPingOnPrimaryIfNecessary_();
            } else $ae31471d52481ece$var$error('Unknown control packet command: ' + cmd);
        }
    }
    /**
     * @param handshake - The handshake data returned from the server
     */ onHandshake_(handshake) {
        const timestamp = handshake.ts;
        const version = handshake.v;
        const host = handshake.h;
        this.sessionId = handshake.s;
        this.repoInfo_.host = host;
        // if we've already closed the connection, then don't bother trying to progress further
        if (this.state_ === 0 /* RealtimeState.CONNECTING */ ) {
            this.conn_.start();
            this.onConnectionEstablished_(this.conn_, timestamp);
            if ($ae31471d52481ece$var$PROTOCOL_VERSION !== version) $ae31471d52481ece$var$warn('Protocol version mismatch detected');
            // TODO: do we want to upgrade? when? maybe a delay?
            this.tryStartUpgrade_();
        }
    }
    tryStartUpgrade_() {
        const conn = this.transportManager_.upgradeTransport();
        if (conn) this.startUpgrade_(conn);
    }
    startUpgrade_(conn) {
        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);
        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we
        // can consider the transport healthy.
        this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;
        const onMessage = this.connReceiver_(this.secondaryConn_);
        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);
        this.secondaryConn_.open(onMessage, onDisconnect);
        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.
        $ae31471d52481ece$var$setTimeoutNonBlocking(()=>{
            if (this.secondaryConn_) {
                this.log_('Timed out trying to upgrade.');
                this.secondaryConn_.close();
            }
        }, Math.floor($ae31471d52481ece$var$UPGRADE_TIMEOUT));
    }
    onReset_(host) {
        this.log_('Reset packet received.  New host: ' + host);
        this.repoInfo_.host = host;
        // TODO: if we're already "connected", we need to trigger a disconnect at the next layer up.
        // We don't currently support resets after the connection has already been established
        if (this.state_ === 1 /* RealtimeState.CONNECTED */ ) this.close();
        else {
            // Close whatever connections we have open and start again.
            this.closeConnections_();
            this.start_();
        }
    }
    onConnectionEstablished_(conn, timestamp) {
        this.log_('Realtime connection established.');
        this.conn_ = conn;
        this.state_ = 1 /* RealtimeState.CONNECTED */ ;
        if (this.onReady_) {
            this.onReady_(timestamp, this.sessionId);
            this.onReady_ = null;
        }
        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,
        // send some pings.
        if (this.primaryResponsesRequired_ === 0) {
            this.log_('Primary connection is healthy.');
            this.isHealthy_ = true;
        } else $ae31471d52481ece$var$setTimeoutNonBlocking(()=>{
            this.sendPingOnPrimaryIfNecessary_();
        }, Math.floor($ae31471d52481ece$var$DELAY_BEFORE_SENDING_EXTRA_REQUESTS));
    }
    sendPingOnPrimaryIfNecessary_() {
        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.
        if (!this.isHealthy_ && this.state_ === 1 /* RealtimeState.CONNECTED */ ) {
            this.log_('sending ping on primary.');
            this.sendData_({
                t: 'c',
                d: {
                    t: $ae31471d52481ece$var$PING,
                    d: {}
                }
            });
        }
    }
    onSecondaryConnectionLost_() {
        const conn = this.secondaryConn_;
        this.secondaryConn_ = null;
        if (this.tx_ === conn || this.rx_ === conn) // we are relying on this connection already in some capacity. Therefore, a failure is real
        this.close();
    }
    /**
     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if
     * we should flush the host cache
     */ onConnectionLost_(everConnected) {
        this.conn_ = null;
        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting
        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.
        if (!everConnected && this.state_ === 0 /* RealtimeState.CONNECTING */ ) {
            this.log_('Realtime connection failed.');
            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away
            if (this.repoInfo_.isCacheableHost()) {
                $ae31471d52481ece$var$PersistentStorage.remove('host:' + this.repoInfo_.host);
                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com
                this.repoInfo_.internalHost = this.repoInfo_.host;
            }
        } else if (this.state_ === 1 /* RealtimeState.CONNECTED */ ) this.log_('Realtime connection lost.');
        this.close();
    }
    onConnectionShutdown_(reason) {
        this.log_('Connection shutdown command received. Shutting down...');
        if (this.onKill_) {
            this.onKill_(reason);
            this.onKill_ = null;
        }
        // We intentionally don't want to fire onDisconnect (kill is a different case),
        // so clear the callback.
        this.onDisconnect_ = null;
        this.close();
    }
    sendData_(data) {
        if (this.state_ !== 1 /* RealtimeState.CONNECTED */ ) throw 'Connection is not connected';
        else this.tx_.send(data);
    }
    /**
     * Cleans up this connection, calling the appropriate callbacks
     */ close() {
        if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */ ) {
            this.log_('Closing realtime connection.');
            this.state_ = 2 /* RealtimeState.DISCONNECTED */ ;
            this.closeConnections_();
            if (this.onDisconnect_) {
                this.onDisconnect_();
                this.onDisconnect_ = null;
            }
        }
    }
    closeConnections_() {
        this.log_('Shutting down all connections');
        if (this.conn_) {
            this.conn_.close();
            this.conn_ = null;
        }
        if (this.secondaryConn_) {
            this.secondaryConn_.close();
            this.secondaryConn_ = null;
        }
        if (this.healthyTimeout_) {
            clearTimeout(this.healthyTimeout_);
            this.healthyTimeout_ = null;
        }
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Interface defining the set of actions that can be performed against the Firebase server
 * (basically corresponds to our wire protocol).
 *
 * @interface
 */ class $ae31471d52481ece$var$ServerActions {
    put(pathString, data, onComplete, hash) {}
    merge(pathString, data, onComplete, hash) {}
    /**
     * Refreshes the auth token for the current connection.
     * @param token - The authentication token
     */ refreshAuthToken(token) {}
    /**
     * Refreshes the app check token for the current connection.
     * @param token The app check token
     */ refreshAppCheckToken(token) {}
    onDisconnectPut(pathString, data, onComplete) {}
    onDisconnectMerge(pathString, data, onComplete) {}
    onDisconnectCancel(pathString, onComplete) {}
    reportStats(stats) {}
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Base class to be used if you want to emit events. Call the constructor with
 * the set of allowed event names.
 */ class $ae31471d52481ece$var$EventEmitter {
    constructor(allowedEvents_){
        this.allowedEvents_ = allowedEvents_;
        this.listeners_ = {};
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');
    }
    /**
     * To be called by derived classes to trigger events.
     */ trigger(eventType, ...varArgs) {
        if (Array.isArray(this.listeners_[eventType])) {
            // Clone the list, since callbacks could add/remove listeners.
            const listeners = [
                ...this.listeners_[eventType]
            ];
            for(let i = 0; i < listeners.length; i++)listeners[i].callback.apply(listeners[i].context, varArgs);
        }
    }
    on(eventType, callback, context) {
        this.validateEventType_(eventType);
        this.listeners_[eventType] = this.listeners_[eventType] || [];
        this.listeners_[eventType].push({
            callback: callback,
            context: context
        });
        const eventData = this.getInitialEvent(eventType);
        if (eventData) callback.apply(context, eventData);
    }
    off(eventType, callback, context) {
        this.validateEventType_(eventType);
        const listeners = this.listeners_[eventType] || [];
        for(let i = 0; i < listeners.length; i++)if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {
            listeners.splice(i, 1);
            return;
        }
    }
    validateEventType_(eventType) {
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(this.allowedEvents_.find((et)=>{
            return et === eventType;
        }), 'Unknown event: ' + eventType);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Monitors online state (as reported by window.online/offline events).
 *
 * The expectation is that this could have many false positives (thinks we are online
 * when we're not), but no false negatives.  So we can safely use it to determine when
 * we definitely cannot reach the internet.
 */ class $ae31471d52481ece$var$OnlineMonitor extends $ae31471d52481ece$var$EventEmitter {
    static getInstance() {
        return new $ae31471d52481ece$var$OnlineMonitor();
    }
    constructor(){
        super([
            'online'
        ]);
        this.online_ = true;
        // We've had repeated complaints that Cordova apps can get stuck "offline", e.g.
        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810
        // It would seem that the 'online' event does not always fire consistently. So we disable it
        // for Cordova.
        if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !(0, $ee1ab2624407a779$export$872f8323f01d7ae0)()) {
            window.addEventListener('online', ()=>{
                if (!this.online_) {
                    this.online_ = true;
                    this.trigger('online', true);
                }
            }, false);
            window.addEventListener('offline', ()=>{
                if (this.online_) {
                    this.online_ = false;
                    this.trigger('online', false);
                }
            }, false);
        }
    }
    getInitialEvent(eventType) {
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(eventType === 'online', 'Unknown event type: ' + eventType);
        return [
            this.online_
        ];
    }
    currentlyOnline() {
        return this.online_;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Maximum key depth. */ const $ae31471d52481ece$var$MAX_PATH_DEPTH = 32;
/** Maximum number of (UTF8) bytes in a Firebase path. */ const $ae31471d52481ece$var$MAX_PATH_LENGTH_BYTES = 768;
/**
 * An immutable object representing a parsed path.  It's immutable so that you
 * can pass them around to other functions without worrying about them changing
 * it.
 */ class $ae31471d52481ece$var$Path {
    /**
     * @param pathOrString - Path string to parse, or another path, or the raw
     * tokens array
     */ constructor(pathOrString, pieceNum){
        if (pieceNum === void 0) {
            this.pieces_ = pathOrString.split('/');
            // Remove empty pieces.
            let copyTo = 0;
            for(let i = 0; i < this.pieces_.length; i++)if (this.pieces_[i].length > 0) {
                this.pieces_[copyTo] = this.pieces_[i];
                copyTo++;
            }
            this.pieces_.length = copyTo;
            this.pieceNum_ = 0;
        } else {
            this.pieces_ = pathOrString;
            this.pieceNum_ = pieceNum;
        }
    }
    toString() {
        let pathString = '';
        for(let i = this.pieceNum_; i < this.pieces_.length; i++)if (this.pieces_[i] !== '') pathString += '/' + this.pieces_[i];
        return pathString || '/';
    }
}
function $ae31471d52481ece$var$newEmptyPath() {
    return new $ae31471d52481ece$var$Path('');
}
function $ae31471d52481ece$var$pathGetFront(path) {
    if (path.pieceNum_ >= path.pieces_.length) return null;
    return path.pieces_[path.pieceNum_];
}
/**
 * @returns The number of segments in this path
 */ function $ae31471d52481ece$var$pathGetLength(path) {
    return path.pieces_.length - path.pieceNum_;
}
function $ae31471d52481ece$var$pathPopFront(path) {
    let pieceNum = path.pieceNum_;
    if (pieceNum < path.pieces_.length) pieceNum++;
    return new $ae31471d52481ece$var$Path(path.pieces_, pieceNum);
}
function $ae31471d52481ece$var$pathGetBack(path) {
    if (path.pieceNum_ < path.pieces_.length) return path.pieces_[path.pieces_.length - 1];
    return null;
}
function $ae31471d52481ece$var$pathToUrlEncodedString(path) {
    let pathString = '';
    for(let i = path.pieceNum_; i < path.pieces_.length; i++)if (path.pieces_[i] !== '') pathString += '/' + encodeURIComponent(String(path.pieces_[i]));
    return pathString || '/';
}
/**
 * Shallow copy of the parts of the path.
 *
 */ function $ae31471d52481ece$var$pathSlice(path, begin = 0) {
    return path.pieces_.slice(path.pieceNum_ + begin);
}
function $ae31471d52481ece$var$pathParent(path) {
    if (path.pieceNum_ >= path.pieces_.length) return null;
    const pieces = [];
    for(let i = path.pieceNum_; i < path.pieces_.length - 1; i++)pieces.push(path.pieces_[i]);
    return new $ae31471d52481ece$var$Path(pieces, 0);
}
function $ae31471d52481ece$var$pathChild(path, childPathObj) {
    const pieces = [];
    for(let i = path.pieceNum_; i < path.pieces_.length; i++)pieces.push(path.pieces_[i]);
    if (childPathObj instanceof $ae31471d52481ece$var$Path) for(let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++)pieces.push(childPathObj.pieces_[i]);
    else {
        const childPieces = childPathObj.split('/');
        for(let i = 0; i < childPieces.length; i++)if (childPieces[i].length > 0) pieces.push(childPieces[i]);
    }
    return new $ae31471d52481ece$var$Path(pieces, 0);
}
/**
 * @returns True if there are no segments in this path
 */ function $ae31471d52481ece$var$pathIsEmpty(path) {
    return path.pieceNum_ >= path.pieces_.length;
}
/**
 * @returns The path from outerPath to innerPath
 */ function $ae31471d52481ece$var$newRelativePath(outerPath, innerPath) {
    const outer = $ae31471d52481ece$var$pathGetFront(outerPath), inner = $ae31471d52481ece$var$pathGetFront(innerPath);
    if (outer === null) return innerPath;
    else if (outer === inner) return $ae31471d52481ece$var$newRelativePath($ae31471d52481ece$var$pathPopFront(outerPath), $ae31471d52481ece$var$pathPopFront(innerPath));
    else throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');
}
/**
 * @returns -1, 0, 1 if left is less, equal, or greater than the right.
 */ function $ae31471d52481ece$var$pathCompare(left, right) {
    const leftKeys = $ae31471d52481ece$var$pathSlice(left, 0);
    const rightKeys = $ae31471d52481ece$var$pathSlice(right, 0);
    for(let i = 0; i < leftKeys.length && i < rightKeys.length; i++){
        const cmp = $ae31471d52481ece$var$nameCompare(leftKeys[i], rightKeys[i]);
        if (cmp !== 0) return cmp;
    }
    if (leftKeys.length === rightKeys.length) return 0;
    return leftKeys.length < rightKeys.length ? -1 : 1;
}
/**
 * @returns true if paths are the same.
 */ function $ae31471d52481ece$var$pathEquals(path, other) {
    if ($ae31471d52481ece$var$pathGetLength(path) !== $ae31471d52481ece$var$pathGetLength(other)) return false;
    for(let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++){
        if (path.pieces_[i] !== other.pieces_[j]) return false;
    }
    return true;
}
/**
 * @returns True if this path is a parent of (or the same as) other
 */ function $ae31471d52481ece$var$pathContains(path, other) {
    let i = path.pieceNum_;
    let j = other.pieceNum_;
    if ($ae31471d52481ece$var$pathGetLength(path) > $ae31471d52481ece$var$pathGetLength(other)) return false;
    while(i < path.pieces_.length){
        if (path.pieces_[i] !== other.pieces_[j]) return false;
        ++i;
        ++j;
    }
    return true;
}
/**
 * Dynamic (mutable) path used to count path lengths.
 *
 * This class is used to efficiently check paths for valid
 * length (in UTF8 bytes) and depth (used in path validation).
 *
 * Throws Error exception if path is ever invalid.
 *
 * The definition of a path always begins with '/'.
 */ class $ae31471d52481ece$var$ValidationPath {
    /**
     * @param path - Initial Path.
     * @param errorPrefix_ - Prefix for any error messages.
     */ constructor(path, errorPrefix_){
        this.errorPrefix_ = errorPrefix_;
        this.parts_ = $ae31471d52481ece$var$pathSlice(path, 0);
        /** Initialize to number of '/' chars needed in path. */ this.byteLength_ = Math.max(1, this.parts_.length);
        for(let i = 0; i < this.parts_.length; i++)this.byteLength_ += (0, $ee1ab2624407a779$export$9536dc0a75b20bf9)(this.parts_[i]);
        $ae31471d52481ece$var$validationPathCheckValid(this);
    }
}
function $ae31471d52481ece$var$validationPathPush(validationPath, child) {
    // Count the needed '/'
    if (validationPath.parts_.length > 0) validationPath.byteLength_ += 1;
    validationPath.parts_.push(child);
    validationPath.byteLength_ += (0, $ee1ab2624407a779$export$9536dc0a75b20bf9)(child);
    $ae31471d52481ece$var$validationPathCheckValid(validationPath);
}
function $ae31471d52481ece$var$validationPathPop(validationPath) {
    const last = validationPath.parts_.pop();
    validationPath.byteLength_ -= (0, $ee1ab2624407a779$export$9536dc0a75b20bf9)(last);
    // Un-count the previous '/'
    if (validationPath.parts_.length > 0) validationPath.byteLength_ -= 1;
}
function $ae31471d52481ece$var$validationPathCheckValid(validationPath) {
    if (validationPath.byteLength_ > $ae31471d52481ece$var$MAX_PATH_LENGTH_BYTES) throw new Error(validationPath.errorPrefix_ + 'has a key path longer than ' + $ae31471d52481ece$var$MAX_PATH_LENGTH_BYTES + ' bytes (' + validationPath.byteLength_ + ').');
    if (validationPath.parts_.length > $ae31471d52481ece$var$MAX_PATH_DEPTH) throw new Error(validationPath.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + $ae31471d52481ece$var$MAX_PATH_DEPTH + ') or object contains a cycle ' + $ae31471d52481ece$var$validationPathToErrorString(validationPath));
}
/**
 * String for use in error messages - uses '.' notation for path.
 */ function $ae31471d52481ece$var$validationPathToErrorString(validationPath) {
    if (validationPath.parts_.length === 0) return '';
    return "in property '" + validationPath.parts_.join('.') + "'";
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $ae31471d52481ece$var$VisibilityMonitor extends $ae31471d52481ece$var$EventEmitter {
    static getInstance() {
        return new $ae31471d52481ece$var$VisibilityMonitor();
    }
    constructor(){
        super([
            'visible'
        ]);
        let hidden;
        let visibilityChange;
        if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {
            if (typeof document['hidden'] !== 'undefined') {
                // Opera 12.10 and Firefox 18 and later support
                visibilityChange = 'visibilitychange';
                hidden = 'hidden';
            } else if (typeof document['mozHidden'] !== 'undefined') {
                visibilityChange = 'mozvisibilitychange';
                hidden = 'mozHidden';
            } else if (typeof document['msHidden'] !== 'undefined') {
                visibilityChange = 'msvisibilitychange';
                hidden = 'msHidden';
            } else if (typeof document['webkitHidden'] !== 'undefined') {
                visibilityChange = 'webkitvisibilitychange';
                hidden = 'webkitHidden';
            }
        }
        // Initially, we always assume we are visible. This ensures that in browsers
        // without page visibility support or in cases where we are never visible
        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay
        // reconnects
        this.visible_ = true;
        if (visibilityChange) document.addEventListener(visibilityChange, ()=>{
            const visible = !document[hidden];
            if (visible !== this.visible_) {
                this.visible_ = visible;
                this.trigger('visible', visible);
            }
        }, false);
    }
    getInitialEvent(eventType) {
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(eventType === 'visible', 'Unknown event type: ' + eventType);
        return [
            this.visible_
        ];
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $ae31471d52481ece$var$RECONNECT_MIN_DELAY = 1000;
const $ae31471d52481ece$var$RECONNECT_MAX_DELAY_DEFAULT = 300000; // 5 minutes in milliseconds (Case: 1858)
const $ae31471d52481ece$var$RECONNECT_MAX_DELAY_FOR_ADMINS = 30000; // 30 seconds for admin clients (likely to be a backend server)
const $ae31471d52481ece$var$RECONNECT_DELAY_MULTIPLIER = 1.3;
const $ae31471d52481ece$var$RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.
const $ae31471d52481ece$var$SERVER_KILL_INTERRUPT_REASON = 'server_kill';
// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.
const $ae31471d52481ece$var$INVALID_TOKEN_THRESHOLD = 3;
/**
 * Firebase connection.  Abstracts wire protocol and handles reconnecting.
 *
 * NOTE: All JSON objects sent to the realtime connection must have property names enclosed
 * in quotes to make sure the closure compiler does not minify them.
 */ class $ae31471d52481ece$var$PersistentConnection extends $ae31471d52481ece$var$ServerActions {
    /**
     * @param repoInfo_ - Data about the namespace we are connecting to
     * @param applicationId_ - The Firebase App ID for this project
     * @param onDataUpdate_ - A callback for new data from the server
     */ constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_){
        super();
        this.repoInfo_ = repoInfo_;
        this.applicationId_ = applicationId_;
        this.onDataUpdate_ = onDataUpdate_;
        this.onConnectStatus_ = onConnectStatus_;
        this.onServerInfoUpdate_ = onServerInfoUpdate_;
        this.authTokenProvider_ = authTokenProvider_;
        this.appCheckTokenProvider_ = appCheckTokenProvider_;
        this.authOverride_ = authOverride_;
        // Used for diagnostic logging.
        this.id = $ae31471d52481ece$var$PersistentConnection.nextPersistentConnectionId_++;
        this.log_ = $ae31471d52481ece$var$logWrapper('p:' + this.id + ':');
        this.interruptReasons_ = {};
        this.listens = new Map();
        this.outstandingPuts_ = [];
        this.outstandingGets_ = [];
        this.outstandingPutCount_ = 0;
        this.outstandingGetCount_ = 0;
        this.onDisconnectRequestQueue_ = [];
        this.connected_ = false;
        this.reconnectDelay_ = $ae31471d52481ece$var$RECONNECT_MIN_DELAY;
        this.maxReconnectDelay_ = $ae31471d52481ece$var$RECONNECT_MAX_DELAY_DEFAULT;
        this.securityDebugCallback_ = null;
        this.lastSessionId = null;
        this.establishConnectionTimer_ = null;
        this.visible_ = false;
        // Before we get connected, we keep a queue of pending messages to send.
        this.requestCBHash_ = {};
        this.requestNumber_ = 0;
        this.realtime_ = null;
        this.authToken_ = null;
        this.appCheckToken_ = null;
        this.forceTokenRefresh_ = false;
        this.invalidAuthTokenCount_ = 0;
        this.invalidAppCheckTokenCount_ = 0;
        this.firstConnection_ = true;
        this.lastConnectionAttemptTime_ = null;
        this.lastConnectionEstablishedTime_ = null;
        if (authOverride_ && !(0, $ee1ab2624407a779$export$5d1d834fbbf8bab7)()) throw new Error('Auth override specified in options, but not supported on non Node.js platforms');
        $ae31471d52481ece$var$VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);
        if (repoInfo_.host.indexOf('fblocal') === -1) $ae31471d52481ece$var$OnlineMonitor.getInstance().on('online', this.onOnline_, this);
    }
    sendRequest(action, body, onResponse) {
        const curReqNum = ++this.requestNumber_;
        const msg = {
            r: curReqNum,
            a: action,
            b: body
        };
        this.log_((0, $ee1ab2624407a779$export$fac44ee5b035f737)(msg));
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(this.connected_, "sendRequest call when we're not connected not allowed.");
        this.realtime_.sendRequest(msg);
        if (onResponse) this.requestCBHash_[curReqNum] = onResponse;
    }
    get(query) {
        this.initConnection_();
        const deferred = new (0, $ee1ab2624407a779$export$85f6557964517f1a)();
        const request = {
            p: query._path.toString(),
            q: query._queryObject
        };
        const outstandingGet = {
            action: 'g',
            request: request,
            onComplete: (message)=>{
                const payload = message['d'];
                if (message['s'] === 'ok') deferred.resolve(payload);
                else deferred.reject(payload);
            }
        };
        this.outstandingGets_.push(outstandingGet);
        this.outstandingGetCount_++;
        const index = this.outstandingGets_.length - 1;
        if (this.connected_) this.sendGet_(index);
        return deferred.promise;
    }
    listen(query, currentHashFn, tag, onComplete) {
        this.initConnection_();
        const queryId = query._queryIdentifier;
        const pathString = query._path.toString();
        this.log_('Listen called for ' + pathString + ' ' + queryId);
        if (!this.listens.has(pathString)) this.listens.set(pathString, new Map());
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);
        const listenSpec = {
            onComplete: onComplete,
            hashFn: currentHashFn,
            query: query,
            tag: tag
        };
        this.listens.get(pathString).set(queryId, listenSpec);
        if (this.connected_) this.sendListen_(listenSpec);
    }
    sendGet_(index) {
        const get = this.outstandingGets_[index];
        this.sendRequest('g', get.request, (message)=>{
            delete this.outstandingGets_[index];
            this.outstandingGetCount_--;
            if (this.outstandingGetCount_ === 0) this.outstandingGets_ = [];
            if (get.onComplete) get.onComplete(message);
        });
    }
    sendListen_(listenSpec) {
        const query = listenSpec.query;
        const pathString = query._path.toString();
        const queryId = query._queryIdentifier;
        this.log_('Listen on ' + pathString + ' for ' + queryId);
        const req = {
            p: pathString
        };
        const action = 'q';
        // Only bother to send query if it's non-default.
        if (listenSpec.tag) {
            req['q'] = query._queryObject;
            req['t'] = listenSpec.tag;
        }
        req[/*hash*/ 'h'] = listenSpec.hashFn();
        this.sendRequest(action, req, (message)=>{
            const payload = message[/*data*/ 'd'];
            const status = message[/*status*/ 's'];
            // print warnings in any case...
            $ae31471d52481ece$var$PersistentConnection.warnOnListenWarnings_(payload, query);
            const currentListenSpec = this.listens.get(pathString) && this.listens.get(pathString).get(queryId);
            // only trigger actions if the listen hasn't been removed and readded
            if (currentListenSpec === listenSpec) {
                this.log_('listen response', message);
                if (status !== 'ok') this.removeListen_(pathString, queryId);
                if (listenSpec.onComplete) listenSpec.onComplete(status, payload);
            }
        });
    }
    static warnOnListenWarnings_(payload, query) {
        if (payload && typeof payload === 'object' && (0, $ee1ab2624407a779$export$2344b14b097df817)(payload, 'w')) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const warnings = (0, $ee1ab2624407a779$export$e51ae4db7b428f67)(payload, 'w');
            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {
                const indexSpec = '".indexOn": "' + query._queryParams.getIndex().toString() + '"';
                const indexPath = query._path.toString();
                $ae31471d52481ece$var$warn(`Using an unspecified index. Your data will be downloaded and ` + `filtered on the client. Consider adding ${indexSpec} at ` + `${indexPath} to your security rules for better performance.`);
            }
        }
    }
    refreshAuthToken(token) {
        this.authToken_ = token;
        this.log_('Auth token refreshed');
        if (this.authToken_) this.tryAuth();
        else //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete
        //the credential so we dont become authenticated next time we connect.
        if (this.connected_) this.sendRequest('unauth', {}, ()=>{});
        this.reduceReconnectDelayIfAdminCredential_(token);
    }
    reduceReconnectDelayIfAdminCredential_(credential) {
        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).
        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.
        const isFirebaseSecret = credential && credential.length === 40;
        if (isFirebaseSecret || (0, $ee1ab2624407a779$export$fc970ed23da99565)(credential)) {
            this.log_('Admin auth credential detected.  Reducing max reconnect time.');
            this.maxReconnectDelay_ = $ae31471d52481ece$var$RECONNECT_MAX_DELAY_FOR_ADMINS;
        }
    }
    refreshAppCheckToken(token) {
        this.appCheckToken_ = token;
        this.log_('App check token refreshed');
        if (this.appCheckToken_) this.tryAppCheck();
        else //If we're connected we want to let the server know to unauthenticate us.
        //If we're not connected, simply delete the credential so we dont become
        // authenticated next time we connect.
        if (this.connected_) this.sendRequest('unappeck', {}, ()=>{});
    }
    /**
     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like
     * a auth revoked (the connection is closed).
     */ tryAuth() {
        if (this.connected_ && this.authToken_) {
            const token = this.authToken_;
            const authMethod = (0, $ee1ab2624407a779$export$9565ca3d387f8aa0)(token) ? 'auth' : 'gauth';
            const requestData = {
                cred: token
            };
            if (this.authOverride_ === null) requestData['noauth'] = true;
            else if (typeof this.authOverride_ === 'object') requestData['authvar'] = this.authOverride_;
            this.sendRequest(authMethod, requestData, (res)=>{
                const status = res[/*status*/ 's'];
                const data = res[/*data*/ 'd'] || 'error';
                if (this.authToken_ === token) {
                    if (status === 'ok') this.invalidAuthTokenCount_ = 0;
                    else // Triggers reconnect and force refresh for auth token
                    this.onAuthRevoked_(status, data);
                }
            });
        }
    }
    /**
     * Attempts to authenticate with the given token. If the authentication
     * attempt fails, it's triggered like the token was revoked (the connection is
     * closed).
     */ tryAppCheck() {
        if (this.connected_ && this.appCheckToken_) this.sendRequest('appcheck', {
            'token': this.appCheckToken_
        }, (res)=>{
            const status = res[/*status*/ 's'];
            const data = res[/*data*/ 'd'] || 'error';
            if (status === 'ok') this.invalidAppCheckTokenCount_ = 0;
            else this.onAppCheckRevoked_(status, data);
        });
    }
    /**
     * @inheritDoc
     */ unlisten(query, tag) {
        const pathString = query._path.toString();
        const queryId = query._queryIdentifier;
        this.log_('Unlisten called for ' + pathString + ' ' + queryId);
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');
        const listen = this.removeListen_(pathString, queryId);
        if (listen && this.connected_) this.sendUnlisten_(pathString, queryId, query._queryObject, tag);
    }
    sendUnlisten_(pathString, queryId, queryObj, tag) {
        this.log_('Unlisten on ' + pathString + ' for ' + queryId);
        const req = {
            p: pathString
        };
        const action = 'n';
        // Only bother sending queryId if it's non-default.
        if (tag) {
            req['q'] = queryObj;
            req['t'] = tag;
        }
        this.sendRequest(action, req);
    }
    onDisconnectPut(pathString, data, onComplete) {
        this.initConnection_();
        if (this.connected_) this.sendOnDisconnect_('o', pathString, data, onComplete);
        else this.onDisconnectRequestQueue_.push({
            pathString: pathString,
            action: 'o',
            data: data,
            onComplete: onComplete
        });
    }
    onDisconnectMerge(pathString, data, onComplete) {
        this.initConnection_();
        if (this.connected_) this.sendOnDisconnect_('om', pathString, data, onComplete);
        else this.onDisconnectRequestQueue_.push({
            pathString: pathString,
            action: 'om',
            data: data,
            onComplete: onComplete
        });
    }
    onDisconnectCancel(pathString, onComplete) {
        this.initConnection_();
        if (this.connected_) this.sendOnDisconnect_('oc', pathString, null, onComplete);
        else this.onDisconnectRequestQueue_.push({
            pathString: pathString,
            action: 'oc',
            data: null,
            onComplete: onComplete
        });
    }
    sendOnDisconnect_(action, pathString, data, onComplete) {
        const request = {
            p: pathString,
            /*data*/ d: data
        };
        this.log_('onDisconnect ' + action, request);
        this.sendRequest(action, request, (response)=>{
            if (onComplete) setTimeout(()=>{
                onComplete(response[/*status*/ 's'], response[/* data */ 'd']);
            }, Math.floor(0));
        });
    }
    put(pathString, data, onComplete, hash) {
        this.putInternal('p', pathString, data, onComplete, hash);
    }
    merge(pathString, data, onComplete, hash) {
        this.putInternal('m', pathString, data, onComplete, hash);
    }
    putInternal(action, pathString, data, onComplete, hash) {
        this.initConnection_();
        const request = {
            /*path*/ p: pathString,
            /*data*/ d: data
        };
        if (hash !== undefined) request[/*hash*/ 'h'] = hash;
        // TODO: Only keep track of the most recent put for a given path?
        this.outstandingPuts_.push({
            action: action,
            request: request,
            onComplete: onComplete
        });
        this.outstandingPutCount_++;
        const index = this.outstandingPuts_.length - 1;
        if (this.connected_) this.sendPut_(index);
        else this.log_('Buffering put: ' + pathString);
    }
    sendPut_(index) {
        const action = this.outstandingPuts_[index].action;
        const request = this.outstandingPuts_[index].request;
        const onComplete = this.outstandingPuts_[index].onComplete;
        this.outstandingPuts_[index].queued = this.connected_;
        this.sendRequest(action, request, (message)=>{
            this.log_(action + ' response', message);
            delete this.outstandingPuts_[index];
            this.outstandingPutCount_--;
            // Clean up array occasionally.
            if (this.outstandingPutCount_ === 0) this.outstandingPuts_ = [];
            if (onComplete) onComplete(message[/*status*/ 's'], message[/* data */ 'd']);
        });
    }
    reportStats(stats) {
        // If we're not connected, we just drop the stats.
        if (this.connected_) {
            const request = {
                c: stats
            };
            this.log_('reportStats', request);
            this.sendRequest(/*stats*/ 's', request, (result)=>{
                const status = result[/*status*/ 's'];
                if (status !== 'ok') {
                    const errorReason = result[/* data */ 'd'];
                    this.log_('reportStats', 'Error sending stats: ' + errorReason);
                }
            });
        }
    }
    onDataMessage_(message) {
        if ('r' in message) {
            // this is a response
            this.log_('from server: ' + (0, $ee1ab2624407a779$export$fac44ee5b035f737)(message));
            const reqNum = message['r'];
            const onResponse = this.requestCBHash_[reqNum];
            if (onResponse) {
                delete this.requestCBHash_[reqNum];
                onResponse(message[/*body*/ 'b']);
            }
        } else if ('error' in message) throw 'A server-side error has occurred: ' + message['error'];
        else if ('a' in message) // a and b are action and body, respectively
        this.onDataPush_(message['a'], message['b']);
    }
    onDataPush_(action, body) {
        this.log_('handleServerMessage', action, body);
        if (action === 'd') this.onDataUpdate_(body[/*path*/ 'p'], body[/*data*/ 'd'], /*isMerge*/ false, body['t']);
        else if (action === 'm') this.onDataUpdate_(body[/*path*/ 'p'], body[/*data*/ 'd'], /*isMerge=*/ true, body['t']);
        else if (action === 'c') this.onListenRevoked_(body[/*path*/ 'p'], body[/*query*/ 'q']);
        else if (action === 'ac') this.onAuthRevoked_(body[/*status code*/ 's'], body[/* explanation */ 'd']);
        else if (action === 'apc') this.onAppCheckRevoked_(body[/*status code*/ 's'], body[/* explanation */ 'd']);
        else if (action === 'sd') this.onSecurityDebugPacket_(body);
        else $ae31471d52481ece$var$error('Unrecognized action received from server: ' + (0, $ee1ab2624407a779$export$fac44ee5b035f737)(action) + '\nAre you using the latest client?');
    }
    onReady_(timestamp, sessionId) {
        this.log_('connection ready');
        this.connected_ = true;
        this.lastConnectionEstablishedTime_ = new Date().getTime();
        this.handleTimestamp_(timestamp);
        this.lastSessionId = sessionId;
        if (this.firstConnection_) this.sendConnectStats_();
        this.restoreState_();
        this.firstConnection_ = false;
        this.onConnectStatus_(true);
    }
    scheduleConnect_(timeout) {
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(!this.realtime_, "Scheduling a connect when we're already connected/ing?");
        if (this.establishConnectionTimer_) clearTimeout(this.establishConnectionTimer_);
        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating "Security Error" in
        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).
        this.establishConnectionTimer_ = setTimeout(()=>{
            this.establishConnectionTimer_ = null;
            this.establishConnection_();
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        }, Math.floor(timeout));
    }
    initConnection_() {
        if (!this.realtime_ && this.firstConnection_) this.scheduleConnect_(0);
    }
    onVisible_(visible) {
        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.
        if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {
            this.log_('Window became visible.  Reducing delay.');
            this.reconnectDelay_ = $ae31471d52481ece$var$RECONNECT_MIN_DELAY;
            if (!this.realtime_) this.scheduleConnect_(0);
        }
        this.visible_ = visible;
    }
    onOnline_(online) {
        if (online) {
            this.log_('Browser went online.');
            this.reconnectDelay_ = $ae31471d52481ece$var$RECONNECT_MIN_DELAY;
            if (!this.realtime_) this.scheduleConnect_(0);
        } else {
            this.log_('Browser went offline.  Killing connection.');
            if (this.realtime_) this.realtime_.close();
        }
    }
    onRealtimeDisconnect_() {
        this.log_('data client disconnected');
        this.connected_ = false;
        this.realtime_ = null;
        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.
        this.cancelSentTransactions_();
        // Clear out the pending requests.
        this.requestCBHash_ = {};
        if (this.shouldReconnect_()) {
            if (!this.visible_) {
                this.log_("Window isn't visible.  Delaying reconnect.");
                this.reconnectDelay_ = this.maxReconnectDelay_;
                this.lastConnectionAttemptTime_ = new Date().getTime();
            } else if (this.lastConnectionEstablishedTime_) {
                // If we've been connected long enough, reset reconnect delay to minimum.
                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;
                if (timeSinceLastConnectSucceeded > $ae31471d52481ece$var$RECONNECT_DELAY_RESET_TIMEOUT) this.reconnectDelay_ = $ae31471d52481ece$var$RECONNECT_MIN_DELAY;
                this.lastConnectionEstablishedTime_ = null;
            }
            const timeSinceLastConnectAttempt = Math.max(0, new Date().getTime() - this.lastConnectionAttemptTime_);
            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);
            reconnectDelay = Math.random() * reconnectDelay;
            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');
            this.scheduleConnect_(reconnectDelay);
            // Adjust reconnect delay for next time.
            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * $ae31471d52481ece$var$RECONNECT_DELAY_MULTIPLIER);
        }
        this.onConnectStatus_(false);
    }
    async establishConnection_() {
        if (this.shouldReconnect_()) {
            this.log_('Making a connection attempt');
            this.lastConnectionAttemptTime_ = new Date().getTime();
            this.lastConnectionEstablishedTime_ = null;
            const onDataMessage = this.onDataMessage_.bind(this);
            const onReady = this.onReady_.bind(this);
            const onDisconnect = this.onRealtimeDisconnect_.bind(this);
            const connId = this.id + ':' + $ae31471d52481ece$var$PersistentConnection.nextConnectionId_++;
            const lastSessionId = this.lastSessionId;
            let canceled = false;
            let connection = null;
            const closeFn = function() {
                if (connection) connection.close();
                else {
                    canceled = true;
                    onDisconnect();
                }
            };
            const sendRequestFn = function(msg) {
                (0, $ee1ab2624407a779$export$a7a9523472993e97)(connection, "sendRequest call when we're not connected not allowed.");
                connection.sendRequest(msg);
            };
            this.realtime_ = {
                close: closeFn,
                sendRequest: sendRequestFn
            };
            const forceRefresh = this.forceTokenRefresh_;
            this.forceTokenRefresh_ = false;
            try {
                // First fetch auth and app check token, and establish connection after
                // fetching the token was successful
                const [authToken, appCheckToken] = await Promise.all([
                    this.authTokenProvider_.getToken(forceRefresh),
                    this.appCheckTokenProvider_.getToken(forceRefresh)
                ]);
                if (!canceled) {
                    $ae31471d52481ece$var$log('getToken() completed. Creating connection.');
                    this.authToken_ = authToken && authToken.accessToken;
                    this.appCheckToken_ = appCheckToken && appCheckToken.token;
                    connection = new $ae31471d52481ece$var$Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, /* onKill= */ (reason)=>{
                        $ae31471d52481ece$var$warn(reason + ' (' + this.repoInfo_.toString() + ')');
                        this.interrupt($ae31471d52481ece$var$SERVER_KILL_INTERRUPT_REASON);
                    }, lastSessionId);
                } else $ae31471d52481ece$var$log('getToken() completed but was canceled');
            } catch (error) {
                this.log_('Failed to get token: ' + error);
                if (!canceled) {
                    if (this.repoInfo_.nodeAdmin) // This may be a critical error for the Admin Node.js SDK, so log a warning.
                    // But getToken() may also just have temporarily failed, so we still want to
                    // continue retrying.
                    $ae31471d52481ece$var$warn(error);
                    closeFn();
                }
            }
        }
    }
    interrupt(reason) {
        $ae31471d52481ece$var$log('Interrupting connection for reason: ' + reason);
        this.interruptReasons_[reason] = true;
        if (this.realtime_) this.realtime_.close();
        else {
            if (this.establishConnectionTimer_) {
                clearTimeout(this.establishConnectionTimer_);
                this.establishConnectionTimer_ = null;
            }
            if (this.connected_) this.onRealtimeDisconnect_();
        }
    }
    resume(reason) {
        $ae31471d52481ece$var$log('Resuming connection for reason: ' + reason);
        delete this.interruptReasons_[reason];
        if ((0, $ee1ab2624407a779$export$dd1bc94b04021eeb)(this.interruptReasons_)) {
            this.reconnectDelay_ = $ae31471d52481ece$var$RECONNECT_MIN_DELAY;
            if (!this.realtime_) this.scheduleConnect_(0);
        }
    }
    handleTimestamp_(timestamp) {
        const delta = timestamp - new Date().getTime();
        this.onServerInfoUpdate_({
            serverTimeOffset: delta
        });
    }
    cancelSentTransactions_() {
        for(let i = 0; i < this.outstandingPuts_.length; i++){
            const put = this.outstandingPuts_[i];
            if (put && /*hash*/ 'h' in put.request && put.queued) {
                if (put.onComplete) put.onComplete('disconnect');
                delete this.outstandingPuts_[i];
                this.outstandingPutCount_--;
            }
        }
        // Clean up array occasionally.
        if (this.outstandingPutCount_ === 0) this.outstandingPuts_ = [];
    }
    onListenRevoked_(pathString, query) {
        // Remove the listen and manufacture a "permission_denied" error for the failed listen.
        let queryId;
        if (!query) queryId = 'default';
        else queryId = query.map((q)=>$ae31471d52481ece$var$ObjectToUniqueKey(q)).join('$');
        const listen = this.removeListen_(pathString, queryId);
        if (listen && listen.onComplete) listen.onComplete('permission_denied');
    }
    removeListen_(pathString, queryId) {
        const normalizedPathString = new $ae31471d52481ece$var$Path(pathString).toString(); // normalize path.
        let listen;
        if (this.listens.has(normalizedPathString)) {
            const map = this.listens.get(normalizedPathString);
            listen = map.get(queryId);
            map.delete(queryId);
            if (map.size === 0) this.listens.delete(normalizedPathString);
        } else // all listens for this path has already been removed
        listen = undefined;
        return listen;
    }
    onAuthRevoked_(statusCode, explanation) {
        $ae31471d52481ece$var$log('Auth token revoked: ' + statusCode + '/' + explanation);
        this.authToken_ = null;
        this.forceTokenRefresh_ = true;
        this.realtime_.close();
        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {
            // We'll wait a couple times before logging the warning / increasing the
            // retry period since oauth tokens will report as "invalid" if they're
            // just expired. Plus there may be transient issues that resolve themselves.
            this.invalidAuthTokenCount_++;
            if (this.invalidAuthTokenCount_ >= $ae31471d52481ece$var$INVALID_TOKEN_THRESHOLD) {
                // Set a long reconnect delay because recovery is unlikely
                this.reconnectDelay_ = $ae31471d52481ece$var$RECONNECT_MAX_DELAY_FOR_ADMINS;
                // Notify the auth token provider that the token is invalid, which will log
                // a warning
                this.authTokenProvider_.notifyForInvalidToken();
            }
        }
    }
    onAppCheckRevoked_(statusCode, explanation) {
        $ae31471d52481ece$var$log('App check token revoked: ' + statusCode + '/' + explanation);
        this.appCheckToken_ = null;
        this.forceTokenRefresh_ = true;
        // Note: We don't close the connection as the developer may not have
        // enforcement enabled. The backend closes connections with enforcements.
        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {
            // We'll wait a couple times before logging the warning / increasing the
            // retry period since oauth tokens will report as "invalid" if they're
            // just expired. Plus there may be transient issues that resolve themselves.
            this.invalidAppCheckTokenCount_++;
            if (this.invalidAppCheckTokenCount_ >= $ae31471d52481ece$var$INVALID_TOKEN_THRESHOLD) this.appCheckTokenProvider_.notifyForInvalidToken();
        }
    }
    onSecurityDebugPacket_(body) {
        if (this.securityDebugCallback_) this.securityDebugCallback_(body);
        else if ('msg' in body) console.log('FIREBASE: ' + body['msg'].replace('\n', '\nFIREBASE: '));
    }
    restoreState_() {
        //Re-authenticate ourselves if we have a credential stored.
        this.tryAuth();
        this.tryAppCheck();
        // Puts depend on having received the corresponding data update from the server before they complete, so we must
        // make sure to send listens before puts.
        for (const queries of this.listens.values())for (const listenSpec of queries.values())this.sendListen_(listenSpec);
        for(let i = 0; i < this.outstandingPuts_.length; i++)if (this.outstandingPuts_[i]) this.sendPut_(i);
        while(this.onDisconnectRequestQueue_.length){
            const request = this.onDisconnectRequestQueue_.shift();
            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);
        }
        for(let i = 0; i < this.outstandingGets_.length; i++)if (this.outstandingGets_[i]) this.sendGet_(i);
    }
    /**
     * Sends client stats for first connection
     */ sendConnectStats_() {
        const stats = {};
        let clientName = 'js';
        if ((0, $ee1ab2624407a779$export$5d1d834fbbf8bab7)()) {
            if (this.repoInfo_.nodeAdmin) clientName = 'admin_node';
            else clientName = 'node';
        }
        stats['sdk.' + clientName + '.' + $ae31471d52481ece$var$SDK_VERSION.replace(/\./g, '-')] = 1;
        if ((0, $ee1ab2624407a779$export$872f8323f01d7ae0)()) stats['framework.cordova'] = 1;
        else if ((0, $ee1ab2624407a779$export$f7a1e23e542d38e3)()) stats['framework.reactnative'] = 1;
        this.reportStats(stats);
    }
    shouldReconnect_() {
        const online = $ae31471d52481ece$var$OnlineMonitor.getInstance().currentlyOnline();
        return (0, $ee1ab2624407a779$export$dd1bc94b04021eeb)(this.interruptReasons_) && online;
    }
}
$ae31471d52481ece$var$PersistentConnection.nextPersistentConnectionId_ = 0;
/**
 * Counter for number of connections created. Mainly used for tagging in the logs
 */ $ae31471d52481ece$var$PersistentConnection.nextConnectionId_ = 0;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $ae31471d52481ece$var$NamedNode {
    constructor(name, node){
        this.name = name;
        this.node = node;
    }
    static Wrap(name, node) {
        return new $ae31471d52481ece$var$NamedNode(name, node);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $ae31471d52481ece$var$Index {
    /**
     * @returns A standalone comparison function for
     * this index
     */ getCompare() {
        return this.compare.bind(this);
    }
    /**
     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,
     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.
     *
     *
     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode
     */ indexedValueChanged(oldNode, newNode) {
        const oldWrapped = new $ae31471d52481ece$var$NamedNode($ae31471d52481ece$var$MIN_NAME, oldNode);
        const newWrapped = new $ae31471d52481ece$var$NamedNode($ae31471d52481ece$var$MIN_NAME, newNode);
        return this.compare(oldWrapped, newWrapped) !== 0;
    }
    /**
     * @returns a node wrapper that will sort equal to or less than
     * any other node wrapper, using this index
     */ minPost() {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return $ae31471d52481ece$var$NamedNode.MIN;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ let $ae31471d52481ece$var$__EMPTY_NODE;
class $ae31471d52481ece$var$KeyIndex extends $ae31471d52481ece$var$Index {
    static get __EMPTY_NODE() {
        return $ae31471d52481ece$var$__EMPTY_NODE;
    }
    static set __EMPTY_NODE(val) {
        $ae31471d52481ece$var$__EMPTY_NODE = val;
    }
    compare(a, b) {
        return $ae31471d52481ece$var$nameCompare(a.name, b.name);
    }
    isDefinedOn(node) {
        // We could probably return true here (since every node has a key), but it's never called
        // so just leaving unimplemented for now.
        throw (0, $ee1ab2624407a779$export$a39cad550e7ab28a)('KeyIndex.isDefinedOn not expected to be called.');
    }
    indexedValueChanged(oldNode, newNode) {
        return false; // The key for a node never changes.
    }
    minPost() {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return $ae31471d52481ece$var$NamedNode.MIN;
    }
    maxPost() {
        // TODO: This should really be created once and cached in a static property, but
        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.
        return new $ae31471d52481ece$var$NamedNode($ae31471d52481ece$var$MAX_NAME, $ae31471d52481ece$var$__EMPTY_NODE);
    }
    makePost(indexValue, name) {
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');
        // We just use empty node, but it'll never be compared, since our comparator only looks at name.
        return new $ae31471d52481ece$var$NamedNode(indexValue, $ae31471d52481ece$var$__EMPTY_NODE);
    }
    /**
     * @returns String representation for inclusion in a query spec
     */ toString() {
        return '.key';
    }
}
const $ae31471d52481ece$var$KEY_INDEX = new $ae31471d52481ece$var$KeyIndex();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An iterator over an LLRBNode.
 */ class $ae31471d52481ece$var$SortedMapIterator {
    /**
     * @param node - Node to iterate.
     * @param isReverse_ - Whether or not to iterate in reverse
     */ constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null){
        this.isReverse_ = isReverse_;
        this.resultGenerator_ = resultGenerator_;
        this.nodeStack_ = [];
        let cmp = 1;
        while(!node.isEmpty()){
            node;
            cmp = startKey ? comparator(node.key, startKey) : 1;
            // flip the comparison if we're going in reverse
            if (isReverse_) cmp *= -1;
            if (cmp < 0) {
                // This node is less than our start key. ignore it
                if (this.isReverse_) node = node.left;
                else node = node.right;
            } else if (cmp === 0) {
                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;
                this.nodeStack_.push(node);
                break;
            } else {
                // This node is greater than our start key, add it to the stack and move to the next one
                this.nodeStack_.push(node);
                if (this.isReverse_) node = node.right;
                else node = node.left;
            }
        }
    }
    getNext() {
        if (this.nodeStack_.length === 0) return null;
        let node = this.nodeStack_.pop();
        let result;
        if (this.resultGenerator_) result = this.resultGenerator_(node.key, node.value);
        else result = {
            key: node.key,
            value: node.value
        };
        if (this.isReverse_) {
            node = node.left;
            while(!node.isEmpty()){
                this.nodeStack_.push(node);
                node = node.right;
            }
        } else {
            node = node.right;
            while(!node.isEmpty()){
                this.nodeStack_.push(node);
                node = node.left;
            }
        }
        return result;
    }
    hasNext() {
        return this.nodeStack_.length > 0;
    }
    peek() {
        if (this.nodeStack_.length === 0) return null;
        const node = this.nodeStack_[this.nodeStack_.length - 1];
        if (this.resultGenerator_) return this.resultGenerator_(node.key, node.value);
        else return {
            key: node.key,
            value: node.value
        };
    }
}
/**
 * Represents a node in a Left-leaning Red-Black tree.
 */ class $ae31471d52481ece$var$LLRBNode {
    /**
     * @param key - Key associated with this node.
     * @param value - Value associated with this node.
     * @param color - Whether this node is red.
     * @param left - Left child.
     * @param right - Right child.
     */ constructor(key, value, color, left, right){
        this.key = key;
        this.value = value;
        this.color = color != null ? color : $ae31471d52481ece$var$LLRBNode.RED;
        this.left = left != null ? left : $ae31471d52481ece$var$SortedMap.EMPTY_NODE;
        this.right = right != null ? right : $ae31471d52481ece$var$SortedMap.EMPTY_NODE;
    }
    /**
     * Returns a copy of the current node, optionally replacing pieces of it.
     *
     * @param key - New key for the node, or null.
     * @param value - New value for the node, or null.
     * @param color - New color for the node, or null.
     * @param left - New left child for the node, or null.
     * @param right - New right child for the node, or null.
     * @returns The node copy.
     */ copy(key, value, color, left, right) {
        return new $ae31471d52481ece$var$LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
    }
    /**
     * @returns The total number of nodes in the tree.
     */ count() {
        return this.left.count() + 1 + this.right.count();
    }
    /**
     * @returns True if the tree is empty.
     */ isEmpty() {
        return false;
    }
    /**
     * Traverses the tree in key order and calls the specified action function
     * for each node.
     *
     * @param action - Callback function to be called for each
     *   node.  If it returns true, traversal is aborted.
     * @returns The first truthy value returned by action, or the last falsey
     *   value returned by action
     */ inorderTraversal(action) {
        return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);
    }
    /**
     * Traverses the tree in reverse key order and calls the specified action function
     * for each node.
     *
     * @param action - Callback function to be called for each
     * node.  If it returns true, traversal is aborted.
     * @returns True if traversal was aborted.
     */ reverseTraversal(action) {
        return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);
    }
    /**
     * @returns The minimum node in the tree.
     */ min_() {
        if (this.left.isEmpty()) return this;
        else return this.left.min_();
    }
    /**
     * @returns The maximum key in the tree.
     */ minKey() {
        return this.min_().key;
    }
    /**
     * @returns The maximum key in the tree.
     */ maxKey() {
        if (this.right.isEmpty()) return this.key;
        else return this.right.maxKey();
    }
    /**
     * @param key - Key to insert.
     * @param value - Value to insert.
     * @param comparator - Comparator.
     * @returns New tree, with the key/value added.
     */ insert(key, value, comparator) {
        let n = this;
        const cmp = comparator(key, n.key);
        if (cmp < 0) n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
        else if (cmp === 0) n = n.copy(null, value, null, null, null);
        else n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
        return n.fixUp_();
    }
    /**
     * @returns New tree, with the minimum key removed.
     */ removeMin_() {
        if (this.left.isEmpty()) return $ae31471d52481ece$var$SortedMap.EMPTY_NODE;
        let n = this;
        if (!n.left.isRed_() && !n.left.left.isRed_()) n = n.moveRedLeft_();
        n = n.copy(null, null, null, n.left.removeMin_(), null);
        return n.fixUp_();
    }
    /**
     * @param key - The key of the item to remove.
     * @param comparator - Comparator.
     * @returns New tree, with the specified item removed.
     */ remove(key, comparator) {
        let n, smallest;
        n = this;
        if (comparator(key, n.key) < 0) {
            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) n = n.moveRedLeft_();
            n = n.copy(null, null, null, n.left.remove(key, comparator), null);
        } else {
            if (n.left.isRed_()) n = n.rotateRight_();
            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) n = n.moveRedRight_();
            if (comparator(key, n.key) === 0) {
                if (n.right.isEmpty()) return $ae31471d52481ece$var$SortedMap.EMPTY_NODE;
                else {
                    smallest = n.right.min_();
                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());
                }
            }
            n = n.copy(null, null, null, null, n.right.remove(key, comparator));
        }
        return n.fixUp_();
    }
    /**
     * @returns Whether this is a RED node.
     */ isRed_() {
        return this.color;
    }
    /**
     * @returns New tree after performing any needed rotations.
     */ fixUp_() {
        let n = this;
        if (n.right.isRed_() && !n.left.isRed_()) n = n.rotateLeft_();
        if (n.left.isRed_() && n.left.left.isRed_()) n = n.rotateRight_();
        if (n.left.isRed_() && n.right.isRed_()) n = n.colorFlip_();
        return n;
    }
    /**
     * @returns New tree, after moveRedLeft.
     */ moveRedLeft_() {
        let n = this.colorFlip_();
        if (n.right.left.isRed_()) {
            n = n.copy(null, null, null, null, n.right.rotateRight_());
            n = n.rotateLeft_();
            n = n.colorFlip_();
        }
        return n;
    }
    /**
     * @returns New tree, after moveRedRight.
     */ moveRedRight_() {
        let n = this.colorFlip_();
        if (n.left.left.isRed_()) {
            n = n.rotateRight_();
            n = n.colorFlip_();
        }
        return n;
    }
    /**
     * @returns New tree, after rotateLeft.
     */ rotateLeft_() {
        const nl = this.copy(null, null, $ae31471d52481ece$var$LLRBNode.RED, null, this.right.left);
        return this.right.copy(null, null, this.color, nl, null);
    }
    /**
     * @returns New tree, after rotateRight.
     */ rotateRight_() {
        const nr = this.copy(null, null, $ae31471d52481ece$var$LLRBNode.RED, this.left.right, null);
        return this.left.copy(null, null, this.color, null, nr);
    }
    /**
     * @returns Newt ree, after colorFlip.
     */ colorFlip_() {
        const left = this.left.copy(null, null, !this.left.color, null, null);
        const right = this.right.copy(null, null, !this.right.color, null, null);
        return this.copy(null, null, !this.color, left, right);
    }
    /**
     * For testing.
     *
     * @returns True if all is well.
     */ checkMaxDepth_() {
        const blackDepth = this.check_();
        return Math.pow(2.0, blackDepth) <= this.count() + 1;
    }
    check_() {
        if (this.isRed_() && this.left.isRed_()) throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');
        if (this.right.isRed_()) throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');
        const blackDepth = this.left.check_();
        if (blackDepth !== this.right.check_()) throw new Error('Black depths differ');
        else return blackDepth + (this.isRed_() ? 0 : 1);
    }
}
$ae31471d52481ece$var$LLRBNode.RED = true;
$ae31471d52481ece$var$LLRBNode.BLACK = false;
/**
 * Represents an empty node (a leaf node in the Red-Black Tree).
 */ class $ae31471d52481ece$var$LLRBEmptyNode {
    /**
     * Returns a copy of the current node.
     *
     * @returns The node copy.
     */ copy(key, value, color, left, right) {
        return this;
    }
    /**
     * Returns a copy of the tree, with the specified key/value added.
     *
     * @param key - Key to be added.
     * @param value - Value to be added.
     * @param comparator - Comparator.
     * @returns New tree, with item added.
     */ insert(key, value, comparator) {
        return new $ae31471d52481ece$var$LLRBNode(key, value, null);
    }
    /**
     * Returns a copy of the tree, with the specified key removed.
     *
     * @param key - The key to remove.
     * @param comparator - Comparator.
     * @returns New tree, with item removed.
     */ remove(key, comparator) {
        return this;
    }
    /**
     * @returns The total number of nodes in the tree.
     */ count() {
        return 0;
    }
    /**
     * @returns True if the tree is empty.
     */ isEmpty() {
        return true;
    }
    /**
     * Traverses the tree in key order and calls the specified action function
     * for each node.
     *
     * @param action - Callback function to be called for each
     * node.  If it returns true, traversal is aborted.
     * @returns True if traversal was aborted.
     */ inorderTraversal(action) {
        return false;
    }
    /**
     * Traverses the tree in reverse key order and calls the specified action function
     * for each node.
     *
     * @param action - Callback function to be called for each
     * node.  If it returns true, traversal is aborted.
     * @returns True if traversal was aborted.
     */ reverseTraversal(action) {
        return false;
    }
    minKey() {
        return null;
    }
    maxKey() {
        return null;
    }
    check_() {
        return 0;
    }
    /**
     * @returns Whether this node is red.
     */ isRed_() {
        return false;
    }
}
/**
 * An immutable sorted map implementation, based on a Left-leaning Red-Black
 * tree.
 */ class $ae31471d52481ece$var$SortedMap {
    /**
     * @param comparator_ - Key comparator.
     * @param root_ - Optional root node for the map.
     */ constructor(comparator_, root_ = $ae31471d52481ece$var$SortedMap.EMPTY_NODE){
        this.comparator_ = comparator_;
        this.root_ = root_;
    }
    /**
     * Returns a copy of the map, with the specified key/value added or replaced.
     * (TODO: We should perhaps rename this method to 'put')
     *
     * @param key - Key to be added.
     * @param value - Value to be added.
     * @returns New map, with item added.
     */ insert(key, value) {
        return new $ae31471d52481ece$var$SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, $ae31471d52481ece$var$LLRBNode.BLACK, null, null));
    }
    /**
     * Returns a copy of the map, with the specified key removed.
     *
     * @param key - The key to remove.
     * @returns New map, with item removed.
     */ remove(key) {
        return new $ae31471d52481ece$var$SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, $ae31471d52481ece$var$LLRBNode.BLACK, null, null));
    }
    /**
     * Returns the value of the node with the given key, or null.
     *
     * @param key - The key to look up.
     * @returns The value of the node with the given key, or null if the
     * key doesn't exist.
     */ get(key) {
        let cmp;
        let node = this.root_;
        while(!node.isEmpty()){
            cmp = this.comparator_(key, node.key);
            if (cmp === 0) return node.value;
            else if (cmp < 0) node = node.left;
            else if (cmp > 0) node = node.right;
        }
        return null;
    }
    /**
     * Returns the key of the item *before* the specified key, or null if key is the first item.
     * @param key - The key to find the predecessor of
     * @returns The predecessor key.
     */ getPredecessorKey(key) {
        let cmp, node = this.root_, rightParent = null;
        while(!node.isEmpty()){
            cmp = this.comparator_(key, node.key);
            if (cmp === 0) {
                if (!node.left.isEmpty()) {
                    node = node.left;
                    while(!node.right.isEmpty())node = node.right;
                    return node.key;
                } else if (rightParent) return rightParent.key;
                else return null; // first item.
            } else if (cmp < 0) node = node.left;
            else if (cmp > 0) {
                rightParent = node;
                node = node.right;
            }
        }
        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');
    }
    /**
     * @returns True if the map is empty.
     */ isEmpty() {
        return this.root_.isEmpty();
    }
    /**
     * @returns The total number of nodes in the map.
     */ count() {
        return this.root_.count();
    }
    /**
     * @returns The minimum key in the map.
     */ minKey() {
        return this.root_.minKey();
    }
    /**
     * @returns The maximum key in the map.
     */ maxKey() {
        return this.root_.maxKey();
    }
    /**
     * Traverses the map in key order and calls the specified action function
     * for each key/value pair.
     *
     * @param action - Callback function to be called
     * for each key/value pair.  If action returns true, traversal is aborted.
     * @returns The first truthy value returned by action, or the last falsey
     *   value returned by action
     */ inorderTraversal(action) {
        return this.root_.inorderTraversal(action);
    }
    /**
     * Traverses the map in reverse key order and calls the specified action function
     * for each key/value pair.
     *
     * @param action - Callback function to be called
     * for each key/value pair.  If action returns true, traversal is aborted.
     * @returns True if the traversal was aborted.
     */ reverseTraversal(action) {
        return this.root_.reverseTraversal(action);
    }
    /**
     * Returns an iterator over the SortedMap.
     * @returns The iterator.
     */ getIterator(resultGenerator) {
        return new $ae31471d52481ece$var$SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);
    }
    getIteratorFrom(key, resultGenerator) {
        return new $ae31471d52481ece$var$SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);
    }
    getReverseIteratorFrom(key, resultGenerator) {
        return new $ae31471d52481ece$var$SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);
    }
    getReverseIterator(resultGenerator) {
        return new $ae31471d52481ece$var$SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);
    }
}
/**
 * Always use the same empty node, to reduce memory.
 */ $ae31471d52481ece$var$SortedMap.EMPTY_NODE = new $ae31471d52481ece$var$LLRBEmptyNode();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $ae31471d52481ece$var$NAME_ONLY_COMPARATOR(left, right) {
    return $ae31471d52481ece$var$nameCompare(left.name, right.name);
}
function $ae31471d52481ece$var$NAME_COMPARATOR(left, right) {
    return $ae31471d52481ece$var$nameCompare(left, right);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ let $ae31471d52481ece$var$MAX_NODE$2;
function $ae31471d52481ece$var$setMaxNode$1(val) {
    $ae31471d52481ece$var$MAX_NODE$2 = val;
}
const $ae31471d52481ece$var$priorityHashText = function(priority) {
    if (typeof priority === 'number') return 'number:' + $ae31471d52481ece$var$doubleToIEEE754String(priority);
    else return 'string:' + priority;
};
/**
 * Validates that a priority snapshot Node is valid.
 */ const $ae31471d52481ece$var$validatePriorityNode = function(priorityNode) {
    if (priorityNode.isLeafNode()) {
        const val = priorityNode.val();
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && (0, $ee1ab2624407a779$export$2344b14b097df817)(val, '.sv'), 'Priority must be a string or number.');
    } else (0, $ee1ab2624407a779$export$a7a9523472993e97)(priorityNode === $ae31471d52481ece$var$MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');
    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.
    (0, $ee1ab2624407a779$export$a7a9523472993e97)(priorityNode === $ae31471d52481ece$var$MAX_NODE$2 || priorityNode.getPriority().isEmpty(), "Priority nodes can't have a priority of their own.");
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ let $ae31471d52481ece$var$__childrenNodeConstructor;
/**
 * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It
 * implements Node and stores the value of the node (a string,
 * number, or boolean) accessible via getValue().
 */ class $ae31471d52481ece$var$LeafNode {
    static set __childrenNodeConstructor(val) {
        $ae31471d52481ece$var$__childrenNodeConstructor = val;
    }
    static get __childrenNodeConstructor() {
        return $ae31471d52481ece$var$__childrenNodeConstructor;
    }
    /**
     * @param value_ - The value to store in this leaf node. The object type is
     * possible in the event of a deferred value
     * @param priorityNode_ - The priority of this node.
     */ constructor(value_, priorityNode_ = $ae31471d52481ece$var$LeafNode.__childrenNodeConstructor.EMPTY_NODE){
        this.value_ = value_;
        this.priorityNode_ = priorityNode_;
        this.lazyHash_ = null;
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(this.value_ !== undefined && this.value_ !== null, "LeafNode shouldn't be created with null/undefined value.");
        $ae31471d52481ece$var$validatePriorityNode(this.priorityNode_);
    }
    /** @inheritDoc */ isLeafNode() {
        return true;
    }
    /** @inheritDoc */ getPriority() {
        return this.priorityNode_;
    }
    /** @inheritDoc */ updatePriority(newPriorityNode) {
        return new $ae31471d52481ece$var$LeafNode(this.value_, newPriorityNode);
    }
    /** @inheritDoc */ getImmediateChild(childName) {
        // Hack to treat priority as a regular child
        if (childName === '.priority') return this.priorityNode_;
        else return $ae31471d52481ece$var$LeafNode.__childrenNodeConstructor.EMPTY_NODE;
    }
    /** @inheritDoc */ getChild(path) {
        if ($ae31471d52481ece$var$pathIsEmpty(path)) return this;
        else if ($ae31471d52481ece$var$pathGetFront(path) === '.priority') return this.priorityNode_;
        else return $ae31471d52481ece$var$LeafNode.__childrenNodeConstructor.EMPTY_NODE;
    }
    hasChild() {
        return false;
    }
    /** @inheritDoc */ getPredecessorChildName(childName, childNode) {
        return null;
    }
    /** @inheritDoc */ updateImmediateChild(childName, newChildNode) {
        if (childName === '.priority') return this.updatePriority(newChildNode);
        else if (newChildNode.isEmpty() && childName !== '.priority') return this;
        else return $ae31471d52481ece$var$LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);
    }
    /** @inheritDoc */ updateChild(path, newChildNode) {
        const front = $ae31471d52481ece$var$pathGetFront(path);
        if (front === null) return newChildNode;
        else if (newChildNode.isEmpty() && front !== '.priority') return this;
        else {
            (0, $ee1ab2624407a779$export$a7a9523472993e97)(front !== '.priority' || $ae31471d52481ece$var$pathGetLength(path) === 1, '.priority must be the last token in a path');
            return this.updateImmediateChild(front, $ae31471d52481ece$var$LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild($ae31471d52481ece$var$pathPopFront(path), newChildNode));
        }
    }
    /** @inheritDoc */ isEmpty() {
        return false;
    }
    /** @inheritDoc */ numChildren() {
        return 0;
    }
    /** @inheritDoc */ forEachChild(index, action) {
        return false;
    }
    val(exportFormat) {
        if (exportFormat && !this.getPriority().isEmpty()) return {
            '.value': this.getValue(),
            '.priority': this.getPriority().val()
        };
        else return this.getValue();
    }
    /** @inheritDoc */ hash() {
        if (this.lazyHash_ === null) {
            let toHash = '';
            if (!this.priorityNode_.isEmpty()) toHash += 'priority:' + $ae31471d52481ece$var$priorityHashText(this.priorityNode_.val()) + ':';
            const type = typeof this.value_;
            toHash += type + ':';
            if (type === 'number') toHash += $ae31471d52481ece$var$doubleToIEEE754String(this.value_);
            else toHash += this.value_;
            this.lazyHash_ = $ae31471d52481ece$var$sha1(toHash);
        }
        return this.lazyHash_;
    }
    /**
     * Returns the value of the leaf node.
     * @returns The value of the node.
     */ getValue() {
        return this.value_;
    }
    compareTo(other) {
        if (other === $ae31471d52481ece$var$LeafNode.__childrenNodeConstructor.EMPTY_NODE) return 1;
        else if (other instanceof $ae31471d52481ece$var$LeafNode.__childrenNodeConstructor) return -1;
        else {
            (0, $ee1ab2624407a779$export$a7a9523472993e97)(other.isLeafNode(), 'Unknown node type');
            return this.compareToLeafNode_(other);
        }
    }
    /**
     * Comparison specifically for two leaf nodes
     */ compareToLeafNode_(otherLeaf) {
        const otherLeafType = typeof otherLeaf.value_;
        const thisLeafType = typeof this.value_;
        const otherIndex = $ae31471d52481ece$var$LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);
        const thisIndex = $ae31471d52481ece$var$LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);
        if (otherIndex === thisIndex) {
            // Same type, compare values
            if (thisLeafType === 'object') // Deferred value nodes are all equal, but we should also never get to this point...
            return 0;
            else {
                // Note that this works because true > false, all others are number or string comparisons
                if (this.value_ < otherLeaf.value_) return -1;
                else if (this.value_ === otherLeaf.value_) return 0;
                else return 1;
            }
        } else return thisIndex - otherIndex;
    }
    withIndex() {
        return this;
    }
    isIndexed() {
        return true;
    }
    equals(other) {
        if (other === this) return true;
        else if (other.isLeafNode()) {
            const otherLeaf = other;
            return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);
        } else return false;
    }
}
/**
 * The sort order for comparing leaf nodes of different types. If two leaf nodes have
 * the same type, the comparison falls back to their value
 */ $ae31471d52481ece$var$LeafNode.VALUE_TYPE_ORDER = [
    'object',
    'boolean',
    'number',
    'string'
];
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ let $ae31471d52481ece$var$nodeFromJSON$1;
let $ae31471d52481ece$var$MAX_NODE$1;
function $ae31471d52481ece$var$setNodeFromJSON(val) {
    $ae31471d52481ece$var$nodeFromJSON$1 = val;
}
function $ae31471d52481ece$var$setMaxNode(val) {
    $ae31471d52481ece$var$MAX_NODE$1 = val;
}
class $ae31471d52481ece$var$PriorityIndex extends $ae31471d52481ece$var$Index {
    compare(a, b) {
        const aPriority = a.node.getPriority();
        const bPriority = b.node.getPriority();
        const indexCmp = aPriority.compareTo(bPriority);
        if (indexCmp === 0) return $ae31471d52481ece$var$nameCompare(a.name, b.name);
        else return indexCmp;
    }
    isDefinedOn(node) {
        return !node.getPriority().isEmpty();
    }
    indexedValueChanged(oldNode, newNode) {
        return !oldNode.getPriority().equals(newNode.getPriority());
    }
    minPost() {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return $ae31471d52481ece$var$NamedNode.MIN;
    }
    maxPost() {
        return new $ae31471d52481ece$var$NamedNode($ae31471d52481ece$var$MAX_NAME, new $ae31471d52481ece$var$LeafNode('[PRIORITY-POST]', $ae31471d52481ece$var$MAX_NODE$1));
    }
    makePost(indexValue, name) {
        const priorityNode = $ae31471d52481ece$var$nodeFromJSON$1(indexValue);
        return new $ae31471d52481ece$var$NamedNode(name, new $ae31471d52481ece$var$LeafNode('[PRIORITY-POST]', priorityNode));
    }
    /**
     * @returns String representation for inclusion in a query spec
     */ toString() {
        return '.priority';
    }
}
const $ae31471d52481ece$var$PRIORITY_INDEX = new $ae31471d52481ece$var$PriorityIndex();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $ae31471d52481ece$var$LOG_2 = Math.log(2);
class $ae31471d52481ece$var$Base12Num {
    constructor(length){
        const logBase2 = (num)=>// eslint-disable-next-line @typescript-eslint/no-explicit-any
            parseInt(Math.log(num) / $ae31471d52481ece$var$LOG_2, 10);
        const bitMask = (bits)=>parseInt(Array(bits + 1).join('1'), 2);
        this.count = logBase2(length + 1);
        this.current_ = this.count - 1;
        const mask = bitMask(this.count);
        this.bits_ = length + 1 & mask;
    }
    nextBitIsOne() {
        //noinspection JSBitwiseOperatorUsage
        const result = !(this.bits_ & 0x1 << this.current_);
        this.current_--;
        return result;
    }
}
/**
 * Takes a list of child nodes and constructs a SortedSet using the given comparison
 * function
 *
 * Uses the algorithm described in the paper linked here:
 * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458
 *
 * @param childList - Unsorted list of children
 * @param cmp - The comparison method to be used
 * @param keyFn - An optional function to extract K from a node wrapper, if K's
 * type is not NamedNode
 * @param mapSortFn - An optional override for comparator used by the generated sorted map
 */ const $ae31471d52481ece$var$buildChildSet = function(childList, cmp, keyFn, mapSortFn) {
    childList.sort(cmp);
    const buildBalancedTree = function(low, high) {
        const length = high - low;
        let namedNode;
        let key;
        if (length === 0) return null;
        else if (length === 1) {
            namedNode = childList[low];
            key = keyFn ? keyFn(namedNode) : namedNode;
            return new $ae31471d52481ece$var$LLRBNode(key, namedNode.node, $ae31471d52481ece$var$LLRBNode.BLACK, null, null);
        } else {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const middle = parseInt(length / 2, 10) + low;
            const left = buildBalancedTree(low, middle);
            const right = buildBalancedTree(middle + 1, high);
            namedNode = childList[middle];
            key = keyFn ? keyFn(namedNode) : namedNode;
            return new $ae31471d52481ece$var$LLRBNode(key, namedNode.node, $ae31471d52481ece$var$LLRBNode.BLACK, left, right);
        }
    };
    const buildFrom12Array = function(base12) {
        let node = null;
        let root = null;
        let index = childList.length;
        const buildPennant = function(chunkSize, color) {
            const low = index - chunkSize;
            const high = index;
            index -= chunkSize;
            const childTree = buildBalancedTree(low + 1, high);
            const namedNode = childList[low];
            const key = keyFn ? keyFn(namedNode) : namedNode;
            attachPennant(new $ae31471d52481ece$var$LLRBNode(key, namedNode.node, color, null, childTree));
        };
        const attachPennant = function(pennant) {
            if (node) {
                node.left = pennant;
                node = pennant;
            } else {
                root = pennant;
                node = pennant;
            }
        };
        for(let i = 0; i < base12.count; ++i){
            const isOne = base12.nextBitIsOne();
            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))
            const chunkSize = Math.pow(2, base12.count - (i + 1));
            if (isOne) buildPennant(chunkSize, $ae31471d52481ece$var$LLRBNode.BLACK);
            else {
                // current == 2
                buildPennant(chunkSize, $ae31471d52481ece$var$LLRBNode.BLACK);
                buildPennant(chunkSize, $ae31471d52481ece$var$LLRBNode.RED);
            }
        }
        return root;
    };
    const base12 = new $ae31471d52481ece$var$Base12Num(childList.length);
    const root = buildFrom12Array(base12);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return new $ae31471d52481ece$var$SortedMap(mapSortFn || cmp, root);
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ let $ae31471d52481ece$var$_defaultIndexMap;
const $ae31471d52481ece$var$fallbackObject = {};
class $ae31471d52481ece$var$IndexMap {
    /**
     * The default IndexMap for nodes without a priority
     */ static get Default() {
        (0, $ee1ab2624407a779$export$a7a9523472993e97)($ae31471d52481ece$var$fallbackObject && $ae31471d52481ece$var$PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');
        $ae31471d52481ece$var$_defaultIndexMap = $ae31471d52481ece$var$_defaultIndexMap || new $ae31471d52481ece$var$IndexMap({
            '.priority': $ae31471d52481ece$var$fallbackObject
        }, {
            '.priority': $ae31471d52481ece$var$PRIORITY_INDEX
        });
        return $ae31471d52481ece$var$_defaultIndexMap;
    }
    constructor(indexes_, indexSet_){
        this.indexes_ = indexes_;
        this.indexSet_ = indexSet_;
    }
    get(indexKey) {
        const sortedMap = (0, $ee1ab2624407a779$export$e51ae4db7b428f67)(this.indexes_, indexKey);
        if (!sortedMap) throw new Error('No index defined for ' + indexKey);
        if (sortedMap instanceof $ae31471d52481ece$var$SortedMap) return sortedMap;
        else // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the
        // regular child map
        return null;
    }
    hasIndex(indexDefinition) {
        return (0, $ee1ab2624407a779$export$2344b14b097df817)(this.indexSet_, indexDefinition.toString());
    }
    addIndex(indexDefinition, existingChildren) {
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(indexDefinition !== $ae31471d52481ece$var$KEY_INDEX, "KeyIndex always exists and isn't meant to be added to the IndexMap.");
        const childList = [];
        let sawIndexedValue = false;
        const iter = existingChildren.getIterator($ae31471d52481ece$var$NamedNode.Wrap);
        let next = iter.getNext();
        while(next){
            sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);
            childList.push(next);
            next = iter.getNext();
        }
        let newIndex;
        if (sawIndexedValue) newIndex = $ae31471d52481ece$var$buildChildSet(childList, indexDefinition.getCompare());
        else newIndex = $ae31471d52481ece$var$fallbackObject;
        const indexName = indexDefinition.toString();
        const newIndexSet = Object.assign({}, this.indexSet_);
        newIndexSet[indexName] = indexDefinition;
        const newIndexes = Object.assign({}, this.indexes_);
        newIndexes[indexName] = newIndex;
        return new $ae31471d52481ece$var$IndexMap(newIndexes, newIndexSet);
    }
    /**
     * Ensure that this node is properly tracked in any indexes that we're maintaining
     */ addToIndexes(namedNode, existingChildren) {
        const newIndexes = (0, $ee1ab2624407a779$export$871de8747c9eaa88)(this.indexes_, (indexedChildren, indexName)=>{
            const index = (0, $ee1ab2624407a779$export$e51ae4db7b428f67)(this.indexSet_, indexName);
            (0, $ee1ab2624407a779$export$a7a9523472993e97)(index, 'Missing index implementation for ' + indexName);
            if (indexedChildren === $ae31471d52481ece$var$fallbackObject) {
                // Check to see if we need to index everything
                if (index.isDefinedOn(namedNode.node)) {
                    // We need to build this index
                    const childList = [];
                    const iter = existingChildren.getIterator($ae31471d52481ece$var$NamedNode.Wrap);
                    let next = iter.getNext();
                    while(next){
                        if (next.name !== namedNode.name) childList.push(next);
                        next = iter.getNext();
                    }
                    childList.push(namedNode);
                    return $ae31471d52481ece$var$buildChildSet(childList, index.getCompare());
                } else // No change, this remains a fallback
                return $ae31471d52481ece$var$fallbackObject;
            } else {
                const existingSnap = existingChildren.get(namedNode.name);
                let newChildren = indexedChildren;
                if (existingSnap) newChildren = newChildren.remove(new $ae31471d52481ece$var$NamedNode(namedNode.name, existingSnap));
                return newChildren.insert(namedNode, namedNode.node);
            }
        });
        return new $ae31471d52481ece$var$IndexMap(newIndexes, this.indexSet_);
    }
    /**
     * Create a new IndexMap instance with the given value removed
     */ removeFromIndexes(namedNode, existingChildren) {
        const newIndexes = (0, $ee1ab2624407a779$export$871de8747c9eaa88)(this.indexes_, (indexedChildren)=>{
            if (indexedChildren === $ae31471d52481ece$var$fallbackObject) // This is the fallback. Just return it, nothing to do in this case
            return indexedChildren;
            else {
                const existingSnap = existingChildren.get(namedNode.name);
                if (existingSnap) return indexedChildren.remove(new $ae31471d52481ece$var$NamedNode(namedNode.name, existingSnap));
                else // No record of this child
                return indexedChildren;
            }
        });
        return new $ae31471d52481ece$var$IndexMap(newIndexes, this.indexSet_);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // TODO: For memory savings, don't store priorityNode_ if it's empty.
let $ae31471d52481ece$var$EMPTY_NODE;
/**
 * ChildrenNode is a class for storing internal nodes in a DataSnapshot
 * (i.e. nodes with children).  It implements Node and stores the
 * list of children in the children property, sorted by child name.
 */ class $ae31471d52481ece$var$ChildrenNode {
    static get EMPTY_NODE() {
        return $ae31471d52481ece$var$EMPTY_NODE || ($ae31471d52481ece$var$EMPTY_NODE = new $ae31471d52481ece$var$ChildrenNode(new $ae31471d52481ece$var$SortedMap($ae31471d52481ece$var$NAME_COMPARATOR), null, $ae31471d52481ece$var$IndexMap.Default));
    }
    /**
     * @param children_ - List of children of this node..
     * @param priorityNode_ - The priority of this node (as a snapshot node).
     */ constructor(children_, priorityNode_, indexMap_){
        this.children_ = children_;
        this.priorityNode_ = priorityNode_;
        this.indexMap_ = indexMap_;
        this.lazyHash_ = null;
        /**
         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use
         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own
         * class instead of an empty ChildrenNode.
         */ if (this.priorityNode_) $ae31471d52481ece$var$validatePriorityNode(this.priorityNode_);
        if (this.children_.isEmpty()) (0, $ee1ab2624407a779$export$a7a9523472993e97)(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');
    }
    /** @inheritDoc */ isLeafNode() {
        return false;
    }
    /** @inheritDoc */ getPriority() {
        return this.priorityNode_ || $ae31471d52481ece$var$EMPTY_NODE;
    }
    /** @inheritDoc */ updatePriority(newPriorityNode) {
        if (this.children_.isEmpty()) // Don't allow priorities on empty nodes
        return this;
        else return new $ae31471d52481ece$var$ChildrenNode(this.children_, newPriorityNode, this.indexMap_);
    }
    /** @inheritDoc */ getImmediateChild(childName) {
        // Hack to treat priority as a regular child
        if (childName === '.priority') return this.getPriority();
        else {
            const child = this.children_.get(childName);
            return child === null ? $ae31471d52481ece$var$EMPTY_NODE : child;
        }
    }
    /** @inheritDoc */ getChild(path) {
        const front = $ae31471d52481ece$var$pathGetFront(path);
        if (front === null) return this;
        return this.getImmediateChild(front).getChild($ae31471d52481ece$var$pathPopFront(path));
    }
    /** @inheritDoc */ hasChild(childName) {
        return this.children_.get(childName) !== null;
    }
    /** @inheritDoc */ updateImmediateChild(childName, newChildNode) {
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(newChildNode, 'We should always be passing snapshot nodes');
        if (childName === '.priority') return this.updatePriority(newChildNode);
        else {
            const namedNode = new $ae31471d52481ece$var$NamedNode(childName, newChildNode);
            let newChildren, newIndexMap;
            if (newChildNode.isEmpty()) {
                newChildren = this.children_.remove(childName);
                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);
            } else {
                newChildren = this.children_.insert(childName, newChildNode);
                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);
            }
            const newPriority = newChildren.isEmpty() ? $ae31471d52481ece$var$EMPTY_NODE : this.priorityNode_;
            return new $ae31471d52481ece$var$ChildrenNode(newChildren, newPriority, newIndexMap);
        }
    }
    /** @inheritDoc */ updateChild(path, newChildNode) {
        const front = $ae31471d52481ece$var$pathGetFront(path);
        if (front === null) return newChildNode;
        else {
            (0, $ee1ab2624407a779$export$a7a9523472993e97)($ae31471d52481ece$var$pathGetFront(path) !== '.priority' || $ae31471d52481ece$var$pathGetLength(path) === 1, '.priority must be the last token in a path');
            const newImmediateChild = this.getImmediateChild(front).updateChild($ae31471d52481ece$var$pathPopFront(path), newChildNode);
            return this.updateImmediateChild(front, newImmediateChild);
        }
    }
    /** @inheritDoc */ isEmpty() {
        return this.children_.isEmpty();
    }
    /** @inheritDoc */ numChildren() {
        return this.children_.count();
    }
    /** @inheritDoc */ val(exportFormat) {
        if (this.isEmpty()) return null;
        const obj = {};
        let numKeys = 0, maxKey = 0, allIntegerKeys = true;
        this.forEachChild($ae31471d52481ece$var$PRIORITY_INDEX, (key, childNode)=>{
            obj[key] = childNode.val(exportFormat);
            numKeys++;
            if (allIntegerKeys && $ae31471d52481ece$var$ChildrenNode.INTEGER_REGEXP_.test(key)) maxKey = Math.max(maxKey, Number(key));
            else allIntegerKeys = false;
        });
        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {
            // convert to array.
            const array = [];
            // eslint-disable-next-line guard-for-in
            for(const key in obj)array[key] = obj[key];
            return array;
        } else {
            if (exportFormat && !this.getPriority().isEmpty()) obj['.priority'] = this.getPriority().val();
            return obj;
        }
    }
    /** @inheritDoc */ hash() {
        if (this.lazyHash_ === null) {
            let toHash = '';
            if (!this.getPriority().isEmpty()) toHash += 'priority:' + $ae31471d52481ece$var$priorityHashText(this.getPriority().val()) + ':';
            this.forEachChild($ae31471d52481ece$var$PRIORITY_INDEX, (key, childNode)=>{
                const childHash = childNode.hash();
                if (childHash !== '') toHash += ':' + key + ':' + childHash;
            });
            this.lazyHash_ = toHash === '' ? '' : $ae31471d52481ece$var$sha1(toHash);
        }
        return this.lazyHash_;
    }
    /** @inheritDoc */ getPredecessorChildName(childName, childNode, index) {
        const idx = this.resolveIndex_(index);
        if (idx) {
            const predecessor = idx.getPredecessorKey(new $ae31471d52481ece$var$NamedNode(childName, childNode));
            return predecessor ? predecessor.name : null;
        } else return this.children_.getPredecessorKey(childName);
    }
    getFirstChildName(indexDefinition) {
        const idx = this.resolveIndex_(indexDefinition);
        if (idx) {
            const minKey = idx.minKey();
            return minKey && minKey.name;
        } else return this.children_.minKey();
    }
    getFirstChild(indexDefinition) {
        const minKey = this.getFirstChildName(indexDefinition);
        if (minKey) return new $ae31471d52481ece$var$NamedNode(minKey, this.children_.get(minKey));
        else return null;
    }
    /**
     * Given an index, return the key name of the largest value we have, according to that index
     */ getLastChildName(indexDefinition) {
        const idx = this.resolveIndex_(indexDefinition);
        if (idx) {
            const maxKey = idx.maxKey();
            return maxKey && maxKey.name;
        } else return this.children_.maxKey();
    }
    getLastChild(indexDefinition) {
        const maxKey = this.getLastChildName(indexDefinition);
        if (maxKey) return new $ae31471d52481ece$var$NamedNode(maxKey, this.children_.get(maxKey));
        else return null;
    }
    forEachChild(index, action) {
        const idx = this.resolveIndex_(index);
        if (idx) return idx.inorderTraversal((wrappedNode)=>{
            return action(wrappedNode.name, wrappedNode.node);
        });
        else return this.children_.inorderTraversal(action);
    }
    getIterator(indexDefinition) {
        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);
    }
    getIteratorFrom(startPost, indexDefinition) {
        const idx = this.resolveIndex_(indexDefinition);
        if (idx) return idx.getIteratorFrom(startPost, (key)=>key);
        else {
            const iterator = this.children_.getIteratorFrom(startPost.name, $ae31471d52481ece$var$NamedNode.Wrap);
            let next = iterator.peek();
            while(next != null && indexDefinition.compare(next, startPost) < 0){
                iterator.getNext();
                next = iterator.peek();
            }
            return iterator;
        }
    }
    getReverseIterator(indexDefinition) {
        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);
    }
    getReverseIteratorFrom(endPost, indexDefinition) {
        const idx = this.resolveIndex_(indexDefinition);
        if (idx) return idx.getReverseIteratorFrom(endPost, (key)=>{
            return key;
        });
        else {
            const iterator = this.children_.getReverseIteratorFrom(endPost.name, $ae31471d52481ece$var$NamedNode.Wrap);
            let next = iterator.peek();
            while(next != null && indexDefinition.compare(next, endPost) > 0){
                iterator.getNext();
                next = iterator.peek();
            }
            return iterator;
        }
    }
    compareTo(other) {
        if (this.isEmpty()) {
            if (other.isEmpty()) return 0;
            else return -1;
        } else if (other.isLeafNode() || other.isEmpty()) return 1;
        else if (other === $ae31471d52481ece$var$MAX_NODE) return -1;
        else // Must be another node with children.
        return 0;
    }
    withIndex(indexDefinition) {
        if (indexDefinition === $ae31471d52481ece$var$KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) return this;
        else {
            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);
            return new $ae31471d52481ece$var$ChildrenNode(this.children_, this.priorityNode_, newIndexMap);
        }
    }
    isIndexed(index) {
        return index === $ae31471d52481ece$var$KEY_INDEX || this.indexMap_.hasIndex(index);
    }
    equals(other) {
        if (other === this) return true;
        else if (other.isLeafNode()) return false;
        else {
            const otherChildrenNode = other;
            if (!this.getPriority().equals(otherChildrenNode.getPriority())) return false;
            else if (this.children_.count() === otherChildrenNode.children_.count()) {
                const thisIter = this.getIterator($ae31471d52481ece$var$PRIORITY_INDEX);
                const otherIter = otherChildrenNode.getIterator($ae31471d52481ece$var$PRIORITY_INDEX);
                let thisCurrent = thisIter.getNext();
                let otherCurrent = otherIter.getNext();
                while(thisCurrent && otherCurrent){
                    if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) return false;
                    thisCurrent = thisIter.getNext();
                    otherCurrent = otherIter.getNext();
                }
                return thisCurrent === null && otherCurrent === null;
            } else return false;
        }
    }
    /**
     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used
     * instead.
     *
     */ resolveIndex_(indexDefinition) {
        if (indexDefinition === $ae31471d52481ece$var$KEY_INDEX) return null;
        else return this.indexMap_.get(indexDefinition.toString());
    }
}
$ae31471d52481ece$var$ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\d*)$/;
class $ae31471d52481ece$var$MaxNode extends $ae31471d52481ece$var$ChildrenNode {
    constructor(){
        super(new $ae31471d52481ece$var$SortedMap($ae31471d52481ece$var$NAME_COMPARATOR), $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE, $ae31471d52481ece$var$IndexMap.Default);
    }
    compareTo(other) {
        if (other === this) return 0;
        else return 1;
    }
    equals(other) {
        // Not that we every compare it, but MAX_NODE is only ever equal to itself
        return other === this;
    }
    getPriority() {
        return this;
    }
    getImmediateChild(childName) {
        return $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE;
    }
    isEmpty() {
        return false;
    }
}
/**
 * Marker that will sort higher than any other snapshot.
 */ const $ae31471d52481ece$var$MAX_NODE = new $ae31471d52481ece$var$MaxNode();
Object.defineProperties($ae31471d52481ece$var$NamedNode, {
    MIN: {
        value: new $ae31471d52481ece$var$NamedNode($ae31471d52481ece$var$MIN_NAME, $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE)
    },
    MAX: {
        value: new $ae31471d52481ece$var$NamedNode($ae31471d52481ece$var$MAX_NAME, $ae31471d52481ece$var$MAX_NODE)
    }
});
/**
 * Reference Extensions
 */ $ae31471d52481ece$var$KeyIndex.__EMPTY_NODE = $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE;
$ae31471d52481ece$var$LeafNode.__childrenNodeConstructor = $ae31471d52481ece$var$ChildrenNode;
$ae31471d52481ece$var$setMaxNode$1($ae31471d52481ece$var$MAX_NODE);
$ae31471d52481ece$var$setMaxNode($ae31471d52481ece$var$MAX_NODE);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $ae31471d52481ece$var$USE_HINZE = true;
/**
 * Constructs a snapshot node representing the passed JSON and returns it.
 * @param json - JSON to create a node for.
 * @param priority - Optional priority to use.  This will be ignored if the
 * passed JSON contains a .priority property.
 */ function $ae31471d52481ece$var$nodeFromJSON(json, priority = null) {
    if (json === null) return $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE;
    if (typeof json === 'object' && '.priority' in json) priority = json['.priority'];
    (0, $ee1ab2624407a779$export$a7a9523472993e97)(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);
    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) json = json['.value'];
    // Valid leaf nodes include non-objects or server-value wrapper objects
    if (typeof json !== 'object' || '.sv' in json) {
        const jsonLeaf = json;
        return new $ae31471d52481ece$var$LeafNode(jsonLeaf, $ae31471d52481ece$var$nodeFromJSON(priority));
    }
    if (!(json instanceof Array) && $ae31471d52481ece$var$USE_HINZE) {
        const children = [];
        let childrenHavePriority = false;
        const hinzeJsonObj = json;
        $ae31471d52481ece$var$each(hinzeJsonObj, (key, child)=>{
            if (key.substring(0, 1) !== '.') {
                // Ignore metadata nodes
                const childNode = $ae31471d52481ece$var$nodeFromJSON(child);
                if (!childNode.isEmpty()) {
                    childrenHavePriority = childrenHavePriority || !childNode.getPriority().isEmpty();
                    children.push(new $ae31471d52481ece$var$NamedNode(key, childNode));
                }
            }
        });
        if (children.length === 0) return $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE;
        const childSet = $ae31471d52481ece$var$buildChildSet(children, $ae31471d52481ece$var$NAME_ONLY_COMPARATOR, (namedNode)=>namedNode.name, $ae31471d52481ece$var$NAME_COMPARATOR);
        if (childrenHavePriority) {
            const sortedChildSet = $ae31471d52481ece$var$buildChildSet(children, $ae31471d52481ece$var$PRIORITY_INDEX.getCompare());
            return new $ae31471d52481ece$var$ChildrenNode(childSet, $ae31471d52481ece$var$nodeFromJSON(priority), new $ae31471d52481ece$var$IndexMap({
                '.priority': sortedChildSet
            }, {
                '.priority': $ae31471d52481ece$var$PRIORITY_INDEX
            }));
        } else return new $ae31471d52481ece$var$ChildrenNode(childSet, $ae31471d52481ece$var$nodeFromJSON(priority), $ae31471d52481ece$var$IndexMap.Default);
    } else {
        let node = $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE;
        $ae31471d52481ece$var$each(json, (key, childData)=>{
            if ((0, $ee1ab2624407a779$export$2344b14b097df817)(json, key)) {
                if (key.substring(0, 1) !== '.') {
                    // ignore metadata nodes.
                    const childNode = $ae31471d52481ece$var$nodeFromJSON(childData);
                    if (childNode.isLeafNode() || !childNode.isEmpty()) node = node.updateImmediateChild(key, childNode);
                }
            }
        });
        return node.updatePriority($ae31471d52481ece$var$nodeFromJSON(priority));
    }
}
$ae31471d52481ece$var$setNodeFromJSON($ae31471d52481ece$var$nodeFromJSON);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $ae31471d52481ece$var$PathIndex extends $ae31471d52481ece$var$Index {
    constructor(indexPath_){
        super();
        this.indexPath_ = indexPath_;
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(!$ae31471d52481ece$var$pathIsEmpty(indexPath_) && $ae31471d52481ece$var$pathGetFront(indexPath_) !== '.priority', "Can't create PathIndex with empty path or .priority key");
    }
    extractChild(snap) {
        return snap.getChild(this.indexPath_);
    }
    isDefinedOn(node) {
        return !node.getChild(this.indexPath_).isEmpty();
    }
    compare(a, b) {
        const aChild = this.extractChild(a.node);
        const bChild = this.extractChild(b.node);
        const indexCmp = aChild.compareTo(bChild);
        if (indexCmp === 0) return $ae31471d52481ece$var$nameCompare(a.name, b.name);
        else return indexCmp;
    }
    makePost(indexValue, name) {
        const valueNode = $ae31471d52481ece$var$nodeFromJSON(indexValue);
        const node = $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);
        return new $ae31471d52481ece$var$NamedNode(name, node);
    }
    maxPost() {
        const node = $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, $ae31471d52481ece$var$MAX_NODE);
        return new $ae31471d52481ece$var$NamedNode($ae31471d52481ece$var$MAX_NAME, node);
    }
    toString() {
        return $ae31471d52481ece$var$pathSlice(this.indexPath_, 0).join('/');
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $ae31471d52481ece$var$ValueIndex extends $ae31471d52481ece$var$Index {
    compare(a, b) {
        const indexCmp = a.node.compareTo(b.node);
        if (indexCmp === 0) return $ae31471d52481ece$var$nameCompare(a.name, b.name);
        else return indexCmp;
    }
    isDefinedOn(node) {
        return true;
    }
    indexedValueChanged(oldNode, newNode) {
        return !oldNode.equals(newNode);
    }
    minPost() {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return $ae31471d52481ece$var$NamedNode.MIN;
    }
    maxPost() {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return $ae31471d52481ece$var$NamedNode.MAX;
    }
    makePost(indexValue, name) {
        const valueNode = $ae31471d52481ece$var$nodeFromJSON(indexValue);
        return new $ae31471d52481ece$var$NamedNode(name, valueNode);
    }
    /**
     * @returns String representation for inclusion in a query spec
     */ toString() {
        return '.value';
    }
}
const $ae31471d52481ece$var$VALUE_INDEX = new $ae31471d52481ece$var$ValueIndex();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $ae31471d52481ece$var$changeValue(snapshotNode) {
    return {
        type: "value" /* ChangeType.VALUE */ ,
        snapshotNode: snapshotNode
    };
}
function $ae31471d52481ece$var$changeChildAdded(childName, snapshotNode) {
    return {
        type: "child_added" /* ChangeType.CHILD_ADDED */ ,
        snapshotNode: snapshotNode,
        childName: childName
    };
}
function $ae31471d52481ece$var$changeChildRemoved(childName, snapshotNode) {
    return {
        type: "child_removed" /* ChangeType.CHILD_REMOVED */ ,
        snapshotNode: snapshotNode,
        childName: childName
    };
}
function $ae31471d52481ece$var$changeChildChanged(childName, snapshotNode, oldSnap) {
    return {
        type: "child_changed" /* ChangeType.CHILD_CHANGED */ ,
        snapshotNode: snapshotNode,
        childName: childName,
        oldSnap: oldSnap
    };
}
function $ae31471d52481ece$var$changeChildMoved(childName, snapshotNode) {
    return {
        type: "child_moved" /* ChangeType.CHILD_MOVED */ ,
        snapshotNode: snapshotNode,
        childName: childName
    };
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Doesn't really filter nodes but applies an index to the node and keeps track of any changes
 */ class $ae31471d52481ece$var$IndexedFilter {
    constructor(index_){
        this.index_ = index_;
    }
    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');
        const oldChild = snap.getImmediateChild(key);
        // Check if anything actually changed.
        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {
            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.
            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need
            // to avoid treating these cases as "nothing changed."
            if (oldChild.isEmpty() === newChild.isEmpty()) // Nothing changed.
            // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.
            //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');
            return snap;
        }
        if (optChangeAccumulator != null) {
            if (newChild.isEmpty()) {
                if (snap.hasChild(key)) optChangeAccumulator.trackChildChange($ae31471d52481ece$var$changeChildRemoved(key, oldChild));
                else (0, $ee1ab2624407a779$export$a7a9523472993e97)(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');
            } else if (oldChild.isEmpty()) optChangeAccumulator.trackChildChange($ae31471d52481ece$var$changeChildAdded(key, newChild));
            else optChangeAccumulator.trackChildChange($ae31471d52481ece$var$changeChildChanged(key, newChild, oldChild));
        }
        if (snap.isLeafNode() && newChild.isEmpty()) return snap;
        else // Make sure the node is indexed
        return snap.updateImmediateChild(key, newChild).withIndex(this.index_);
    }
    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {
        if (optChangeAccumulator != null) {
            if (!oldSnap.isLeafNode()) oldSnap.forEachChild($ae31471d52481ece$var$PRIORITY_INDEX, (key, childNode)=>{
                if (!newSnap.hasChild(key)) optChangeAccumulator.trackChildChange($ae31471d52481ece$var$changeChildRemoved(key, childNode));
            });
            if (!newSnap.isLeafNode()) newSnap.forEachChild($ae31471d52481ece$var$PRIORITY_INDEX, (key, childNode)=>{
                if (oldSnap.hasChild(key)) {
                    const oldChild = oldSnap.getImmediateChild(key);
                    if (!oldChild.equals(childNode)) optChangeAccumulator.trackChildChange($ae31471d52481ece$var$changeChildChanged(key, childNode, oldChild));
                } else optChangeAccumulator.trackChildChange($ae31471d52481ece$var$changeChildAdded(key, childNode));
            });
        }
        return newSnap.withIndex(this.index_);
    }
    updatePriority(oldSnap, newPriority) {
        if (oldSnap.isEmpty()) return $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE;
        else return oldSnap.updatePriority(newPriority);
    }
    filtersNodes() {
        return false;
    }
    getIndexedFilter() {
        return this;
    }
    getIndex() {
        return this.index_;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node
 */ class $ae31471d52481ece$var$RangedFilter {
    constructor(params){
        this.indexedFilter_ = new $ae31471d52481ece$var$IndexedFilter(params.getIndex());
        this.index_ = params.getIndex();
        this.startPost_ = $ae31471d52481ece$var$RangedFilter.getStartPost_(params);
        this.endPost_ = $ae31471d52481ece$var$RangedFilter.getEndPost_(params);
        this.startIsInclusive_ = !params.startAfterSet_;
        this.endIsInclusive_ = !params.endBeforeSet_;
    }
    getStartPost() {
        return this.startPost_;
    }
    getEndPost() {
        return this.endPost_;
    }
    matches(node) {
        const isWithinStart = this.startIsInclusive_ ? this.index_.compare(this.getStartPost(), node) <= 0 : this.index_.compare(this.getStartPost(), node) < 0;
        const isWithinEnd = this.endIsInclusive_ ? this.index_.compare(node, this.getEndPost()) <= 0 : this.index_.compare(node, this.getEndPost()) < 0;
        return isWithinStart && isWithinEnd;
    }
    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {
        if (!this.matches(new $ae31471d52481ece$var$NamedNode(key, newChild))) newChild = $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE;
        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
    }
    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {
        if (newSnap.isLeafNode()) // Make sure we have a children node with the correct index, not a leaf node;
        newSnap = $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE;
        let filtered = newSnap.withIndex(this.index_);
        // Don't support priorities on queries
        filtered = filtered.updatePriority($ae31471d52481ece$var$ChildrenNode.EMPTY_NODE);
        const self = this;
        newSnap.forEachChild($ae31471d52481ece$var$PRIORITY_INDEX, (key, childNode)=>{
            if (!self.matches(new $ae31471d52481ece$var$NamedNode(key, childNode))) filtered = filtered.updateImmediateChild(key, $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE);
        });
        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);
    }
    updatePriority(oldSnap, newPriority) {
        // Don't support priorities on queries
        return oldSnap;
    }
    filtersNodes() {
        return true;
    }
    getIndexedFilter() {
        return this.indexedFilter_;
    }
    getIndex() {
        return this.index_;
    }
    static getStartPost_(params) {
        if (params.hasStart()) {
            const startName = params.getIndexStartName();
            return params.getIndex().makePost(params.getIndexStartValue(), startName);
        } else return params.getIndex().minPost();
    }
    static getEndPost_(params) {
        if (params.hasEnd()) {
            const endName = params.getIndexEndName();
            return params.getIndex().makePost(params.getIndexEndValue(), endName);
        } else return params.getIndex().maxPost();
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible
 */ class $ae31471d52481ece$var$LimitedFilter {
    constructor(params){
        this.withinDirectionalStart = (node)=>this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);
        this.withinDirectionalEnd = (node)=>this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);
        this.withinStartPost = (node)=>{
            const compareRes = this.index_.compare(this.rangedFilter_.getStartPost(), node);
            return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;
        };
        this.withinEndPost = (node)=>{
            const compareRes = this.index_.compare(node, this.rangedFilter_.getEndPost());
            return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;
        };
        this.rangedFilter_ = new $ae31471d52481ece$var$RangedFilter(params);
        this.index_ = params.getIndex();
        this.limit_ = params.getLimit();
        this.reverse_ = !params.isViewFromLeft();
        this.startIsInclusive_ = !params.startAfterSet_;
        this.endIsInclusive_ = !params.endBeforeSet_;
    }
    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {
        if (!this.rangedFilter_.matches(new $ae31471d52481ece$var$NamedNode(key, newChild))) newChild = $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE;
        if (snap.getImmediateChild(key).equals(newChild)) // No change
        return snap;
        else if (snap.numChildren() < this.limit_) return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
        else return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);
    }
    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {
        let filtered;
        if (newSnap.isLeafNode() || newSnap.isEmpty()) // Make sure we have a children node with the correct index, not a leaf node;
        filtered = $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE.withIndex(this.index_);
        else if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {
            // Easier to build up a snapshot, since what we're given has more than twice the elements we want
            filtered = $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE.withIndex(this.index_);
            // anchor to the startPost, endPost, or last element as appropriate
            let iterator;
            if (this.reverse_) iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);
            else iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);
            let count = 0;
            while(iterator.hasNext() && count < this.limit_){
                const next = iterator.getNext();
                if (!this.withinDirectionalStart(next)) continue;
                else if (!this.withinDirectionalEnd(next)) break;
                else {
                    filtered = filtered.updateImmediateChild(next.name, next.node);
                    count++;
                }
            }
        } else {
            // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one
            filtered = newSnap.withIndex(this.index_);
            // Don't support priorities on queries
            filtered = filtered.updatePriority($ae31471d52481ece$var$ChildrenNode.EMPTY_NODE);
            let iterator;
            if (this.reverse_) iterator = filtered.getReverseIterator(this.index_);
            else iterator = filtered.getIterator(this.index_);
            let count = 0;
            while(iterator.hasNext()){
                const next = iterator.getNext();
                const inRange = count < this.limit_ && this.withinDirectionalStart(next) && this.withinDirectionalEnd(next);
                if (inRange) count++;
                else filtered = filtered.updateImmediateChild(next.name, $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE);
            }
        }
        return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);
    }
    updatePriority(oldSnap, newPriority) {
        // Don't support priorities on queries
        return oldSnap;
    }
    filtersNodes() {
        return true;
    }
    getIndexedFilter() {
        return this.rangedFilter_.getIndexedFilter();
    }
    getIndex() {
        return this.index_;
    }
    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {
        // TODO: rename all cache stuff etc to general snap terminology
        let cmp;
        if (this.reverse_) {
            const indexCmp = this.index_.getCompare();
            cmp = (a, b)=>indexCmp(b, a);
        } else cmp = this.index_.getCompare();
        const oldEventCache = snap;
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(oldEventCache.numChildren() === this.limit_, '');
        const newChildNamedNode = new $ae31471d52481ece$var$NamedNode(childKey, childSnap);
        const windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);
        const inRange = this.rangedFilter_.matches(newChildNamedNode);
        if (oldEventCache.hasChild(childKey)) {
            const oldChildSnap = oldEventCache.getImmediateChild(childKey);
            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);
            while(nextChild != null && (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name)))// There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't
            // been applied to the limited filter yet. Ignore this next child which will be updated later in
            // the limited filter...
            nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);
            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);
            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;
            if (remainsInWindow) {
                if (changeAccumulator != null) changeAccumulator.trackChildChange($ae31471d52481ece$var$changeChildChanged(childKey, childSnap, oldChildSnap));
                return oldEventCache.updateImmediateChild(childKey, childSnap);
            } else {
                if (changeAccumulator != null) changeAccumulator.trackChildChange($ae31471d52481ece$var$changeChildRemoved(childKey, oldChildSnap));
                const newEventCache = oldEventCache.updateImmediateChild(childKey, $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE);
                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);
                if (nextChildInRange) {
                    if (changeAccumulator != null) changeAccumulator.trackChildChange($ae31471d52481ece$var$changeChildAdded(nextChild.name, nextChild.node));
                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);
                } else return newEventCache;
            }
        } else if (childSnap.isEmpty()) // we're deleting a node, but it was not in the window, so ignore it
        return snap;
        else if (inRange) {
            if (cmp(windowBoundary, newChildNamedNode) >= 0) {
                if (changeAccumulator != null) {
                    changeAccumulator.trackChildChange($ae31471d52481ece$var$changeChildRemoved(windowBoundary.name, windowBoundary.node));
                    changeAccumulator.trackChildChange($ae31471d52481ece$var$changeChildAdded(childKey, childSnap));
                }
                return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE);
            } else return snap;
        } else return snap;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a
 * range to be returned for a particular location. It is assumed that validation of parameters is done at the
 * user-facing API level, so it is not done here.
 *
 * @internal
 */ class $ae31471d52481ece$export$7ba287e361c94330 {
    constructor(){
        this.limitSet_ = false;
        this.startSet_ = false;
        this.startNameSet_ = false;
        this.startAfterSet_ = false; // can only be true if startSet_ is true
        this.endSet_ = false;
        this.endNameSet_ = false;
        this.endBeforeSet_ = false; // can only be true if endSet_ is true
        this.limit_ = 0;
        this.viewFrom_ = '';
        this.indexStartValue_ = null;
        this.indexStartName_ = '';
        this.indexEndValue_ = null;
        this.indexEndName_ = '';
        this.index_ = $ae31471d52481ece$var$PRIORITY_INDEX;
    }
    hasStart() {
        return this.startSet_;
    }
    /**
     * @returns True if it would return from left.
     */ isViewFromLeft() {
        if (this.viewFrom_ === '') // limit(), rather than limitToFirst or limitToLast was called.
        // This means that only one of startSet_ and endSet_ is true. Use them
        // to calculate which side of the view to anchor to. If neither is set,
        // anchor to the end.
        return this.startSet_;
        else return this.viewFrom_ === "l" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */ ;
    }
    /**
     * Only valid to call if hasStart() returns true
     */ getIndexStartValue() {
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(this.startSet_, 'Only valid if start has been set');
        return this.indexStartValue_;
    }
    /**
     * Only valid to call if hasStart() returns true.
     * Returns the starting key name for the range defined by these query parameters
     */ getIndexStartName() {
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(this.startSet_, 'Only valid if start has been set');
        if (this.startNameSet_) return this.indexStartName_;
        else return $ae31471d52481ece$var$MIN_NAME;
    }
    hasEnd() {
        return this.endSet_;
    }
    /**
     * Only valid to call if hasEnd() returns true.
     */ getIndexEndValue() {
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(this.endSet_, 'Only valid if end has been set');
        return this.indexEndValue_;
    }
    /**
     * Only valid to call if hasEnd() returns true.
     * Returns the end key name for the range defined by these query parameters
     */ getIndexEndName() {
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(this.endSet_, 'Only valid if end has been set');
        if (this.endNameSet_) return this.indexEndName_;
        else return $ae31471d52481ece$var$MAX_NAME;
    }
    hasLimit() {
        return this.limitSet_;
    }
    /**
     * @returns True if a limit has been set and it has been explicitly anchored
     */ hasAnchoredLimit() {
        return this.limitSet_ && this.viewFrom_ !== '';
    }
    /**
     * Only valid to call if hasLimit() returns true
     */ getLimit() {
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(this.limitSet_, 'Only valid if limit has been set');
        return this.limit_;
    }
    getIndex() {
        return this.index_;
    }
    loadsAllData() {
        return !(this.startSet_ || this.endSet_ || this.limitSet_);
    }
    isDefault() {
        return this.loadsAllData() && this.index_ === $ae31471d52481ece$var$PRIORITY_INDEX;
    }
    copy() {
        const copy = new $ae31471d52481ece$export$7ba287e361c94330();
        copy.limitSet_ = this.limitSet_;
        copy.limit_ = this.limit_;
        copy.startSet_ = this.startSet_;
        copy.startAfterSet_ = this.startAfterSet_;
        copy.indexStartValue_ = this.indexStartValue_;
        copy.startNameSet_ = this.startNameSet_;
        copy.indexStartName_ = this.indexStartName_;
        copy.endSet_ = this.endSet_;
        copy.endBeforeSet_ = this.endBeforeSet_;
        copy.indexEndValue_ = this.indexEndValue_;
        copy.endNameSet_ = this.endNameSet_;
        copy.indexEndName_ = this.indexEndName_;
        copy.index_ = this.index_;
        copy.viewFrom_ = this.viewFrom_;
        return copy;
    }
}
function $ae31471d52481ece$var$queryParamsGetNodeFilter(queryParams) {
    if (queryParams.loadsAllData()) return new $ae31471d52481ece$var$IndexedFilter(queryParams.getIndex());
    else if (queryParams.hasLimit()) return new $ae31471d52481ece$var$LimitedFilter(queryParams);
    else return new $ae31471d52481ece$var$RangedFilter(queryParams);
}
function $ae31471d52481ece$var$queryParamsLimitToFirst(queryParams, newLimit) {
    const newParams = queryParams.copy();
    newParams.limitSet_ = true;
    newParams.limit_ = newLimit;
    newParams.viewFrom_ = "l" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */ ;
    return newParams;
}
function $ae31471d52481ece$var$queryParamsLimitToLast(queryParams, newLimit) {
    const newParams = queryParams.copy();
    newParams.limitSet_ = true;
    newParams.limit_ = newLimit;
    newParams.viewFrom_ = "r" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */ ;
    return newParams;
}
function $ae31471d52481ece$var$queryParamsStartAt(queryParams, indexValue, key) {
    const newParams = queryParams.copy();
    newParams.startSet_ = true;
    if (indexValue === undefined) indexValue = null;
    newParams.indexStartValue_ = indexValue;
    if (key != null) {
        newParams.startNameSet_ = true;
        newParams.indexStartName_ = key;
    } else {
        newParams.startNameSet_ = false;
        newParams.indexStartName_ = '';
    }
    return newParams;
}
function $ae31471d52481ece$var$queryParamsStartAfter(queryParams, indexValue, key) {
    let params;
    if (queryParams.index_ === $ae31471d52481ece$var$KEY_INDEX || !!key) params = $ae31471d52481ece$var$queryParamsStartAt(queryParams, indexValue, key);
    else params = $ae31471d52481ece$var$queryParamsStartAt(queryParams, indexValue, $ae31471d52481ece$var$MAX_NAME);
    params.startAfterSet_ = true;
    return params;
}
function $ae31471d52481ece$var$queryParamsEndAt(queryParams, indexValue, key) {
    const newParams = queryParams.copy();
    newParams.endSet_ = true;
    if (indexValue === undefined) indexValue = null;
    newParams.indexEndValue_ = indexValue;
    if (key !== undefined) {
        newParams.endNameSet_ = true;
        newParams.indexEndName_ = key;
    } else {
        newParams.endNameSet_ = false;
        newParams.indexEndName_ = '';
    }
    return newParams;
}
function $ae31471d52481ece$var$queryParamsEndBefore(queryParams, indexValue, key) {
    let params;
    if (queryParams.index_ === $ae31471d52481ece$var$KEY_INDEX || !!key) params = $ae31471d52481ece$var$queryParamsEndAt(queryParams, indexValue, key);
    else params = $ae31471d52481ece$var$queryParamsEndAt(queryParams, indexValue, $ae31471d52481ece$var$MIN_NAME);
    params.endBeforeSet_ = true;
    return params;
}
function $ae31471d52481ece$var$queryParamsOrderBy(queryParams, index) {
    const newParams = queryParams.copy();
    newParams.index_ = index;
    return newParams;
}
/**
 * Returns a set of REST query string parameters representing this query.
 *
 * @returns query string parameters
 */ function $ae31471d52481ece$var$queryParamsToRestQueryStringParameters(queryParams) {
    const qs = {};
    if (queryParams.isDefault()) return qs;
    let orderBy;
    if (queryParams.index_ === $ae31471d52481ece$var$PRIORITY_INDEX) orderBy = "$priority" /* REST_QUERY_CONSTANTS.PRIORITY_INDEX */ ;
    else if (queryParams.index_ === $ae31471d52481ece$var$VALUE_INDEX) orderBy = "$value" /* REST_QUERY_CONSTANTS.VALUE_INDEX */ ;
    else if (queryParams.index_ === $ae31471d52481ece$var$KEY_INDEX) orderBy = "$key" /* REST_QUERY_CONSTANTS.KEY_INDEX */ ;
    else {
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(queryParams.index_ instanceof $ae31471d52481ece$var$PathIndex, 'Unrecognized index type!');
        orderBy = queryParams.index_.toString();
    }
    qs["orderBy" /* REST_QUERY_CONSTANTS.ORDER_BY */ ] = (0, $ee1ab2624407a779$export$fac44ee5b035f737)(orderBy);
    if (queryParams.startSet_) {
        const startParam = queryParams.startAfterSet_ ? "startAfter" /* REST_QUERY_CONSTANTS.START_AFTER */  : "startAt" /* REST_QUERY_CONSTANTS.START_AT */ ;
        qs[startParam] = (0, $ee1ab2624407a779$export$fac44ee5b035f737)(queryParams.indexStartValue_);
        if (queryParams.startNameSet_) qs[startParam] += ',' + (0, $ee1ab2624407a779$export$fac44ee5b035f737)(queryParams.indexStartName_);
    }
    if (queryParams.endSet_) {
        const endParam = queryParams.endBeforeSet_ ? "endBefore" /* REST_QUERY_CONSTANTS.END_BEFORE */  : "endAt" /* REST_QUERY_CONSTANTS.END_AT */ ;
        qs[endParam] = (0, $ee1ab2624407a779$export$fac44ee5b035f737)(queryParams.indexEndValue_);
        if (queryParams.endNameSet_) qs[endParam] += ',' + (0, $ee1ab2624407a779$export$fac44ee5b035f737)(queryParams.indexEndName_);
    }
    if (queryParams.limitSet_) {
        if (queryParams.isViewFromLeft()) qs["limitToFirst" /* REST_QUERY_CONSTANTS.LIMIT_TO_FIRST */ ] = queryParams.limit_;
        else qs["limitToLast" /* REST_QUERY_CONSTANTS.LIMIT_TO_LAST */ ] = queryParams.limit_;
    }
    return qs;
}
function $ae31471d52481ece$var$queryParamsGetQueryObject(queryParams) {
    const obj = {};
    if (queryParams.startSet_) {
        obj["sp" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE */ ] = queryParams.indexStartValue_;
        if (queryParams.startNameSet_) obj["sn" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME */ ] = queryParams.indexStartName_;
        obj["sin" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE */ ] = !queryParams.startAfterSet_;
    }
    if (queryParams.endSet_) {
        obj["ep" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE */ ] = queryParams.indexEndValue_;
        if (queryParams.endNameSet_) obj["en" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME */ ] = queryParams.indexEndName_;
        obj["ein" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE */ ] = !queryParams.endBeforeSet_;
    }
    if (queryParams.limitSet_) {
        obj["l" /* WIRE_PROTOCOL_CONSTANTS.LIMIT */ ] = queryParams.limit_;
        let viewFrom = queryParams.viewFrom_;
        if (viewFrom === '') {
            if (queryParams.isViewFromLeft()) viewFrom = "l" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */ ;
            else viewFrom = "r" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */ ;
        }
        obj["vf" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM */ ] = viewFrom;
    }
    // For now, priority index is the default, so we only specify if it's some other index
    if (queryParams.index_ !== $ae31471d52481ece$var$PRIORITY_INDEX) obj["i" /* WIRE_PROTOCOL_CONSTANTS.INDEX */ ] = queryParams.index_.toString();
    return obj;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An implementation of ServerActions that communicates with the server via REST requests.
 * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full
 * persistent connection (using WebSockets or long-polling)
 */ class $ae31471d52481ece$var$ReadonlyRestClient extends $ae31471d52481ece$var$ServerActions {
    reportStats(stats) {
        throw new Error('Method not implemented.');
    }
    static getListenId_(query, tag) {
        if (tag !== undefined) return 'tag$' + tag;
        else {
            (0, $ee1ab2624407a779$export$a7a9523472993e97)(query._queryParams.isDefault(), "should have a tag if it's not a default query.");
            return query._path.toString();
        }
    }
    /**
     * @param repoInfo_ - Data about the namespace we are connecting to
     * @param onDataUpdate_ - A callback for new data from the server
     */ constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_){
        super();
        this.repoInfo_ = repoInfo_;
        this.onDataUpdate_ = onDataUpdate_;
        this.authTokenProvider_ = authTokenProvider_;
        this.appCheckTokenProvider_ = appCheckTokenProvider_;
        /** @private {function(...[*])} */ this.log_ = $ae31471d52481ece$var$logWrapper('p:rest:');
        /**
         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen
         * that's been removed. :-/
         */ this.listens_ = {};
    }
    /** @inheritDoc */ listen(query, currentHashFn, tag, onComplete) {
        const pathString = query._path.toString();
        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);
        // Mark this listener so we can tell if it's removed.
        const listenId = $ae31471d52481ece$var$ReadonlyRestClient.getListenId_(query, tag);
        const thisListen = {};
        this.listens_[listenId] = thisListen;
        const queryStringParameters = $ae31471d52481ece$var$queryParamsToRestQueryStringParameters(query._queryParams);
        this.restRequest_(pathString + '.json', queryStringParameters, (error, result)=>{
            let data = result;
            if (error === 404) {
                data = null;
                error = null;
            }
            if (error === null) this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);
            if ((0, $ee1ab2624407a779$export$e51ae4db7b428f67)(this.listens_, listenId) === thisListen) {
                let status;
                if (!error) status = 'ok';
                else if (error === 401) status = 'permission_denied';
                else status = 'rest_error:' + error;
                onComplete(status, null);
            }
        });
    }
    /** @inheritDoc */ unlisten(query, tag) {
        const listenId = $ae31471d52481ece$var$ReadonlyRestClient.getListenId_(query, tag);
        delete this.listens_[listenId];
    }
    get(query) {
        const queryStringParameters = $ae31471d52481ece$var$queryParamsToRestQueryStringParameters(query._queryParams);
        const pathString = query._path.toString();
        const deferred = new (0, $ee1ab2624407a779$export$85f6557964517f1a)();
        this.restRequest_(pathString + '.json', queryStringParameters, (error, result)=>{
            let data = result;
            if (error === 404) {
                data = null;
                error = null;
            }
            if (error === null) {
                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, /*tag=*/ null);
                deferred.resolve(data);
            } else deferred.reject(new Error(data));
        });
        return deferred.promise;
    }
    /** @inheritDoc */ refreshAuthToken(token) {
    // no-op since we just always call getToken.
    }
    /**
     * Performs a REST request to the given path, with the provided query string parameters,
     * and any auth credentials we have.
     */ restRequest_(pathString, queryStringParameters = {}, callback) {
        queryStringParameters['format'] = 'export';
        return Promise.all([
            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),
            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)
        ]).then(([authToken, appCheckToken])=>{
            if (authToken && authToken.accessToken) queryStringParameters['auth'] = authToken.accessToken;
            if (appCheckToken && appCheckToken.token) queryStringParameters['ac'] = appCheckToken.token;
            const url = (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host + pathString + '?' + 'ns=' + this.repoInfo_.namespace + (0, $ee1ab2624407a779$export$ac4103b836844853)(queryStringParameters);
            this.log_('Sending REST request for ' + url);
            const xhr = new XMLHttpRequest();
            xhr.onreadystatechange = ()=>{
                if (callback && xhr.readyState === 4) {
                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);
                    let res = null;
                    if (xhr.status >= 200 && xhr.status < 300) {
                        try {
                            res = (0, $ee1ab2624407a779$export$c5a53ce6a17cf18d)(xhr.responseText);
                        } catch (e) {
                            $ae31471d52481ece$var$warn('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);
                        }
                        callback(null, res);
                    } else {
                        // 401 and 404 are expected.
                        if (xhr.status !== 401 && xhr.status !== 404) $ae31471d52481ece$var$warn('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);
                        callback(xhr.status);
                    }
                    callback = null;
                }
            };
            xhr.open('GET', url, /*asynchronous=*/ true);
            xhr.send();
        });
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Mutable object which basically just stores a reference to the "latest" immutable snapshot.
 */ class $ae31471d52481ece$var$SnapshotHolder {
    constructor(){
        this.rootNode_ = $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE;
    }
    getNode(path) {
        return this.rootNode_.getChild(path);
    }
    updateSnapshot(path, newSnapshotNode) {
        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $ae31471d52481ece$var$newSparseSnapshotTree() {
    return {
        value: null,
        children: new Map()
    };
}
/**
 * Stores the given node at the specified path. If there is already a node
 * at a shallower path, it merges the new data into that snapshot node.
 *
 * @param path - Path to look up snapshot for.
 * @param data - The new data, or null.
 */ function $ae31471d52481ece$var$sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {
    if ($ae31471d52481ece$var$pathIsEmpty(path)) {
        sparseSnapshotTree.value = data;
        sparseSnapshotTree.children.clear();
    } else if (sparseSnapshotTree.value !== null) sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);
    else {
        const childKey = $ae31471d52481ece$var$pathGetFront(path);
        if (!sparseSnapshotTree.children.has(childKey)) sparseSnapshotTree.children.set(childKey, $ae31471d52481ece$var$newSparseSnapshotTree());
        const child = sparseSnapshotTree.children.get(childKey);
        path = $ae31471d52481ece$var$pathPopFront(path);
        $ae31471d52481ece$var$sparseSnapshotTreeRemember(child, path, data);
    }
}
/**
 * Purge the data at path from the cache.
 *
 * @param path - Path to look up snapshot for.
 * @returns True if this node should now be removed.
 */ function $ae31471d52481ece$var$sparseSnapshotTreeForget(sparseSnapshotTree, path) {
    if ($ae31471d52481ece$var$pathIsEmpty(path)) {
        sparseSnapshotTree.value = null;
        sparseSnapshotTree.children.clear();
        return true;
    } else {
        if (sparseSnapshotTree.value !== null) {
            if (sparseSnapshotTree.value.isLeafNode()) // We're trying to forget a node that doesn't exist
            return false;
            else {
                const value = sparseSnapshotTree.value;
                sparseSnapshotTree.value = null;
                value.forEachChild($ae31471d52481ece$var$PRIORITY_INDEX, (key, tree)=>{
                    $ae31471d52481ece$var$sparseSnapshotTreeRemember(sparseSnapshotTree, new $ae31471d52481ece$var$Path(key), tree);
                });
                return $ae31471d52481ece$var$sparseSnapshotTreeForget(sparseSnapshotTree, path);
            }
        } else if (sparseSnapshotTree.children.size > 0) {
            const childKey = $ae31471d52481ece$var$pathGetFront(path);
            path = $ae31471d52481ece$var$pathPopFront(path);
            if (sparseSnapshotTree.children.has(childKey)) {
                const safeToRemove = $ae31471d52481ece$var$sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);
                if (safeToRemove) sparseSnapshotTree.children.delete(childKey);
            }
            return sparseSnapshotTree.children.size === 0;
        } else return true;
    }
}
/**
 * Recursively iterates through all of the stored tree and calls the
 * callback on each one.
 *
 * @param prefixPath - Path to look up node for.
 * @param func - The function to invoke for each tree.
 */ function $ae31471d52481ece$var$sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {
    if (sparseSnapshotTree.value !== null) func(prefixPath, sparseSnapshotTree.value);
    else $ae31471d52481ece$var$sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree)=>{
        const path = new $ae31471d52481ece$var$Path(prefixPath.toString() + '/' + key);
        $ae31471d52481ece$var$sparseSnapshotTreeForEachTree(tree, path, func);
    });
}
/**
 * Iterates through each immediate child and triggers the callback.
 * Only seems to be used in tests.
 *
 * @param func - The function to invoke for each child.
 */ function $ae31471d52481ece$var$sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {
    sparseSnapshotTree.children.forEach((tree, key)=>{
        func(key, tree);
    });
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns the delta from the previous call to get stats.
 *
 * @param collection_ - The collection to "listen" to.
 */ class $ae31471d52481ece$var$StatsListener {
    constructor(collection_){
        this.collection_ = collection_;
        this.last_ = null;
    }
    get() {
        const newStats = this.collection_.get();
        const delta = Object.assign({}, newStats);
        if (this.last_) $ae31471d52481ece$var$each(this.last_, (stat, value)=>{
            delta[stat] = delta[stat] - value;
        });
        this.last_ = newStats;
        return delta;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably
// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10
// seconds to try to ensure the Firebase connection is established / settled.
const $ae31471d52481ece$var$FIRST_STATS_MIN_TIME = 10000;
const $ae31471d52481ece$var$FIRST_STATS_MAX_TIME = 30000;
// We'll continue to report stats on average every 5 minutes.
const $ae31471d52481ece$var$REPORT_STATS_INTERVAL = 300000;
class $ae31471d52481ece$var$StatsReporter {
    constructor(collection, server_){
        this.server_ = server_;
        this.statsToReport_ = {};
        this.statsListener_ = new $ae31471d52481ece$var$StatsListener(collection);
        const timeout = $ae31471d52481ece$var$FIRST_STATS_MIN_TIME + ($ae31471d52481ece$var$FIRST_STATS_MAX_TIME - $ae31471d52481ece$var$FIRST_STATS_MIN_TIME) * Math.random();
        $ae31471d52481ece$var$setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));
    }
    reportStats_() {
        const stats = this.statsListener_.get();
        const reportedStats = {};
        let haveStatsToReport = false;
        $ae31471d52481ece$var$each(stats, (stat, value)=>{
            if (value > 0 && (0, $ee1ab2624407a779$export$2344b14b097df817)(this.statsToReport_, stat)) {
                reportedStats[stat] = value;
                haveStatsToReport = true;
            }
        });
        if (haveStatsToReport) this.server_.reportStats(reportedStats);
        // queue our next run.
        $ae31471d52481ece$var$setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * $ae31471d52481ece$var$REPORT_STATS_INTERVAL));
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 *
 * @enum
 */ var $ae31471d52481ece$var$OperationType;
(function(OperationType) {
    OperationType[OperationType["OVERWRITE"] = 0] = "OVERWRITE";
    OperationType[OperationType["MERGE"] = 1] = "MERGE";
    OperationType[OperationType["ACK_USER_WRITE"] = 2] = "ACK_USER_WRITE";
    OperationType[OperationType["LISTEN_COMPLETE"] = 3] = "LISTEN_COMPLETE";
})($ae31471d52481ece$var$OperationType || ($ae31471d52481ece$var$OperationType = {}));
function $ae31471d52481ece$var$newOperationSourceUser() {
    return {
        fromUser: true,
        fromServer: false,
        queryId: null,
        tagged: false
    };
}
function $ae31471d52481ece$var$newOperationSourceServer() {
    return {
        fromUser: false,
        fromServer: true,
        queryId: null,
        tagged: false
    };
}
function $ae31471d52481ece$var$newOperationSourceServerTaggedQuery(queryId) {
    return {
        fromUser: false,
        fromServer: true,
        queryId: queryId,
        tagged: true
    };
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $ae31471d52481ece$var$AckUserWrite {
    /**
     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.
     */ constructor(/** @inheritDoc */ path, /** @inheritDoc */ affectedTree, /** @inheritDoc */ revert){
        this.path = path;
        this.affectedTree = affectedTree;
        this.revert = revert;
        /** @inheritDoc */ this.type = $ae31471d52481ece$var$OperationType.ACK_USER_WRITE;
        /** @inheritDoc */ this.source = $ae31471d52481ece$var$newOperationSourceUser();
    }
    operationForChild(childName) {
        if (!$ae31471d52481ece$var$pathIsEmpty(this.path)) {
            (0, $ee1ab2624407a779$export$a7a9523472993e97)($ae31471d52481ece$var$pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');
            return new $ae31471d52481ece$var$AckUserWrite($ae31471d52481ece$var$pathPopFront(this.path), this.affectedTree, this.revert);
        } else if (this.affectedTree.value != null) {
            (0, $ee1ab2624407a779$export$a7a9523472993e97)(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');
            // All child locations are affected as well; just return same operation.
            return this;
        } else {
            const childTree = this.affectedTree.subtree(new $ae31471d52481ece$var$Path(childName));
            return new $ae31471d52481ece$var$AckUserWrite($ae31471d52481ece$var$newEmptyPath(), childTree, this.revert);
        }
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $ae31471d52481ece$var$ListenComplete {
    constructor(source, path){
        this.source = source;
        this.path = path;
        /** @inheritDoc */ this.type = $ae31471d52481ece$var$OperationType.LISTEN_COMPLETE;
    }
    operationForChild(childName) {
        if ($ae31471d52481ece$var$pathIsEmpty(this.path)) return new $ae31471d52481ece$var$ListenComplete(this.source, $ae31471d52481ece$var$newEmptyPath());
        else return new $ae31471d52481ece$var$ListenComplete(this.source, $ae31471d52481ece$var$pathPopFront(this.path));
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $ae31471d52481ece$var$Overwrite {
    constructor(source, path, snap){
        this.source = source;
        this.path = path;
        this.snap = snap;
        /** @inheritDoc */ this.type = $ae31471d52481ece$var$OperationType.OVERWRITE;
    }
    operationForChild(childName) {
        if ($ae31471d52481ece$var$pathIsEmpty(this.path)) return new $ae31471d52481ece$var$Overwrite(this.source, $ae31471d52481ece$var$newEmptyPath(), this.snap.getImmediateChild(childName));
        else return new $ae31471d52481ece$var$Overwrite(this.source, $ae31471d52481ece$var$pathPopFront(this.path), this.snap);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $ae31471d52481ece$var$Merge {
    constructor(/** @inheritDoc */ source, /** @inheritDoc */ path, /** @inheritDoc */ children){
        this.source = source;
        this.path = path;
        this.children = children;
        /** @inheritDoc */ this.type = $ae31471d52481ece$var$OperationType.MERGE;
    }
    operationForChild(childName) {
        if ($ae31471d52481ece$var$pathIsEmpty(this.path)) {
            const childTree = this.children.subtree(new $ae31471d52481ece$var$Path(childName));
            if (childTree.isEmpty()) // This child is unaffected
            return null;
            else if (childTree.value) // We have a snapshot for the child in question.  This becomes an overwrite of the child.
            return new $ae31471d52481ece$var$Overwrite(this.source, $ae31471d52481ece$var$newEmptyPath(), childTree.value);
            else // This is a merge at a deeper level
            return new $ae31471d52481ece$var$Merge(this.source, $ae31471d52481ece$var$newEmptyPath(), childTree);
        } else {
            (0, $ee1ab2624407a779$export$a7a9523472993e97)($ae31471d52481ece$var$pathGetFront(this.path) === childName, "Can't get a merge for a child not on the path of the operation");
            return new $ae31471d52481ece$var$Merge(this.source, $ae31471d52481ece$var$pathPopFront(this.path), this.children);
        }
    }
    toString() {
        return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully
 * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.
 * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks
 * whether a node potentially had children removed due to a filter.
 */ class $ae31471d52481ece$var$CacheNode {
    constructor(node_, fullyInitialized_, filtered_){
        this.node_ = node_;
        this.fullyInitialized_ = fullyInitialized_;
        this.filtered_ = filtered_;
    }
    /**
     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client
     */ isFullyInitialized() {
        return this.fullyInitialized_;
    }
    /**
     * Returns whether this node is potentially missing children due to a filter applied to the node
     */ isFiltered() {
        return this.filtered_;
    }
    isCompleteForPath(path) {
        if ($ae31471d52481ece$var$pathIsEmpty(path)) return this.isFullyInitialized() && !this.filtered_;
        const childKey = $ae31471d52481ece$var$pathGetFront(path);
        return this.isCompleteForChild(childKey);
    }
    isCompleteForChild(key) {
        return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);
    }
    getNode() {
        return this.node_;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An EventGenerator is used to convert "raw" changes (Change) as computed by the
 * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()
 * for details.
 *
 */ class $ae31471d52481ece$var$EventGenerator {
    constructor(query_){
        this.query_ = query_;
        this.index_ = this.query_._queryParams.getIndex();
    }
}
/**
 * Given a set of raw changes (no moved events and prevName not specified yet), and a set of
 * EventRegistrations that should be notified of these changes, generate the actual events to be raised.
 *
 * Notes:
 *  - child_moved events will be synthesized at this time for any child_changed events that affect
 *    our index.
 *  - prevName will be calculated based on the index ordering.
 */ function $ae31471d52481ece$var$eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {
    const events = [];
    const moves = [];
    changes.forEach((change)=>{
        if (change.type === "child_changed" /* ChangeType.CHILD_CHANGED */  && eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) moves.push($ae31471d52481ece$var$changeChildMoved(change.childName, change.snapshotNode));
    });
    $ae31471d52481ece$var$eventGeneratorGenerateEventsForType(eventGenerator, events, "child_removed" /* ChangeType.CHILD_REMOVED */ , changes, eventRegistrations, eventCache);
    $ae31471d52481ece$var$eventGeneratorGenerateEventsForType(eventGenerator, events, "child_added" /* ChangeType.CHILD_ADDED */ , changes, eventRegistrations, eventCache);
    $ae31471d52481ece$var$eventGeneratorGenerateEventsForType(eventGenerator, events, "child_moved" /* ChangeType.CHILD_MOVED */ , moves, eventRegistrations, eventCache);
    $ae31471d52481ece$var$eventGeneratorGenerateEventsForType(eventGenerator, events, "child_changed" /* ChangeType.CHILD_CHANGED */ , changes, eventRegistrations, eventCache);
    $ae31471d52481ece$var$eventGeneratorGenerateEventsForType(eventGenerator, events, "value" /* ChangeType.VALUE */ , changes, eventRegistrations, eventCache);
    return events;
}
/**
 * Given changes of a single change type, generate the corresponding events.
 */ function $ae31471d52481ece$var$eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {
    const filteredChanges = changes.filter((change)=>change.type === eventType);
    filteredChanges.sort((a, b)=>$ae31471d52481ece$var$eventGeneratorCompareChanges(eventGenerator, a, b));
    filteredChanges.forEach((change)=>{
        const materializedChange = $ae31471d52481ece$var$eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);
        registrations.forEach((registration)=>{
            if (registration.respondsTo(change.type)) events.push(registration.createEvent(materializedChange, eventGenerator.query_));
        });
    });
}
function $ae31471d52481ece$var$eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {
    if (change.type === 'value' || change.type === 'child_removed') return change;
    else {
        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);
        return change;
    }
}
function $ae31471d52481ece$var$eventGeneratorCompareChanges(eventGenerator, a, b) {
    if (a.childName == null || b.childName == null) throw (0, $ee1ab2624407a779$export$a39cad550e7ab28a)('Should only compare child_ events.');
    const aWrapped = new $ae31471d52481ece$var$NamedNode(a.childName, a.snapshotNode);
    const bWrapped = new $ae31471d52481ece$var$NamedNode(b.childName, b.snapshotNode);
    return eventGenerator.index_.compare(aWrapped, bWrapped);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $ae31471d52481ece$var$newViewCache(eventCache, serverCache) {
    return {
        eventCache: eventCache,
        serverCache: serverCache
    };
}
function $ae31471d52481ece$var$viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {
    return $ae31471d52481ece$var$newViewCache(new $ae31471d52481ece$var$CacheNode(eventSnap, complete, filtered), viewCache.serverCache);
}
function $ae31471d52481ece$var$viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {
    return $ae31471d52481ece$var$newViewCache(viewCache.eventCache, new $ae31471d52481ece$var$CacheNode(serverSnap, complete, filtered));
}
function $ae31471d52481ece$var$viewCacheGetCompleteEventSnap(viewCache) {
    return viewCache.eventCache.isFullyInitialized() ? viewCache.eventCache.getNode() : null;
}
function $ae31471d52481ece$var$viewCacheGetCompleteServerSnap(viewCache) {
    return viewCache.serverCache.isFullyInitialized() ? viewCache.serverCache.getNode() : null;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ let $ae31471d52481ece$var$emptyChildrenSingleton;
/**
 * Singleton empty children collection.
 *
 */ const $ae31471d52481ece$var$EmptyChildren = ()=>{
    if (!$ae31471d52481ece$var$emptyChildrenSingleton) $ae31471d52481ece$var$emptyChildrenSingleton = new $ae31471d52481ece$var$SortedMap($ae31471d52481ece$var$stringCompare);
    return $ae31471d52481ece$var$emptyChildrenSingleton;
};
/**
 * A tree with immutable elements.
 */ class $ae31471d52481ece$var$ImmutableTree {
    static fromObject(obj) {
        let tree = new $ae31471d52481ece$var$ImmutableTree(null);
        $ae31471d52481ece$var$each(obj, (childPath, childSnap)=>{
            tree = tree.set(new $ae31471d52481ece$var$Path(childPath), childSnap);
        });
        return tree;
    }
    constructor(value, children = $ae31471d52481ece$var$EmptyChildren()){
        this.value = value;
        this.children = children;
    }
    /**
     * True if the value is empty and there are no children
     */ isEmpty() {
        return this.value === null && this.children.isEmpty();
    }
    /**
     * Given a path and predicate, return the first node and the path to that node
     * where the predicate returns true.
     *
     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`
     * objects on the way back out, it may be better to pass down a pathSoFar obj.
     *
     * @param relativePath - The remainder of the path
     * @param predicate - The predicate to satisfy to return a node
     */ findRootMostMatchingPathAndValue(relativePath, predicate) {
        if (this.value != null && predicate(this.value)) return {
            path: $ae31471d52481ece$var$newEmptyPath(),
            value: this.value
        };
        else {
            if ($ae31471d52481ece$var$pathIsEmpty(relativePath)) return null;
            else {
                const front = $ae31471d52481ece$var$pathGetFront(relativePath);
                const child = this.children.get(front);
                if (child !== null) {
                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue($ae31471d52481ece$var$pathPopFront(relativePath), predicate);
                    if (childExistingPathAndValue != null) {
                        const fullPath = $ae31471d52481ece$var$pathChild(new $ae31471d52481ece$var$Path(front), childExistingPathAndValue.path);
                        return {
                            path: fullPath,
                            value: childExistingPathAndValue.value
                        };
                    } else return null;
                } else return null;
            }
        }
    }
    /**
     * Find, if it exists, the shortest subpath of the given path that points a defined
     * value in the tree
     */ findRootMostValueAndPath(relativePath) {
        return this.findRootMostMatchingPathAndValue(relativePath, ()=>true);
    }
    /**
     * @returns The subtree at the given path
     */ subtree(relativePath) {
        if ($ae31471d52481ece$var$pathIsEmpty(relativePath)) return this;
        else {
            const front = $ae31471d52481ece$var$pathGetFront(relativePath);
            const childTree = this.children.get(front);
            if (childTree !== null) return childTree.subtree($ae31471d52481ece$var$pathPopFront(relativePath));
            else return new $ae31471d52481ece$var$ImmutableTree(null);
        }
    }
    /**
     * Sets a value at the specified path.
     *
     * @param relativePath - Path to set value at.
     * @param toSet - Value to set.
     * @returns Resulting tree.
     */ set(relativePath, toSet) {
        if ($ae31471d52481ece$var$pathIsEmpty(relativePath)) return new $ae31471d52481ece$var$ImmutableTree(toSet, this.children);
        else {
            const front = $ae31471d52481ece$var$pathGetFront(relativePath);
            const child = this.children.get(front) || new $ae31471d52481ece$var$ImmutableTree(null);
            const newChild = child.set($ae31471d52481ece$var$pathPopFront(relativePath), toSet);
            const newChildren = this.children.insert(front, newChild);
            return new $ae31471d52481ece$var$ImmutableTree(this.value, newChildren);
        }
    }
    /**
     * Removes the value at the specified path.
     *
     * @param relativePath - Path to value to remove.
     * @returns Resulting tree.
     */ remove(relativePath) {
        if ($ae31471d52481ece$var$pathIsEmpty(relativePath)) {
            if (this.children.isEmpty()) return new $ae31471d52481ece$var$ImmutableTree(null);
            else return new $ae31471d52481ece$var$ImmutableTree(null, this.children);
        } else {
            const front = $ae31471d52481ece$var$pathGetFront(relativePath);
            const child = this.children.get(front);
            if (child) {
                const newChild = child.remove($ae31471d52481ece$var$pathPopFront(relativePath));
                let newChildren;
                if (newChild.isEmpty()) newChildren = this.children.remove(front);
                else newChildren = this.children.insert(front, newChild);
                if (this.value === null && newChildren.isEmpty()) return new $ae31471d52481ece$var$ImmutableTree(null);
                else return new $ae31471d52481ece$var$ImmutableTree(this.value, newChildren);
            } else return this;
        }
    }
    /**
     * Gets a value from the tree.
     *
     * @param relativePath - Path to get value for.
     * @returns Value at path, or null.
     */ get(relativePath) {
        if ($ae31471d52481ece$var$pathIsEmpty(relativePath)) return this.value;
        else {
            const front = $ae31471d52481ece$var$pathGetFront(relativePath);
            const child = this.children.get(front);
            if (child) return child.get($ae31471d52481ece$var$pathPopFront(relativePath));
            else return null;
        }
    }
    /**
     * Replace the subtree at the specified path with the given new tree.
     *
     * @param relativePath - Path to replace subtree for.
     * @param newTree - New tree.
     * @returns Resulting tree.
     */ setTree(relativePath, newTree) {
        if ($ae31471d52481ece$var$pathIsEmpty(relativePath)) return newTree;
        else {
            const front = $ae31471d52481ece$var$pathGetFront(relativePath);
            const child = this.children.get(front) || new $ae31471d52481ece$var$ImmutableTree(null);
            const newChild = child.setTree($ae31471d52481ece$var$pathPopFront(relativePath), newTree);
            let newChildren;
            if (newChild.isEmpty()) newChildren = this.children.remove(front);
            else newChildren = this.children.insert(front, newChild);
            return new $ae31471d52481ece$var$ImmutableTree(this.value, newChildren);
        }
    }
    /**
     * Performs a depth first fold on this tree. Transforms a tree into a single
     * value, given a function that operates on the path to a node, an optional
     * current value, and a map of child names to folded subtrees
     */ fold(fn) {
        return this.fold_($ae31471d52481ece$var$newEmptyPath(), fn);
    }
    /**
     * Recursive helper for public-facing fold() method
     */ fold_(pathSoFar, fn) {
        const accum = {};
        this.children.inorderTraversal((childKey, childTree)=>{
            accum[childKey] = childTree.fold_($ae31471d52481ece$var$pathChild(pathSoFar, childKey), fn);
        });
        return fn(pathSoFar, this.value, accum);
    }
    /**
     * Find the first matching value on the given path. Return the result of applying f to it.
     */ findOnPath(path, f) {
        return this.findOnPath_(path, $ae31471d52481ece$var$newEmptyPath(), f);
    }
    findOnPath_(pathToFollow, pathSoFar, f) {
        const result = this.value ? f(pathSoFar, this.value) : false;
        if (result) return result;
        else {
            if ($ae31471d52481ece$var$pathIsEmpty(pathToFollow)) return null;
            else {
                const front = $ae31471d52481ece$var$pathGetFront(pathToFollow);
                const nextChild = this.children.get(front);
                if (nextChild) return nextChild.findOnPath_($ae31471d52481ece$var$pathPopFront(pathToFollow), $ae31471d52481ece$var$pathChild(pathSoFar, front), f);
                else return null;
            }
        }
    }
    foreachOnPath(path, f) {
        return this.foreachOnPath_(path, $ae31471d52481ece$var$newEmptyPath(), f);
    }
    foreachOnPath_(pathToFollow, currentRelativePath, f) {
        if ($ae31471d52481ece$var$pathIsEmpty(pathToFollow)) return this;
        else {
            if (this.value) f(currentRelativePath, this.value);
            const front = $ae31471d52481ece$var$pathGetFront(pathToFollow);
            const nextChild = this.children.get(front);
            if (nextChild) return nextChild.foreachOnPath_($ae31471d52481ece$var$pathPopFront(pathToFollow), $ae31471d52481ece$var$pathChild(currentRelativePath, front), f);
            else return new $ae31471d52481ece$var$ImmutableTree(null);
        }
    }
    /**
     * Calls the given function for each node in the tree that has a value.
     *
     * @param f - A function to be called with the path from the root of the tree to
     * a node, and the value at that node. Called in depth-first order.
     */ foreach(f) {
        this.foreach_($ae31471d52481ece$var$newEmptyPath(), f);
    }
    foreach_(currentRelativePath, f) {
        this.children.inorderTraversal((childName, childTree)=>{
            childTree.foreach_($ae31471d52481ece$var$pathChild(currentRelativePath, childName), f);
        });
        if (this.value) f(currentRelativePath, this.value);
    }
    foreachChild(f) {
        this.children.inorderTraversal((childName, childTree)=>{
            if (childTree.value) f(childName, childTree.value);
        });
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with
 * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write
 * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write
 * to reflect the write added.
 */ class $ae31471d52481ece$var$CompoundWrite {
    constructor(writeTree_){
        this.writeTree_ = writeTree_;
    }
    static empty() {
        return new $ae31471d52481ece$var$CompoundWrite(new $ae31471d52481ece$var$ImmutableTree(null));
    }
}
function $ae31471d52481ece$var$compoundWriteAddWrite(compoundWrite, path, node) {
    if ($ae31471d52481ece$var$pathIsEmpty(path)) return new $ae31471d52481ece$var$CompoundWrite(new $ae31471d52481ece$var$ImmutableTree(node));
    else {
        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);
        if (rootmost != null) {
            const rootMostPath = rootmost.path;
            let value = rootmost.value;
            const relativePath = $ae31471d52481ece$var$newRelativePath(rootMostPath, path);
            value = value.updateChild(relativePath, node);
            return new $ae31471d52481ece$var$CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));
        } else {
            const subtree = new $ae31471d52481ece$var$ImmutableTree(node);
            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);
            return new $ae31471d52481ece$var$CompoundWrite(newWriteTree);
        }
    }
}
function $ae31471d52481ece$var$compoundWriteAddWrites(compoundWrite, path, updates) {
    let newWrite = compoundWrite;
    $ae31471d52481ece$var$each(updates, (childKey, node)=>{
        newWrite = $ae31471d52481ece$var$compoundWriteAddWrite(newWrite, $ae31471d52481ece$var$pathChild(path, childKey), node);
    });
    return newWrite;
}
/**
 * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher
 * location, which must be removed by calling this method with that path.
 *
 * @param compoundWrite - The CompoundWrite to remove.
 * @param path - The path at which a write and all deeper writes should be removed
 * @returns The new CompoundWrite with the removed path
 */ function $ae31471d52481ece$var$compoundWriteRemoveWrite(compoundWrite, path) {
    if ($ae31471d52481ece$var$pathIsEmpty(path)) return $ae31471d52481ece$var$CompoundWrite.empty();
    else {
        const newWriteTree = compoundWrite.writeTree_.setTree(path, new $ae31471d52481ece$var$ImmutableTree(null));
        return new $ae31471d52481ece$var$CompoundWrite(newWriteTree);
    }
}
/**
 * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be
 * considered "complete".
 *
 * @param compoundWrite - The CompoundWrite to check.
 * @param path - The path to check for
 * @returns Whether there is a complete write at that path
 */ function $ae31471d52481ece$var$compoundWriteHasCompleteWrite(compoundWrite, path) {
    return $ae31471d52481ece$var$compoundWriteGetCompleteNode(compoundWrite, path) != null;
}
/**
 * Returns a node for a path if and only if the node is a "complete" overwrite at that path. This will not aggregate
 * writes from deeper paths, but will return child nodes from a more shallow path.
 *
 * @param compoundWrite - The CompoundWrite to get the node from.
 * @param path - The path to get a complete write
 * @returns The node if complete at that path, or null otherwise.
 */ function $ae31471d52481ece$var$compoundWriteGetCompleteNode(compoundWrite, path) {
    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);
    if (rootmost != null) return compoundWrite.writeTree_.get(rootmost.path).getChild($ae31471d52481ece$var$newRelativePath(rootmost.path, path));
    else return null;
}
/**
 * Returns all children that are guaranteed to be a complete overwrite.
 *
 * @param compoundWrite - The CompoundWrite to get children from.
 * @returns A list of all complete children.
 */ function $ae31471d52481ece$var$compoundWriteGetCompleteChildren(compoundWrite) {
    const children = [];
    const node = compoundWrite.writeTree_.value;
    if (node != null) // If it's a leaf node, it has no children; so nothing to do.
    {
        if (!node.isLeafNode()) node.forEachChild($ae31471d52481ece$var$PRIORITY_INDEX, (childName, childNode)=>{
            children.push(new $ae31471d52481ece$var$NamedNode(childName, childNode));
        });
    } else compoundWrite.writeTree_.children.inorderTraversal((childName, childTree)=>{
        if (childTree.value != null) children.push(new $ae31471d52481ece$var$NamedNode(childName, childTree.value));
    });
    return children;
}
function $ae31471d52481ece$var$compoundWriteChildCompoundWrite(compoundWrite, path) {
    if ($ae31471d52481ece$var$pathIsEmpty(path)) return compoundWrite;
    else {
        const shadowingNode = $ae31471d52481ece$var$compoundWriteGetCompleteNode(compoundWrite, path);
        if (shadowingNode != null) return new $ae31471d52481ece$var$CompoundWrite(new $ae31471d52481ece$var$ImmutableTree(shadowingNode));
        else return new $ae31471d52481ece$var$CompoundWrite(compoundWrite.writeTree_.subtree(path));
    }
}
/**
 * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.
 * @returns Whether this CompoundWrite is empty
 */ function $ae31471d52481ece$var$compoundWriteIsEmpty(compoundWrite) {
    return compoundWrite.writeTree_.isEmpty();
}
/**
 * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the
 * node
 * @param node - The node to apply this CompoundWrite to
 * @returns The node with all writes applied
 */ function $ae31471d52481ece$var$compoundWriteApply(compoundWrite, node) {
    return $ae31471d52481ece$var$applySubtreeWrite($ae31471d52481ece$var$newEmptyPath(), compoundWrite.writeTree_, node);
}
function $ae31471d52481ece$var$applySubtreeWrite(relativePath, writeTree, node) {
    if (writeTree.value != null) // Since there a write is always a leaf, we're done here
    return node.updateChild(relativePath, writeTree.value);
    else {
        let priorityWrite = null;
        writeTree.children.inorderTraversal((childKey, childTree)=>{
            if (childKey === '.priority') {
                // Apply priorities at the end so we don't update priorities for either empty nodes or forget
                // to apply priorities to empty nodes that are later filled
                (0, $ee1ab2624407a779$export$a7a9523472993e97)(childTree.value !== null, 'Priority writes must always be leaf nodes');
                priorityWrite = childTree.value;
            } else node = $ae31471d52481ece$var$applySubtreeWrite($ae31471d52481ece$var$pathChild(relativePath, childKey), childTree, node);
        });
        // If there was a priority write, we only apply it if the node is not empty
        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) node = node.updateChild($ae31471d52481ece$var$pathChild(relativePath, '.priority'), priorityWrite);
        return node;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.
 *
 */ function $ae31471d52481ece$var$writeTreeChildWrites(writeTree, path) {
    return $ae31471d52481ece$var$newWriteTreeRef(path, writeTree);
}
/**
 * Record a new overwrite from user code.
 *
 * @param visible - This is set to false by some transactions. It should be excluded from event caches
 */ function $ae31471d52481ece$var$writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {
    (0, $ee1ab2624407a779$export$a7a9523472993e97)(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');
    if (visible === undefined) visible = true;
    writeTree.allWrites.push({
        path: path,
        snap: snap,
        writeId: writeId,
        visible: visible
    });
    if (visible) writeTree.visibleWrites = $ae31471d52481ece$var$compoundWriteAddWrite(writeTree.visibleWrites, path, snap);
    writeTree.lastWriteId = writeId;
}
/**
 * Record a new merge from user code.
 */ function $ae31471d52481ece$var$writeTreeAddMerge(writeTree, path, changedChildren, writeId) {
    (0, $ee1ab2624407a779$export$a7a9523472993e97)(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');
    writeTree.allWrites.push({
        path: path,
        children: changedChildren,
        writeId: writeId,
        visible: true
    });
    writeTree.visibleWrites = $ae31471d52481ece$var$compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);
    writeTree.lastWriteId = writeId;
}
function $ae31471d52481ece$var$writeTreeGetWrite(writeTree, writeId) {
    for(let i = 0; i < writeTree.allWrites.length; i++){
        const record = writeTree.allWrites[i];
        if (record.writeId === writeId) return record;
    }
    return null;
}
/**
 * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates
 * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.
 *
 * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise
 * events as a result).
 */ function $ae31471d52481ece$var$writeTreeRemoveWrite(writeTree, writeId) {
    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied
    // out of order.
    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;
    //assert(validClear, "Either we don't have this write, or it's the first one in the queue");
    const idx = writeTree.allWrites.findIndex((s)=>{
        return s.writeId === writeId;
    });
    (0, $ee1ab2624407a779$export$a7a9523472993e97)(idx >= 0, 'removeWrite called with nonexistent writeId.');
    const writeToRemove = writeTree.allWrites[idx];
    writeTree.allWrites.splice(idx, 1);
    let removedWriteWasVisible = writeToRemove.visible;
    let removedWriteOverlapsWithOtherWrites = false;
    let i = writeTree.allWrites.length - 1;
    while(removedWriteWasVisible && i >= 0){
        const currentWrite = writeTree.allWrites[i];
        if (currentWrite.visible) {
            if (i >= idx && $ae31471d52481ece$var$writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) // The removed write was completely shadowed by a subsequent write.
            removedWriteWasVisible = false;
            else if ($ae31471d52481ece$var$pathContains(writeToRemove.path, currentWrite.path)) // Either we're covering some writes or they're covering part of us (depending on which came first).
            removedWriteOverlapsWithOtherWrites = true;
        }
        i--;
    }
    if (!removedWriteWasVisible) return false;
    else if (removedWriteOverlapsWithOtherWrites) {
        // There's some shadowing going on. Just rebuild the visible writes from scratch.
        $ae31471d52481ece$var$writeTreeResetTree_(writeTree);
        return true;
    } else {
        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.
        if (writeToRemove.snap) writeTree.visibleWrites = $ae31471d52481ece$var$compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);
        else {
            const children = writeToRemove.children;
            $ae31471d52481ece$var$each(children, (childName)=>{
                writeTree.visibleWrites = $ae31471d52481ece$var$compoundWriteRemoveWrite(writeTree.visibleWrites, $ae31471d52481ece$var$pathChild(writeToRemove.path, childName));
            });
        }
        return true;
    }
}
function $ae31471d52481ece$var$writeTreeRecordContainsPath_(writeRecord, path) {
    if (writeRecord.snap) return $ae31471d52481ece$var$pathContains(writeRecord.path, path);
    else {
        for(const childName in writeRecord.children){
            if (writeRecord.children.hasOwnProperty(childName) && $ae31471d52481ece$var$pathContains($ae31471d52481ece$var$pathChild(writeRecord.path, childName), path)) return true;
        }
        return false;
    }
}
/**
 * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots
 */ function $ae31471d52481ece$var$writeTreeResetTree_(writeTree) {
    writeTree.visibleWrites = $ae31471d52481ece$var$writeTreeLayerTree_(writeTree.allWrites, $ae31471d52481ece$var$writeTreeDefaultFilter_, $ae31471d52481ece$var$newEmptyPath());
    if (writeTree.allWrites.length > 0) writeTree.lastWriteId = writeTree.allWrites[writeTree.allWrites.length - 1].writeId;
    else writeTree.lastWriteId = -1;
}
/**
 * The default filter used when constructing the tree. Keep everything that's visible.
 */ function $ae31471d52481ece$var$writeTreeDefaultFilter_(write) {
    return write.visible;
}
/**
 * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of
 * event data at that path.
 */ function $ae31471d52481ece$var$writeTreeLayerTree_(writes, filter, treeRoot) {
    let compoundWrite = $ae31471d52481ece$var$CompoundWrite.empty();
    for(let i = 0; i < writes.length; ++i){
        const write = writes[i];
        // Theory, a later set will either:
        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction
        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction
        if (filter(write)) {
            const writePath = write.path;
            let relativePath;
            if (write.snap) {
                if ($ae31471d52481ece$var$pathContains(treeRoot, writePath)) {
                    relativePath = $ae31471d52481ece$var$newRelativePath(treeRoot, writePath);
                    compoundWrite = $ae31471d52481ece$var$compoundWriteAddWrite(compoundWrite, relativePath, write.snap);
                } else if ($ae31471d52481ece$var$pathContains(writePath, treeRoot)) {
                    relativePath = $ae31471d52481ece$var$newRelativePath(writePath, treeRoot);
                    compoundWrite = $ae31471d52481ece$var$compoundWriteAddWrite(compoundWrite, $ae31471d52481ece$var$newEmptyPath(), write.snap.getChild(relativePath));
                }
            } else if (write.children) {
                if ($ae31471d52481ece$var$pathContains(treeRoot, writePath)) {
                    relativePath = $ae31471d52481ece$var$newRelativePath(treeRoot, writePath);
                    compoundWrite = $ae31471d52481ece$var$compoundWriteAddWrites(compoundWrite, relativePath, write.children);
                } else if ($ae31471d52481ece$var$pathContains(writePath, treeRoot)) {
                    relativePath = $ae31471d52481ece$var$newRelativePath(writePath, treeRoot);
                    if ($ae31471d52481ece$var$pathIsEmpty(relativePath)) compoundWrite = $ae31471d52481ece$var$compoundWriteAddWrites(compoundWrite, $ae31471d52481ece$var$newEmptyPath(), write.children);
                    else {
                        const child = (0, $ee1ab2624407a779$export$e51ae4db7b428f67)(write.children, $ae31471d52481ece$var$pathGetFront(relativePath));
                        if (child) {
                            // There exists a child in this node that matches the root path
                            const deepNode = child.getChild($ae31471d52481ece$var$pathPopFront(relativePath));
                            compoundWrite = $ae31471d52481ece$var$compoundWriteAddWrite(compoundWrite, $ae31471d52481ece$var$newEmptyPath(), deepNode);
                        }
                    }
                }
            } else throw (0, $ee1ab2624407a779$export$a39cad550e7ab28a)('WriteRecord should have .snap or .children');
        }
    }
    return compoundWrite;
}
/**
 * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden
 * writes), attempt to calculate a complete snapshot for the given path
 *
 * @param writeIdsToExclude - An optional set to be excluded
 * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false
 */ function $ae31471d52481ece$var$writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
    if (!writeIdsToExclude && !includeHiddenWrites) {
        const shadowingNode = $ae31471d52481ece$var$compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);
        if (shadowingNode != null) return shadowingNode;
        else {
            const subMerge = $ae31471d52481ece$var$compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
            if ($ae31471d52481ece$var$compoundWriteIsEmpty(subMerge)) return completeServerCache;
            else if (completeServerCache == null && !$ae31471d52481ece$var$compoundWriteHasCompleteWrite(subMerge, $ae31471d52481ece$var$newEmptyPath())) // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow
            return null;
            else {
                const layeredCache = completeServerCache || $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE;
                return $ae31471d52481ece$var$compoundWriteApply(subMerge, layeredCache);
            }
        }
    } else {
        const merge = $ae31471d52481ece$var$compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
        if (!includeHiddenWrites && $ae31471d52481ece$var$compoundWriteIsEmpty(merge)) return completeServerCache;
        else {
            // If the server cache is null, and we don't have a complete cache, we need to return null
            if (!includeHiddenWrites && completeServerCache == null && !$ae31471d52481ece$var$compoundWriteHasCompleteWrite(merge, $ae31471d52481ece$var$newEmptyPath())) return null;
            else {
                const filter = function(write) {
                    return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && ($ae31471d52481ece$var$pathContains(write.path, treePath) || $ae31471d52481ece$var$pathContains(treePath, write.path));
                };
                const mergeAtPath = $ae31471d52481ece$var$writeTreeLayerTree_(writeTree.allWrites, filter, treePath);
                const layeredCache = completeServerCache || $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE;
                return $ae31471d52481ece$var$compoundWriteApply(mergeAtPath, layeredCache);
            }
        }
    }
}
/**
 * With optional, underlying server data, attempt to return a children node of children that we have complete data for.
 * Used when creating new views, to pre-fill their complete event children snapshot.
 */ function $ae31471d52481ece$var$writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {
    let completeChildren = $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE;
    const topLevelSet = $ae31471d52481ece$var$compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);
    if (topLevelSet) {
        if (!topLevelSet.isLeafNode()) // we're shadowing everything. Return the children.
        topLevelSet.forEachChild($ae31471d52481ece$var$PRIORITY_INDEX, (childName, childSnap)=>{
            completeChildren = completeChildren.updateImmediateChild(childName, childSnap);
        });
        return completeChildren;
    } else if (completeServerChildren) {
        // Layer any children we have on top of this
        // We know we don't have a top-level set, so just enumerate existing children
        const merge = $ae31471d52481ece$var$compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
        completeServerChildren.forEachChild($ae31471d52481ece$var$PRIORITY_INDEX, (childName, childNode)=>{
            const node = $ae31471d52481ece$var$compoundWriteApply($ae31471d52481ece$var$compoundWriteChildCompoundWrite(merge, new $ae31471d52481ece$var$Path(childName)), childNode);
            completeChildren = completeChildren.updateImmediateChild(childName, node);
        });
        // Add any complete children we have from the set
        $ae31471d52481ece$var$compoundWriteGetCompleteChildren(merge).forEach((namedNode)=>{
            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
        });
        return completeChildren;
    } else {
        // We don't have anything to layer on top of. Layer on any children we have
        // Note that we can return an empty snap if we have a defined delete
        const merge = $ae31471d52481ece$var$compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
        $ae31471d52481ece$var$compoundWriteGetCompleteChildren(merge).forEach((namedNode)=>{
            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
        });
        return completeChildren;
    }
}
/**
 * Given that the underlying server data has updated, determine what, if anything, needs to be
 * applied to the event cache.
 *
 * Possibilities:
 *
 * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
 *
 * 2. Some write is completely shadowing. No events to be raised
 *
 * 3. Is partially shadowed. Events
 *
 * Either existingEventSnap or existingServerSnap must exist
 */ function $ae31471d52481ece$var$writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {
    (0, $ee1ab2624407a779$export$a7a9523472993e97)(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');
    const path = $ae31471d52481ece$var$pathChild(treePath, childPath);
    if ($ae31471d52481ece$var$compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) // At this point we can probably guarantee that we're in case 2, meaning no events
    // May need to check visibility while doing the findRootMostValueAndPath call
    return null;
    else {
        // No complete shadowing. We're either partially shadowing or not shadowing at all.
        const childMerge = $ae31471d52481ece$var$compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);
        if ($ae31471d52481ece$var$compoundWriteIsEmpty(childMerge)) // We're not shadowing at all. Case 1
        return existingServerSnap.getChild(childPath);
        else // This could be more efficient if the serverNode + updates doesn't change the eventSnap
        // However this is tricky to find out, since user updates don't necessary change the server
        // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server
        // adds nodes, but doesn't change any existing writes. It is therefore not enough to
        // only check if the updates change the serverNode.
        // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?
        return $ae31471d52481ece$var$compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));
    }
}
/**
 * Returns a complete child for a given server snap after applying all user writes or null if there is no
 * complete child for this ChildKey.
 */ function $ae31471d52481ece$var$writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {
    const path = $ae31471d52481ece$var$pathChild(treePath, childKey);
    const shadowingNode = $ae31471d52481ece$var$compoundWriteGetCompleteNode(writeTree.visibleWrites, path);
    if (shadowingNode != null) return shadowingNode;
    else {
        if (existingServerSnap.isCompleteForChild(childKey)) {
            const childMerge = $ae31471d52481ece$var$compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);
            return $ae31471d52481ece$var$compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));
        } else return null;
    }
}
/**
 * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
 * a higher path, this will return the child of that write relative to the write and this path.
 * Returns null if there is no write at this path.
 */ function $ae31471d52481ece$var$writeTreeShadowingWrite(writeTree, path) {
    return $ae31471d52481ece$var$compoundWriteGetCompleteNode(writeTree.visibleWrites, path);
}
/**
 * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
 * the window, but may now be in the window.
 */ function $ae31471d52481ece$var$writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {
    let toIterate;
    const merge = $ae31471d52481ece$var$compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
    const shadowingNode = $ae31471d52481ece$var$compoundWriteGetCompleteNode(merge, $ae31471d52481ece$var$newEmptyPath());
    if (shadowingNode != null) toIterate = shadowingNode;
    else if (completeServerData != null) toIterate = $ae31471d52481ece$var$compoundWriteApply(merge, completeServerData);
    else // no children to iterate on
    return [];
    toIterate = toIterate.withIndex(index);
    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {
        const nodes = [];
        const cmp = index.getCompare();
        const iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);
        let next = iter.getNext();
        while(next && nodes.length < count){
            if (cmp(next, startPost) !== 0) nodes.push(next);
            next = iter.getNext();
        }
        return nodes;
    } else return [];
}
function $ae31471d52481ece$var$newWriteTree() {
    return {
        visibleWrites: $ae31471d52481ece$var$CompoundWrite.empty(),
        allWrites: [],
        lastWriteId: -1
    };
}
/**
 * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used
 * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node
 * can lead to a more expensive calculation.
 *
 * @param writeIdsToExclude - Optional writes to exclude.
 * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false
 */ function $ae31471d52481ece$var$writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
    return $ae31471d52481ece$var$writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);
}
/**
 * If possible, returns a children node containing all of the complete children we have data for. The returned data is a
 * mix of the given server data and write data.
 *
 */ function $ae31471d52481ece$var$writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {
    return $ae31471d52481ece$var$writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);
}
/**
 * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,
 * if anything, needs to be applied to the event cache.
 *
 * Possibilities:
 *
 * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data
 *
 * 2. Some write is completely shadowing. No events to be raised
 *
 * 3. Is partially shadowed. Events should be raised
 *
 * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert
 *
 *
 */ function $ae31471d52481ece$var$writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {
    return $ae31471d52481ece$var$writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);
}
/**
 * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at
 * a higher path, this will return the child of that write relative to the write and this path.
 * Returns null if there is no write at this path.
 *
 */ function $ae31471d52481ece$var$writeTreeRefShadowingWrite(writeTreeRef, path) {
    return $ae31471d52481ece$var$writeTreeShadowingWrite(writeTreeRef.writeTree, $ae31471d52481ece$var$pathChild(writeTreeRef.treePath, path));
}
/**
 * This method is used when processing child remove events on a query. If we can, we pull in children that were outside
 * the window, but may now be in the window
 */ function $ae31471d52481ece$var$writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {
    return $ae31471d52481ece$var$writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);
}
/**
 * Returns a complete child for a given server snap after applying all user writes or null if there is no
 * complete child for this ChildKey.
 */ function $ae31471d52481ece$var$writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {
    return $ae31471d52481ece$var$writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);
}
/**
 * Return a WriteTreeRef for a child.
 */ function $ae31471d52481ece$var$writeTreeRefChild(writeTreeRef, childName) {
    return $ae31471d52481ece$var$newWriteTreeRef($ae31471d52481ece$var$pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);
}
function $ae31471d52481ece$var$newWriteTreeRef(path, writeTree) {
    return {
        treePath: path,
        writeTree: writeTree
    };
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $ae31471d52481ece$var$ChildChangeAccumulator {
    constructor(){
        this.changeMap = new Map();
    }
    trackChildChange(change) {
        const type = change.type;
        const childKey = change.childName;
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(type === "child_added" /* ChangeType.CHILD_ADDED */  || type === "child_changed" /* ChangeType.CHILD_CHANGED */  || type === "child_removed" /* ChangeType.CHILD_REMOVED */ , 'Only child changes supported for tracking');
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(childKey !== '.priority', 'Only non-priority child changes can be tracked.');
        const oldChange = this.changeMap.get(childKey);
        if (oldChange) {
            const oldType = oldChange.type;
            if (type === "child_added" /* ChangeType.CHILD_ADDED */  && oldType === "child_removed" /* ChangeType.CHILD_REMOVED */ ) this.changeMap.set(childKey, $ae31471d52481ece$var$changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));
            else if (type === "child_removed" /* ChangeType.CHILD_REMOVED */  && oldType === "child_added" /* ChangeType.CHILD_ADDED */ ) this.changeMap.delete(childKey);
            else if (type === "child_removed" /* ChangeType.CHILD_REMOVED */  && oldType === "child_changed" /* ChangeType.CHILD_CHANGED */ ) this.changeMap.set(childKey, $ae31471d52481ece$var$changeChildRemoved(childKey, oldChange.oldSnap));
            else if (type === "child_changed" /* ChangeType.CHILD_CHANGED */  && oldType === "child_added" /* ChangeType.CHILD_ADDED */ ) this.changeMap.set(childKey, $ae31471d52481ece$var$changeChildAdded(childKey, change.snapshotNode));
            else if (type === "child_changed" /* ChangeType.CHILD_CHANGED */  && oldType === "child_changed" /* ChangeType.CHILD_CHANGED */ ) this.changeMap.set(childKey, $ae31471d52481ece$var$changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));
            else throw (0, $ee1ab2624407a779$export$a39cad550e7ab28a)('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);
        } else this.changeMap.set(childKey, change);
    }
    getChanges() {
        return Array.from(this.changeMap.values());
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An implementation of CompleteChildSource that never returns any additional children
 */ // eslint-disable-next-line @typescript-eslint/naming-convention
class $ae31471d52481ece$var$NoCompleteChildSource_ {
    getCompleteChild(childKey) {
        return null;
    }
    getChildAfterChild(index, child, reverse) {
        return null;
    }
}
/**
 * Singleton instance.
 */ const $ae31471d52481ece$var$NO_COMPLETE_CHILD_SOURCE = new $ae31471d52481ece$var$NoCompleteChildSource_();
/**
 * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or
 * old event caches available to calculate complete children.
 */ class $ae31471d52481ece$var$WriteTreeCompleteChildSource {
    constructor(writes_, viewCache_, optCompleteServerCache_ = null){
        this.writes_ = writes_;
        this.viewCache_ = viewCache_;
        this.optCompleteServerCache_ = optCompleteServerCache_;
    }
    getCompleteChild(childKey) {
        const node = this.viewCache_.eventCache;
        if (node.isCompleteForChild(childKey)) return node.getNode().getImmediateChild(childKey);
        else {
            const serverNode = this.optCompleteServerCache_ != null ? new $ae31471d52481ece$var$CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.serverCache;
            return $ae31471d52481ece$var$writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);
        }
    }
    getChildAfterChild(index, child, reverse) {
        const completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : $ae31471d52481ece$var$viewCacheGetCompleteServerSnap(this.viewCache_);
        const nodes = $ae31471d52481ece$var$writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);
        if (nodes.length === 0) return null;
        else return nodes[0];
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $ae31471d52481ece$var$newViewProcessor(filter) {
    return {
        filter: filter
    };
}
function $ae31471d52481ece$var$viewProcessorAssertIndexed(viewProcessor, viewCache) {
    (0, $ee1ab2624407a779$export$a7a9523472993e97)(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');
    (0, $ee1ab2624407a779$export$a7a9523472993e97)(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');
}
function $ae31471d52481ece$var$viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {
    const accumulator = new $ae31471d52481ece$var$ChildChangeAccumulator();
    let newViewCache, filterServerNode;
    if (operation.type === $ae31471d52481ece$var$OperationType.OVERWRITE) {
        const overwrite = operation;
        if (overwrite.source.fromUser) newViewCache = $ae31471d52481ece$var$viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);
        else {
            (0, $ee1ab2624407a779$export$a7a9523472993e97)(overwrite.source.fromServer, 'Unknown source.');
            // We filter the node if it's a tagged update or the node has been previously filtered  and the
            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered
            // again
            filterServerNode = overwrite.source.tagged || oldViewCache.serverCache.isFiltered() && !$ae31471d52481ece$var$pathIsEmpty(overwrite.path);
            newViewCache = $ae31471d52481ece$var$viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);
        }
    } else if (operation.type === $ae31471d52481ece$var$OperationType.MERGE) {
        const merge = operation;
        if (merge.source.fromUser) newViewCache = $ae31471d52481ece$var$viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);
        else {
            (0, $ee1ab2624407a779$export$a7a9523472993e97)(merge.source.fromServer, 'Unknown source.');
            // We filter the node if it's a tagged update or the node has been previously filtered
            filterServerNode = merge.source.tagged || oldViewCache.serverCache.isFiltered();
            newViewCache = $ae31471d52481ece$var$viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);
        }
    } else if (operation.type === $ae31471d52481ece$var$OperationType.ACK_USER_WRITE) {
        const ackUserWrite = operation;
        if (!ackUserWrite.revert) newViewCache = $ae31471d52481ece$var$viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);
        else newViewCache = $ae31471d52481ece$var$viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);
    } else if (operation.type === $ae31471d52481ece$var$OperationType.LISTEN_COMPLETE) newViewCache = $ae31471d52481ece$var$viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);
    else throw (0, $ee1ab2624407a779$export$a39cad550e7ab28a)('Unknown operation type: ' + operation.type);
    const changes = accumulator.getChanges();
    $ae31471d52481ece$var$viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);
    return {
        viewCache: newViewCache,
        changes: changes
    };
}
function $ae31471d52481ece$var$viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {
    const eventSnap = newViewCache.eventCache;
    if (eventSnap.isFullyInitialized()) {
        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();
        const oldCompleteSnap = $ae31471d52481ece$var$viewCacheGetCompleteEventSnap(oldViewCache);
        if (accumulator.length > 0 || !oldViewCache.eventCache.isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) accumulator.push($ae31471d52481ece$var$changeValue($ae31471d52481ece$var$viewCacheGetCompleteEventSnap(newViewCache)));
    }
}
function $ae31471d52481ece$var$viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {
    const oldEventSnap = viewCache.eventCache;
    if ($ae31471d52481ece$var$writeTreeRefShadowingWrite(writesCache, changePath) != null) // we have a shadowing write, ignore changes
    return viewCache;
    else {
        let newEventCache, serverNode;
        if ($ae31471d52481ece$var$pathIsEmpty(changePath)) {
            // TODO: figure out how this plays with "sliding ack windows"
            (0, $ee1ab2624407a779$export$a7a9523472993e97)(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');
            if (viewCache.serverCache.isFiltered()) {
                // We need to special case this, because we need to only apply writes to complete children, or
                // we might end up raising events for incomplete children. If the server data is filtered deep
                // writes cannot be guaranteed to be complete
                const serverCache = $ae31471d52481ece$var$viewCacheGetCompleteServerSnap(viewCache);
                const completeChildren = serverCache instanceof $ae31471d52481ece$var$ChildrenNode ? serverCache : $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE;
                const completeEventChildren = $ae31471d52481ece$var$writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);
                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);
            } else {
                const completeNode = $ae31471d52481ece$var$writeTreeRefCalcCompleteEventCache(writesCache, $ae31471d52481ece$var$viewCacheGetCompleteServerSnap(viewCache));
                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);
            }
        } else {
            const childKey = $ae31471d52481ece$var$pathGetFront(changePath);
            if (childKey === '.priority') {
                (0, $ee1ab2624407a779$export$a7a9523472993e97)($ae31471d52481ece$var$pathGetLength(changePath) === 1, "Can't have a priority with additional path components");
                const oldEventNode = oldEventSnap.getNode();
                serverNode = viewCache.serverCache.getNode();
                // we might have overwrites for this priority
                const updatedPriority = $ae31471d52481ece$var$writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);
                if (updatedPriority != null) newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);
                else // priority didn't change, keep old node
                newEventCache = oldEventSnap.getNode();
            } else {
                const childChangePath = $ae31471d52481ece$var$pathPopFront(changePath);
                // update child
                let newEventChild;
                if (oldEventSnap.isCompleteForChild(childKey)) {
                    serverNode = viewCache.serverCache.getNode();
                    const eventChildUpdate = $ae31471d52481ece$var$writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);
                    if (eventChildUpdate != null) newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);
                    else // Nothing changed, just keep the old child
                    newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);
                } else newEventChild = $ae31471d52481ece$var$writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);
                if (newEventChild != null) newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);
                else // no complete child available or no change
                newEventCache = oldEventSnap.getNode();
            }
        }
        return $ae31471d52481ece$var$viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || $ae31471d52481ece$var$pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());
    }
}
function $ae31471d52481ece$var$viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {
    const oldServerSnap = oldViewCache.serverCache;
    let newServerCache;
    const serverFilter = filterServerNode ? viewProcessor.filter : viewProcessor.filter.getIndexedFilter();
    if ($ae31471d52481ece$var$pathIsEmpty(changePath)) newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);
    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {
        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update
        const newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);
        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);
    } else {
        const childKey = $ae31471d52481ece$var$pathGetFront(changePath);
        if (!oldServerSnap.isCompleteForPath(changePath) && $ae31471d52481ece$var$pathGetLength(changePath) > 1) // We don't update incomplete nodes with updates intended for other listeners
        return oldViewCache;
        const childChangePath = $ae31471d52481ece$var$pathPopFront(changePath);
        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);
        const newChildNode = childNode.updateChild(childChangePath, changedSnap);
        if (childKey === '.priority') newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);
        else newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, $ae31471d52481ece$var$NO_COMPLETE_CHILD_SOURCE, null);
    }
    const newViewCache = $ae31471d52481ece$var$viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || $ae31471d52481ece$var$pathIsEmpty(changePath), serverFilter.filtersNodes());
    const source = new $ae31471d52481ece$var$WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);
    return $ae31471d52481ece$var$viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);
}
function $ae31471d52481ece$var$viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {
    const oldEventSnap = oldViewCache.eventCache;
    let newViewCache, newEventCache;
    const source = new $ae31471d52481ece$var$WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);
    if ($ae31471d52481ece$var$pathIsEmpty(changePath)) {
        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);
        newViewCache = $ae31471d52481ece$var$viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());
    } else {
        const childKey = $ae31471d52481ece$var$pathGetFront(changePath);
        if (childKey === '.priority') {
            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);
            newViewCache = $ae31471d52481ece$var$viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());
        } else {
            const childChangePath = $ae31471d52481ece$var$pathPopFront(changePath);
            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);
            let newChild;
            if ($ae31471d52481ece$var$pathIsEmpty(childChangePath)) // Child overwrite, we can replace the child
            newChild = changedSnap;
            else {
                const childNode = source.getCompleteChild(childKey);
                if (childNode != null) {
                    if ($ae31471d52481ece$var$pathGetBack(childChangePath) === '.priority' && childNode.getChild($ae31471d52481ece$var$pathParent(childChangePath)).isEmpty()) // This is a priority update on an empty node. If this node exists on the server, the
                    // server will send down the priority in the update, so ignore for now
                    newChild = childNode;
                    else newChild = childNode.updateChild(childChangePath, changedSnap);
                } else // There is no complete child node available
                newChild = $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE;
            }
            if (!oldChild.equals(newChild)) {
                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);
                newViewCache = $ae31471d52481ece$var$viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());
            } else newViewCache = oldViewCache;
        }
    }
    return newViewCache;
}
function $ae31471d52481ece$var$viewProcessorCacheHasChild(viewCache, childKey) {
    return viewCache.eventCache.isCompleteForChild(childKey);
}
function $ae31471d52481ece$var$viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {
    // HACK: In the case of a limit query, there may be some changes that bump things out of the
    // window leaving room for new items.  It's important we process these changes first, so we
    // iterate the changes twice, first processing any that affect items currently in view.
    // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
    // not the other.
    let curViewCache = viewCache;
    changedChildren.foreach((relativePath, childNode)=>{
        const writePath = $ae31471d52481ece$var$pathChild(path, relativePath);
        if ($ae31471d52481ece$var$viewProcessorCacheHasChild(viewCache, $ae31471d52481ece$var$pathGetFront(writePath))) curViewCache = $ae31471d52481ece$var$viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
    });
    changedChildren.foreach((relativePath, childNode)=>{
        const writePath = $ae31471d52481ece$var$pathChild(path, relativePath);
        if (!$ae31471d52481ece$var$viewProcessorCacheHasChild(viewCache, $ae31471d52481ece$var$pathGetFront(writePath))) curViewCache = $ae31471d52481ece$var$viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
    });
    return curViewCache;
}
function $ae31471d52481ece$var$viewProcessorApplyMerge(viewProcessor, node, merge) {
    merge.foreach((relativePath, childNode)=>{
        node = node.updateChild(relativePath, childNode);
    });
    return node;
}
function $ae31471d52481ece$var$viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {
    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and
    // wait for the complete data update coming soon.
    if (viewCache.serverCache.getNode().isEmpty() && !viewCache.serverCache.isFullyInitialized()) return viewCache;
    // HACK: In the case of a limit query, there may be some changes that bump things out of the
    // window leaving room for new items.  It's important we process these changes first, so we
    // iterate the changes twice, first processing any that affect items currently in view.
    // TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but
    // not the other.
    let curViewCache = viewCache;
    let viewMergeTree;
    if ($ae31471d52481ece$var$pathIsEmpty(path)) viewMergeTree = changedChildren;
    else viewMergeTree = new $ae31471d52481ece$var$ImmutableTree(null).setTree(path, changedChildren);
    const serverNode = viewCache.serverCache.getNode();
    viewMergeTree.children.inorderTraversal((childKey, childTree)=>{
        if (serverNode.hasChild(childKey)) {
            const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);
            const newChild = $ae31471d52481ece$var$viewProcessorApplyMerge(viewProcessor, serverChild, childTree);
            curViewCache = $ae31471d52481ece$var$viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new $ae31471d52481ece$var$Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
        }
    });
    viewMergeTree.children.inorderTraversal((childKey, childMergeTree)=>{
        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) && childMergeTree.value === null;
        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {
            const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);
            const newChild = $ae31471d52481ece$var$viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);
            curViewCache = $ae31471d52481ece$var$viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new $ae31471d52481ece$var$Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
        }
    });
    return curViewCache;
}
function $ae31471d52481ece$var$viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {
    if ($ae31471d52481ece$var$writeTreeRefShadowingWrite(writesCache, ackPath) != null) return viewCache;
    // Only filter server node if it is currently filtered
    const filterServerNode = viewCache.serverCache.isFiltered();
    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update
    // now that it won't be shadowed.
    const serverCache = viewCache.serverCache;
    if (affectedTree.value != null) {
        // This is an overwrite.
        if ($ae31471d52481ece$var$pathIsEmpty(ackPath) && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) return $ae31471d52481ece$var$viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);
        else if ($ae31471d52481ece$var$pathIsEmpty(ackPath)) {
            // This is a goofy edge case where we are acking data at this location but don't have full data.  We
            // should just re-apply whatever we have in our cache as a merge.
            let changedChildren = new $ae31471d52481ece$var$ImmutableTree(null);
            serverCache.getNode().forEachChild($ae31471d52481ece$var$KEY_INDEX, (name, node)=>{
                changedChildren = changedChildren.set(new $ae31471d52481ece$var$Path(name), node);
            });
            return $ae31471d52481ece$var$viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);
        } else return viewCache;
    } else {
        // This is a merge.
        let changedChildren = new $ae31471d52481ece$var$ImmutableTree(null);
        affectedTree.foreach((mergePath, value)=>{
            const serverCachePath = $ae31471d52481ece$var$pathChild(ackPath, mergePath);
            if (serverCache.isCompleteForPath(serverCachePath)) changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));
        });
        return $ae31471d52481ece$var$viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);
    }
}
function $ae31471d52481ece$var$viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {
    const oldServerNode = viewCache.serverCache;
    const newViewCache = $ae31471d52481ece$var$viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || $ae31471d52481ece$var$pathIsEmpty(path), oldServerNode.isFiltered());
    return $ae31471d52481ece$var$viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, $ae31471d52481ece$var$NO_COMPLETE_CHILD_SOURCE, accumulator);
}
function $ae31471d52481ece$var$viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {
    let complete;
    if ($ae31471d52481ece$var$writeTreeRefShadowingWrite(writesCache, path) != null) return viewCache;
    else {
        const source = new $ae31471d52481ece$var$WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);
        const oldEventCache = viewCache.eventCache.getNode();
        let newEventCache;
        if ($ae31471d52481ece$var$pathIsEmpty(path) || $ae31471d52481ece$var$pathGetFront(path) === '.priority') {
            let newNode;
            if (viewCache.serverCache.isFullyInitialized()) newNode = $ae31471d52481ece$var$writeTreeRefCalcCompleteEventCache(writesCache, $ae31471d52481ece$var$viewCacheGetCompleteServerSnap(viewCache));
            else {
                const serverChildren = viewCache.serverCache.getNode();
                (0, $ee1ab2624407a779$export$a7a9523472993e97)(serverChildren instanceof $ae31471d52481ece$var$ChildrenNode, 'serverChildren would be complete if leaf node');
                newNode = $ae31471d52481ece$var$writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);
            }
            newNode;
            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);
        } else {
            const childKey = $ae31471d52481ece$var$pathGetFront(path);
            let newChild = $ae31471d52481ece$var$writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);
            if (newChild == null && viewCache.serverCache.isCompleteForChild(childKey)) newChild = oldEventCache.getImmediateChild(childKey);
            if (newChild != null) newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, $ae31471d52481ece$var$pathPopFront(path), source, accumulator);
            else if (viewCache.eventCache.getNode().hasChild(childKey)) // No complete child available, delete the existing one, if any
            newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE, $ae31471d52481ece$var$pathPopFront(path), source, accumulator);
            else newEventCache = oldEventCache;
            if (newEventCache.isEmpty() && viewCache.serverCache.isFullyInitialized()) {
                // We might have reverted all child writes. Maybe the old event was a leaf node
                complete = $ae31471d52481ece$var$writeTreeRefCalcCompleteEventCache(writesCache, $ae31471d52481ece$var$viewCacheGetCompleteServerSnap(viewCache));
                if (complete.isLeafNode()) newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);
            }
        }
        complete = viewCache.serverCache.isFullyInitialized() || $ae31471d52481ece$var$writeTreeRefShadowingWrite(writesCache, $ae31471d52481ece$var$newEmptyPath()) != null;
        return $ae31471d52481ece$var$viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A view represents a specific location and query that has 1 or more event registrations.
 *
 * It does several things:
 *  - Maintains the list of event registrations for this location/query.
 *  - Maintains a cache of the data visible for this location/query.
 *  - Applies new operations (via applyOperation), updates the cache, and based on the event
 *    registrations returns the set of events to be raised.
 */ class $ae31471d52481ece$var$View {
    constructor(query_, initialViewCache){
        this.query_ = query_;
        this.eventRegistrations_ = [];
        const params = this.query_._queryParams;
        const indexFilter = new $ae31471d52481ece$var$IndexedFilter(params.getIndex());
        const filter = $ae31471d52481ece$var$queryParamsGetNodeFilter(params);
        this.processor_ = $ae31471d52481ece$var$newViewProcessor(filter);
        const initialServerCache = initialViewCache.serverCache;
        const initialEventCache = initialViewCache.eventCache;
        // Don't filter server node with other filter than index, wait for tagged listen
        const serverSnap = indexFilter.updateFullNode($ae31471d52481ece$var$ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);
        const eventSnap = filter.updateFullNode($ae31471d52481ece$var$ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);
        const newServerCache = new $ae31471d52481ece$var$CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());
        const newEventCache = new $ae31471d52481ece$var$CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());
        this.viewCache_ = $ae31471d52481ece$var$newViewCache(newEventCache, newServerCache);
        this.eventGenerator_ = new $ae31471d52481ece$var$EventGenerator(this.query_);
    }
    get query() {
        return this.query_;
    }
}
function $ae31471d52481ece$var$viewGetServerCache(view) {
    return view.viewCache_.serverCache.getNode();
}
function $ae31471d52481ece$var$viewGetCompleteNode(view) {
    return $ae31471d52481ece$var$viewCacheGetCompleteEventSnap(view.viewCache_);
}
function $ae31471d52481ece$var$viewGetCompleteServerCache(view, path) {
    const cache = $ae31471d52481ece$var$viewCacheGetCompleteServerSnap(view.viewCache_);
    if (cache) {
        // If this isn't a "loadsAllData" view, then cache isn't actually a complete cache and
        // we need to see if it contains the child we're interested in.
        if (view.query._queryParams.loadsAllData() || !$ae31471d52481ece$var$pathIsEmpty(path) && !cache.getImmediateChild($ae31471d52481ece$var$pathGetFront(path)).isEmpty()) return cache.getChild(path);
    }
    return null;
}
function $ae31471d52481ece$var$viewIsEmpty(view) {
    return view.eventRegistrations_.length === 0;
}
function $ae31471d52481ece$var$viewAddEventRegistration(view, eventRegistration) {
    view.eventRegistrations_.push(eventRegistration);
}
/**
 * @param eventRegistration - If null, remove all callbacks.
 * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.
 * @returns Cancel events, if cancelError was provided.
 */ function $ae31471d52481ece$var$viewRemoveEventRegistration(view, eventRegistration, cancelError) {
    const cancelEvents = [];
    if (cancelError) {
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(eventRegistration == null, 'A cancel should cancel all event registrations.');
        const path = view.query._path;
        view.eventRegistrations_.forEach((registration)=>{
            const maybeEvent = registration.createCancelEvent(cancelError, path);
            if (maybeEvent) cancelEvents.push(maybeEvent);
        });
    }
    if (eventRegistration) {
        let remaining = [];
        for(let i = 0; i < view.eventRegistrations_.length; ++i){
            const existing = view.eventRegistrations_[i];
            if (!existing.matches(eventRegistration)) remaining.push(existing);
            else if (eventRegistration.hasAnyCallback()) {
                // We're removing just this one
                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));
                break;
            }
        }
        view.eventRegistrations_ = remaining;
    } else view.eventRegistrations_ = [];
    return cancelEvents;
}
/**
 * Applies the given Operation, updates our cache, and returns the appropriate events.
 */ function $ae31471d52481ece$var$viewApplyOperation(view, operation, writesCache, completeServerCache) {
    if (operation.type === $ae31471d52481ece$var$OperationType.MERGE && operation.source.queryId !== null) {
        (0, $ee1ab2624407a779$export$a7a9523472993e97)($ae31471d52481ece$var$viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');
        (0, $ee1ab2624407a779$export$a7a9523472993e97)($ae31471d52481ece$var$viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');
    }
    const oldViewCache = view.viewCache_;
    const result = $ae31471d52481ece$var$viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);
    $ae31471d52481ece$var$viewProcessorAssertIndexed(view.processor_, result.viewCache);
    (0, $ee1ab2624407a779$export$a7a9523472993e97)(result.viewCache.serverCache.isFullyInitialized() || !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');
    view.viewCache_ = result.viewCache;
    return $ae31471d52481ece$var$viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);
}
function $ae31471d52481ece$var$viewGetInitialEvents(view, registration) {
    const eventSnap = view.viewCache_.eventCache;
    const initialChanges = [];
    if (!eventSnap.getNode().isLeafNode()) {
        const eventNode = eventSnap.getNode();
        eventNode.forEachChild($ae31471d52481ece$var$PRIORITY_INDEX, (key, childNode)=>{
            initialChanges.push($ae31471d52481ece$var$changeChildAdded(key, childNode));
        });
    }
    if (eventSnap.isFullyInitialized()) initialChanges.push($ae31471d52481ece$var$changeValue(eventSnap.getNode()));
    return $ae31471d52481ece$var$viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);
}
function $ae31471d52481ece$var$viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {
    const registrations = eventRegistration ? [
        eventRegistration
    ] : view.eventRegistrations_;
    return $ae31471d52481ece$var$eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ let $ae31471d52481ece$var$referenceConstructor$1;
/**
 * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to
 * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes
 * and user writes (set, transaction, update).
 *
 * It's responsible for:
 *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).
 *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,
 *    applyUserOverwrite, etc.)
 */ class $ae31471d52481ece$var$SyncPoint {
    constructor(){
        /**
         * The Views being tracked at this location in the tree, stored as a map where the key is a
         * queryId and the value is the View for that query.
         *
         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).
         */ this.views = new Map();
    }
}
function $ae31471d52481ece$var$syncPointSetReferenceConstructor(val) {
    (0, $ee1ab2624407a779$export$a7a9523472993e97)(!$ae31471d52481ece$var$referenceConstructor$1, '__referenceConstructor has already been defined');
    $ae31471d52481ece$var$referenceConstructor$1 = val;
}
function $ae31471d52481ece$var$syncPointGetReferenceConstructor() {
    (0, $ee1ab2624407a779$export$a7a9523472993e97)($ae31471d52481ece$var$referenceConstructor$1, 'Reference.ts has not been loaded');
    return $ae31471d52481ece$var$referenceConstructor$1;
}
function $ae31471d52481ece$var$syncPointIsEmpty(syncPoint) {
    return syncPoint.views.size === 0;
}
function $ae31471d52481ece$var$syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {
    const queryId = operation.source.queryId;
    if (queryId !== null) {
        const view = syncPoint.views.get(queryId);
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(view != null, 'SyncTree gave us an op for an invalid query.');
        return $ae31471d52481ece$var$viewApplyOperation(view, operation, writesCache, optCompleteServerCache);
    } else {
        let events = [];
        for (const view of syncPoint.views.values())events = events.concat($ae31471d52481ece$var$viewApplyOperation(view, operation, writesCache, optCompleteServerCache));
        return events;
    }
}
/**
 * Get a view for the specified query.
 *
 * @param query - The query to return a view for
 * @param writesCache
 * @param serverCache
 * @param serverCacheComplete
 * @returns Events to raise.
 */ function $ae31471d52481ece$var$syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {
    const queryId = query._queryIdentifier;
    const view = syncPoint.views.get(queryId);
    if (!view) {
        // TODO: make writesCache take flag for complete server node
        let eventCache = $ae31471d52481ece$var$writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);
        let eventCacheComplete = false;
        if (eventCache) eventCacheComplete = true;
        else if (serverCache instanceof $ae31471d52481ece$var$ChildrenNode) {
            eventCache = $ae31471d52481ece$var$writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);
            eventCacheComplete = false;
        } else {
            eventCache = $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE;
            eventCacheComplete = false;
        }
        const viewCache = $ae31471d52481ece$var$newViewCache(new $ae31471d52481ece$var$CacheNode(eventCache, eventCacheComplete, false), new $ae31471d52481ece$var$CacheNode(serverCache, serverCacheComplete, false));
        return new $ae31471d52481ece$var$View(query, viewCache);
    }
    return view;
}
/**
 * Add an event callback for the specified query.
 *
 * @param query
 * @param eventRegistration
 * @param writesCache
 * @param serverCache - Complete server cache, if we have it.
 * @param serverCacheComplete
 * @returns Events to raise.
 */ function $ae31471d52481ece$var$syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {
    const view = $ae31471d52481ece$var$syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);
    if (!syncPoint.views.has(query._queryIdentifier)) syncPoint.views.set(query._queryIdentifier, view);
    // This is guaranteed to exist now, we just created anything that was missing
    $ae31471d52481ece$var$viewAddEventRegistration(view, eventRegistration);
    return $ae31471d52481ece$var$viewGetInitialEvents(view, eventRegistration);
}
/**
 * Remove event callback(s).  Return cancelEvents if a cancelError is specified.
 *
 * If query is the default query, we'll check all views for the specified eventRegistration.
 * If eventRegistration is null, we'll remove all callbacks for the specified view(s).
 *
 * @param eventRegistration - If null, remove all callbacks.
 * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.
 * @returns removed queries and any cancel events
 */ function $ae31471d52481ece$var$syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {
    const queryId = query._queryIdentifier;
    const removed = [];
    let cancelEvents = [];
    const hadCompleteView = $ae31471d52481ece$var$syncPointHasCompleteView(syncPoint);
    if (queryId === 'default') // When you do ref.off(...), we search all views for the registration to remove.
    for (const [viewQueryId, view] of syncPoint.views.entries()){
        cancelEvents = cancelEvents.concat($ae31471d52481ece$var$viewRemoveEventRegistration(view, eventRegistration, cancelError));
        if ($ae31471d52481ece$var$viewIsEmpty(view)) {
            syncPoint.views.delete(viewQueryId);
            // We'll deal with complete views later.
            if (!view.query._queryParams.loadsAllData()) removed.push(view.query);
        }
    }
    else {
        // remove the callback from the specific view.
        const view = syncPoint.views.get(queryId);
        if (view) {
            cancelEvents = cancelEvents.concat($ae31471d52481ece$var$viewRemoveEventRegistration(view, eventRegistration, cancelError));
            if ($ae31471d52481ece$var$viewIsEmpty(view)) {
                syncPoint.views.delete(queryId);
                // We'll deal with complete views later.
                if (!view.query._queryParams.loadsAllData()) removed.push(view.query);
            }
        }
    }
    if (hadCompleteView && !$ae31471d52481ece$var$syncPointHasCompleteView(syncPoint)) // We removed our last complete view.
    removed.push(new ($ae31471d52481ece$var$syncPointGetReferenceConstructor())(query._repo, query._path));
    return {
        removed: removed,
        events: cancelEvents
    };
}
function $ae31471d52481ece$var$syncPointGetQueryViews(syncPoint) {
    const result = [];
    for (const view of syncPoint.views.values())if (!view.query._queryParams.loadsAllData()) result.push(view);
    return result;
}
/**
 * @param path - The path to the desired complete snapshot
 * @returns A complete cache, if it exists
 */ function $ae31471d52481ece$var$syncPointGetCompleteServerCache(syncPoint, path) {
    let serverCache = null;
    for (const view of syncPoint.views.values())serverCache = serverCache || $ae31471d52481ece$var$viewGetCompleteServerCache(view, path);
    return serverCache;
}
function $ae31471d52481ece$var$syncPointViewForQuery(syncPoint, query) {
    const params = query._queryParams;
    if (params.loadsAllData()) return $ae31471d52481ece$var$syncPointGetCompleteView(syncPoint);
    else {
        const queryId = query._queryIdentifier;
        return syncPoint.views.get(queryId);
    }
}
function $ae31471d52481ece$var$syncPointViewExistsForQuery(syncPoint, query) {
    return $ae31471d52481ece$var$syncPointViewForQuery(syncPoint, query) != null;
}
function $ae31471d52481ece$var$syncPointHasCompleteView(syncPoint) {
    return $ae31471d52481ece$var$syncPointGetCompleteView(syncPoint) != null;
}
function $ae31471d52481ece$var$syncPointGetCompleteView(syncPoint) {
    for (const view of syncPoint.views.values()){
        if (view.query._queryParams.loadsAllData()) return view;
    }
    return null;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ let $ae31471d52481ece$var$referenceConstructor;
function $ae31471d52481ece$var$syncTreeSetReferenceConstructor(val) {
    (0, $ee1ab2624407a779$export$a7a9523472993e97)(!$ae31471d52481ece$var$referenceConstructor, '__referenceConstructor has already been defined');
    $ae31471d52481ece$var$referenceConstructor = val;
}
function $ae31471d52481ece$var$syncTreeGetReferenceConstructor() {
    (0, $ee1ab2624407a779$export$a7a9523472993e97)($ae31471d52481ece$var$referenceConstructor, 'Reference.ts has not been loaded');
    return $ae31471d52481ece$var$referenceConstructor;
}
/**
 * Static tracker for next query tag.
 */ let $ae31471d52481ece$var$syncTreeNextQueryTag_ = 1;
/**
 * SyncTree is the central class for managing event callback registration, data caching, views
 * (query processing), and event generation.  There are typically two SyncTree instances for
 * each Repo, one for the normal Firebase data, and one for the .info data.
 *
 * It has a number of responsibilities, including:
 *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).
 *  - Applying and caching data changes for user set(), transaction(), and update() calls
 *    (applyUserOverwrite(), applyUserMerge()).
 *  - Applying and caching data changes for server data changes (applyServerOverwrite(),
 *    applyServerMerge()).
 *  - Generating user-facing events for server and user changes (all of the apply* methods
 *    return the set of events that need to be raised as a result).
 *  - Maintaining the appropriate set of server listens to ensure we are always subscribed
 *    to the correct set of paths and queries to satisfy the current set of user event
 *    callbacks (listens are started/stopped using the provided listenProvider).
 *
 * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual
 * events are returned to the caller rather than raised synchronously.
 *
 */ class $ae31471d52481ece$var$SyncTree {
    /**
     * @param listenProvider_ - Used by SyncTree to start / stop listening
     *   to server data.
     */ constructor(listenProvider_){
        this.listenProvider_ = listenProvider_;
        /**
         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.
         */ this.syncPointTree_ = new $ae31471d52481ece$var$ImmutableTree(null);
        /**
         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).
         */ this.pendingWriteTree_ = $ae31471d52481ece$var$newWriteTree();
        this.tagToQueryMap = new Map();
        this.queryToTagMap = new Map();
    }
}
/**
 * Apply the data changes for a user-generated set() or transaction() call.
 *
 * @returns Events to raise.
 */ function $ae31471d52481ece$var$syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {
    // Record pending write.
    $ae31471d52481ece$var$writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);
    if (!visible) return [];
    else return $ae31471d52481ece$var$syncTreeApplyOperationToSyncPoints_(syncTree, new $ae31471d52481ece$var$Overwrite($ae31471d52481ece$var$newOperationSourceUser(), path, newData));
}
/**
 * Apply the data from a user-generated update() call
 *
 * @returns Events to raise.
 */ function $ae31471d52481ece$var$syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {
    // Record pending merge.
    $ae31471d52481ece$var$writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);
    const changeTree = $ae31471d52481ece$var$ImmutableTree.fromObject(changedChildren);
    return $ae31471d52481ece$var$syncTreeApplyOperationToSyncPoints_(syncTree, new $ae31471d52481ece$var$Merge($ae31471d52481ece$var$newOperationSourceUser(), path, changeTree));
}
/**
 * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().
 *
 * @param revert - True if the given write failed and needs to be reverted
 * @returns Events to raise.
 */ function $ae31471d52481ece$var$syncTreeAckUserWrite(syncTree, writeId, revert = false) {
    const write = $ae31471d52481ece$var$writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);
    const needToReevaluate = $ae31471d52481ece$var$writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);
    if (!needToReevaluate) return [];
    else {
        let affectedTree = new $ae31471d52481ece$var$ImmutableTree(null);
        if (write.snap != null) // overwrite
        affectedTree = affectedTree.set($ae31471d52481ece$var$newEmptyPath(), true);
        else $ae31471d52481ece$var$each(write.children, (pathString)=>{
            affectedTree = affectedTree.set(new $ae31471d52481ece$var$Path(pathString), true);
        });
        return $ae31471d52481ece$var$syncTreeApplyOperationToSyncPoints_(syncTree, new $ae31471d52481ece$var$AckUserWrite(write.path, affectedTree, revert));
    }
}
/**
 * Apply new server data for the specified path..
 *
 * @returns Events to raise.
 */ function $ae31471d52481ece$var$syncTreeApplyServerOverwrite(syncTree, path, newData) {
    return $ae31471d52481ece$var$syncTreeApplyOperationToSyncPoints_(syncTree, new $ae31471d52481ece$var$Overwrite($ae31471d52481ece$var$newOperationSourceServer(), path, newData));
}
/**
 * Apply new server data to be merged in at the specified path.
 *
 * @returns Events to raise.
 */ function $ae31471d52481ece$var$syncTreeApplyServerMerge(syncTree, path, changedChildren) {
    const changeTree = $ae31471d52481ece$var$ImmutableTree.fromObject(changedChildren);
    return $ae31471d52481ece$var$syncTreeApplyOperationToSyncPoints_(syncTree, new $ae31471d52481ece$var$Merge($ae31471d52481ece$var$newOperationSourceServer(), path, changeTree));
}
/**
 * Apply a listen complete for a query
 *
 * @returns Events to raise.
 */ function $ae31471d52481ece$var$syncTreeApplyListenComplete(syncTree, path) {
    return $ae31471d52481ece$var$syncTreeApplyOperationToSyncPoints_(syncTree, new $ae31471d52481ece$var$ListenComplete($ae31471d52481ece$var$newOperationSourceServer(), path));
}
/**
 * Apply a listen complete for a tagged query
 *
 * @returns Events to raise.
 */ function $ae31471d52481ece$var$syncTreeApplyTaggedListenComplete(syncTree, path, tag) {
    const queryKey = $ae31471d52481ece$var$syncTreeQueryKeyForTag_(syncTree, tag);
    if (queryKey) {
        const r = $ae31471d52481ece$var$syncTreeParseQueryKey_(queryKey);
        const queryPath = r.path, queryId = r.queryId;
        const relativePath = $ae31471d52481ece$var$newRelativePath(queryPath, path);
        const op = new $ae31471d52481ece$var$ListenComplete($ae31471d52481ece$var$newOperationSourceServerTaggedQuery(queryId), relativePath);
        return $ae31471d52481ece$var$syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
    } else // We've already removed the query. No big deal, ignore the update
    return [];
}
/**
 * Remove event callback(s).
 *
 * If query is the default query, we'll check all queries for the specified eventRegistration.
 * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.
 *
 * @param eventRegistration - If null, all callbacks are removed.
 * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.
 * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no
 *  deduping needs to take place. This flag allows toggling of that behavior
 * @returns Cancel events, if cancelError was provided.
 */ function $ae31471d52481ece$var$syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError, skipListenerDedup = false) {
    // Find the syncPoint first. Then deal with whether or not it has matching listeners
    const path = query._path;
    const maybeSyncPoint = syncTree.syncPointTree_.get(path);
    let cancelEvents = [];
    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without
    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and
    // not loadsAllData().
    if (maybeSyncPoint && (query._queryIdentifier === 'default' || $ae31471d52481ece$var$syncPointViewExistsForQuery(maybeSyncPoint, query))) {
        const removedAndEvents = $ae31471d52481ece$var$syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);
        if ($ae31471d52481ece$var$syncPointIsEmpty(maybeSyncPoint)) syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);
        const removed = removedAndEvents.removed;
        cancelEvents = removedAndEvents.events;
        if (!skipListenerDedup) {
            /**
             * We may have just removed one of many listeners and can short-circuit this whole process
             * We may also not have removed a default listener, in which case all of the descendant listeners should already be
             * properly set up.
             */ // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of
            // queryId === 'default'
            const removingDefault = -1 !== removed.findIndex((query)=>{
                return query._queryParams.loadsAllData();
            });
            const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint)=>$ae31471d52481ece$var$syncPointHasCompleteView(parentSyncPoint));
            if (removingDefault && !covered) {
                const subtree = syncTree.syncPointTree_.subtree(path);
                // There are potentially child listeners. Determine what if any listens we need to send before executing the
                // removal
                if (!subtree.isEmpty()) {
                    // We need to fold over our subtree and collect the listeners to send
                    const newViews = $ae31471d52481ece$var$syncTreeCollectDistinctViewsForSubTree_(subtree);
                    // Ok, we've collected all the listens we need. Set them up.
                    for(let i = 0; i < newViews.length; ++i){
                        const view = newViews[i], newQuery = view.query;
                        const listener = $ae31471d52481ece$var$syncTreeCreateListenerForView_(syncTree, view);
                        syncTree.listenProvider_.startListening($ae31471d52481ece$var$syncTreeQueryForListening_(newQuery), $ae31471d52481ece$var$syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);
                    }
                }
            // Otherwise there's nothing below us, so nothing we need to start listening on
            }
            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query
            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.
            // Also, note that if we have a cancelError, it's already been removed at the provider level.
            if (!covered && removed.length > 0 && !cancelError) {
                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one
                // default. Otherwise, we need to iterate through and cancel each individual query
                if (removingDefault) {
                    // We don't tag default listeners
                    const defaultTag = null;
                    syncTree.listenProvider_.stopListening($ae31471d52481ece$var$syncTreeQueryForListening_(query), defaultTag);
                } else removed.forEach((queryToRemove)=>{
                    const tagToRemove = syncTree.queryToTagMap.get($ae31471d52481ece$var$syncTreeMakeQueryKey_(queryToRemove));
                    syncTree.listenProvider_.stopListening($ae31471d52481ece$var$syncTreeQueryForListening_(queryToRemove), tagToRemove);
                });
            }
        }
        // Now, clear all of the tags we're tracking for the removed listens
        $ae31471d52481ece$var$syncTreeRemoveTags_(syncTree, removed);
    }
    return cancelEvents;
}
/**
 * Apply new server data for the specified tagged query.
 *
 * @returns Events to raise.
 */ function $ae31471d52481ece$var$syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {
    const queryKey = $ae31471d52481ece$var$syncTreeQueryKeyForTag_(syncTree, tag);
    if (queryKey != null) {
        const r = $ae31471d52481ece$var$syncTreeParseQueryKey_(queryKey);
        const queryPath = r.path, queryId = r.queryId;
        const relativePath = $ae31471d52481ece$var$newRelativePath(queryPath, path);
        const op = new $ae31471d52481ece$var$Overwrite($ae31471d52481ece$var$newOperationSourceServerTaggedQuery(queryId), relativePath, snap);
        return $ae31471d52481ece$var$syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
    } else // Query must have been removed already
    return [];
}
/**
 * Apply server data to be merged in for the specified tagged query.
 *
 * @returns Events to raise.
 */ function $ae31471d52481ece$var$syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {
    const queryKey = $ae31471d52481ece$var$syncTreeQueryKeyForTag_(syncTree, tag);
    if (queryKey) {
        const r = $ae31471d52481ece$var$syncTreeParseQueryKey_(queryKey);
        const queryPath = r.path, queryId = r.queryId;
        const relativePath = $ae31471d52481ece$var$newRelativePath(queryPath, path);
        const changeTree = $ae31471d52481ece$var$ImmutableTree.fromObject(changedChildren);
        const op = new $ae31471d52481ece$var$Merge($ae31471d52481ece$var$newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);
        return $ae31471d52481ece$var$syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
    } else // We've already removed the query. No big deal, ignore the update
    return [];
}
/**
 * Add an event callback for the specified query.
 *
 * @returns Events to raise.
 */ function $ae31471d52481ece$var$syncTreeAddEventRegistration(syncTree, query, eventRegistration, skipSetupListener = false) {
    const path = query._path;
    let serverCache = null;
    let foundAncestorDefaultView = false;
    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
    // Consider optimizing this once there's a better understanding of what actual behavior will be.
    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp)=>{
        const relativePath = $ae31471d52481ece$var$newRelativePath(pathToSyncPoint, path);
        serverCache = serverCache || $ae31471d52481ece$var$syncPointGetCompleteServerCache(sp, relativePath);
        foundAncestorDefaultView = foundAncestorDefaultView || $ae31471d52481ece$var$syncPointHasCompleteView(sp);
    });
    let syncPoint = syncTree.syncPointTree_.get(path);
    if (!syncPoint) {
        syncPoint = new $ae31471d52481ece$var$SyncPoint();
        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);
    } else {
        foundAncestorDefaultView = foundAncestorDefaultView || $ae31471d52481ece$var$syncPointHasCompleteView(syncPoint);
        serverCache = serverCache || $ae31471d52481ece$var$syncPointGetCompleteServerCache(syncPoint, $ae31471d52481ece$var$newEmptyPath());
    }
    let serverCacheComplete;
    if (serverCache != null) serverCacheComplete = true;
    else {
        serverCacheComplete = false;
        serverCache = $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE;
        const subtree = syncTree.syncPointTree_.subtree(path);
        subtree.foreachChild((childName, childSyncPoint)=>{
            const completeCache = $ae31471d52481ece$var$syncPointGetCompleteServerCache(childSyncPoint, $ae31471d52481ece$var$newEmptyPath());
            if (completeCache) serverCache = serverCache.updateImmediateChild(childName, completeCache);
        });
    }
    const viewAlreadyExists = $ae31471d52481ece$var$syncPointViewExistsForQuery(syncPoint, query);
    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {
        // We need to track a tag for this query
        const queryKey = $ae31471d52481ece$var$syncTreeMakeQueryKey_(query);
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');
        const tag = $ae31471d52481ece$var$syncTreeGetNextQueryTag_();
        syncTree.queryToTagMap.set(queryKey, tag);
        syncTree.tagToQueryMap.set(tag, queryKey);
    }
    const writesCache = $ae31471d52481ece$var$writeTreeChildWrites(syncTree.pendingWriteTree_, path);
    let events = $ae31471d52481ece$var$syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);
    if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {
        const view = $ae31471d52481ece$var$syncPointViewForQuery(syncPoint, query);
        events = events.concat($ae31471d52481ece$var$syncTreeSetupListener_(syncTree, query, view));
    }
    return events;
}
/**
 * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a
 * listener above it, we will get a false "null". This shouldn't be a problem because transactions will always
 * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->
 *     <incremented total> as the write is applied locally and then acknowledged at the server.
 *
 * Note: this method will *include* hidden writes from transaction with applyLocally set to false.
 *
 * @param path - The path to the data we want
 * @param writeIdsToExclude - A specific set to be excluded
 */ function $ae31471d52481ece$var$syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {
    const includeHiddenSets = true;
    const writeTree = syncTree.pendingWriteTree_;
    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint)=>{
        const relativePath = $ae31471d52481ece$var$newRelativePath(pathSoFar, path);
        const serverCache = $ae31471d52481ece$var$syncPointGetCompleteServerCache(syncPoint, relativePath);
        if (serverCache) return serverCache;
    });
    return $ae31471d52481ece$var$writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);
}
function $ae31471d52481ece$var$syncTreeGetServerValue(syncTree, query) {
    const path = query._path;
    let serverCache = null;
    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.
    // Consider optimizing this once there's a better understanding of what actual behavior will be.
    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp)=>{
        const relativePath = $ae31471d52481ece$var$newRelativePath(pathToSyncPoint, path);
        serverCache = serverCache || $ae31471d52481ece$var$syncPointGetCompleteServerCache(sp, relativePath);
    });
    let syncPoint = syncTree.syncPointTree_.get(path);
    if (!syncPoint) {
        syncPoint = new $ae31471d52481ece$var$SyncPoint();
        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);
    } else serverCache = serverCache || $ae31471d52481ece$var$syncPointGetCompleteServerCache(syncPoint, $ae31471d52481ece$var$newEmptyPath());
    const serverCacheComplete = serverCache != null;
    const serverCacheNode = serverCacheComplete ? new $ae31471d52481ece$var$CacheNode(serverCache, true, false) : null;
    const writesCache = $ae31471d52481ece$var$writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);
    const view = $ae31471d52481ece$var$syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE, serverCacheComplete);
    return $ae31471d52481ece$var$viewGetCompleteNode(view);
}
/**
 * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.
 *
 * NOTES:
 * - Descendant SyncPoints will be visited first (since we raise events depth-first).
 *
 * - We call applyOperation() on each SyncPoint passing three things:
 *   1. A version of the Operation that has been made relative to the SyncPoint location.
 *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.
 *   3. A snapshot Node with cached server data, if we have it.
 *
 * - We concatenate all of the events returned by each SyncPoint and return the result.
 */ function $ae31471d52481ece$var$syncTreeApplyOperationToSyncPoints_(syncTree, operation) {
    return $ae31471d52481ece$var$syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, /*serverCache=*/ null, $ae31471d52481ece$var$writeTreeChildWrites(syncTree.pendingWriteTree_, $ae31471d52481ece$var$newEmptyPath()));
}
/**
 * Recursive helper for applyOperationToSyncPoints_
 */ function $ae31471d52481ece$var$syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {
    if ($ae31471d52481ece$var$pathIsEmpty(operation.path)) return $ae31471d52481ece$var$syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);
    else {
        const syncPoint = syncPointTree.get($ae31471d52481ece$var$newEmptyPath());
        // If we don't have cached server data, see if we can get it from this SyncPoint.
        if (serverCache == null && syncPoint != null) serverCache = $ae31471d52481ece$var$syncPointGetCompleteServerCache(syncPoint, $ae31471d52481ece$var$newEmptyPath());
        let events = [];
        const childName = $ae31471d52481ece$var$pathGetFront(operation.path);
        const childOperation = operation.operationForChild(childName);
        const childTree = syncPointTree.children.get(childName);
        if (childTree && childOperation) {
            const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;
            const childWritesCache = $ae31471d52481ece$var$writeTreeRefChild(writesCache, childName);
            events = events.concat($ae31471d52481ece$var$syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));
        }
        if (syncPoint) events = events.concat($ae31471d52481ece$var$syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));
        return events;
    }
}
/**
 * Recursive helper for applyOperationToSyncPoints_
 */ function $ae31471d52481ece$var$syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {
    const syncPoint = syncPointTree.get($ae31471d52481ece$var$newEmptyPath());
    // If we don't have cached server data, see if we can get it from this SyncPoint.
    if (serverCache == null && syncPoint != null) serverCache = $ae31471d52481ece$var$syncPointGetCompleteServerCache(syncPoint, $ae31471d52481ece$var$newEmptyPath());
    let events = [];
    syncPointTree.children.inorderTraversal((childName, childTree)=>{
        const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;
        const childWritesCache = $ae31471d52481ece$var$writeTreeRefChild(writesCache, childName);
        const childOperation = operation.operationForChild(childName);
        if (childOperation) events = events.concat($ae31471d52481ece$var$syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));
    });
    if (syncPoint) events = events.concat($ae31471d52481ece$var$syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));
    return events;
}
function $ae31471d52481ece$var$syncTreeCreateListenerForView_(syncTree, view) {
    const query = view.query;
    const tag = $ae31471d52481ece$var$syncTreeTagForQuery(syncTree, query);
    return {
        hashFn: ()=>{
            const cache = $ae31471d52481ece$var$viewGetServerCache(view) || $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE;
            return cache.hash();
        },
        onComplete: (status)=>{
            if (status === 'ok') {
                if (tag) return $ae31471d52481ece$var$syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);
                else return $ae31471d52481ece$var$syncTreeApplyListenComplete(syncTree, query._path);
            } else {
                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.
                // Note that this may need to be scoped to just this listener if we change permissions on filtered children
                const error = $ae31471d52481ece$var$errorForServerCode(status, query);
                return $ae31471d52481ece$var$syncTreeRemoveEventRegistration(syncTree, query, /*eventRegistration*/ null, error);
            }
        }
    };
}
/**
 * Return the tag associated with the given query.
 */ function $ae31471d52481ece$var$syncTreeTagForQuery(syncTree, query) {
    const queryKey = $ae31471d52481ece$var$syncTreeMakeQueryKey_(query);
    return syncTree.queryToTagMap.get(queryKey);
}
/**
 * Given a query, computes a "queryKey" suitable for use in our queryToTagMap_.
 */ function $ae31471d52481ece$var$syncTreeMakeQueryKey_(query) {
    return query._path.toString() + '$' + query._queryIdentifier;
}
/**
 * Return the query associated with the given tag, if we have one
 */ function $ae31471d52481ece$var$syncTreeQueryKeyForTag_(syncTree, tag) {
    return syncTree.tagToQueryMap.get(tag);
}
/**
 * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.
 */ function $ae31471d52481ece$var$syncTreeParseQueryKey_(queryKey) {
    const splitIndex = queryKey.indexOf('$');
    (0, $ee1ab2624407a779$export$a7a9523472993e97)(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');
    return {
        queryId: queryKey.substr(splitIndex + 1),
        path: new $ae31471d52481ece$var$Path(queryKey.substr(0, splitIndex))
    };
}
/**
 * A helper method to apply tagged operations
 */ function $ae31471d52481ece$var$syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {
    const syncPoint = syncTree.syncPointTree_.get(queryPath);
    (0, $ee1ab2624407a779$export$a7a9523472993e97)(syncPoint, "Missing sync point for query tag that we're tracking");
    const writesCache = $ae31471d52481ece$var$writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);
    return $ae31471d52481ece$var$syncPointApplyOperation(syncPoint, operation, writesCache, null);
}
/**
 * This collapses multiple unfiltered views into a single view, since we only need a single
 * listener for them.
 */ function $ae31471d52481ece$var$syncTreeCollectDistinctViewsForSubTree_(subtree) {
    return subtree.fold((relativePath, maybeChildSyncPoint, childMap)=>{
        if (maybeChildSyncPoint && $ae31471d52481ece$var$syncPointHasCompleteView(maybeChildSyncPoint)) {
            const completeView = $ae31471d52481ece$var$syncPointGetCompleteView(maybeChildSyncPoint);
            return [
                completeView
            ];
        } else {
            // No complete view here, flatten any deeper listens into an array
            let views = [];
            if (maybeChildSyncPoint) views = $ae31471d52481ece$var$syncPointGetQueryViews(maybeChildSyncPoint);
            $ae31471d52481ece$var$each(childMap, (_key, childViews)=>{
                views = views.concat(childViews);
            });
            return views;
        }
    });
}
/**
 * Normalizes a query to a query we send the server for listening
 *
 * @returns The normalized query
 */ function $ae31471d52481ece$var$syncTreeQueryForListening_(query) {
    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) // We treat queries that load all data as default queries
    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits
    // from Query
    return new ($ae31471d52481ece$var$syncTreeGetReferenceConstructor())(query._repo, query._path);
    else return query;
}
function $ae31471d52481ece$var$syncTreeRemoveTags_(syncTree, queries) {
    for(let j = 0; j < queries.length; ++j){
        const removedQuery = queries[j];
        if (!removedQuery._queryParams.loadsAllData()) {
            // We should have a tag for this
            const removedQueryKey = $ae31471d52481ece$var$syncTreeMakeQueryKey_(removedQuery);
            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);
            syncTree.queryToTagMap.delete(removedQueryKey);
            syncTree.tagToQueryMap.delete(removedQueryTag);
        }
    }
}
/**
 * Static accessor for query tags.
 */ function $ae31471d52481ece$var$syncTreeGetNextQueryTag_() {
    return $ae31471d52481ece$var$syncTreeNextQueryTag_++;
}
/**
 * For a given new listen, manage the de-duplication of outstanding subscriptions.
 *
 * @returns This method can return events to support synchronous data sources
 */ function $ae31471d52481ece$var$syncTreeSetupListener_(syncTree, query, view) {
    const path = query._path;
    const tag = $ae31471d52481ece$var$syncTreeTagForQuery(syncTree, query);
    const listener = $ae31471d52481ece$var$syncTreeCreateListenerForView_(syncTree, view);
    const events = syncTree.listenProvider_.startListening($ae31471d52481ece$var$syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);
    const subtree = syncTree.syncPointTree_.subtree(path);
    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we
    // may need to shadow other listens as well.
    if (tag) (0, $ee1ab2624407a779$export$a7a9523472993e97)(!$ae31471d52481ece$var$syncPointHasCompleteView(subtree.value), "If we're adding a query, it shouldn't be shadowed");
    else {
        // Shadow everything at or below this location, this is a default listener.
        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap)=>{
            if (!$ae31471d52481ece$var$pathIsEmpty(relativePath) && maybeChildSyncPoint && $ae31471d52481ece$var$syncPointHasCompleteView(maybeChildSyncPoint)) return [
                $ae31471d52481ece$var$syncPointGetCompleteView(maybeChildSyncPoint).query
            ];
            else {
                // No default listener here, flatten any deeper queries into an array
                let queries = [];
                if (maybeChildSyncPoint) queries = queries.concat($ae31471d52481ece$var$syncPointGetQueryViews(maybeChildSyncPoint).map((view)=>view.query));
                $ae31471d52481ece$var$each(childMap, (_key, childQueries)=>{
                    queries = queries.concat(childQueries);
                });
                return queries;
            }
        });
        for(let i = 0; i < queriesToStop.length; ++i){
            const queryToStop = queriesToStop[i];
            syncTree.listenProvider_.stopListening($ae31471d52481ece$var$syncTreeQueryForListening_(queryToStop), $ae31471d52481ece$var$syncTreeTagForQuery(syncTree, queryToStop));
        }
    }
    return events;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class $ae31471d52481ece$var$ExistingValueProvider {
    constructor(node_){
        this.node_ = node_;
    }
    getImmediateChild(childName) {
        const child = this.node_.getImmediateChild(childName);
        return new $ae31471d52481ece$var$ExistingValueProvider(child);
    }
    node() {
        return this.node_;
    }
}
class $ae31471d52481ece$var$DeferredValueProvider {
    constructor(syncTree, path){
        this.syncTree_ = syncTree;
        this.path_ = path;
    }
    getImmediateChild(childName) {
        const childPath = $ae31471d52481ece$var$pathChild(this.path_, childName);
        return new $ae31471d52481ece$var$DeferredValueProvider(this.syncTree_, childPath);
    }
    node() {
        return $ae31471d52481ece$var$syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);
    }
}
/**
 * Generate placeholders for deferred values.
 */ const $ae31471d52481ece$var$generateWithValues = function(values) {
    values = values || {};
    values['timestamp'] = values['timestamp'] || new Date().getTime();
    return values;
};
/**
 * Value to use when firing local events. When writing server values, fire
 * local events with an approximate value, otherwise return value as-is.
 */ const $ae31471d52481ece$var$resolveDeferredLeafValue = function(value, existingVal, serverValues) {
    if (!value || typeof value !== 'object') return value;
    (0, $ee1ab2624407a779$export$a7a9523472993e97)('.sv' in value, 'Unexpected leaf node or priority contents');
    if (typeof value['.sv'] === 'string') return $ae31471d52481ece$var$resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);
    else if (typeof value['.sv'] === 'object') return $ae31471d52481ece$var$resolveComplexDeferredValue(value['.sv'], existingVal);
    else (0, $ee1ab2624407a779$export$a7a9523472993e97)(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));
};
const $ae31471d52481ece$var$resolveScalarDeferredValue = function(op, existing, serverValues) {
    switch(op){
        case 'timestamp':
            return serverValues['timestamp'];
        default:
            (0, $ee1ab2624407a779$export$a7a9523472993e97)(false, 'Unexpected server value: ' + op);
    }
};
const $ae31471d52481ece$var$resolveComplexDeferredValue = function(op, existing, unused) {
    if (!op.hasOwnProperty('increment')) (0, $ee1ab2624407a779$export$a7a9523472993e97)(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));
    const delta = op['increment'];
    if (typeof delta !== 'number') (0, $ee1ab2624407a779$export$a7a9523472993e97)(false, 'Unexpected increment value: ' + delta);
    const existingNode = existing.node();
    (0, $ee1ab2624407a779$export$a7a9523472993e97)(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');
    // Incrementing a non-number sets the value to the incremented amount
    if (!existingNode.isLeafNode()) return delta;
    const leaf = existingNode;
    const existingVal = leaf.getValue();
    if (typeof existingVal !== 'number') return delta;
    // No need to do over/underflow arithmetic here because JS only handles floats under the covers
    return existingVal + delta;
};
/**
 * Recursively replace all deferred values and priorities in the tree with the
 * specified generated replacement values.
 * @param path - path to which write is relative
 * @param node - new data written at path
 * @param syncTree - current data
 */ const $ae31471d52481ece$var$resolveDeferredValueTree = function(path, node, syncTree, serverValues) {
    return $ae31471d52481ece$var$resolveDeferredValue(node, new $ae31471d52481ece$var$DeferredValueProvider(syncTree, path), serverValues);
};
/**
 * Recursively replace all deferred values and priorities in the node with the
 * specified generated replacement values.  If there are no server values in the node,
 * it'll be returned as-is.
 */ const $ae31471d52481ece$var$resolveDeferredValueSnapshot = function(node, existing, serverValues) {
    return $ae31471d52481ece$var$resolveDeferredValue(node, new $ae31471d52481ece$var$ExistingValueProvider(existing), serverValues);
};
function $ae31471d52481ece$var$resolveDeferredValue(node, existingVal, serverValues) {
    const rawPri = node.getPriority().val();
    const priority = $ae31471d52481ece$var$resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);
    let newNode;
    if (node.isLeafNode()) {
        const leafNode = node;
        const value = $ae31471d52481ece$var$resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);
        if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) return new $ae31471d52481ece$var$LeafNode(value, $ae31471d52481ece$var$nodeFromJSON(priority));
        else return node;
    } else {
        const childrenNode = node;
        newNode = childrenNode;
        if (priority !== childrenNode.getPriority().val()) newNode = newNode.updatePriority(new $ae31471d52481ece$var$LeafNode(priority));
        childrenNode.forEachChild($ae31471d52481ece$var$PRIORITY_INDEX, (childName, childNode)=>{
            const newChildNode = $ae31471d52481ece$var$resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);
            if (newChildNode !== childNode) newNode = newNode.updateImmediateChild(childName, newChildNode);
        });
        return newNode;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A light-weight tree, traversable by path.  Nodes can have both values and children.
 * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty
 * children.
 */ class $ae31471d52481ece$var$Tree {
    /**
     * @param name - Optional name of the node.
     * @param parent - Optional parent node.
     * @param node - Optional node to wrap.
     */ constructor(name = '', parent = null, node = {
        children: {},
        childCount: 0
    }){
        this.name = name;
        this.parent = parent;
        this.node = node;
    }
}
/**
 * Returns a sub-Tree for the given path.
 *
 * @param pathObj - Path to look up.
 * @returns Tree for path.
 */ function $ae31471d52481ece$var$treeSubTree(tree, pathObj) {
    // TODO: Require pathObj to be Path?
    let path = pathObj instanceof $ae31471d52481ece$var$Path ? pathObj : new $ae31471d52481ece$var$Path(pathObj);
    let child = tree, next = $ae31471d52481ece$var$pathGetFront(path);
    while(next !== null){
        const childNode = (0, $ee1ab2624407a779$export$e51ae4db7b428f67)(child.node.children, next) || {
            children: {},
            childCount: 0
        };
        child = new $ae31471d52481ece$var$Tree(next, child, childNode);
        path = $ae31471d52481ece$var$pathPopFront(path);
        next = $ae31471d52481ece$var$pathGetFront(path);
    }
    return child;
}
/**
 * Returns the data associated with this tree node.
 *
 * @returns The data or null if no data exists.
 */ function $ae31471d52481ece$var$treeGetValue(tree) {
    return tree.node.value;
}
/**
 * Sets data to this tree node.
 *
 * @param value - Value to set.
 */ function $ae31471d52481ece$var$treeSetValue(tree, value) {
    tree.node.value = value;
    $ae31471d52481ece$var$treeUpdateParents(tree);
}
/**
 * @returns Whether the tree has any children.
 */ function $ae31471d52481ece$var$treeHasChildren(tree) {
    return tree.node.childCount > 0;
}
/**
 * @returns Whether the tree is empty (no value or children).
 */ function $ae31471d52481ece$var$treeIsEmpty(tree) {
    return $ae31471d52481ece$var$treeGetValue(tree) === undefined && !$ae31471d52481ece$var$treeHasChildren(tree);
}
/**
 * Calls action for each child of this tree node.
 *
 * @param action - Action to be called for each child.
 */ function $ae31471d52481ece$var$treeForEachChild(tree, action) {
    $ae31471d52481ece$var$each(tree.node.children, (child, childTree)=>{
        action(new $ae31471d52481ece$var$Tree(child, tree, childTree));
    });
}
/**
 * Does a depth-first traversal of this node's descendants, calling action for each one.
 *
 * @param action - Action to be called for each child.
 * @param includeSelf - Whether to call action on this node as well. Defaults to
 *   false.
 * @param childrenFirst - Whether to call action on children before calling it on
 *   parent.
 */ function $ae31471d52481ece$var$treeForEachDescendant(tree, action, includeSelf, childrenFirst) {
    if (includeSelf && !childrenFirst) action(tree);
    $ae31471d52481ece$var$treeForEachChild(tree, (child)=>{
        $ae31471d52481ece$var$treeForEachDescendant(child, action, true, childrenFirst);
    });
    if (includeSelf && childrenFirst) action(tree);
}
/**
 * Calls action on each ancestor node.
 *
 * @param action - Action to be called on each parent; return
 *   true to abort.
 * @param includeSelf - Whether to call action on this node as well.
 * @returns true if the action callback returned true.
 */ function $ae31471d52481ece$var$treeForEachAncestor(tree, action, includeSelf) {
    let node = includeSelf ? tree : tree.parent;
    while(node !== null){
        if (action(node)) return true;
        node = node.parent;
    }
    return false;
}
/**
 * @returns The path of this tree node, as a Path.
 */ function $ae31471d52481ece$var$treeGetPath(tree) {
    return new $ae31471d52481ece$var$Path(tree.parent === null ? tree.name : $ae31471d52481ece$var$treeGetPath(tree.parent) + '/' + tree.name);
}
/**
 * Adds or removes this child from its parent based on whether it's empty or not.
 */ function $ae31471d52481ece$var$treeUpdateParents(tree) {
    if (tree.parent !== null) $ae31471d52481ece$var$treeUpdateChild(tree.parent, tree.name, tree);
}
/**
 * Adds or removes the passed child to this tree node, depending on whether it's empty.
 *
 * @param childName - The name of the child to update.
 * @param child - The child to update.
 */ function $ae31471d52481ece$var$treeUpdateChild(tree, childName, child) {
    const childEmpty = $ae31471d52481ece$var$treeIsEmpty(child);
    const childExists = (0, $ee1ab2624407a779$export$2344b14b097df817)(tree.node.children, childName);
    if (childEmpty && childExists) {
        delete tree.node.children[childName];
        tree.node.childCount--;
        $ae31471d52481ece$var$treeUpdateParents(tree);
    } else if (!childEmpty && !childExists) {
        tree.node.children[childName] = child.node;
        tree.node.childCount++;
        $ae31471d52481ece$var$treeUpdateParents(tree);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * True for invalid Firebase keys
 */ const $ae31471d52481ece$var$INVALID_KEY_REGEX_ = /[\[\].#$\/\u0000-\u001F\u007F]/;
/**
 * True for invalid Firebase paths.
 * Allows '/' in paths.
 */ const $ae31471d52481ece$var$INVALID_PATH_REGEX_ = /[\[\].#$\u0000-\u001F\u007F]/;
/**
 * Maximum number of characters to allow in leaf value
 */ const $ae31471d52481ece$var$MAX_LEAF_SIZE_ = 10485760;
const $ae31471d52481ece$var$isValidKey = function(key) {
    return typeof key === 'string' && key.length !== 0 && !$ae31471d52481ece$var$INVALID_KEY_REGEX_.test(key);
};
const $ae31471d52481ece$var$isValidPathString = function(pathString) {
    return typeof pathString === 'string' && pathString.length !== 0 && !$ae31471d52481ece$var$INVALID_PATH_REGEX_.test(pathString);
};
const $ae31471d52481ece$var$isValidRootPathString = function(pathString) {
    if (pathString) // Allow '/.info/' at the beginning.
    pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
    return $ae31471d52481ece$var$isValidPathString(pathString);
};
const $ae31471d52481ece$var$isValidPriority = function(priority) {
    return priority === null || typeof priority === 'string' || typeof priority === 'number' && !$ae31471d52481ece$var$isInvalidJSONNumber(priority) || priority && typeof priority === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (0, $ee1ab2624407a779$export$2344b14b097df817)(priority, '.sv');
};
/**
 * Pre-validate a datum passed as an argument to Firebase function.
 */ const $ae31471d52481ece$var$validateFirebaseDataArg = function(fnName, value, path, optional) {
    if (optional && value === undefined) return;
    $ae31471d52481ece$var$validateFirebaseData((0, $ee1ab2624407a779$export$adea4917e02d93dc)(fnName, 'value'), value, path);
};
/**
 * Validate a data object client-side before sending to server.
 */ const $ae31471d52481ece$var$validateFirebaseData = function(errorPrefix, data, path_) {
    const path = path_ instanceof $ae31471d52481ece$var$Path ? new $ae31471d52481ece$var$ValidationPath(path_, errorPrefix) : path_;
    if (data === undefined) throw new Error(errorPrefix + 'contains undefined ' + $ae31471d52481ece$var$validationPathToErrorString(path));
    if (typeof data === 'function') throw new Error(errorPrefix + 'contains a function ' + $ae31471d52481ece$var$validationPathToErrorString(path) + ' with contents = ' + data.toString());
    if ($ae31471d52481ece$var$isInvalidJSONNumber(data)) throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + $ae31471d52481ece$var$validationPathToErrorString(path));
    // Check max leaf size, but try to avoid the utf8 conversion if we can.
    if (typeof data === 'string' && data.length > $ae31471d52481ece$var$MAX_LEAF_SIZE_ / 3 && (0, $ee1ab2624407a779$export$9536dc0a75b20bf9)(data) > $ae31471d52481ece$var$MAX_LEAF_SIZE_) throw new Error(errorPrefix + 'contains a string greater than ' + $ae31471d52481ece$var$MAX_LEAF_SIZE_ + ' utf8 bytes ' + $ae31471d52481ece$var$validationPathToErrorString(path) + " ('" + data.substring(0, 50) + "...')");
    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON
    // to save extra walking of large objects.
    if (data && typeof data === 'object') {
        let hasDotValue = false;
        let hasActualChild = false;
        $ae31471d52481ece$var$each(data, (key, value)=>{
            if (key === '.value') hasDotValue = true;
            else if (key !== '.priority' && key !== '.sv') {
                hasActualChild = true;
                if (!$ae31471d52481ece$var$isValidKey(key)) throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + $ae31471d52481ece$var$validationPathToErrorString(path) + '.  Keys must be non-empty strings ' + 'and can\'t contain ".", "#", "$", "/", "[", or "]"');
            }
            $ae31471d52481ece$var$validationPathPush(path, key);
            $ae31471d52481ece$var$validateFirebaseData(errorPrefix, value, path);
            $ae31471d52481ece$var$validationPathPop(path);
        });
        if (hasDotValue && hasActualChild) throw new Error(errorPrefix + ' contains ".value" child ' + $ae31471d52481ece$var$validationPathToErrorString(path) + ' in addition to actual children.');
    }
};
/**
 * Pre-validate paths passed in the firebase function.
 */ const $ae31471d52481ece$var$validateFirebaseMergePaths = function(errorPrefix, mergePaths) {
    let i, curPath;
    for(i = 0; i < mergePaths.length; i++){
        curPath = mergePaths[i];
        const keys = $ae31471d52481ece$var$pathSlice(curPath);
        for(let j = 0; j < keys.length; j++){
            if (keys[j] === '.priority' && j === keys.length - 1) ;
            else if (!$ae31471d52481ece$var$isValidKey(keys[j])) throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\'t contain ".", "#", "$", "/", "[", or "]"');
        }
    }
    // Check that update keys are not descendants of each other.
    // We rely on the property that sorting guarantees that ancestors come
    // right before descendants.
    mergePaths.sort($ae31471d52481ece$var$pathCompare);
    let prevPath = null;
    for(i = 0; i < mergePaths.length; i++){
        curPath = mergePaths[i];
        if (prevPath !== null && $ae31471d52481ece$var$pathContains(prevPath, curPath)) throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());
        prevPath = curPath;
    }
};
/**
 * pre-validate an object passed as an argument to firebase function (
 * must be an object - e.g. for firebase.update()).
 */ const $ae31471d52481ece$var$validateFirebaseMergeDataArg = function(fnName, data, path, optional) {
    if (optional && data === undefined) return;
    const errorPrefix$1 = (0, $ee1ab2624407a779$export$adea4917e02d93dc)(fnName, 'values');
    if (!(data && typeof data === 'object') || Array.isArray(data)) throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');
    const mergePaths = [];
    $ae31471d52481ece$var$each(data, (key, value)=>{
        const curPath = new $ae31471d52481ece$var$Path(key);
        $ae31471d52481ece$var$validateFirebaseData(errorPrefix$1, value, $ae31471d52481ece$var$pathChild(path, curPath));
        if ($ae31471d52481ece$var$pathGetBack(curPath) === '.priority') {
            if (!$ae31471d52481ece$var$isValidPriority(value)) throw new Error(errorPrefix$1 + "contains an invalid value for '" + curPath.toString() + "', which must be a valid " + 'Firebase priority (a string, finite number, server value, or null).');
        }
        mergePaths.push(curPath);
    });
    $ae31471d52481ece$var$validateFirebaseMergePaths(errorPrefix$1, mergePaths);
};
const $ae31471d52481ece$var$validatePriority = function(fnName, priority, optional) {
    if (optional && priority === undefined) return;
    if ($ae31471d52481ece$var$isInvalidJSONNumber(priority)) throw new Error((0, $ee1ab2624407a779$export$adea4917e02d93dc)(fnName, 'priority') + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).');
    // Special case to allow importing data with a .sv.
    if (!$ae31471d52481ece$var$isValidPriority(priority)) throw new Error((0, $ee1ab2624407a779$export$adea4917e02d93dc)(fnName, 'priority') + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');
};
const $ae31471d52481ece$var$validateKey = function(fnName, argumentName, key, optional) {
    if (optional && key === undefined) return;
    if (!$ae31471d52481ece$var$isValidKey(key)) throw new Error((0, $ee1ab2624407a779$export$adea4917e02d93dc)(fnName, argumentName) + 'was an invalid key = "' + key + '".  Firebase keys must be non-empty strings and ' + 'can\'t contain ".", "#", "$", "/", "[", or "]").');
};
/**
 * @internal
 */ const $ae31471d52481ece$export$8637b026ace8abb1 = function(fnName, argumentName, pathString, optional) {
    if (optional && pathString === undefined) return;
    if (!$ae31471d52481ece$var$isValidPathString(pathString)) throw new Error((0, $ee1ab2624407a779$export$adea4917e02d93dc)(fnName, argumentName) + 'was an invalid path = "' + pathString + '". Paths must be non-empty strings and ' + 'can\'t contain ".", "#", "$", "[", or "]"');
};
const $ae31471d52481ece$var$validateRootPathString = function(fnName, argumentName, pathString, optional) {
    if (pathString) // Allow '/.info/' at the beginning.
    pathString = pathString.replace(/^\/*\.info(\/|$)/, '/');
    $ae31471d52481ece$export$8637b026ace8abb1(fnName, argumentName, pathString, optional);
};
/**
 * @internal
 */ const $ae31471d52481ece$export$8d83036122ae444e = function(fnName, path) {
    if ($ae31471d52481ece$var$pathGetFront(path) === '.info') throw new Error(fnName + " failed = Can't modify data under /.info/");
};
const $ae31471d52481ece$var$validateUrl = function(fnName, parsedUrl) {
    // TODO = Validate server better.
    const pathString = parsedUrl.path.toString();
    if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !$ae31471d52481ece$var$isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(':')[0] !== 'localhost' || pathString.length !== 0 && !$ae31471d52481ece$var$isValidRootPathString(pathString)) throw new Error((0, $ee1ab2624407a779$export$adea4917e02d93dc)(fnName, 'url') + 'must be a valid firebase URL and ' + 'the path can\'t contain ".", "#", "$", "[", or "]".');
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The event queue serves a few purposes:
 * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more
 *    events being queued.
 * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,
 *    raiseQueuedEvents() is called again, the "inner" call will pick up raising events where the "outer" call
 *    left off, ensuring that the events are still raised synchronously and in order.
 * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued
 *    events are raised synchronously.
 *
 * NOTE: This can all go away if/when we move to async events.
 *
 */ class $ae31471d52481ece$var$EventQueue {
    constructor(){
        this.eventLists_ = [];
        /**
         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.
         */ this.recursionDepth_ = 0;
    }
}
/**
 * @param eventDataList - The new events to queue.
 */ function $ae31471d52481ece$var$eventQueueQueueEvents(eventQueue, eventDataList) {
    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.
    let currList = null;
    for(let i = 0; i < eventDataList.length; i++){
        const data = eventDataList[i];
        const path = data.getPath();
        if (currList !== null && !$ae31471d52481ece$var$pathEquals(path, currList.path)) {
            eventQueue.eventLists_.push(currList);
            currList = null;
        }
        if (currList === null) currList = {
            events: [],
            path: path
        };
        currList.events.push(data);
    }
    if (currList) eventQueue.eventLists_.push(currList);
}
/**
 * Queues the specified events and synchronously raises all events (including previously queued ones)
 * for the specified path.
 *
 * It is assumed that the new events are all for the specified path.
 *
 * @param path - The path to raise events for.
 * @param eventDataList - The new events to raise.
 */ function $ae31471d52481ece$var$eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {
    $ae31471d52481ece$var$eventQueueQueueEvents(eventQueue, eventDataList);
    $ae31471d52481ece$var$eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, (eventPath)=>$ae31471d52481ece$var$pathEquals(eventPath, path));
}
/**
 * Queues the specified events and synchronously raises all events (including previously queued ones) for
 * locations related to the specified change path (i.e. all ancestors and descendants).
 *
 * It is assumed that the new events are all related (ancestor or descendant) to the specified path.
 *
 * @param changedPath - The path to raise events for.
 * @param eventDataList - The events to raise
 */ function $ae31471d52481ece$var$eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {
    $ae31471d52481ece$var$eventQueueQueueEvents(eventQueue, eventDataList);
    $ae31471d52481ece$var$eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, (eventPath)=>$ae31471d52481ece$var$pathContains(eventPath, changedPath) || $ae31471d52481ece$var$pathContains(changedPath, eventPath));
}
function $ae31471d52481ece$var$eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {
    eventQueue.recursionDepth_++;
    let sentAll = true;
    for(let i = 0; i < eventQueue.eventLists_.length; i++){
        const eventList = eventQueue.eventLists_[i];
        if (eventList) {
            const eventPath = eventList.path;
            if (predicate(eventPath)) {
                $ae31471d52481ece$var$eventListRaise(eventQueue.eventLists_[i]);
                eventQueue.eventLists_[i] = null;
            } else sentAll = false;
        }
    }
    if (sentAll) eventQueue.eventLists_ = [];
    eventQueue.recursionDepth_--;
}
/**
 * Iterates through the list and raises each event
 */ function $ae31471d52481ece$var$eventListRaise(eventList) {
    for(let i = 0; i < eventList.events.length; i++){
        const eventData = eventList.events[i];
        if (eventData !== null) {
            eventList.events[i] = null;
            const eventFn = eventData.getEventRunner();
            if ($ae31471d52481ece$var$logger) $ae31471d52481ece$var$log('event: ' + eventData.toString());
            $ae31471d52481ece$var$exceptionGuard(eventFn);
        }
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $ae31471d52481ece$var$INTERRUPT_REASON = 'repo_interrupt';
/**
 * If a transaction does not succeed after 25 retries, we abort it. Among other
 * things this ensure that if there's ever a bug causing a mismatch between
 * client / server hashes for some data, we won't retry indefinitely.
 */ const $ae31471d52481ece$var$MAX_TRANSACTION_RETRIES = 25;
/**
 * A connection to a single data repository.
 */ class $ae31471d52481ece$var$Repo {
    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_){
        this.repoInfo_ = repoInfo_;
        this.forceRestClient_ = forceRestClient_;
        this.authTokenProvider_ = authTokenProvider_;
        this.appCheckProvider_ = appCheckProvider_;
        this.dataUpdateCount = 0;
        this.statsListener_ = null;
        this.eventQueue_ = new $ae31471d52481ece$var$EventQueue();
        this.nextWriteId_ = 1;
        this.interceptServerDataCallback_ = null;
        /** A list of data pieces and paths to be set when this client disconnects. */ this.onDisconnect_ = $ae31471d52481ece$var$newSparseSnapshotTree();
        /** Stores queues of outstanding transactions for Firebase locations. */ this.transactionQueueTree_ = new $ae31471d52481ece$var$Tree();
        // TODO: This should be @private but it's used by test_access.js and internal.js
        this.persistentConnection_ = null;
        // This key is intentionally not updated if RepoInfo is later changed or replaced
        this.key = this.repoInfo_.toURLString();
    }
    /**
     * @returns The URL corresponding to the root of this Firebase.
     */ toString() {
        return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;
    }
}
function $ae31471d52481ece$var$repoStart(repo, appId, authOverride) {
    repo.stats_ = $ae31471d52481ece$var$statsManagerGetCollection(repo.repoInfo_);
    if (repo.forceRestClient_ || $ae31471d52481ece$var$beingCrawled()) {
        repo.server_ = new $ae31471d52481ece$var$ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag)=>{
            $ae31471d52481ece$var$repoOnDataUpdate(repo, pathString, data, isMerge, tag);
        }, repo.authTokenProvider_, repo.appCheckProvider_);
        // Minor hack: Fire onConnect immediately, since there's no actual connection.
        setTimeout(()=>$ae31471d52481ece$var$repoOnConnectStatus(repo, /* connectStatus= */ true), 0);
    } else {
        // Validate authOverride
        if (typeof authOverride !== 'undefined' && authOverride !== null) {
            if (typeof authOverride !== 'object') throw new Error('Only objects are supported for option databaseAuthVariableOverride');
            try {
                (0, $ee1ab2624407a779$export$fac44ee5b035f737)(authOverride);
            } catch (e) {
                throw new Error('Invalid authOverride provided: ' + e);
            }
        }
        repo.persistentConnection_ = new $ae31471d52481ece$var$PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag)=>{
            $ae31471d52481ece$var$repoOnDataUpdate(repo, pathString, data, isMerge, tag);
        }, (connectStatus)=>{
            $ae31471d52481ece$var$repoOnConnectStatus(repo, connectStatus);
        }, (updates)=>{
            $ae31471d52481ece$var$repoOnServerInfoUpdate(repo, updates);
        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);
        repo.server_ = repo.persistentConnection_;
    }
    repo.authTokenProvider_.addTokenChangeListener((token)=>{
        repo.server_.refreshAuthToken(token);
    });
    repo.appCheckProvider_.addTokenChangeListener((result)=>{
        repo.server_.refreshAppCheckToken(result.token);
    });
    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),
    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.
    repo.statsReporter_ = $ae31471d52481ece$var$statsManagerGetOrCreateReporter(repo.repoInfo_, ()=>new $ae31471d52481ece$var$StatsReporter(repo.stats_, repo.server_));
    // Used for .info.
    repo.infoData_ = new $ae31471d52481ece$var$SnapshotHolder();
    repo.infoSyncTree_ = new $ae31471d52481ece$var$SyncTree({
        startListening: (query, tag, currentHashFn, onComplete)=>{
            let infoEvents = [];
            const node = repo.infoData_.getNode(query._path);
            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events
            // on initial data...
            if (!node.isEmpty()) {
                infoEvents = $ae31471d52481ece$var$syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);
                setTimeout(()=>{
                    onComplete('ok');
                }, 0);
            }
            return infoEvents;
        },
        stopListening: ()=>{}
    });
    $ae31471d52481ece$var$repoUpdateInfo(repo, 'connected', false);
    repo.serverSyncTree_ = new $ae31471d52481ece$var$SyncTree({
        startListening: (query, tag, currentHashFn, onComplete)=>{
            repo.server_.listen(query, currentHashFn, tag, (status, data)=>{
                const events = onComplete(status, data);
                $ae31471d52481ece$var$eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);
            });
            // No synchronous events for network-backed sync trees
            return [];
        },
        stopListening: (query, tag)=>{
            repo.server_.unlisten(query, tag);
        }
    });
}
/**
 * @returns The time in milliseconds, taking the server offset into account if we have one.
 */ function $ae31471d52481ece$var$repoServerTime(repo) {
    const offsetNode = repo.infoData_.getNode(new $ae31471d52481ece$var$Path('.info/serverTimeOffset'));
    const offset = offsetNode.val() || 0;
    return new Date().getTime() + offset;
}
/**
 * Generate ServerValues using some variables from the repo object.
 */ function $ae31471d52481ece$var$repoGenerateServerValues(repo) {
    return $ae31471d52481ece$var$generateWithValues({
        timestamp: $ae31471d52481ece$var$repoServerTime(repo)
    });
}
/**
 * Called by realtime when we get new messages from the server.
 */ function $ae31471d52481ece$var$repoOnDataUpdate(repo, pathString, data, isMerge, tag) {
    // For testing.
    repo.dataUpdateCount++;
    const path = new $ae31471d52481ece$var$Path(pathString);
    data = repo.interceptServerDataCallback_ ? repo.interceptServerDataCallback_(pathString, data) : data;
    let events = [];
    if (tag) {
        if (isMerge) {
            const taggedChildren = (0, $ee1ab2624407a779$export$871de8747c9eaa88)(data, (raw)=>$ae31471d52481ece$var$nodeFromJSON(raw));
            events = $ae31471d52481ece$var$syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);
        } else {
            const taggedSnap = $ae31471d52481ece$var$nodeFromJSON(data);
            events = $ae31471d52481ece$var$syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);
        }
    } else if (isMerge) {
        const changedChildren = (0, $ee1ab2624407a779$export$871de8747c9eaa88)(data, (raw)=>$ae31471d52481ece$var$nodeFromJSON(raw));
        events = $ae31471d52481ece$var$syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);
    } else {
        const snap = $ae31471d52481ece$var$nodeFromJSON(data);
        events = $ae31471d52481ece$var$syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);
    }
    let affectedPath = path;
    if (events.length > 0) // Since we have a listener outstanding for each transaction, receiving any events
    // is a proxy for some change having occurred.
    affectedPath = $ae31471d52481ece$var$repoRerunTransactions(repo, path);
    $ae31471d52481ece$var$eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);
}
function $ae31471d52481ece$var$repoOnConnectStatus(repo, connectStatus) {
    $ae31471d52481ece$var$repoUpdateInfo(repo, 'connected', connectStatus);
    if (connectStatus === false) $ae31471d52481ece$var$repoRunOnDisconnectEvents(repo);
}
function $ae31471d52481ece$var$repoOnServerInfoUpdate(repo, updates) {
    $ae31471d52481ece$var$each(updates, (key, value)=>{
        $ae31471d52481ece$var$repoUpdateInfo(repo, key, value);
    });
}
function $ae31471d52481ece$var$repoUpdateInfo(repo, pathString, value) {
    const path = new $ae31471d52481ece$var$Path('/.info/' + pathString);
    const newNode = $ae31471d52481ece$var$nodeFromJSON(value);
    repo.infoData_.updateSnapshot(path, newNode);
    const events = $ae31471d52481ece$var$syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);
    $ae31471d52481ece$var$eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
}
function $ae31471d52481ece$var$repoGetNextWriteId(repo) {
    return repo.nextWriteId_++;
}
/**
 * The purpose of `getValue` is to return the latest known value
 * satisfying `query`.
 *
 * This method will first check for in-memory cached values
 * belonging to active listeners. If they are found, such values
 * are considered to be the most up-to-date.
 *
 * If the client is not connected, this method will wait until the
 *  repo has established a connection and then request the value for `query`.
 * If the client is not able to retrieve the query result for another reason,
 * it reports an error.
 *
 * @param query - The query to surface a value for.
 */ function $ae31471d52481ece$var$repoGetValue(repo, query, eventRegistration) {
    // Only active queries are cached. There is no persisted cache.
    const cached = $ae31471d52481ece$var$syncTreeGetServerValue(repo.serverSyncTree_, query);
    if (cached != null) return Promise.resolve(cached);
    return repo.server_.get(query).then((payload)=>{
        const node = $ae31471d52481ece$var$nodeFromJSON(payload).withIndex(query._queryParams.getIndex());
        /**
         * Below we simulate the actions of an `onlyOnce` `onValue()` event where:
         * Add an event registration,
         * Update data at the path,
         * Raise any events,
         * Cleanup the SyncTree
         */ $ae31471d52481ece$var$syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);
        let events;
        if (query._queryParams.loadsAllData()) events = $ae31471d52481ece$var$syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);
        else {
            const tag = $ae31471d52481ece$var$syncTreeTagForQuery(repo.serverSyncTree_, query);
            events = $ae31471d52481ece$var$syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);
        }
        /*
         * We need to raise events in the scenario where `get()` is called at a parent path, and
         * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting
         * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree
         * and its corresponding serverCache, including the child location where `onValue` is called. Then,
         * `onValue` will receive the event from the server, but look at the syncTree and see that the data received
         * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.
         * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and
         * ensure the corresponding child events will get fired.
         */ $ae31471d52481ece$var$eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);
        $ae31471d52481ece$var$syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);
        return node;
    }, (err)=>{
        $ae31471d52481ece$var$repoLog(repo, 'get for query ' + (0, $ee1ab2624407a779$export$fac44ee5b035f737)(query) + ' failed: ' + err);
        return Promise.reject(new Error(err));
    });
}
function $ae31471d52481ece$var$repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {
    $ae31471d52481ece$var$repoLog(repo, 'set', {
        path: path.toString(),
        value: newVal,
        priority: newPriority
    });
    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or
    // (b) store unresolved paths on JSON parse
    const serverValues = $ae31471d52481ece$var$repoGenerateServerValues(repo);
    const newNodeUnresolved = $ae31471d52481ece$var$nodeFromJSON(newVal, newPriority);
    const existing = $ae31471d52481ece$var$syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);
    const newNode = $ae31471d52481ece$var$resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);
    const writeId = $ae31471d52481ece$var$repoGetNextWriteId(repo);
    const events = $ae31471d52481ece$var$syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);
    $ae31471d52481ece$var$eventQueueQueueEvents(repo.eventQueue_, events);
    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason)=>{
        const success = status === 'ok';
        if (!success) $ae31471d52481ece$var$warn('set at ' + path + ' failed: ' + status);
        const clearEvents = $ae31471d52481ece$var$syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);
        $ae31471d52481ece$var$eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);
        $ae31471d52481ece$var$repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
    });
    const affectedPath = $ae31471d52481ece$var$repoAbortTransactions(repo, path);
    $ae31471d52481ece$var$repoRerunTransactions(repo, affectedPath);
    // We queued the events above, so just flush the queue here
    $ae31471d52481ece$var$eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);
}
function $ae31471d52481ece$var$repoUpdate(repo, path, childrenToMerge, onComplete) {
    $ae31471d52481ece$var$repoLog(repo, 'update', {
        path: path.toString(),
        value: childrenToMerge
    });
    // Start with our existing data and merge each child into it.
    let empty = true;
    const serverValues = $ae31471d52481ece$var$repoGenerateServerValues(repo);
    const changedChildren = {};
    $ae31471d52481ece$var$each(childrenToMerge, (changedKey, changedValue)=>{
        empty = false;
        changedChildren[changedKey] = $ae31471d52481ece$var$resolveDeferredValueTree($ae31471d52481ece$var$pathChild(path, changedKey), $ae31471d52481ece$var$nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);
    });
    if (!empty) {
        const writeId = $ae31471d52481ece$var$repoGetNextWriteId(repo);
        const events = $ae31471d52481ece$var$syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);
        $ae31471d52481ece$var$eventQueueQueueEvents(repo.eventQueue_, events);
        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason)=>{
            const success = status === 'ok';
            if (!success) $ae31471d52481ece$var$warn('update at ' + path + ' failed: ' + status);
            const clearEvents = $ae31471d52481ece$var$syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);
            const affectedPath = clearEvents.length > 0 ? $ae31471d52481ece$var$repoRerunTransactions(repo, path) : path;
            $ae31471d52481ece$var$eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);
            $ae31471d52481ece$var$repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
        });
        $ae31471d52481ece$var$each(childrenToMerge, (changedPath)=>{
            const affectedPath = $ae31471d52481ece$var$repoAbortTransactions(repo, $ae31471d52481ece$var$pathChild(path, changedPath));
            $ae31471d52481ece$var$repoRerunTransactions(repo, affectedPath);
        });
        // We queued the events above, so just flush the queue here
        $ae31471d52481ece$var$eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);
    } else {
        $ae31471d52481ece$var$log("update() called with empty data.  Don't do anything.");
        $ae31471d52481ece$var$repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);
    }
}
/**
 * Applies all of the changes stored up in the onDisconnect_ tree.
 */ function $ae31471d52481ece$var$repoRunOnDisconnectEvents(repo) {
    $ae31471d52481ece$var$repoLog(repo, 'onDisconnectEvents');
    const serverValues = $ae31471d52481ece$var$repoGenerateServerValues(repo);
    const resolvedOnDisconnectTree = $ae31471d52481ece$var$newSparseSnapshotTree();
    $ae31471d52481ece$var$sparseSnapshotTreeForEachTree(repo.onDisconnect_, $ae31471d52481ece$var$newEmptyPath(), (path, node)=>{
        const resolved = $ae31471d52481ece$var$resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);
        $ae31471d52481ece$var$sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);
    });
    let events = [];
    $ae31471d52481ece$var$sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, $ae31471d52481ece$var$newEmptyPath(), (path, snap)=>{
        events = events.concat($ae31471d52481ece$var$syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));
        const affectedPath = $ae31471d52481ece$var$repoAbortTransactions(repo, path);
        $ae31471d52481ece$var$repoRerunTransactions(repo, affectedPath);
    });
    repo.onDisconnect_ = $ae31471d52481ece$var$newSparseSnapshotTree();
    $ae31471d52481ece$var$eventQueueRaiseEventsForChangedPath(repo.eventQueue_, $ae31471d52481ece$var$newEmptyPath(), events);
}
function $ae31471d52481ece$var$repoOnDisconnectCancel(repo, path, onComplete) {
    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason)=>{
        if (status === 'ok') $ae31471d52481ece$var$sparseSnapshotTreeForget(repo.onDisconnect_, path);
        $ae31471d52481ece$var$repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
    });
}
function $ae31471d52481ece$var$repoOnDisconnectSet(repo, path, value, onComplete) {
    const newNode = $ae31471d52481ece$var$nodeFromJSON(value);
    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason)=>{
        if (status === 'ok') $ae31471d52481ece$var$sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);
        $ae31471d52481ece$var$repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
    });
}
function $ae31471d52481ece$var$repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {
    const newNode = $ae31471d52481ece$var$nodeFromJSON(value, priority);
    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason)=>{
        if (status === 'ok') $ae31471d52481ece$var$sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);
        $ae31471d52481ece$var$repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
    });
}
function $ae31471d52481ece$var$repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {
    if ((0, $ee1ab2624407a779$export$dd1bc94b04021eeb)(childrenToMerge)) {
        $ae31471d52481ece$var$log("onDisconnect().update() called with empty data.  Don't do anything.");
        $ae31471d52481ece$var$repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);
        return;
    }
    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason)=>{
        if (status === 'ok') $ae31471d52481ece$var$each(childrenToMerge, (childName, childNode)=>{
            const newChildNode = $ae31471d52481ece$var$nodeFromJSON(childNode);
            $ae31471d52481ece$var$sparseSnapshotTreeRemember(repo.onDisconnect_, $ae31471d52481ece$var$pathChild(path, childName), newChildNode);
        });
        $ae31471d52481ece$var$repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
    });
}
function $ae31471d52481ece$var$repoAddEventCallbackForQuery(repo, query, eventRegistration) {
    let events;
    if ($ae31471d52481ece$var$pathGetFront(query._path) === '.info') events = $ae31471d52481ece$var$syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);
    else events = $ae31471d52481ece$var$syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);
    $ae31471d52481ece$var$eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);
}
function $ae31471d52481ece$var$repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {
    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof
    // a little bit by handling the return values anyways.
    let events;
    if ($ae31471d52481ece$var$pathGetFront(query._path) === '.info') events = $ae31471d52481ece$var$syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);
    else events = $ae31471d52481ece$var$syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);
    $ae31471d52481ece$var$eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);
}
function $ae31471d52481ece$var$repoInterrupt(repo) {
    if (repo.persistentConnection_) repo.persistentConnection_.interrupt($ae31471d52481ece$var$INTERRUPT_REASON);
}
function $ae31471d52481ece$var$repoResume(repo) {
    if (repo.persistentConnection_) repo.persistentConnection_.resume($ae31471d52481ece$var$INTERRUPT_REASON);
}
function $ae31471d52481ece$var$repoLog(repo, ...varArgs) {
    let prefix = '';
    if (repo.persistentConnection_) prefix = repo.persistentConnection_.id + ':';
    $ae31471d52481ece$var$log(prefix, ...varArgs);
}
function $ae31471d52481ece$var$repoCallOnCompleteCallback(repo, callback, status, errorReason) {
    if (callback) $ae31471d52481ece$var$exceptionGuard(()=>{
        if (status === 'ok') callback(null);
        else {
            const code = (status || 'error').toUpperCase();
            let message = code;
            if (errorReason) message += ': ' + errorReason;
            const error = new Error(message);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            error.code = code;
            callback(error);
        }
    });
}
/**
 * Creates a new transaction, adds it to the transactions we're tracking, and
 * sends it to the server if possible.
 *
 * @param path - Path at which to do transaction.
 * @param transactionUpdate - Update callback.
 * @param onComplete - Completion callback.
 * @param unwatcher - Function that will be called when the transaction no longer
 * need data updates for `path`.
 * @param applyLocally - Whether or not to make intermediate results visible
 */ function $ae31471d52481ece$var$repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {
    $ae31471d52481ece$var$repoLog(repo, 'transaction on ' + path);
    // Initialize transaction.
    const transaction = {
        path: path,
        update: transactionUpdate,
        onComplete: onComplete,
        // One of TransactionStatus enums.
        status: null,
        // Used when combining transactions at different locations to figure out
        // which one goes first.
        order: $ae31471d52481ece$var$LUIDGenerator(),
        applyLocally: // Whether to raise local events for this transaction.
        applyLocally,
        // Count of how many times we've retried the transaction.
        retryCount: 0,
        unwatcher: // Function to call to clean up our .on() listener.
        unwatcher,
        // Stores why a transaction was aborted.
        abortReason: null,
        currentWriteId: null,
        currentInputSnapshot: null,
        currentOutputSnapshotRaw: null,
        currentOutputSnapshotResolved: null
    };
    // Run transaction initially.
    const currentState = $ae31471d52481ece$var$repoGetLatestState(repo, path, undefined);
    transaction.currentInputSnapshot = currentState;
    const newVal = transaction.update(currentState.val());
    if (newVal === undefined) {
        // Abort transaction.
        transaction.unwatcher();
        transaction.currentOutputSnapshotRaw = null;
        transaction.currentOutputSnapshotResolved = null;
        if (transaction.onComplete) transaction.onComplete(null, false, transaction.currentInputSnapshot);
    } else {
        $ae31471d52481ece$var$validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);
        // Mark as run and add to our queue.
        transaction.status = 0 /* TransactionStatus.RUN */ ;
        const queueNode = $ae31471d52481ece$var$treeSubTree(repo.transactionQueueTree_, path);
        const nodeQueue = $ae31471d52481ece$var$treeGetValue(queueNode) || [];
        nodeQueue.push(transaction);
        $ae31471d52481ece$var$treeSetValue(queueNode, nodeQueue);
        // Update visibleData and raise events
        // Note: We intentionally raise events after updating all of our
        // transaction state, since the user could start new transactions from the
        // event callbacks.
        let priorityForNode;
        if (typeof newVal === 'object' && newVal !== null && (0, $ee1ab2624407a779$export$2344b14b097df817)(newVal, '.priority')) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            priorityForNode = (0, $ee1ab2624407a779$export$e51ae4db7b428f67)(newVal, '.priority');
            (0, $ee1ab2624407a779$export$a7a9523472993e97)($ae31471d52481ece$var$isValidPriority(priorityForNode), "Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.");
        } else {
            const currentNode = $ae31471d52481ece$var$syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) || $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE;
            priorityForNode = currentNode.getPriority().val();
        }
        const serverValues = $ae31471d52481ece$var$repoGenerateServerValues(repo);
        const newNodeUnresolved = $ae31471d52481ece$var$nodeFromJSON(newVal, priorityForNode);
        const newNode = $ae31471d52481ece$var$resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);
        transaction.currentOutputSnapshotRaw = newNodeUnresolved;
        transaction.currentOutputSnapshotResolved = newNode;
        transaction.currentWriteId = $ae31471d52481ece$var$repoGetNextWriteId(repo);
        const events = $ae31471d52481ece$var$syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);
        $ae31471d52481ece$var$eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
        $ae31471d52481ece$var$repoSendReadyTransactions(repo, repo.transactionQueueTree_);
    }
}
/**
 * @param excludeSets - A specific set to exclude
 */ function $ae31471d52481ece$var$repoGetLatestState(repo, path, excludeSets) {
    return $ae31471d52481ece$var$syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) || $ae31471d52481ece$var$ChildrenNode.EMPTY_NODE;
}
/**
 * Sends any already-run transactions that aren't waiting for outstanding
 * transactions to complete.
 *
 * Externally it's called with no arguments, but it calls itself recursively
 * with a particular transactionQueueTree node to recurse through the tree.
 *
 * @param node - transactionQueueTree node to start at.
 */ function $ae31471d52481ece$var$repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {
    // Before recursing, make sure any completed transactions are removed.
    if (!node) $ae31471d52481ece$var$repoPruneCompletedTransactionsBelowNode(repo, node);
    if ($ae31471d52481ece$var$treeGetValue(node)) {
        const queue = $ae31471d52481ece$var$repoBuildTransactionQueue(repo, node);
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(queue.length > 0, 'Sending zero length transaction queue');
        const allRun = queue.every((transaction)=>transaction.status === 0 /* TransactionStatus.RUN */ );
        // If they're all run (and not sent), we can send them.  Else, we must wait.
        if (allRun) $ae31471d52481ece$var$repoSendTransactionQueue(repo, $ae31471d52481ece$var$treeGetPath(node), queue);
    } else if ($ae31471d52481ece$var$treeHasChildren(node)) $ae31471d52481ece$var$treeForEachChild(node, (childNode)=>{
        $ae31471d52481ece$var$repoSendReadyTransactions(repo, childNode);
    });
}
/**
 * Given a list of run transactions, send them to the server and then handle
 * the result (success or failure).
 *
 * @param path - The location of the queue.
 * @param queue - Queue of transactions under the specified location.
 */ function $ae31471d52481ece$var$repoSendTransactionQueue(repo, path, queue) {
    // Mark transactions as sent and increment retry count!
    const setsToIgnore = queue.map((txn)=>{
        return txn.currentWriteId;
    });
    const latestState = $ae31471d52481ece$var$repoGetLatestState(repo, path, setsToIgnore);
    let snapToSend = latestState;
    const latestHash = latestState.hash();
    for(let i = 0; i < queue.length; i++){
        const txn = queue[i];
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(txn.status === 0 /* TransactionStatus.RUN */ , 'tryToSendTransactionQueue_: items in queue should all be run.');
        txn.status = 1 /* TransactionStatus.SENT */ ;
        txn.retryCount++;
        const relativePath = $ae31471d52481ece$var$newRelativePath(path, txn.path);
        // If we've gotten to this point, the output snapshot must be defined.
        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */ , txn.currentOutputSnapshotRaw);
    }
    const dataToSend = snapToSend.val(true);
    const pathToSend = path;
    // Send the put.
    repo.server_.put(pathToSend.toString(), dataToSend, (status)=>{
        $ae31471d52481ece$var$repoLog(repo, 'transaction put response', {
            path: pathToSend.toString(),
            status: status
        });
        let events = [];
        if (status === 'ok') {
            // Queue up the callbacks and fire them after cleaning up all of our
            // transaction state, since the callback could trigger more
            // transactions or sets.
            const callbacks = [];
            for(let i = 0; i < queue.length; i++){
                queue[i].status = 2 /* TransactionStatus.COMPLETED */ ;
                events = events.concat($ae31471d52481ece$var$syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));
                if (queue[i].onComplete) // We never unset the output snapshot, and given that this
                // transaction is complete, it should be set
                callbacks.push(()=>queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));
                queue[i].unwatcher();
            }
            // Now remove the completed transactions.
            $ae31471d52481ece$var$repoPruneCompletedTransactionsBelowNode(repo, $ae31471d52481ece$var$treeSubTree(repo.transactionQueueTree_, path));
            // There may be pending transactions that we can now send.
            $ae31471d52481ece$var$repoSendReadyTransactions(repo, repo.transactionQueueTree_);
            $ae31471d52481ece$var$eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
            // Finally, trigger onComplete callbacks.
            for(let i = 0; i < callbacks.length; i++)$ae31471d52481ece$var$exceptionGuard(callbacks[i]);
        } else {
            // transactions are no longer sent.  Update their status appropriately.
            if (status === 'datastale') {
                for(let i = 0; i < queue.length; i++)if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */ ) queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */ ;
                else queue[i].status = 0 /* TransactionStatus.RUN */ ;
            } else {
                $ae31471d52481ece$var$warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);
                for(let i = 0; i < queue.length; i++){
                    queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */ ;
                    queue[i].abortReason = status;
                }
            }
            $ae31471d52481ece$var$repoRerunTransactions(repo, path);
        }
    }, latestHash);
}
/**
 * Finds all transactions dependent on the data at changedPath and reruns them.
 *
 * Should be called any time cached data changes.
 *
 * Return the highest path that was affected by rerunning transactions. This
 * is the path at which events need to be raised for.
 *
 * @param changedPath - The path in mergedData that changed.
 * @returns The rootmost path that was affected by rerunning transactions.
 */ function $ae31471d52481ece$var$repoRerunTransactions(repo, changedPath) {
    const rootMostTransactionNode = $ae31471d52481ece$var$repoGetAncestorTransactionNode(repo, changedPath);
    const path = $ae31471d52481ece$var$treeGetPath(rootMostTransactionNode);
    const queue = $ae31471d52481ece$var$repoBuildTransactionQueue(repo, rootMostTransactionNode);
    $ae31471d52481ece$var$repoRerunTransactionQueue(repo, queue, path);
    return path;
}
/**
 * Does all the work of rerunning transactions (as well as cleans up aborted
 * transactions and whatnot).
 *
 * @param queue - The queue of transactions to run.
 * @param path - The path the queue is for.
 */ function $ae31471d52481ece$var$repoRerunTransactionQueue(repo, queue, path) {
    if (queue.length === 0) return; // Nothing to do!
    // Queue up the callbacks and fire them after cleaning up all of our
    // transaction state, since the callback could trigger more transactions or
    // sets.
    const callbacks = [];
    let events = [];
    // Ignore all of the sets we're going to re-run.
    const txnsToRerun = queue.filter((q)=>{
        return q.status === 0 /* TransactionStatus.RUN */ ;
    });
    const setsToIgnore = txnsToRerun.map((q)=>{
        return q.currentWriteId;
    });
    for(let i = 0; i < queue.length; i++){
        const transaction = queue[i];
        const relativePath = $ae31471d52481ece$var$newRelativePath(path, transaction.path);
        let abortTransaction = false, abortReason;
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');
        if (transaction.status === 4 /* TransactionStatus.NEEDS_ABORT */ ) {
            abortTransaction = true;
            abortReason = transaction.abortReason;
            events = events.concat($ae31471d52481ece$var$syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
        } else if (transaction.status === 0 /* TransactionStatus.RUN */ ) {
            if (transaction.retryCount >= $ae31471d52481ece$var$MAX_TRANSACTION_RETRIES) {
                abortTransaction = true;
                abortReason = 'maxretry';
                events = events.concat($ae31471d52481ece$var$syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
            } else {
                // This code reruns a transaction
                const currentNode = $ae31471d52481ece$var$repoGetLatestState(repo, transaction.path, setsToIgnore);
                transaction.currentInputSnapshot = currentNode;
                const newData = queue[i].update(currentNode.val());
                if (newData !== undefined) {
                    $ae31471d52481ece$var$validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);
                    let newDataNode = $ae31471d52481ece$var$nodeFromJSON(newData);
                    const hasExplicitPriority = typeof newData === 'object' && newData != null && (0, $ee1ab2624407a779$export$2344b14b097df817)(newData, '.priority');
                    if (!hasExplicitPriority) // Keep the old priority if there wasn't a priority explicitly specified.
                    newDataNode = newDataNode.updatePriority(currentNode.getPriority());
                    const oldWriteId = transaction.currentWriteId;
                    const serverValues = $ae31471d52481ece$var$repoGenerateServerValues(repo);
                    const newNodeResolved = $ae31471d52481ece$var$resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);
                    transaction.currentOutputSnapshotRaw = newDataNode;
                    transaction.currentOutputSnapshotResolved = newNodeResolved;
                    transaction.currentWriteId = $ae31471d52481ece$var$repoGetNextWriteId(repo);
                    // Mutates setsToIgnore in place
                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);
                    events = events.concat($ae31471d52481ece$var$syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));
                    events = events.concat($ae31471d52481ece$var$syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));
                } else {
                    abortTransaction = true;
                    abortReason = 'nodata';
                    events = events.concat($ae31471d52481ece$var$syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
                }
            }
        }
        $ae31471d52481ece$var$eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
        events = [];
        if (abortTransaction) {
            // Abort.
            queue[i].status = 2 /* TransactionStatus.COMPLETED */ ;
            // Removing a listener can trigger pruning which can muck with
            // mergedData/visibleData (as it prunes data). So defer the unwatcher
            // until we're done.
            (function(unwatcher) {
                setTimeout(unwatcher, Math.floor(0));
            })(queue[i].unwatcher);
            if (queue[i].onComplete) {
                if (abortReason === 'nodata') callbacks.push(()=>queue[i].onComplete(null, false, queue[i].currentInputSnapshot));
                else callbacks.push(()=>queue[i].onComplete(new Error(abortReason), false, null));
            }
        }
    }
    // Clean up completed transactions.
    $ae31471d52481ece$var$repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);
    // Now fire callbacks, now that we're in a good, known state.
    for(let i = 0; i < callbacks.length; i++)$ae31471d52481ece$var$exceptionGuard(callbacks[i]);
    // Try to send the transaction result to the server.
    $ae31471d52481ece$var$repoSendReadyTransactions(repo, repo.transactionQueueTree_);
}
/**
 * Returns the rootmost ancestor node of the specified path that has a pending
 * transaction on it, or just returns the node for the given path if there are
 * no pending transactions on any ancestor.
 *
 * @param path - The location to start at.
 * @returns The rootmost node with a transaction.
 */ function $ae31471d52481ece$var$repoGetAncestorTransactionNode(repo, path) {
    let front;
    // Start at the root and walk deeper into the tree towards path until we
    // find a node with pending transactions.
    let transactionNode = repo.transactionQueueTree_;
    front = $ae31471d52481ece$var$pathGetFront(path);
    while(front !== null && $ae31471d52481ece$var$treeGetValue(transactionNode) === undefined){
        transactionNode = $ae31471d52481ece$var$treeSubTree(transactionNode, front);
        path = $ae31471d52481ece$var$pathPopFront(path);
        front = $ae31471d52481ece$var$pathGetFront(path);
    }
    return transactionNode;
}
/**
 * Builds the queue of all transactions at or below the specified
 * transactionNode.
 *
 * @param transactionNode
 * @returns The generated queue.
 */ function $ae31471d52481ece$var$repoBuildTransactionQueue(repo, transactionNode) {
    // Walk any child transaction queues and aggregate them into a single queue.
    const transactionQueue = [];
    $ae31471d52481ece$var$repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);
    // Sort them by the order the transactions were created.
    transactionQueue.sort((a, b)=>a.order - b.order);
    return transactionQueue;
}
function $ae31471d52481ece$var$repoAggregateTransactionQueuesForNode(repo, node, queue) {
    const nodeQueue = $ae31471d52481ece$var$treeGetValue(node);
    if (nodeQueue) for(let i = 0; i < nodeQueue.length; i++)queue.push(nodeQueue[i]);
    $ae31471d52481ece$var$treeForEachChild(node, (child)=>{
        $ae31471d52481ece$var$repoAggregateTransactionQueuesForNode(repo, child, queue);
    });
}
/**
 * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.
 */ function $ae31471d52481ece$var$repoPruneCompletedTransactionsBelowNode(repo, node) {
    const queue = $ae31471d52481ece$var$treeGetValue(node);
    if (queue) {
        let to = 0;
        for(let from = 0; from < queue.length; from++)if (queue[from].status !== 2 /* TransactionStatus.COMPLETED */ ) {
            queue[to] = queue[from];
            to++;
        }
        queue.length = to;
        $ae31471d52481ece$var$treeSetValue(node, queue.length > 0 ? queue : undefined);
    }
    $ae31471d52481ece$var$treeForEachChild(node, (childNode)=>{
        $ae31471d52481ece$var$repoPruneCompletedTransactionsBelowNode(repo, childNode);
    });
}
/**
 * Aborts all transactions on ancestors or descendants of the specified path.
 * Called when doing a set() or update() since we consider them incompatible
 * with transactions.
 *
 * @param path - Path for which we want to abort related transactions.
 */ function $ae31471d52481ece$var$repoAbortTransactions(repo, path) {
    const affectedPath = $ae31471d52481ece$var$treeGetPath($ae31471d52481ece$var$repoGetAncestorTransactionNode(repo, path));
    const transactionNode = $ae31471d52481ece$var$treeSubTree(repo.transactionQueueTree_, path);
    $ae31471d52481ece$var$treeForEachAncestor(transactionNode, (node)=>{
        $ae31471d52481ece$var$repoAbortTransactionsOnNode(repo, node);
    });
    $ae31471d52481ece$var$repoAbortTransactionsOnNode(repo, transactionNode);
    $ae31471d52481ece$var$treeForEachDescendant(transactionNode, (node)=>{
        $ae31471d52481ece$var$repoAbortTransactionsOnNode(repo, node);
    });
    return affectedPath;
}
/**
 * Abort transactions stored in this transaction queue node.
 *
 * @param node - Node to abort transactions for.
 */ function $ae31471d52481ece$var$repoAbortTransactionsOnNode(repo, node) {
    const queue = $ae31471d52481ece$var$treeGetValue(node);
    if (queue) {
        // Queue up the callbacks and fire them after cleaning up all of our
        // transaction state, since the callback could trigger more transactions
        // or sets.
        const callbacks = [];
        // Go through queue.  Any already-sent transactions must be marked for
        // abort, while the unsent ones can be immediately aborted and removed.
        let events = [];
        let lastSent = -1;
        for(let i = 0; i < queue.length; i++){
            if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */ ) ;
            else if (queue[i].status === 1 /* TransactionStatus.SENT */ ) {
                (0, $ee1ab2624407a779$export$a7a9523472993e97)(lastSent === i - 1, 'All SENT items should be at beginning of queue.');
                lastSent = i;
                // Mark transaction for abort when it comes back.
                queue[i].status = 3 /* TransactionStatus.SENT_NEEDS_ABORT */ ;
                queue[i].abortReason = 'set';
            } else {
                (0, $ee1ab2624407a779$export$a7a9523472993e97)(queue[i].status === 0 /* TransactionStatus.RUN */ , 'Unexpected transaction status in abort');
                // We can abort it immediately.
                queue[i].unwatcher();
                events = events.concat($ae31471d52481ece$var$syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));
                if (queue[i].onComplete) callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));
            }
        }
        if (lastSent === -1) // We're not waiting for any sent transactions.  We can clear the queue.
        $ae31471d52481ece$var$treeSetValue(node, undefined);
        else // Remove the transactions we aborted.
        queue.length = lastSent + 1;
        // Now fire the callbacks.
        $ae31471d52481ece$var$eventQueueRaiseEventsForChangedPath(repo.eventQueue_, $ae31471d52481ece$var$treeGetPath(node), events);
        for(let i = 0; i < callbacks.length; i++)$ae31471d52481ece$var$exceptionGuard(callbacks[i]);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $ae31471d52481ece$var$decodePath(pathString) {
    let pathStringDecoded = '';
    const pieces = pathString.split('/');
    for(let i = 0; i < pieces.length; i++)if (pieces[i].length > 0) {
        let piece = pieces[i];
        try {
            piece = decodeURIComponent(piece.replace(/\+/g, ' '));
        } catch (e) {}
        pathStringDecoded += '/' + piece;
    }
    return pathStringDecoded;
}
/**
 * @returns key value hash
 */ function $ae31471d52481ece$var$decodeQuery(queryString) {
    const results = {};
    if (queryString.charAt(0) === '?') queryString = queryString.substring(1);
    for (const segment of queryString.split('&')){
        if (segment.length === 0) continue;
        const kv = segment.split('=');
        if (kv.length === 2) results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);
        else $ae31471d52481ece$var$warn(`Invalid query segment '${segment}' in query '${queryString}'`);
    }
    return results;
}
const $ae31471d52481ece$var$parseRepoInfo = function(dataURL, nodeAdmin) {
    const parsedUrl = $ae31471d52481ece$var$parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;
    if (parsedUrl.domain === 'firebase.com') $ae31471d52481ece$var$fatal(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');
    // Catch common error of uninitialized namespace value.
    if ((!namespace || namespace === 'undefined') && parsedUrl.domain !== 'localhost') $ae31471d52481ece$var$fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');
    if (!parsedUrl.secure) $ae31471d52481ece$var$warnIfPageIsSecure();
    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';
    return {
        repoInfo: new $ae31471d52481ece$var$RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, /*persistenceKey=*/ '', /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),
        path: new $ae31471d52481ece$var$Path(parsedUrl.pathString)
    };
};
const $ae31471d52481ece$var$parseDatabaseURL = function(dataURL) {
    // Default to empty strings in the event of a malformed string.
    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';
    // Always default to SSL, unless otherwise specified.
    let secure = true, scheme = 'https', port = 443;
    // Don't do any validation here. The caller is responsible for validating the result of parsing.
    if (typeof dataURL === 'string') {
        // Parse scheme.
        let colonInd = dataURL.indexOf('//');
        if (colonInd >= 0) {
            scheme = dataURL.substring(0, colonInd - 1);
            dataURL = dataURL.substring(colonInd + 2);
        }
        // Parse host, path, and query string.
        let slashInd = dataURL.indexOf('/');
        if (slashInd === -1) slashInd = dataURL.length;
        let questionMarkInd = dataURL.indexOf('?');
        if (questionMarkInd === -1) questionMarkInd = dataURL.length;
        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));
        if (slashInd < questionMarkInd) // For pathString, questionMarkInd will always come after slashInd
        pathString = $ae31471d52481ece$var$decodePath(dataURL.substring(slashInd, questionMarkInd));
        const queryParams = $ae31471d52481ece$var$decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));
        // If we have a port, use scheme for determining if it's secure.
        colonInd = host.indexOf(':');
        if (colonInd >= 0) {
            secure = scheme === 'https' || scheme === 'wss';
            port = parseInt(host.substring(colonInd + 1), 10);
        } else colonInd = host.length;
        const hostWithoutPort = host.slice(0, colonInd);
        if (hostWithoutPort.toLowerCase() === 'localhost') domain = 'localhost';
        else if (hostWithoutPort.split('.').length <= 2) domain = hostWithoutPort;
        else {
            // Interpret the subdomain of a 3 or more component URL as the namespace name.
            const dotInd = host.indexOf('.');
            subdomain = host.substring(0, dotInd).toLowerCase();
            domain = host.substring(dotInd + 1);
            // Normalize namespaces to lowercase to share storage / connection.
            namespace = subdomain;
        }
        // Always treat the value of the `ns` as the namespace name if it is present.
        if ('ns' in queryParams) namespace = queryParams['ns'];
    }
    return {
        host: host,
        port: port,
        domain: domain,
        subdomain: subdomain,
        secure: secure,
        scheme: scheme,
        pathString: pathString,
        namespace: namespace
    };
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Modeled after base64 web-safe chars, but ordered by ASCII.
const $ae31471d52481ece$var$PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';
/**
 * Fancy ID generator that creates 20-character string identifiers with the
 * following properties:
 *
 * 1. They're based on timestamp so that they sort *after* any existing ids.
 * 2. They contain 72-bits of random data after the timestamp so that IDs won't
 *    collide with other clients' IDs.
 * 3. They sort *lexicographically* (so the timestamp is converted to characters
 *    that will sort properly).
 * 4. They're monotonically increasing. Even if you generate more than one in
 *    the same timestamp, the latter ones will sort after the former ones. We do
 *    this by using the previous random bits but "incrementing" them by 1 (only
 *    in the case of a timestamp collision).
 */ const $ae31471d52481ece$var$nextPushId = function() {
    // Timestamp of last push, used to prevent local collisions if you push twice
    // in one ms.
    let lastPushTime = 0;
    // We generate 72-bits of randomness which get turned into 12 characters and
    // appended to the timestamp to prevent collisions with other clients. We
    // store the last characters we generated because in the event of a collision,
    // we'll use those same characters except "incremented" by one.
    const lastRandChars = [];
    return function(now) {
        const duplicateTime = now === lastPushTime;
        lastPushTime = now;
        let i;
        const timeStampChars = new Array(8);
        for(i = 7; i >= 0; i--){
            timeStampChars[i] = $ae31471d52481ece$var$PUSH_CHARS.charAt(now % 64);
            // NOTE: Can't use << here because javascript will convert to int and lose
            // the upper bits.
            now = Math.floor(now / 64);
        }
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(now === 0, 'Cannot push at time == 0');
        let id = timeStampChars.join('');
        if (!duplicateTime) for(i = 0; i < 12; i++)lastRandChars[i] = Math.floor(Math.random() * 64);
        else {
            // If the timestamp hasn't changed since last push, use the same random
            // number, except incremented by 1.
            for(i = 11; i >= 0 && lastRandChars[i] === 63; i--)lastRandChars[i] = 0;
            lastRandChars[i]++;
        }
        for(i = 0; i < 12; i++)id += $ae31471d52481ece$var$PUSH_CHARS.charAt(lastRandChars[i]);
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(id.length === 20, 'nextPushId: Length should be 20.');
        return id;
    };
}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Encapsulates the data needed to raise an event
 */ class $ae31471d52481ece$var$DataEvent {
    /**
     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed
     * @param eventRegistration - The function to call to with the event data. User provided
     * @param snapshot - The data backing the event
     * @param prevName - Optional, the name of the previous child for child_* events.
     */ constructor(eventType, eventRegistration, snapshot, prevName){
        this.eventType = eventType;
        this.eventRegistration = eventRegistration;
        this.snapshot = snapshot;
        this.prevName = prevName;
    }
    getPath() {
        const ref = this.snapshot.ref;
        if (this.eventType === 'value') return ref._path;
        else return ref.parent._path;
    }
    getEventType() {
        return this.eventType;
    }
    getEventRunner() {
        return this.eventRegistration.getEventRunner(this);
    }
    toString() {
        return this.getPath().toString() + ':' + this.eventType + ':' + (0, $ee1ab2624407a779$export$fac44ee5b035f737)(this.snapshot.exportVal());
    }
}
class $ae31471d52481ece$var$CancelEvent {
    constructor(eventRegistration, error, path){
        this.eventRegistration = eventRegistration;
        this.error = error;
        this.path = path;
    }
    getPath() {
        return this.path;
    }
    getEventType() {
        return 'cancel';
    }
    getEventRunner() {
        return this.eventRegistration.getEventRunner(this);
    }
    toString() {
        return this.path.toString() + ':cancel';
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A wrapper class that converts events from the database@exp SDK to the legacy
 * Database SDK. Events are not converted directly as event registration relies
 * on reference comparison of the original user callback (see `matches()`) and
 * relies on equality of the legacy SDK's `context` object.
 */ class $ae31471d52481ece$var$CallbackContext {
    constructor(snapshotCallback, cancelCallback){
        this.snapshotCallback = snapshotCallback;
        this.cancelCallback = cancelCallback;
    }
    onValue(expDataSnapshot, previousChildName) {
        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);
    }
    onCancel(error) {
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');
        return this.cancelCallback.call(null, error);
    }
    get hasCancelCallback() {
        return !!this.cancelCallback;
    }
    matches(other) {
        return this.snapshotCallback === other.snapshotCallback || this.snapshotCallback.userCallback !== undefined && this.snapshotCallback.userCallback === other.snapshotCallback.userCallback && this.snapshotCallback.context === other.snapshotCallback.context;
    }
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The `onDisconnect` class allows you to write or clear data when your client
 * disconnects from the Database server. These updates occur whether your
 * client disconnects cleanly or not, so you can rely on them to clean up data
 * even if a connection is dropped or a client crashes.
 *
 * The `onDisconnect` class is most commonly used to manage presence in
 * applications where it is useful to detect how many clients are connected and
 * when other clients disconnect. See
 * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}
 * for more information.
 *
 * To avoid problems when a connection is dropped before the requests can be
 * transferred to the Database server, these functions should be called before
 * writing any data.
 *
 * Note that `onDisconnect` operations are only triggered once. If you want an
 * operation to occur each time a disconnect occurs, you'll need to re-establish
 * the `onDisconnect` operations each time you reconnect.
 */ class $ae31471d52481ece$export$95b7818b4ee6c2af {
    /** @hideconstructor */ constructor(_repo, _path){
        this._repo = _repo;
        this._path = _path;
    }
    /**
     * Cancels all previously queued `onDisconnect()` set or update events for this
     * location and all children.
     *
     * If a write has been queued for this location via a `set()` or `update()` at a
     * parent location, the write at this location will be canceled, though writes
     * to sibling locations will still occur.
     *
     * @returns Resolves when synchronization to the server is complete.
     */ cancel() {
        const deferred = new (0, $ee1ab2624407a779$export$85f6557964517f1a)();
        $ae31471d52481ece$var$repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(()=>{}));
        return deferred.promise;
    }
    /**
     * Ensures the data at this location is deleted when the client is disconnected
     * (due to closing the browser, navigating to a new page, or network issues).
     *
     * @returns Resolves when synchronization to the server is complete.
     */ remove() {
        $ae31471d52481ece$export$8d83036122ae444e('OnDisconnect.remove', this._path);
        const deferred = new (0, $ee1ab2624407a779$export$85f6557964517f1a)();
        $ae31471d52481ece$var$repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(()=>{}));
        return deferred.promise;
    }
    /**
     * Ensures the data at this location is set to the specified value when the
     * client is disconnected (due to closing the browser, navigating to a new page,
     * or network issues).
     *
     * `set()` is especially useful for implementing "presence" systems, where a
     * value should be changed or cleared when a user disconnects so that they
     * appear "offline" to other users. See
     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}
     * for more information.
     *
     * Note that `onDisconnect` operations are only triggered once. If you want an
     * operation to occur each time a disconnect occurs, you'll need to re-establish
     * the `onDisconnect` operations each time.
     *
     * @param value - The value to be written to this location on disconnect (can
     * be an object, array, string, number, boolean, or null).
     * @returns Resolves when synchronization to the Database is complete.
     */ set(value) {
        $ae31471d52481ece$export$8d83036122ae444e('OnDisconnect.set', this._path);
        $ae31471d52481ece$var$validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);
        const deferred = new (0, $ee1ab2624407a779$export$85f6557964517f1a)();
        $ae31471d52481ece$var$repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(()=>{}));
        return deferred.promise;
    }
    /**
     * Ensures the data at this location is set to the specified value and priority
     * when the client is disconnected (due to closing the browser, navigating to a
     * new page, or network issues).
     *
     * @param value - The value to be written to this location on disconnect (can
     * be an object, array, string, number, boolean, or null).
     * @param priority - The priority to be written (string, number, or null).
     * @returns Resolves when synchronization to the Database is complete.
     */ setWithPriority(value, priority) {
        $ae31471d52481ece$export$8d83036122ae444e('OnDisconnect.setWithPriority', this._path);
        $ae31471d52481ece$var$validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);
        $ae31471d52481ece$var$validatePriority('OnDisconnect.setWithPriority', priority, false);
        const deferred = new (0, $ee1ab2624407a779$export$85f6557964517f1a)();
        $ae31471d52481ece$var$repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(()=>{}));
        return deferred.promise;
    }
    /**
     * Writes multiple values at this location when the client is disconnected (due
     * to closing the browser, navigating to a new page, or network issues).
     *
     * The `values` argument contains multiple property-value pairs that will be
     * written to the Database together. Each child property can either be a simple
     * property (for example, "name") or a relative path (for example, "name/first")
     * from the current location to the data to update.
     *
     * As opposed to the `set()` method, `update()` can be use to selectively update
     * only the referenced properties at the current location (instead of replacing
     * all the child properties at the current location).
     *
     * @param values - Object containing multiple values.
     * @returns Resolves when synchronization to the Database is complete.
     */ update(values) {
        $ae31471d52481ece$export$8d83036122ae444e('OnDisconnect.update', this._path);
        $ae31471d52481ece$var$validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);
        const deferred = new (0, $ee1ab2624407a779$export$85f6557964517f1a)();
        $ae31471d52481ece$var$repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(()=>{}));
        return deferred.promise;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @internal
 */ class $ae31471d52481ece$export$e79c8d837d2220a8 {
    /**
     * @hideconstructor
     */ constructor(_repo, _path, _queryParams, _orderByCalled){
        this._repo = _repo;
        this._path = _path;
        this._queryParams = _queryParams;
        this._orderByCalled = _orderByCalled;
    }
    get key() {
        if ($ae31471d52481ece$var$pathIsEmpty(this._path)) return null;
        else return $ae31471d52481ece$var$pathGetBack(this._path);
    }
    get ref() {
        return new $ae31471d52481ece$export$35c3a5e7c9d1033c(this._repo, this._path);
    }
    get _queryIdentifier() {
        const obj = $ae31471d52481ece$var$queryParamsGetQueryObject(this._queryParams);
        const id = $ae31471d52481ece$var$ObjectToUniqueKey(obj);
        return id === '{}' ? 'default' : id;
    }
    /**
     * An object representation of the query parameters used by this Query.
     */ get _queryObject() {
        return $ae31471d52481ece$var$queryParamsGetQueryObject(this._queryParams);
    }
    isEqual(other) {
        other = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(other);
        if (!(other instanceof $ae31471d52481ece$export$e79c8d837d2220a8)) return false;
        const sameRepo = this._repo === other._repo;
        const samePath = $ae31471d52481ece$var$pathEquals(this._path, other._path);
        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;
        return sameRepo && samePath && sameQueryIdentifier;
    }
    toJSON() {
        return this.toString();
    }
    toString() {
        return this._repo.toString() + $ae31471d52481ece$var$pathToUrlEncodedString(this._path);
    }
}
/**
 * Validates that no other order by call has been made
 */ function $ae31471d52481ece$var$validateNoPreviousOrderByCall(query, fnName) {
    if (query._orderByCalled === true) throw new Error(fnName + ": You can't combine multiple orderBy calls.");
}
/**
 * Validates start/end values for queries.
 */ function $ae31471d52481ece$var$validateQueryEndpoints(params) {
    let startNode = null;
    let endNode = null;
    if (params.hasStart()) startNode = params.getIndexStartValue();
    if (params.hasEnd()) endNode = params.getIndexEndValue();
    if (params.getIndex() === $ae31471d52481ece$var$KEY_INDEX) {
        const tooManyArgsError = "Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().";
        const wrongArgTypeError = "Query: When ordering by key, the argument passed to startAt(), startAfter(), endAt(), endBefore(), or equalTo() must be a string.";
        if (params.hasStart()) {
            const startName = params.getIndexStartName();
            if (startName !== $ae31471d52481ece$var$MIN_NAME) throw new Error(tooManyArgsError);
            else if (typeof startNode !== 'string') throw new Error(wrongArgTypeError);
        }
        if (params.hasEnd()) {
            const endName = params.getIndexEndName();
            if (endName !== $ae31471d52481ece$var$MAX_NAME) throw new Error(tooManyArgsError);
            else if (typeof endNode !== 'string') throw new Error(wrongArgTypeError);
        }
    } else if (params.getIndex() === $ae31471d52481ece$var$PRIORITY_INDEX) {
        if (startNode != null && !$ae31471d52481ece$var$isValidPriority(startNode) || endNode != null && !$ae31471d52481ece$var$isValidPriority(endNode)) throw new Error("Query: When ordering by priority, the first argument passed to startAt(), startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value (null, a number, or a string).");
    } else {
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(params.getIndex() instanceof $ae31471d52481ece$var$PathIndex || params.getIndex() === $ae31471d52481ece$var$VALUE_INDEX, 'unknown index type.');
        if (startNode != null && typeof startNode === 'object' || endNode != null && typeof endNode === 'object') throw new Error("Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or equalTo() cannot be an object.");
    }
}
/**
 * Validates that limit* has been called with the correct combination of parameters
 */ function $ae31471d52481ece$var$validateLimit(params) {
    if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) throw new Error("Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use limitToFirst() or limitToLast() instead.");
}
/**
 * @internal
 */ class $ae31471d52481ece$export$35c3a5e7c9d1033c extends $ae31471d52481ece$export$e79c8d837d2220a8 {
    /** @hideconstructor */ constructor(repo, path){
        super(repo, path, new $ae31471d52481ece$export$7ba287e361c94330(), false);
    }
    get parent() {
        const parentPath = $ae31471d52481ece$var$pathParent(this._path);
        return parentPath === null ? null : new $ae31471d52481ece$export$35c3a5e7c9d1033c(this._repo, parentPath);
    }
    get root() {
        let ref = this;
        while(ref.parent !== null)ref = ref.parent;
        return ref;
    }
}
/**
 * A `DataSnapshot` contains data from a Database location.
 *
 * Any time you read data from the Database, you receive the data as a
 * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach
 * with `on()` or `once()`. You can extract the contents of the snapshot as a
 * JavaScript object by calling the `val()` method. Alternatively, you can
 * traverse into the snapshot by calling `child()` to return child snapshots
 * (which you could then call `val()` on).
 *
 * A `DataSnapshot` is an efficiently generated, immutable copy of the data at
 * a Database location. It cannot be modified and will never change (to modify
 * data, you always call the `set()` method on a `Reference` directly).
 */ class $ae31471d52481ece$export$80b98bcbc246c942 {
    /**
     * @param _node - A SnapshotNode to wrap.
     * @param ref - The location this snapshot came from.
     * @param _index - The iteration order for this snapshot
     * @hideconstructor
     */ constructor(_node, /**
     * The location of this DataSnapshot.
     */ ref, _index){
        this._node = _node;
        this.ref = ref;
        this._index = _index;
    }
    /**
     * Gets the priority value of the data in this `DataSnapshot`.
     *
     * Applications need not use priority but can order collections by
     * ordinary properties (see
     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}
     * ).
     */ get priority() {
        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)
        return this._node.getPriority().val();
    }
    /**
     * The key (last part of the path) of the location of this `DataSnapshot`.
     *
     * The last token in a Database location is considered its key. For example,
     * "ada" is the key for the /users/ada/ node. Accessing the key on any
     * `DataSnapshot` will return the key for the location that generated it.
     * However, accessing the key on the root URL of a Database will return
     * `null`.
     */ get key() {
        return this.ref.key;
    }
    /** Returns the number of child properties of this `DataSnapshot`. */ get size() {
        return this._node.numChildren();
    }
    /**
     * Gets another `DataSnapshot` for the location at the specified relative path.
     *
     * Passing a relative path to the `child()` method of a DataSnapshot returns
     * another `DataSnapshot` for the location at the specified relative path. The
     * relative path can either be a simple child name (for example, "ada") or a
     * deeper, slash-separated path (for example, "ada/name/first"). If the child
     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`
     * whose value is `null`) is returned.
     *
     * @param path - A relative path to the location of child data.
     */ child(path) {
        const childPath = new $ae31471d52481ece$var$Path(path);
        const childRef = $ae31471d52481ece$export$f9574b70e1d95d9d(this.ref, path);
        return new $ae31471d52481ece$export$80b98bcbc246c942(this._node.getChild(childPath), childRef, $ae31471d52481ece$var$PRIORITY_INDEX);
    }
    /**
     * Returns true if this `DataSnapshot` contains any data. It is slightly more
     * efficient than using `snapshot.val() !== null`.
     */ exists() {
        return !this._node.isEmpty();
    }
    /**
     * Exports the entire contents of the DataSnapshot as a JavaScript object.
     *
     * The `exportVal()` method is similar to `val()`, except priority information
     * is included (if available), making it suitable for backing up your data.
     *
     * @returns The DataSnapshot's contents as a JavaScript value (Object,
     *   Array, string, number, boolean, or `null`).
     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
    exportVal() {
        return this._node.val(true);
    }
    /**
     * Enumerates the top-level children in the `IteratedDataSnapshot`.
     *
     * Because of the way JavaScript objects work, the ordering of data in the
     * JavaScript object returned by `val()` is not guaranteed to match the
     * ordering on the server nor the ordering of `onChildAdded()` events. That is
     * where `forEach()` comes in handy. It guarantees the children of a
     * `DataSnapshot` will be iterated in their query order.
     *
     * If no explicit `orderBy*()` method is used, results are returned
     * ordered by key (unless priorities are used, in which case, results are
     * returned by priority).
     *
     * @param action - A function that will be called for each child DataSnapshot.
     * The callback can return true to cancel further enumeration.
     * @returns true if enumeration was canceled due to your callback returning
     * true.
     */ forEach(action) {
        if (this._node.isLeafNode()) return false;
        const childrenNode = this._node;
        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...
        return !!childrenNode.forEachChild(this._index, (key, node)=>{
            return action(new $ae31471d52481ece$export$80b98bcbc246c942(node, $ae31471d52481ece$export$f9574b70e1d95d9d(this.ref, key), $ae31471d52481ece$var$PRIORITY_INDEX));
        });
    }
    /**
     * Returns true if the specified child path has (non-null) data.
     *
     * @param path - A relative path to the location of a potential child.
     * @returns `true` if data exists at the specified child path; else
     *  `false`.
     */ hasChild(path) {
        const childPath = new $ae31471d52481ece$var$Path(path);
        return !this._node.getChild(childPath).isEmpty();
    }
    /**
     * Returns whether or not the `DataSnapshot` has any non-`null` child
     * properties.
     *
     * You can use `hasChildren()` to determine if a `DataSnapshot` has any
     * children. If it does, you can enumerate them using `forEach()`. If it
     * doesn't, then either this snapshot contains a primitive value (which can be
     * retrieved with `val()`) or it is empty (in which case, `val()` will return
     * `null`).
     *
     * @returns true if this snapshot has any children; else false.
     */ hasChildren() {
        if (this._node.isLeafNode()) return false;
        else return !this._node.isEmpty();
    }
    /**
     * Returns a JSON-serializable representation of this object.
     */ toJSON() {
        return this.exportVal();
    }
    /**
     * Extracts a JavaScript value from a `DataSnapshot`.
     *
     * Depending on the data in a `DataSnapshot`, the `val()` method may return a
     * scalar type (string, number, or boolean), an array, or an object. It may
     * also return null, indicating that the `DataSnapshot` is empty (contains no
     * data).
     *
     * @returns The DataSnapshot's contents as a JavaScript value (Object,
     *   Array, string, number, boolean, or `null`).
     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
    val() {
        return this._node.val();
    }
}
/**
 *
 * Returns a `Reference` representing the location in the Database
 * corresponding to the provided path. If no path is provided, the `Reference`
 * will point to the root of the Database.
 *
 * @param db - The database instance to obtain a reference for.
 * @param path - Optional path representing the location the returned
 *   `Reference` will point. If not provided, the returned `Reference` will
 *   point to the root of the Database.
 * @returns If a path is provided, a `Reference`
 *   pointing to the provided path. Otherwise, a `Reference` pointing to the
 *   root of the Database.
 */ function $ae31471d52481ece$export$eff4d24c3ff7876e(db, path) {
    db = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(db);
    db._checkNotDeleted('ref');
    return path !== undefined ? $ae31471d52481ece$export$f9574b70e1d95d9d(db._root, path) : db._root;
}
/**
 * Returns a `Reference` representing the location in the Database
 * corresponding to the provided Firebase URL.
 *
 * An exception is thrown if the URL is not a valid Firebase Database URL or it
 * has a different domain than the current `Database` instance.
 *
 * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored
 * and are not applied to the returned `Reference`.
 *
 * @param db - The database instance to obtain a reference for.
 * @param url - The Firebase URL at which the returned `Reference` will
 *   point.
 * @returns A `Reference` pointing to the provided
 *   Firebase URL.
 */ function $ae31471d52481ece$export$291fc3c05735451(db, url) {
    db = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(db);
    db._checkNotDeleted('refFromURL');
    const parsedURL = $ae31471d52481ece$var$parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);
    $ae31471d52481ece$var$validateUrl('refFromURL', parsedURL);
    const repoInfo = parsedURL.repoInfo;
    if (!db._repo.repoInfo_.isCustomHost() && repoInfo.host !== db._repo.repoInfo_.host) $ae31471d52481ece$var$fatal("refFromURL: Host name does not match the current database: (found " + repoInfo.host + ' but expected ' + db._repo.repoInfo_.host + ')');
    return $ae31471d52481ece$export$eff4d24c3ff7876e(db, parsedURL.path.toString());
}
/**
 * Gets a `Reference` for the location at the specified relative path.
 *
 * The relative path can either be a simple child name (for example, "ada") or
 * a deeper slash-separated path (for example, "ada/name/first").
 *
 * @param parent - The parent location.
 * @param path - A relative path from this location to the desired child
 *   location.
 * @returns The specified child location.
 */ function $ae31471d52481ece$export$f9574b70e1d95d9d(parent, path) {
    parent = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(parent);
    if ($ae31471d52481ece$var$pathGetFront(parent._path) === null) $ae31471d52481ece$var$validateRootPathString('child', 'path', path, false);
    else $ae31471d52481ece$export$8637b026ace8abb1('child', 'path', path, false);
    return new $ae31471d52481ece$export$35c3a5e7c9d1033c(parent._repo, $ae31471d52481ece$var$pathChild(parent._path, path));
}
/**
 * Returns an `OnDisconnect` object - see
 * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}
 * for more information on how to use it.
 *
 * @param ref - The reference to add OnDisconnect triggers for.
 */ function $ae31471d52481ece$export$b61bdcd0bdb4f86a(ref) {
    ref = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(ref);
    return new $ae31471d52481ece$export$95b7818b4ee6c2af(ref._repo, ref._path);
}
/**
 * Generates a new child location using a unique key and returns its
 * `Reference`.
 *
 * This is the most common pattern for adding data to a collection of items.
 *
 * If you provide a value to `push()`, the value is written to the
 * generated location. If you don't pass a value, nothing is written to the
 * database and the child remains empty (but you can use the `Reference`
 * elsewhere).
 *
 * The unique keys generated by `push()` are ordered by the current time, so the
 * resulting list of items is chronologically sorted. The keys are also
 * designed to be unguessable (they contain 72 random bits of entropy).
 *
 * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.
 * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.
 *
 * @param parent - The parent location.
 * @param value - Optional value to be written at the generated location.
 * @returns Combined `Promise` and `Reference`; resolves when write is complete,
 * but can be used immediately as the `Reference` to the child location.
 */ function $ae31471d52481ece$export$4cbf152802aa238(parent, value) {
    parent = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(parent);
    $ae31471d52481ece$export$8d83036122ae444e('push', parent._path);
    $ae31471d52481ece$var$validateFirebaseDataArg('push', value, parent._path, true);
    const now = $ae31471d52481ece$var$repoServerTime(parent._repo);
    const name = $ae31471d52481ece$var$nextPushId(now);
    // push() returns a ThennableReference whose promise is fulfilled with a
    // regular Reference. We use child() to create handles to two different
    // references. The first is turned into a ThennableReference below by adding
    // then() and catch() methods and is used as the return value of push(). The
    // second remains a regular Reference and is used as the fulfilled value of
    // the first ThennableReference.
    const thenablePushRef = $ae31471d52481ece$export$f9574b70e1d95d9d(parent, name);
    const pushRef = $ae31471d52481ece$export$f9574b70e1d95d9d(parent, name);
    let promise;
    if (value != null) promise = $ae31471d52481ece$export$adaa4cf7ef1b65be(pushRef, value).then(()=>pushRef);
    else promise = Promise.resolve(pushRef);
    thenablePushRef.then = promise.then.bind(promise);
    thenablePushRef.catch = promise.then.bind(promise, undefined);
    return thenablePushRef;
}
/**
 * Removes the data at this Database location.
 *
 * Any data at child locations will also be deleted.
 *
 * The effect of the remove will be visible immediately and the corresponding
 * event 'value' will be triggered. Synchronization of the remove to the
 * Firebase servers will also be started, and the returned Promise will resolve
 * when complete. If provided, the onComplete callback will be called
 * asynchronously after synchronization has finished.
 *
 * @param ref - The location to remove.
 * @returns Resolves when remove on server is complete.
 */ function $ae31471d52481ece$export$cd7f480d6b8286c3(ref) {
    $ae31471d52481ece$export$8d83036122ae444e('remove', ref._path);
    return $ae31471d52481ece$export$adaa4cf7ef1b65be(ref, null);
}
/**
 * Writes data to this Database location.
 *
 * This will overwrite any data at this location and all child locations.
 *
 * The effect of the write will be visible immediately, and the corresponding
 * events ("value", "child_added", etc.) will be triggered. Synchronization of
 * the data to the Firebase servers will also be started, and the returned
 * Promise will resolve when complete. If provided, the `onComplete` callback
 * will be called asynchronously after synchronization has finished.
 *
 * Passing `null` for the new value is equivalent to calling `remove()`; namely,
 * all data at this location and all child locations will be deleted.
 *
 * `set()` will remove any priority stored at this location, so if priority is
 * meant to be preserved, you need to use `setWithPriority()` instead.
 *
 * Note that modifying data with `set()` will cancel any pending transactions
 * at that location, so extreme care should be taken if mixing `set()` and
 * `transaction()` to modify the same data.
 *
 * A single `set()` will generate a single "value" event at the location where
 * the `set()` was performed.
 *
 * @param ref - The location to write to.
 * @param value - The value to be written (string, number, boolean, object,
 *   array, or null).
 * @returns Resolves when write to server is complete.
 */ function $ae31471d52481ece$export$adaa4cf7ef1b65be(ref, value) {
    ref = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(ref);
    $ae31471d52481ece$export$8d83036122ae444e('set', ref._path);
    $ae31471d52481ece$var$validateFirebaseDataArg('set', value, ref._path, false);
    const deferred = new (0, $ee1ab2624407a779$export$85f6557964517f1a)();
    $ae31471d52481ece$var$repoSetWithPriority(ref._repo, ref._path, value, /*priority=*/ null, deferred.wrapCallback(()=>{}));
    return deferred.promise;
}
/**
 * Sets a priority for the data at this Database location.
 *
 * Applications need not use priority but can order collections by
 * ordinary properties (see
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}
 * ).
 *
 * @param ref - The location to write to.
 * @param priority - The priority to be written (string, number, or null).
 * @returns Resolves when write to server is complete.
 */ function $ae31471d52481ece$export$313bf5dbe7a1196e(ref, priority) {
    ref = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(ref);
    $ae31471d52481ece$export$8d83036122ae444e('setPriority', ref._path);
    $ae31471d52481ece$var$validatePriority('setPriority', priority, false);
    const deferred = new (0, $ee1ab2624407a779$export$85f6557964517f1a)();
    $ae31471d52481ece$var$repoSetWithPriority(ref._repo, $ae31471d52481ece$var$pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(()=>{}));
    return deferred.promise;
}
/**
 * Writes data the Database location. Like `set()` but also specifies the
 * priority for that data.
 *
 * Applications need not use priority but can order collections by
 * ordinary properties (see
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}
 * ).
 *
 * @param ref - The location to write to.
 * @param value - The value to be written (string, number, boolean, object,
 *   array, or null).
 * @param priority - The priority to be written (string, number, or null).
 * @returns Resolves when write to server is complete.
 */ function $ae31471d52481ece$export$1fa5d5bf488088f3(ref, value, priority) {
    $ae31471d52481ece$export$8d83036122ae444e('setWithPriority', ref._path);
    $ae31471d52481ece$var$validateFirebaseDataArg('setWithPriority', value, ref._path, false);
    $ae31471d52481ece$var$validatePriority('setWithPriority', priority, false);
    if (ref.key === '.length' || ref.key === '.keys') throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';
    const deferred = new (0, $ee1ab2624407a779$export$85f6557964517f1a)();
    $ae31471d52481ece$var$repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(()=>{}));
    return deferred.promise;
}
/**
 * Writes multiple values to the Database at once.
 *
 * The `values` argument contains multiple property-value pairs that will be
 * written to the Database together. Each child property can either be a simple
 * property (for example, "name") or a relative path (for example,
 * "name/first") from the current location to the data to update.
 *
 * As opposed to the `set()` method, `update()` can be use to selectively update
 * only the referenced properties at the current location (instead of replacing
 * all the child properties at the current location).
 *
 * The effect of the write will be visible immediately, and the corresponding
 * events ('value', 'child_added', etc.) will be triggered. Synchronization of
 * the data to the Firebase servers will also be started, and the returned
 * Promise will resolve when complete. If provided, the `onComplete` callback
 * will be called asynchronously after synchronization has finished.
 *
 * A single `update()` will generate a single "value" event at the location
 * where the `update()` was performed, regardless of how many children were
 * modified.
 *
 * Note that modifying data with `update()` will cancel any pending
 * transactions at that location, so extreme care should be taken if mixing
 * `update()` and `transaction()` to modify the same data.
 *
 * Passing `null` to `update()` will remove the data at this location.
 *
 * See
 * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.
 *
 * @param ref - The location to write to.
 * @param values - Object containing multiple values.
 * @returns Resolves when update on server is complete.
 */ function $ae31471d52481ece$export$722fbec263ad908a(ref, values) {
    $ae31471d52481ece$var$validateFirebaseMergeDataArg('update', values, ref._path, false);
    const deferred = new (0, $ee1ab2624407a779$export$85f6557964517f1a)();
    $ae31471d52481ece$var$repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(()=>{}));
    return deferred.promise;
}
/**
 * Gets the most up-to-date result for this query.
 *
 * @param query - The query to run.
 * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is
 * available, or rejects if the client is unable to return a value (e.g., if the
 * server is unreachable and there is nothing cached).
 */ function $ae31471d52481ece$export$3988ae62b71be9a3(query) {
    query = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(query);
    const callbackContext = new $ae31471d52481ece$var$CallbackContext(()=>{});
    const container = new $ae31471d52481ece$var$ValueEventRegistration(callbackContext);
    return $ae31471d52481ece$var$repoGetValue(query._repo, query, container).then((node)=>{
        return new $ae31471d52481ece$export$80b98bcbc246c942(node, new $ae31471d52481ece$export$35c3a5e7c9d1033c(query._repo, query._path), query._queryParams.getIndex());
    });
}
/**
 * Represents registration for 'value' events.
 */ class $ae31471d52481ece$var$ValueEventRegistration {
    constructor(callbackContext){
        this.callbackContext = callbackContext;
    }
    respondsTo(eventType) {
        return eventType === 'value';
    }
    createEvent(change, query) {
        const index = query._queryParams.getIndex();
        return new $ae31471d52481ece$var$DataEvent('value', this, new $ae31471d52481ece$export$80b98bcbc246c942(change.snapshotNode, new $ae31471d52481ece$export$35c3a5e7c9d1033c(query._repo, query._path), index));
    }
    getEventRunner(eventData) {
        if (eventData.getEventType() === 'cancel') return ()=>this.callbackContext.onCancel(eventData.error);
        else return ()=>this.callbackContext.onValue(eventData.snapshot, null);
    }
    createCancelEvent(error, path) {
        if (this.callbackContext.hasCancelCallback) return new $ae31471d52481ece$var$CancelEvent(this, error, path);
        else return null;
    }
    matches(other) {
        if (!(other instanceof $ae31471d52481ece$var$ValueEventRegistration)) return false;
        else if (!other.callbackContext || !this.callbackContext) // If no callback specified, we consider it to match any callback.
        return true;
        else return other.callbackContext.matches(this.callbackContext);
    }
    hasAnyCallback() {
        return this.callbackContext !== null;
    }
}
/**
 * Represents the registration of a child_x event.
 */ class $ae31471d52481ece$var$ChildEventRegistration {
    constructor(eventType, callbackContext){
        this.eventType = eventType;
        this.callbackContext = callbackContext;
    }
    respondsTo(eventType) {
        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;
        eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;
        return this.eventType === eventToCheck;
    }
    createCancelEvent(error, path) {
        if (this.callbackContext.hasCancelCallback) return new $ae31471d52481ece$var$CancelEvent(this, error, path);
        else return null;
    }
    createEvent(change, query) {
        (0, $ee1ab2624407a779$export$a7a9523472993e97)(change.childName != null, 'Child events should have a childName.');
        const childRef = $ae31471d52481ece$export$f9574b70e1d95d9d(new $ae31471d52481ece$export$35c3a5e7c9d1033c(query._repo, query._path), change.childName);
        const index = query._queryParams.getIndex();
        return new $ae31471d52481ece$var$DataEvent(change.type, this, new $ae31471d52481ece$export$80b98bcbc246c942(change.snapshotNode, childRef, index), change.prevName);
    }
    getEventRunner(eventData) {
        if (eventData.getEventType() === 'cancel') return ()=>this.callbackContext.onCancel(eventData.error);
        else return ()=>this.callbackContext.onValue(eventData.snapshot, eventData.prevName);
    }
    matches(other) {
        if (other instanceof $ae31471d52481ece$var$ChildEventRegistration) return this.eventType === other.eventType && (!this.callbackContext || !other.callbackContext || this.callbackContext.matches(other.callbackContext));
        return false;
    }
    hasAnyCallback() {
        return !!this.callbackContext;
    }
}
function $ae31471d52481ece$var$addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {
    let cancelCallback;
    if (typeof cancelCallbackOrListenOptions === 'object') {
        cancelCallback = undefined;
        options = cancelCallbackOrListenOptions;
    }
    if (typeof cancelCallbackOrListenOptions === 'function') cancelCallback = cancelCallbackOrListenOptions;
    if (options && options.onlyOnce) {
        const userCallback = callback;
        const onceCallback = (dataSnapshot, previousChildName)=>{
            $ae31471d52481ece$var$repoRemoveEventCallbackForQuery(query._repo, query, container);
            userCallback(dataSnapshot, previousChildName);
        };
        onceCallback.userCallback = callback.userCallback;
        onceCallback.context = callback.context;
        callback = onceCallback;
    }
    const callbackContext = new $ae31471d52481ece$var$CallbackContext(callback, cancelCallback || undefined);
    const container = eventType === 'value' ? new $ae31471d52481ece$var$ValueEventRegistration(callbackContext) : new $ae31471d52481ece$var$ChildEventRegistration(eventType, callbackContext);
    $ae31471d52481ece$var$repoAddEventCallbackForQuery(query._repo, query, container);
    return ()=>$ae31471d52481ece$var$repoRemoveEventCallbackForQuery(query._repo, query, container);
}
function $ae31471d52481ece$export$ad30f661f41f4d90(query, callback, cancelCallbackOrListenOptions, options) {
    return $ae31471d52481ece$var$addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);
}
function $ae31471d52481ece$export$fdc3e67b2775c753(query, callback, cancelCallbackOrListenOptions, options) {
    return $ae31471d52481ece$var$addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);
}
function $ae31471d52481ece$export$a3fdf31223dcb03(query, callback, cancelCallbackOrListenOptions, options) {
    return $ae31471d52481ece$var$addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);
}
function $ae31471d52481ece$export$1b001b15904d2a7f(query, callback, cancelCallbackOrListenOptions, options) {
    return $ae31471d52481ece$var$addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);
}
function $ae31471d52481ece$export$8362b530316d1aba(query, callback, cancelCallbackOrListenOptions, options) {
    return $ae31471d52481ece$var$addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);
}
/**
 * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.
 * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from
 * the respective `on*` callbacks.
 *
 * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener
 * will not automatically remove listeners registered on child nodes, `off()`
 * must also be called on any child listeners to remove the callback.
 *
 * If a callback is not specified, all callbacks for the specified eventType
 * will be removed. Similarly, if no eventType is specified, all callbacks
 * for the `Reference` will be removed.
 *
 * Individual listeners can also be removed by invoking their unsubscribe
 * callbacks.
 *
 * @param query - The query that the listener was registered with.
 * @param eventType - One of the following strings: "value", "child_added",
 * "child_changed", "child_removed", or "child_moved." If omitted, all callbacks
 * for the `Reference` will be removed.
 * @param callback - The callback function that was passed to `on()` or
 * `undefined` to remove all callbacks.
 */ function $ae31471d52481ece$export$8c8705df4a2dcec9(query, eventType, callback) {
    let container = null;
    const expCallback = callback ? new $ae31471d52481ece$var$CallbackContext(callback) : null;
    if (eventType === 'value') container = new $ae31471d52481ece$var$ValueEventRegistration(expCallback);
    else if (eventType) container = new $ae31471d52481ece$var$ChildEventRegistration(eventType, expCallback);
    $ae31471d52481ece$var$repoRemoveEventCallbackForQuery(query._repo, query, container);
}
/**
 * A `QueryConstraint` is used to narrow the set of documents returned by a
 * Database query. `QueryConstraint`s are created by invoking {@link endAt},
 * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link
 * limitToFirst}, {@link limitToLast}, {@link orderByChild},
 * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,
 * {@link orderByValue}  or {@link equalTo} and
 * can then be passed to {@link query} to create a new query instance that
 * also contains this `QueryConstraint`.
 */ class $ae31471d52481ece$export$b0e86f2c7431df4e {
}
class $ae31471d52481ece$var$QueryEndAtConstraint extends $ae31471d52481ece$export$b0e86f2c7431df4e {
    constructor(_value, _key){
        super();
        this._value = _value;
        this._key = _key;
        this.type = 'endAt';
    }
    _apply(query) {
        $ae31471d52481ece$var$validateFirebaseDataArg('endAt', this._value, query._path, true);
        const newParams = $ae31471d52481ece$var$queryParamsEndAt(query._queryParams, this._value, this._key);
        $ae31471d52481ece$var$validateLimit(newParams);
        $ae31471d52481ece$var$validateQueryEndpoints(newParams);
        if (query._queryParams.hasEnd()) throw new Error("endAt: Starting point was already set (by another call to endAt, endBefore or equalTo).");
        return new $ae31471d52481ece$export$e79c8d837d2220a8(query._repo, query._path, newParams, query._orderByCalled);
    }
}
/**
 * Creates a `QueryConstraint` with the specified ending point.
 *
 * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
 * allows you to choose arbitrary starting and ending points for your queries.
 *
 * The ending point is inclusive, so children with exactly the specified value
 * will be included in the query. The optional key argument can be used to
 * further limit the range of the query. If it is specified, then children that
 * have exactly the specified value must also have a key name less than or equal
 * to the specified key.
 *
 * You can read more about `endAt()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
 *
 * @param value - The value to end at. The argument type depends on which
 * `orderBy*()` function was used in this query. Specify a value that matches
 * the `orderBy*()` type. When used in combination with `orderByKey()`, the
 * value must be a string.
 * @param key - The child key to end at, among the children with the previously
 * specified priority. This argument is only allowed if ordering by child,
 * value, or priority.
 */ function $ae31471d52481ece$export$28ec54a8428bdb3f(value, key) {
    $ae31471d52481ece$var$validateKey('endAt', 'key', key, true);
    return new $ae31471d52481ece$var$QueryEndAtConstraint(value, key);
}
class $ae31471d52481ece$var$QueryEndBeforeConstraint extends $ae31471d52481ece$export$b0e86f2c7431df4e {
    constructor(_value, _key){
        super();
        this._value = _value;
        this._key = _key;
        this.type = 'endBefore';
    }
    _apply(query) {
        $ae31471d52481ece$var$validateFirebaseDataArg('endBefore', this._value, query._path, false);
        const newParams = $ae31471d52481ece$var$queryParamsEndBefore(query._queryParams, this._value, this._key);
        $ae31471d52481ece$var$validateLimit(newParams);
        $ae31471d52481ece$var$validateQueryEndpoints(newParams);
        if (query._queryParams.hasEnd()) throw new Error("endBefore: Starting point was already set (by another call to endAt, endBefore or equalTo).");
        return new $ae31471d52481ece$export$e79c8d837d2220a8(query._repo, query._path, newParams, query._orderByCalled);
    }
}
/**
 * Creates a `QueryConstraint` with the specified ending point (exclusive).
 *
 * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
 * allows you to choose arbitrary starting and ending points for your queries.
 *
 * The ending point is exclusive. If only a value is provided, children
 * with a value less than the specified value will be included in the query.
 * If a key is specified, then children must have a value less than or equal
 * to the specified value and a key name less than the specified key.
 *
 * @param value - The value to end before. The argument type depends on which
 * `orderBy*()` function was used in this query. Specify a value that matches
 * the `orderBy*()` type. When used in combination with `orderByKey()`, the
 * value must be a string.
 * @param key - The child key to end before, among the children with the
 * previously specified priority. This argument is only allowed if ordering by
 * child, value, or priority.
 */ function $ae31471d52481ece$export$57203950645b8b11(value, key) {
    $ae31471d52481ece$var$validateKey('endBefore', 'key', key, true);
    return new $ae31471d52481ece$var$QueryEndBeforeConstraint(value, key);
}
class $ae31471d52481ece$var$QueryStartAtConstraint extends $ae31471d52481ece$export$b0e86f2c7431df4e {
    constructor(_value, _key){
        super();
        this._value = _value;
        this._key = _key;
        this.type = 'startAt';
    }
    _apply(query) {
        $ae31471d52481ece$var$validateFirebaseDataArg('startAt', this._value, query._path, true);
        const newParams = $ae31471d52481ece$var$queryParamsStartAt(query._queryParams, this._value, this._key);
        $ae31471d52481ece$var$validateLimit(newParams);
        $ae31471d52481ece$var$validateQueryEndpoints(newParams);
        if (query._queryParams.hasStart()) throw new Error("startAt: Starting point was already set (by another call to startAt, startBefore or equalTo).");
        return new $ae31471d52481ece$export$e79c8d837d2220a8(query._repo, query._path, newParams, query._orderByCalled);
    }
}
/**
 * Creates a `QueryConstraint` with the specified starting point.
 *
 * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
 * allows you to choose arbitrary starting and ending points for your queries.
 *
 * The starting point is inclusive, so children with exactly the specified value
 * will be included in the query. The optional key argument can be used to
 * further limit the range of the query. If it is specified, then children that
 * have exactly the specified value must also have a key name greater than or
 * equal to the specified key.
 *
 * You can read more about `startAt()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
 *
 * @param value - The value to start at. The argument type depends on which
 * `orderBy*()` function was used in this query. Specify a value that matches
 * the `orderBy*()` type. When used in combination with `orderByKey()`, the
 * value must be a string.
 * @param key - The child key to start at. This argument is only allowed if
 * ordering by child, value, or priority.
 */ function $ae31471d52481ece$export$859941c5fc8eba6b(value = null, key) {
    $ae31471d52481ece$var$validateKey('startAt', 'key', key, true);
    return new $ae31471d52481ece$var$QueryStartAtConstraint(value, key);
}
class $ae31471d52481ece$var$QueryStartAfterConstraint extends $ae31471d52481ece$export$b0e86f2c7431df4e {
    constructor(_value, _key){
        super();
        this._value = _value;
        this._key = _key;
        this.type = 'startAfter';
    }
    _apply(query) {
        $ae31471d52481ece$var$validateFirebaseDataArg('startAfter', this._value, query._path, false);
        const newParams = $ae31471d52481ece$var$queryParamsStartAfter(query._queryParams, this._value, this._key);
        $ae31471d52481ece$var$validateLimit(newParams);
        $ae31471d52481ece$var$validateQueryEndpoints(newParams);
        if (query._queryParams.hasStart()) throw new Error("startAfter: Starting point was already set (by another call to startAt, startAfter, or equalTo).");
        return new $ae31471d52481ece$export$e79c8d837d2220a8(query._repo, query._path, newParams, query._orderByCalled);
    }
}
/**
 * Creates a `QueryConstraint` with the specified starting point (exclusive).
 *
 * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
 * allows you to choose arbitrary starting and ending points for your queries.
 *
 * The starting point is exclusive. If only a value is provided, children
 * with a value greater than the specified value will be included in the query.
 * If a key is specified, then children must have a value greater than or equal
 * to the specified value and a a key name greater than the specified key.
 *
 * @param value - The value to start after. The argument type depends on which
 * `orderBy*()` function was used in this query. Specify a value that matches
 * the `orderBy*()` type. When used in combination with `orderByKey()`, the
 * value must be a string.
 * @param key - The child key to start after. This argument is only allowed if
 * ordering by child, value, or priority.
 */ function $ae31471d52481ece$export$dd8dee5f7b804673(value, key) {
    $ae31471d52481ece$var$validateKey('startAfter', 'key', key, true);
    return new $ae31471d52481ece$var$QueryStartAfterConstraint(value, key);
}
class $ae31471d52481ece$var$QueryLimitToFirstConstraint extends $ae31471d52481ece$export$b0e86f2c7431df4e {
    constructor(_limit){
        super();
        this._limit = _limit;
        this.type = 'limitToFirst';
    }
    _apply(query) {
        if (query._queryParams.hasLimit()) throw new Error("limitToFirst: Limit was already set (by another call to limitToFirst or limitToLast).");
        return new $ae31471d52481ece$export$e79c8d837d2220a8(query._repo, query._path, $ae31471d52481ece$var$queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);
    }
}
/**
 * Creates a new `QueryConstraint` that if limited to the first specific number
 * of children.
 *
 * The `limitToFirst()` method is used to set a maximum number of children to be
 * synced for a given callback. If we set a limit of 100, we will initially only
 * receive up to 100 `child_added` events. If we have fewer than 100 messages
 * stored in our Database, a `child_added` event will fire for each message.
 * However, if we have over 100 messages, we will only receive a `child_added`
 * event for the first 100 ordered messages. As items change, we will receive
 * `child_removed` events for each item that drops out of the active list so
 * that the total number stays at 100.
 *
 * You can read more about `limitToFirst()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
 *
 * @param limit - The maximum number of nodes to include in this query.
 */ function $ae31471d52481ece$export$9d02e839f813b99d(limit) {
    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) throw new Error('limitToFirst: First argument must be a positive integer.');
    return new $ae31471d52481ece$var$QueryLimitToFirstConstraint(limit);
}
class $ae31471d52481ece$var$QueryLimitToLastConstraint extends $ae31471d52481ece$export$b0e86f2c7431df4e {
    constructor(_limit){
        super();
        this._limit = _limit;
        this.type = 'limitToLast';
    }
    _apply(query) {
        if (query._queryParams.hasLimit()) throw new Error("limitToLast: Limit was already set (by another call to limitToFirst or limitToLast).");
        return new $ae31471d52481ece$export$e79c8d837d2220a8(query._repo, query._path, $ae31471d52481ece$var$queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);
    }
}
/**
 * Creates a new `QueryConstraint` that is limited to return only the last
 * specified number of children.
 *
 * The `limitToLast()` method is used to set a maximum number of children to be
 * synced for a given callback. If we set a limit of 100, we will initially only
 * receive up to 100 `child_added` events. If we have fewer than 100 messages
 * stored in our Database, a `child_added` event will fire for each message.
 * However, if we have over 100 messages, we will only receive a `child_added`
 * event for the last 100 ordered messages. As items change, we will receive
 * `child_removed` events for each item that drops out of the active list so
 * that the total number stays at 100.
 *
 * You can read more about `limitToLast()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
 *
 * @param limit - The maximum number of nodes to include in this query.
 */ function $ae31471d52481ece$export$f823b3589f69d3b8(limit) {
    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) throw new Error('limitToLast: First argument must be a positive integer.');
    return new $ae31471d52481ece$var$QueryLimitToLastConstraint(limit);
}
class $ae31471d52481ece$var$QueryOrderByChildConstraint extends $ae31471d52481ece$export$b0e86f2c7431df4e {
    constructor(_path){
        super();
        this._path = _path;
        this.type = 'orderByChild';
    }
    _apply(query) {
        $ae31471d52481ece$var$validateNoPreviousOrderByCall(query, 'orderByChild');
        const parsedPath = new $ae31471d52481ece$var$Path(this._path);
        if ($ae31471d52481ece$var$pathIsEmpty(parsedPath)) throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');
        const index = new $ae31471d52481ece$var$PathIndex(parsedPath);
        const newParams = $ae31471d52481ece$var$queryParamsOrderBy(query._queryParams, index);
        $ae31471d52481ece$var$validateQueryEndpoints(newParams);
        return new $ae31471d52481ece$export$e79c8d837d2220a8(query._repo, query._path, newParams, /*orderByCalled=*/ true);
    }
}
/**
 * Creates a new `QueryConstraint` that orders by the specified child key.
 *
 * Queries can only order by one key at a time. Calling `orderByChild()`
 * multiple times on the same query is an error.
 *
 * Firebase queries allow you to order your data by any child key on the fly.
 * However, if you know in advance what your indexes will be, you can define
 * them via the .indexOn rule in your Security Rules for better performance. See
 * the{@link https://firebase.google.com/docs/database/security/indexing-data}
 * rule for more information.
 *
 * You can read more about `orderByChild()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.
 *
 * @param path - The path to order by.
 */ function $ae31471d52481ece$export$5162bd9025f8e144(path) {
    if (path === '$key') throw new Error('orderByChild: "$key" is invalid.  Use orderByKey() instead.');
    else if (path === '$priority') throw new Error('orderByChild: "$priority" is invalid.  Use orderByPriority() instead.');
    else if (path === '$value') throw new Error('orderByChild: "$value" is invalid.  Use orderByValue() instead.');
    $ae31471d52481ece$export$8637b026ace8abb1('orderByChild', 'path', path, false);
    return new $ae31471d52481ece$var$QueryOrderByChildConstraint(path);
}
class $ae31471d52481ece$var$QueryOrderByKeyConstraint extends $ae31471d52481ece$export$b0e86f2c7431df4e {
    constructor(){
        super(...arguments);
        this.type = 'orderByKey';
    }
    _apply(query) {
        $ae31471d52481ece$var$validateNoPreviousOrderByCall(query, 'orderByKey');
        const newParams = $ae31471d52481ece$var$queryParamsOrderBy(query._queryParams, $ae31471d52481ece$var$KEY_INDEX);
        $ae31471d52481ece$var$validateQueryEndpoints(newParams);
        return new $ae31471d52481ece$export$e79c8d837d2220a8(query._repo, query._path, newParams, /*orderByCalled=*/ true);
    }
}
/**
 * Creates a new `QueryConstraint` that orders by the key.
 *
 * Sorts the results of a query by their (ascending) key values.
 *
 * You can read more about `orderByKey()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.
 */ function $ae31471d52481ece$export$d5ab8b3bbd8afbf8() {
    return new $ae31471d52481ece$var$QueryOrderByKeyConstraint();
}
class $ae31471d52481ece$var$QueryOrderByPriorityConstraint extends $ae31471d52481ece$export$b0e86f2c7431df4e {
    constructor(){
        super(...arguments);
        this.type = 'orderByPriority';
    }
    _apply(query) {
        $ae31471d52481ece$var$validateNoPreviousOrderByCall(query, 'orderByPriority');
        const newParams = $ae31471d52481ece$var$queryParamsOrderBy(query._queryParams, $ae31471d52481ece$var$PRIORITY_INDEX);
        $ae31471d52481ece$var$validateQueryEndpoints(newParams);
        return new $ae31471d52481ece$export$e79c8d837d2220a8(query._repo, query._path, newParams, /*orderByCalled=*/ true);
    }
}
/**
 * Creates a new `QueryConstraint` that orders by priority.
 *
 * Applications need not use priority but can order collections by
 * ordinary properties (see
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}
 * for alternatives to priority.
 */ function $ae31471d52481ece$export$19e8ae5500cf2e55() {
    return new $ae31471d52481ece$var$QueryOrderByPriorityConstraint();
}
class $ae31471d52481ece$var$QueryOrderByValueConstraint extends $ae31471d52481ece$export$b0e86f2c7431df4e {
    constructor(){
        super(...arguments);
        this.type = 'orderByValue';
    }
    _apply(query) {
        $ae31471d52481ece$var$validateNoPreviousOrderByCall(query, 'orderByValue');
        const newParams = $ae31471d52481ece$var$queryParamsOrderBy(query._queryParams, $ae31471d52481ece$var$VALUE_INDEX);
        $ae31471d52481ece$var$validateQueryEndpoints(newParams);
        return new $ae31471d52481ece$export$e79c8d837d2220a8(query._repo, query._path, newParams, /*orderByCalled=*/ true);
    }
}
/**
 * Creates a new `QueryConstraint` that orders by value.
 *
 * If the children of a query are all scalar values (string, number, or
 * boolean), you can order the results by their (ascending) values.
 *
 * You can read more about `orderByValue()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.
 */ function $ae31471d52481ece$export$7f2f62793c39d0c0() {
    return new $ae31471d52481ece$var$QueryOrderByValueConstraint();
}
class $ae31471d52481ece$var$QueryEqualToValueConstraint extends $ae31471d52481ece$export$b0e86f2c7431df4e {
    constructor(_value, _key){
        super();
        this._value = _value;
        this._key = _key;
        this.type = 'equalTo';
    }
    _apply(query) {
        $ae31471d52481ece$var$validateFirebaseDataArg('equalTo', this._value, query._path, false);
        if (query._queryParams.hasStart()) throw new Error("equalTo: Starting point was already set (by another call to startAt/startAfter or equalTo).");
        if (query._queryParams.hasEnd()) throw new Error("equalTo: Ending point was already set (by another call to endAt/endBefore or equalTo).");
        return new $ae31471d52481ece$var$QueryEndAtConstraint(this._value, this._key)._apply(new $ae31471d52481ece$var$QueryStartAtConstraint(this._value, this._key)._apply(query));
    }
}
/**
 * Creates a `QueryConstraint` that includes children that match the specified
 * value.
 *
 * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`
 * allows you to choose arbitrary starting and ending points for your queries.
 *
 * The optional key argument can be used to further limit the range of the
 * query. If it is specified, then children that have exactly the specified
 * value must also have exactly the specified key as their key name. This can be
 * used to filter result sets with many matches for the same value.
 *
 * You can read more about `equalTo()` in
 * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.
 *
 * @param value - The value to match for. The argument type depends on which
 * `orderBy*()` function was used in this query. Specify a value that matches
 * the `orderBy*()` type. When used in combination with `orderByKey()`, the
 * value must be a string.
 * @param key - The child key to start at, among the children with the
 * previously specified priority. This argument is only allowed if ordering by
 * child, value, or priority.
 */ function $ae31471d52481ece$export$bdcdec1f91f16dff(value, key) {
    $ae31471d52481ece$var$validateKey('equalTo', 'key', key, true);
    return new $ae31471d52481ece$var$QueryEqualToValueConstraint(value, key);
}
/**
 * Creates a new immutable instance of `Query` that is extended to also include
 * additional query constraints.
 *
 * @param query - The Query instance to use as a base for the new constraints.
 * @param queryConstraints - The list of `QueryConstraint`s to apply.
 * @throws if any of the provided query constraints cannot be combined with the
 * existing or new constraints.
 */ function $ae31471d52481ece$export$2fa187e846a241c4(query1, ...queryConstraints) {
    let queryImpl = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(query1);
    for (const constraint of queryConstraints)queryImpl = constraint._apply(queryImpl);
    return queryImpl;
}
/**
 * Define reference constructor in various modules
 *
 * We are doing this here to avoid several circular
 * dependency issues
 */ $ae31471d52481ece$var$syncPointSetReferenceConstructor($ae31471d52481ece$export$35c3a5e7c9d1033c);
$ae31471d52481ece$var$syncTreeSetReferenceConstructor($ae31471d52481ece$export$35c3a5e7c9d1033c);
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * This variable is also defined in the firebase Node.js Admin SDK. Before
 * modifying this definition, consult the definition in:
 *
 * https://github.com/firebase/firebase-admin-node
 *
 * and make sure the two are consistent.
 */ const $ae31471d52481ece$var$FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';
/**
 * Creates and caches `Repo` instances.
 */ const $ae31471d52481ece$var$repos = {};
/**
 * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).
 */ let $ae31471d52481ece$var$useRestClient = false;
/**
 * Update an existing `Repo` in place to point to a new host/port.
 */ function $ae31471d52481ece$var$repoManagerApplyEmulatorSettings(repo, hostAndPort, emulatorOptions, tokenProvider) {
    const portIndex = hostAndPort.lastIndexOf(':');
    const host = hostAndPort.substring(0, portIndex);
    const useSsl = (0, $ee1ab2624407a779$export$5b4d24b45140ad90)(host);
    repo.repoInfo_ = new $ae31471d52481ece$var$RepoInfo(hostAndPort, /* secure= */ useSsl, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams, /*isUsingEmulator=*/ true, emulatorOptions);
    if (tokenProvider) repo.authTokenProvider_ = tokenProvider;
}
/**
 * This function should only ever be called to CREATE a new database instance.
 * @internal
 */ function $ae31471d52481ece$export$a248c1d2ea757674(app, authProvider, appCheckProvider, url, nodeAdmin) {
    let dbUrl = url || app.options.databaseURL;
    if (dbUrl === undefined) {
        if (!app.options.projectId) $ae31471d52481ece$var$fatal("Can't determine Firebase Database URL. Be sure to include  a Project ID when calling firebase.initializeApp().");
        $ae31471d52481ece$var$log('Using default host for project ', app.options.projectId);
        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;
    }
    let parsedUrl = $ae31471d52481ece$var$parseRepoInfo(dbUrl, nodeAdmin);
    let repoInfo = parsedUrl.repoInfo;
    let isEmulator;
    let dbEmulatorHost = undefined;
    if (dbEmulatorHost) {
        isEmulator = true;
        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;
        parsedUrl = $ae31471d52481ece$var$parseRepoInfo(dbUrl, nodeAdmin);
        repoInfo = parsedUrl.repoInfo;
    } else isEmulator = !parsedUrl.repoInfo.secure;
    const authTokenProvider = nodeAdmin && isEmulator ? new $ae31471d52481ece$var$EmulatorTokenProvider($ae31471d52481ece$var$EmulatorTokenProvider.OWNER) : new $ae31471d52481ece$var$FirebaseAuthTokenProvider(app.name, app.options, authProvider);
    $ae31471d52481ece$var$validateUrl('Invalid Firebase Database URL', parsedUrl);
    if (!$ae31471d52481ece$var$pathIsEmpty(parsedUrl.path)) $ae31471d52481ece$var$fatal("Database URL must point to the root of a Firebase Database (not including a child path).");
    const repo = $ae31471d52481ece$var$repoManagerCreateRepo(repoInfo, app, authTokenProvider, new $ae31471d52481ece$var$AppCheckTokenProvider(app, appCheckProvider));
    return new $ae31471d52481ece$export$6feb5ea51a7b0b47(repo, app);
}
/**
 * Remove the repo and make sure it is disconnected.
 *
 */ function $ae31471d52481ece$var$repoManagerDeleteRepo(repo, appName) {
    const appRepos = $ae31471d52481ece$var$repos[appName];
    // This should never happen...
    if (!appRepos || appRepos[repo.key] !== repo) $ae31471d52481ece$var$fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);
    $ae31471d52481ece$var$repoInterrupt(repo);
    delete appRepos[repo.key];
}
/**
 * Ensures a repo doesn't already exist and then creates one using the
 * provided app.
 *
 * @param repoInfo - The metadata about the Repo
 * @returns The Repo object for the specified server / repoName.
 */ function $ae31471d52481ece$var$repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {
    let appRepos = $ae31471d52481ece$var$repos[app.name];
    if (!appRepos) {
        appRepos = {};
        $ae31471d52481ece$var$repos[app.name] = appRepos;
    }
    let repo = appRepos[repoInfo.toURLString()];
    if (repo) $ae31471d52481ece$var$fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');
    repo = new $ae31471d52481ece$var$Repo(repoInfo, $ae31471d52481ece$var$useRestClient, authTokenProvider, appCheckProvider);
    appRepos[repoInfo.toURLString()] = repo;
    return repo;
}
/**
 * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.
 */ function $ae31471d52481ece$var$repoManagerForceRestClient(forceRestClient) {
    $ae31471d52481ece$var$useRestClient = forceRestClient;
}
/**
 * Class representing a Firebase Realtime Database.
 */ class $ae31471d52481ece$export$6feb5ea51a7b0b47 {
    /** @hideconstructor */ constructor(_repoInternal, /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */ app){
        this._repoInternal = _repoInternal;
        this.app = app;
        /** Represents a `Database` instance. */ this['type'] = 'database';
        /** Track if the instance has been used (root or repo accessed) */ this._instanceStarted = false;
    }
    get _repo() {
        if (!this._instanceStarted) {
            $ae31471d52481ece$var$repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);
            this._instanceStarted = true;
        }
        return this._repoInternal;
    }
    get _root() {
        if (!this._rootInternal) this._rootInternal = new $ae31471d52481ece$export$35c3a5e7c9d1033c(this._repo, $ae31471d52481ece$var$newEmptyPath());
        return this._rootInternal;
    }
    _delete() {
        if (this._rootInternal !== null) {
            $ae31471d52481ece$var$repoManagerDeleteRepo(this._repo, this.app.name);
            this._repoInternal = null;
            this._rootInternal = null;
        }
        return Promise.resolve();
    }
    _checkNotDeleted(apiName) {
        if (this._rootInternal === null) $ae31471d52481ece$var$fatal('Cannot call ' + apiName + ' on a deleted database.');
    }
}
function $ae31471d52481ece$var$checkTransportInit() {
    if ($ae31471d52481ece$var$TransportManager.IS_TRANSPORT_INITIALIZED) $ae31471d52481ece$var$warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');
}
/**
 * Force the use of websockets instead of longPolling.
 */ function $ae31471d52481ece$export$752b38c15a5377b6() {
    $ae31471d52481ece$var$checkTransportInit();
    $ae31471d52481ece$var$BrowserPollConnection.forceDisallow();
}
/**
 * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.
 */ function $ae31471d52481ece$export$387cff57f2608869() {
    $ae31471d52481ece$var$checkTransportInit();
    $ae31471d52481ece$var$WebSocketConnection.forceDisallow();
    $ae31471d52481ece$var$BrowserPollConnection.forceAllow();
}
/**
 * Returns the instance of the Realtime Database SDK that is associated with the provided
 * {@link @firebase/app#FirebaseApp}. Initializes a new instance with default settings if
 * no instance exists or if the existing instance uses a custom database URL.
 *
 * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime
 * Database instance is associated with.
 * @param url - The URL of the Realtime Database instance to connect to. If not
 * provided, the SDK connects to the default instance of the Firebase App.
 * @returns The `Database` instance of the provided app.
 */ function $ae31471d52481ece$export$d0dd861204d0bf72(app = (0, $12572052cab62175$export$f9962582c9e66d99)(), url) {
    const db = (0, $12572052cab62175$export$fa0d6da0f5838f50)(app, 'database').getImmediate({
        identifier: url
    });
    if (!db._instanceStarted) {
        const emulator = (0, $ee1ab2624407a779$export$a3febcf1f14a3a0c)('database');
        if (emulator) $ae31471d52481ece$export$87f3cfc4a2e3958d(db, ...emulator);
    }
    return db;
}
/**
 * Modify the provided instance to communicate with the Realtime Database
 * emulator.
 *
 * <p>Note: This method must be called before performing any other operation.
 *
 * @param db - The instance to modify.
 * @param host - The emulator host (ex: localhost)
 * @param port - The emulator port (ex: 8080)
 * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules
 */ function $ae31471d52481ece$export$87f3cfc4a2e3958d(db, host, port, options = {}) {
    db = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(db);
    db._checkNotDeleted('useEmulator');
    const hostAndPort = `${host}:${port}`;
    const repo = db._repoInternal;
    if (db._instanceStarted) {
        // If the instance has already been started, then silenty fail if this function is called again
        // with the same parameters. If the parameters differ then assert.
        if (hostAndPort === db._repoInternal.repoInfo_.host && (0, $ee1ab2624407a779$export$9cb4719e2e525b7a)(options, repo.repoInfo_.emulatorOptions)) return;
        $ae31471d52481ece$var$fatal('connectDatabaseEmulator() cannot initialize or alter the emulator configuration after the database instance has started.');
    }
    let tokenProvider = undefined;
    if (repo.repoInfo_.nodeAdmin) {
        if (options.mockUserToken) $ae31471d52481ece$var$fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the "firebase" package instead of "firebase-admin".');
        tokenProvider = new $ae31471d52481ece$var$EmulatorTokenProvider($ae31471d52481ece$var$EmulatorTokenProvider.OWNER);
    } else if (options.mockUserToken) {
        const token = typeof options.mockUserToken === 'string' ? options.mockUserToken : (0, $ee1ab2624407a779$export$367bf224123348f1)(options.mockUserToken, db.app.options.projectId);
        tokenProvider = new $ae31471d52481ece$var$EmulatorTokenProvider(token);
    }
    // Workaround to get cookies in Firebase Studio
    if ((0, $ee1ab2624407a779$export$5b4d24b45140ad90)(host)) {
        (0, $ee1ab2624407a779$export$c0f0d0ce4283a937)(host);
        (0, $ee1ab2624407a779$export$fd3d2954543183b1)('Database', true);
    }
    // Modify the repo to apply emulator settings
    $ae31471d52481ece$var$repoManagerApplyEmulatorSettings(repo, hostAndPort, options, tokenProvider);
}
/**
 * Disconnects from the server (all Database operations will be completed
 * offline).
 *
 * The client automatically maintains a persistent connection to the Database
 * server, which will remain active indefinitely and reconnect when
 * disconnected. However, the `goOffline()` and `goOnline()` methods may be used
 * to control the client connection in cases where a persistent connection is
 * undesirable.
 *
 * While offline, the client will no longer receive data updates from the
 * Database. However, all Database operations performed locally will continue to
 * immediately fire events, allowing your application to continue behaving
 * normally. Additionally, each operation performed locally will automatically
 * be queued and retried upon reconnection to the Database server.
 *
 * To reconnect to the Database and begin receiving remote events, see
 * `goOnline()`.
 *
 * @param db - The instance to disconnect.
 */ function $ae31471d52481ece$export$bee838355d017f0a(db) {
    db = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(db);
    db._checkNotDeleted('goOffline');
    $ae31471d52481ece$var$repoInterrupt(db._repo);
}
/**
 * Reconnects to the server and synchronizes the offline Database state
 * with the server state.
 *
 * This method should be used after disabling the active connection with
 * `goOffline()`. Once reconnected, the client will transmit the proper data
 * and fire the appropriate events so that your client "catches up"
 * automatically.
 *
 * @param db - The instance to reconnect.
 */ function $ae31471d52481ece$export$e0eecaabee32dd(db) {
    db = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(db);
    db._checkNotDeleted('goOnline');
    $ae31471d52481ece$var$repoResume(db._repo);
}
function $ae31471d52481ece$export$4e1d237eb9e560af(logger, persistent) {
    $ae31471d52481ece$var$enableLogging$1(logger, persistent);
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function $ae31471d52481ece$var$registerDatabase(variant) {
    $ae31471d52481ece$export$c9fb972242fcb3c4((0, $12572052cab62175$export$31499a9cd224b78c));
    (0, $12572052cab62175$export$c930050e7bb63965)(new (0, $7d2fc2186abbee8c$export$16fa2f45be04daa8)('database', (container, { instanceIdentifier: url })=>{
        const app = container.getProvider('app').getImmediate();
        const authProvider = container.getProvider('auth-internal');
        const appCheckProvider = container.getProvider('app-check-internal');
        return $ae31471d52481ece$export$a248c1d2ea757674(app, authProvider, appCheckProvider, url);
    }, "PUBLIC" /* ComponentType.PUBLIC */ ).setMultipleInstances(true));
    (0, $12572052cab62175$export$d29d5299a7137abc)($ae31471d52481ece$var$name, $ae31471d52481ece$var$version, variant);
    // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation
    (0, $12572052cab62175$export$d29d5299a7137abc)($ae31471d52481ece$var$name, $ae31471d52481ece$var$version, 'esm2017');
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const $ae31471d52481ece$var$SERVER_TIMESTAMP = {
    '.sv': 'timestamp'
};
/**
 * Returns a placeholder value for auto-populating the current timestamp (time
 * since the Unix epoch, in milliseconds) as determined by the Firebase
 * servers.
 */ function $ae31471d52481ece$export$3ff8e7e00c3264b7() {
    return $ae31471d52481ece$var$SERVER_TIMESTAMP;
}
/**
 * Returns a placeholder value that can be used to atomically increment the
 * current database value by the provided delta.
 *
 * @param delta - the amount to modify the current value atomically.
 * @returns A placeholder value for modifying data atomically server-side.
 */ function $ae31471d52481ece$export$a2647aa13413c947(delta) {
    return {
        '.sv': {
            'increment': delta
        }
    };
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A type for the resolve value of {@link runTransaction}.
 */ class $ae31471d52481ece$export$7a6f238067628c6b {
    /** @hideconstructor */ constructor(/** Whether the transaction was successfully committed. */ committed, /** The resulting data snapshot. */ snapshot){
        this.committed = committed;
        this.snapshot = snapshot;
    }
    /** Returns a JSON-serializable representation of this object. */ toJSON() {
        return {
            committed: this.committed,
            snapshot: this.snapshot.toJSON()
        };
    }
}
/**
 * Atomically modifies the data at this location.
 *
 * Atomically modify the data at this location. Unlike a normal `set()`, which
 * just overwrites the data regardless of its previous value, `runTransaction()` is
 * used to modify the existing value to a new value, ensuring there are no
 * conflicts with other clients writing to the same location at the same time.
 *
 * To accomplish this, you pass `runTransaction()` an update function which is
 * used to transform the current value into a new value. If another client
 * writes to the location before your new value is successfully written, your
 * update function will be called again with the new current value, and the
 * write will be retried. This will happen repeatedly until your write succeeds
 * without conflict or you abort the transaction by not returning a value from
 * your update function.
 *
 * Note: Modifying data with `set()` will cancel any pending transactions at
 * that location, so extreme care should be taken if mixing `set()` and
 * `runTransaction()` to update the same data.
 *
 * Note: When using transactions with Security and Firebase Rules in place, be
 * aware that a client needs `.read` access in addition to `.write` access in
 * order to perform a transaction. This is because the client-side nature of
 * transactions requires the client to read the data in order to transactionally
 * update it.
 *
 * @param ref - The location to atomically modify.
 * @param transactionUpdate - A developer-supplied function which will be passed
 * the current data stored at this location (as a JavaScript object). The
 * function should return the new value it would like written (as a JavaScript
 * object). If `undefined` is returned (i.e. you return with no arguments) the
 * transaction will be aborted and the data at this location will not be
 * modified.
 * @param options - An options object to configure transactions.
 * @returns A `Promise` that can optionally be used instead of the `onComplete`
 * callback to handle success and failure.
 */ function $ae31471d52481ece$export$3c54e006bf9c93b7(ref, // eslint-disable-next-line @typescript-eslint/no-explicit-any
transactionUpdate, options) {
    var _a;
    ref = (0, $ee1ab2624407a779$export$4befe9b5fa509a1b)(ref);
    $ae31471d52481ece$export$8d83036122ae444e('Reference.transaction', ref._path);
    if (ref.key === '.length' || ref.key === '.keys') throw 'Reference.transaction failed: ' + ref.key + ' is a read-only object.';
    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;
    const deferred = new (0, $ee1ab2624407a779$export$85f6557964517f1a)();
    const promiseComplete = (error, committed, node)=>{
        let dataSnapshot = null;
        if (error) deferred.reject(error);
        else {
            dataSnapshot = new $ae31471d52481ece$export$80b98bcbc246c942(node, new $ae31471d52481ece$export$35c3a5e7c9d1033c(ref._repo, ref._path), $ae31471d52481ece$var$PRIORITY_INDEX);
            deferred.resolve(new $ae31471d52481ece$export$7a6f238067628c6b(committed, dataSnapshot));
        }
    };
    // Add a watch to make sure we get server updates.
    const unwatcher = $ae31471d52481ece$export$ad30f661f41f4d90(ref, ()=>{});
    $ae31471d52481ece$var$repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);
    return deferred.promise;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ $ae31471d52481ece$var$PersistentConnection;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
$ae31471d52481ece$var$PersistentConnection.prototype.simpleListen = function(pathString, onComplete) {
    this.sendRequest('q', {
        p: pathString
    }, onComplete);
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
$ae31471d52481ece$var$PersistentConnection.prototype.echo = function(data, onEcho) {
    this.sendRequest('echo', {
        d: data
    }, onEcho);
};
// RealTimeConnection properties that we use in tests.
$ae31471d52481ece$var$Connection;
/**
 * @internal
 */ const $ae31471d52481ece$export$3f9782a4529ff160 = function(newHash) {
    const oldPut = $ae31471d52481ece$var$PersistentConnection.prototype.put;
    $ae31471d52481ece$var$PersistentConnection.prototype.put = function(pathString, data, onComplete, hash) {
        if (hash !== undefined) hash = newHash();
        oldPut.call(this, pathString, data, onComplete, hash);
    };
    return function() {
        $ae31471d52481ece$var$PersistentConnection.prototype.put = oldPut;
    };
};
$ae31471d52481ece$var$RepoInfo;
/**
 * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.
 * @internal
 */ const $ae31471d52481ece$export$868c9f20a76f0839 = function(forceRestClient) {
    $ae31471d52481ece$var$repoManagerForceRestClient(forceRestClient);
};
/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Used by console to create a database based on the app,
 * passed database URL and a custom auth implementation.
 * @internal
 * @param app - A valid FirebaseApp-like object
 * @param url - A valid Firebase databaseURL
 * @param version - custom version e.g. firebase-admin version
 * @param customAppCheckImpl - custom app check implementation
 * @param customAuthImpl - custom auth implementation
 */ function $ae31471d52481ece$export$8efb8ed30f837963({ app: app, url: url, version: version, customAuthImpl: customAuthImpl, customAppCheckImpl: customAppCheckImpl, nodeAdmin: nodeAdmin = false }) {
    $ae31471d52481ece$export$c9fb972242fcb3c4(version);
    /**
     * ComponentContainer('database-standalone') is just a placeholder that doesn't perform
     * any actual function.
     */ const componentContainer = new (0, $7d2fc2186abbee8c$export$436a80eea5d5c0c5)('database-standalone');
    const authProvider = new (0, $7d2fc2186abbee8c$export$2881499e37b75b9a)('auth-internal', componentContainer);
    let appCheckProvider;
    if (customAppCheckImpl) {
        appCheckProvider = new (0, $7d2fc2186abbee8c$export$2881499e37b75b9a)('app-check-internal', componentContainer);
        appCheckProvider.setComponent(new (0, $7d2fc2186abbee8c$export$16fa2f45be04daa8)('app-check-internal', ()=>customAppCheckImpl, "PRIVATE" /* ComponentType.PRIVATE */ ));
    }
    authProvider.setComponent(new (0, $7d2fc2186abbee8c$export$16fa2f45be04daa8)('auth-internal', ()=>customAuthImpl, "PRIVATE" /* ComponentType.PRIVATE */ ));
    return $ae31471d52481ece$export$a248c1d2ea757674(app, authProvider, appCheckProvider, url, nodeAdmin);
}
/**
 * Firebase Realtime Database
 *
 * @packageDocumentation
 */ $ae31471d52481ece$var$registerDatabase();





/**
 * Firebase-konfiguration ☁️
 *
 * Alla inställningar för att ansluta till Firebase.
 * OPTIMERING: Bara nödvändiga imports.
 */ const $3fe3517193779d10$var$firebaseConfig = {
    apiKey: "AIzaSyAQpjQvbTzyP-RdBU2TJ_5W6_V4k25BNQ4",
    authDomain: "scrum-board-app-f63b8.firebaseapp.com",
    databaseURL: "https://scrum-board-app-f63b8-default-rtdb.europe-west1.firebasedatabase.app/",
    projectId: "scrum-board-app-f63b8",
    storageBucket: "scrum-board-app-f63b8.appspot.com",
    messagingSenderId: "1045481371546",
    appId: "1:1045481371546:web:c9c8e2c4c3d7a7c1c9c8e2"
};
// Startar Firebase med konfigurationen
const $3fe3517193779d10$var$app = (0, $12572052cab62175$export$c55cfd413944906d)($3fe3517193779d10$var$firebaseConfig);
// Anslutning till databasen
const $3fe3517193779d10$export$f932f06c7eb6abeb = (0, $ae31471d52481ece$export$d0dd861204d0bf72)($3fe3517193779d10$var$app);
// Autentisering
const $3fe3517193779d10$export$73693bad9f5880b0 = (0, $809b25475cc45ca0$export$ffb5f4729a158638)($3fe3517193779d10$var$app);


/**
 * Hanterar inloggning och autentisering 🚪
 *
 * Anonyma inloggningar utan krångel med konton.
 * Kommer ihåg vem som är inloggad.
 */ // Gemensam kontext för autentisering
const $1f0369f02d12c9d2$var$AuthContext = /*#__PURE__*/ (0, $7p28Q.createContext)({
    currentUser: null,
    loading: true,
    error: null,
    loginAnonymously: ()=>Promise.resolve({
            success: false
        }),
    logout: ()=>Promise.resolve({
            success: false
        }),
    deleteCurrentUser: ()=>Promise.resolve({
            success: false
        }),
    isAnonymous: false
});
const $1f0369f02d12c9d2$export$1d39dc5b47e56ff0 = ()=>{
    const context = (0, $7p28Q.useContext)($1f0369f02d12c9d2$var$AuthContext);
    // Returnerar alltid något användbart
    return context;
};
const $1f0369f02d12c9d2$export$87091915187a1a85 = ({ children: children })=>{
    const [currentUser, setCurrentUser] = (0, $7p28Q.useState)(null);
    const [loading, setLoading] = (0, $7p28Q.useState)(true);
    const [error, setError] = (0, $7p28Q.useState)(null);
    // Använder den redan initialiserade Firebase Auth-instansen från config
    /**
   * Öppnar dörren för anonyma gäster 🎭
   *
   * Som att säga "kom in, du behöver inte visa legitimation!"
   * Firebase skapar en tillfällig identitet åt dig automatiskt.
   */ const loginAnonymously = async ()=>{
        try {
            setError(null);
            const userCredential = await (0, $809b25475cc45ca0$export$3c2fa207a37baaea)((0, $3fe3517193779d10$export$73693bad9f5880b0));
            return {
                success: true,
                user: userCredential.user
            };
        } catch (error) {
            console.error("Inloggningsfel:", error.message);
            setError("Kunde inte logga in");
            return {
                success: false,
                error: "Kunde inte logga in"
            };
        }
    };
    /**
   * Städar upp efter gäster som går hem 🧹
   *
   * Som att torka av bordet efter att någon ätit - vi vill inte
   * att Firebase fylls med gamla anonyma konton som ingen använder.
   * Bra miljötänk för databasen!
   */ const deleteCurrentUser = async ()=>{
        try {
            if (!currentUser) return {
                success: false,
                error: "Ingen anv\xe4ndare att ta bort"
            };
            await (0, $809b25475cc45ca0$export$2329c99376c9d0a4)(currentUser);
            console.log("Anv\xe4ndare borttagen fr\xe5n Firebase \uD83E\uDDF9");
            return {
                success: true
            };
        } catch (error) {
            console.error("Kunde inte ta bort anv\xe4ndare:", error.message);
            return {
                success: false,
                error: "Borttagning misslyckades: " + error.message
            };
        }
    };
    /**
   * Säger hej då och stänger dörren 👋
   *
   * Som att lämna en fest - vi säger tack för ikväll och går hem.
   * Firebase glömmer vem vi var och vi börjar om från början nästa gång.
   */ const logout = async ()=>{
        try {
            await (0, $809b25475cc45ca0$export$96f57966bedc81b4)((0, $3fe3517193779d10$export$73693bad9f5880b0));
            return {
                success: true
            };
        } catch (error) {
            console.error("Utloggningsfel:", error.message);
            setError("Kunde inte logga ut. F\xf6rs\xf6k igen.");
            return {
                success: false,
                error: "Kunde inte logga ut. F\xf6rs\xf6k igen."
            };
        }
    };
    /**
   * Lyssnar på ändringar i inloggningsstatus 👂
   */ (0, $7p28Q.useEffect)(()=>{
        const unsubscribe = (0, $809b25475cc45ca0$export$df995fae86a55f06)((0, $3fe3517193779d10$export$73693bad9f5880b0), (user)=>{
            setCurrentUser(user);
            setLoading(false);
        });
        return unsubscribe; // Städar upp när komponenten försvinner
    }, []); // Kör bara en gång
    // Packar ihop allt för andra komponenter
    const value = {
        currentUser: currentUser,
        loading: loading,
        error: error,
        loginAnonymously: loginAnonymously,
        logout: logout,
        deleteCurrentUser: deleteCurrentUser,
        isAnonymous: currentUser?.isAnonymous || false
    };
    return /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)($1f0369f02d12c9d2$var$AuthContext.Provider, {
        value: value,
        children: children
    });
};
var $1f0369f02d12c9d2$export$2e2bcd8739ae039 = $1f0369f02d12c9d2$export$1d39dc5b47e56ff0;



/**
 * Skyddar sidor från obehöriga 🛡️
 *
 * Kontrollerar inloggning innan åtkomst.
 * Omdirigerar till login om ej inloggad.
 * Kommer ihåg destination för senare.
 */ const $c4cb0399c1a12364$var$AuthGuard = ({ children: children })=>{
    const { currentUser: currentUser, loading: loading } = (0, $1f0369f02d12c9d2$export$1d39dc5b47e56ff0)();
    const location = (0, $0a4cd71eaf9877fd$export$45d76561a5302f2b)();
    // Väntar på autentiseringskontroll
    if (loading) return /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
        className: "auth-loading",
        children: [
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                className: "loading-spinner"
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("p", {
                children: "Laddar..."
            })
        ]
    });
    // Ej inloggad? Omdirigera till login
    // Sparar destination för senare
    if (!currentUser) return /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $0a4cd71eaf9877fd$export$444b3ab0cb9aec40), {
        to: "/login",
        state: {
            from: location.pathname
        },
        replace: true
    });
    // Inloggad - visa skyddat innehåll
    return children;
};
var $c4cb0399c1a12364$export$2e2bcd8739ae039 = $c4cb0399c1a12364$var$AuthGuard;




var $7p28Q = parcelRequire("7p28Q");
'use client';
const $9dac912d8f6aebb1$export$b16d9fb1a22de840 = (0, $7p28Q.createContext)(null);
const $9dac912d8f6aebb1$var$initialState = {
    didCatch: false,
    error: null
};
class $9dac912d8f6aebb1$export$e926676385687eaf extends (0, $7p28Q.Component) {
    constructor(props){
        super(props);
        this.resetErrorBoundary = this.resetErrorBoundary.bind(this);
        this.state = $9dac912d8f6aebb1$var$initialState;
    }
    static getDerivedStateFromError(error) {
        return {
            didCatch: true,
            error: error
        };
    }
    resetErrorBoundary() {
        const { error: error } = this.state;
        if (error !== null) {
            var _this$props$onReset, _this$props;
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
            (_this$props$onReset = (_this$props = this.props).onReset) === null || _this$props$onReset === void 0 || _this$props$onReset.call(_this$props, {
                args: args,
                reason: "imperative-api"
            });
            this.setState($9dac912d8f6aebb1$var$initialState);
        }
    }
    componentDidCatch(error, info) {
        var _this$props$onError, _this$props2;
        (_this$props$onError = (_this$props2 = this.props).onError) === null || _this$props$onError === void 0 || _this$props$onError.call(_this$props2, error, info);
    }
    componentDidUpdate(prevProps, prevState) {
        const { didCatch: didCatch } = this.state;
        const { resetKeys: resetKeys } = this.props;
        // There's an edge case where if the thing that triggered the error happens to *also* be in the resetKeys array,
        // we'd end up resetting the error boundary immediately.
        // This would likely trigger a second error to be thrown.
        // So we make sure that we don't check the resetKeys on the first call of cDU after the error is set.
        if (didCatch && prevState.error !== null && $9dac912d8f6aebb1$var$hasArrayChanged(prevProps.resetKeys, resetKeys)) {
            var _this$props$onReset2, _this$props3;
            (_this$props$onReset2 = (_this$props3 = this.props).onReset) === null || _this$props$onReset2 === void 0 || _this$props$onReset2.call(_this$props3, {
                next: resetKeys,
                prev: prevProps.resetKeys,
                reason: "keys"
            });
            this.setState($9dac912d8f6aebb1$var$initialState);
        }
    }
    render() {
        const { children: children, fallbackRender: fallbackRender, FallbackComponent: FallbackComponent, fallback: fallback } = this.props;
        const { didCatch: didCatch, error: error } = this.state;
        let childToRender = children;
        if (didCatch) {
            const props = {
                error: error,
                resetErrorBoundary: this.resetErrorBoundary
            };
            if (typeof fallbackRender === "function") childToRender = fallbackRender(props);
            else if (FallbackComponent) childToRender = (0, $7p28Q.createElement)(FallbackComponent, props);
            else if (fallback === null || (0, $7p28Q.isValidElement)(fallback)) childToRender = fallback;
            else throw error;
        }
        return (0, $7p28Q.createElement)($9dac912d8f6aebb1$export$b16d9fb1a22de840.Provider, {
            value: {
                didCatch: didCatch,
                error: error,
                resetErrorBoundary: this.resetErrorBoundary
            }
        }, childToRender);
    }
}
function $9dac912d8f6aebb1$var$hasArrayChanged() {
    let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    return a.length !== b.length || a.some((item, index)=>!Object.is(item, b[index]));
}
function $9dac912d8f6aebb1$var$assertErrorBoundaryContext(value) {
    if (value == null || typeof value.didCatch !== "boolean" || typeof value.resetErrorBoundary !== "function") throw new Error("ErrorBoundaryContext not found");
}
function $9dac912d8f6aebb1$export$c052f6604b7d51fe() {
    const context = (0, $7p28Q.useContext)($9dac912d8f6aebb1$export$b16d9fb1a22de840);
    $9dac912d8f6aebb1$var$assertErrorBoundaryContext(context);
    const [state, setState] = (0, $7p28Q.useState)({
        error: null,
        hasError: false
    });
    const memoized = (0, $7p28Q.useMemo)(()=>({
            resetBoundary: ()=>{
                context.resetErrorBoundary();
                setState({
                    error: null,
                    hasError: false
                });
            },
            showBoundary: (error)=>setState({
                    error: error,
                    hasError: true
                })
        }), [
        context.resetErrorBoundary
    ]);
    if (state.hasError) throw state.error;
    return memoized;
}
function $9dac912d8f6aebb1$export$f0c7a449e0cfaec7(component, errorBoundaryProps) {
    const Wrapped = (0, $7p28Q.forwardRef)((props, ref)=>(0, $7p28Q.createElement)($9dac912d8f6aebb1$export$e926676385687eaf, errorBoundaryProps, (0, $7p28Q.createElement)(component, {
            ...props,
            ref: ref
        })));
    // Format for display in DevTools
    const name = component.displayName || component.name || "Unknown";
    Wrapped.displayName = "withErrorBoundary(".concat(name, ")");
    return Wrapped;
}


// src/pages/HomePage.jsx
/**
 * Huvudsidan för Scrum Board 🏠
 *
 * Styr hela appen:
 * - Firebase-kommunikation via hooks
 * - Uppgifts- och medlemshantering
 * - Navigation mellan Board, Uppgifter och Team
 * - Notifikationer för användarfeedback
 */ 

var $7p28Q = parcelRequire("7p28Q");

// src/components/Board/ScrumBoard.jsx
/**
 * Min digitala kanban-tavla - hjärtat i hela appen!
 *
 * Som en fysisk whiteboard fast bättre - här ser du alla uppgifter
 * sorterade i tre kolumner som visar exakt var allt befinner sig.
 * Uppdateras live så alla i teamet ser samma sak samtidigt.
 *
 * Varför jag älskar den här tavlan:
 * - Ser direkt vad som händer i projektet (inga överraskningar!)
 * - Upptäcker flaskhalsar innan de blir problem
 * - Perfekt för morgonmöten - "vad gör vi idag?"
 * - Alla förstår läget utan långa förklaringar
 */ 

var $7p28Q = parcelRequire("7p28Q");
// src/components/Tasks/TaskCard.jsx


var $7p28Q = parcelRequire("7p28Q");
// src/components/UI/Button.jsx

parcelRequire("7p28Q");

/**
 * Universell knappkomponent 🔘
 *
 * Flexibel knapp med olika stilar och storlekar.
 * Stöder ikoner och fullbredd.
 *
 * @param {ReactNode} children - Knapptext
 * @param {Function} onClick - Klick-hanterare
 * @param {string} type - HTML-typ
 * @param {string} variant - Stil (primary/secondary/danger)
 * @param {string} size - Storlek (small/medium/large)
 * @param {boolean} disabled - Inaktiverad
 * @param {boolean} fullWidth - Full bredd
 * @param {ReactNode} iconLeft - Vänster ikon
 * @param {ReactNode} iconRight - Höger ikon
 * @param {string} className - Extra CSS-klasser
 */ const $4b511624a7a9bd1e$var$Button = ({ children: children, onClick: onClick, type: type = "button", variant: variant = "primary", size: size = "medium", disabled: disabled = false, fullWidth: fullWidth = false, iconLeft: iconLeft = null, iconRight: iconRight = null, className: className = "" })=>{
    // Kontrollerar om ikoner finns
    const hasIcon = iconLeft || iconRight;
    // Bygger CSS-klasser
    const buttonClasses = `
    button
    button-${variant}
    button-${size}
    ${fullWidth ? "button-full-width" : ""}
    ${hasIcon ? "button-with-icon" : ""}
    ${className}
  `.trim().replace(/\s+/g, " ");
    return /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("button", {
        type: type,
        className: buttonClasses,
        onClick: onClick,
        disabled: disabled,
        "aria-disabled": disabled,
        children: [
            iconLeft && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                className: "button-icon-left",
                children: iconLeft
            }),
            children,
            iconRight && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                className: "button-icon-right",
                children: iconRight
            })
        ]
    });
};
var $4b511624a7a9bd1e$export$2e2bcd8739ae039 = $4b511624a7a9bd1e$var$Button;


// src/components/UI/Modal.jsx
/**
 * Återanvändbar modalkomponent
 *
 * Flexibel dialog med React Portal.
 * Stöder olika storlekar, Escape-stängning,
 * förhindrar bakgrundsscrollning.
 */ 

var $7p28Q = parcelRequire("7p28Q");



const $c2d7ee1fa8c419fe$var$Modal = ({ isOpen: isOpen, onClose: onClose, title: title, children: children, footer: footer, size: size = "medium" })=>{
    /**
   * Hanterar Escape-tangent och scrollning
   */ (0, $7p28Q.useEffect)(()=>{
        // Stäng med Escape
        const handleEscape = (e)=>{
            if (e.key === "Escape" && isOpen) onClose();
        };
        // Registrera event-lyssnare
        window.addEventListener("keydown", handleEscape);
        // Förhindra bakgrundsscrollning
        if (isOpen) document.body.style.overflow = "hidden";
        // Städa upp vid avmontering
        return ()=>{
            window.removeEventListener("keydown", handleEscape);
            document.body.style.overflow = "auto";
        };
    }, [
        isOpen,
        onClose
    ]);
    if (!isOpen) return null;
    /**
   * Förhindrar bubbling av klickhändelser
   */ const handleModalClick = (e)=>{
        e.stopPropagation();
    };
    // React Portal för korrekt rendering
    return /*#__PURE__*/ (0, (/*@__PURE__*/$parcel$interopDefault($b939d40a1c9f6035$exports))).createPortal(/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
        className: "modal-overlay",
        onClick: onClose,
        children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
            className: `modal modal-${size}`,
            onClick: handleModalClick,
            children: [
                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                    className: "modal-header",
                    children: [
                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("h2", {
                            className: "modal-title",
                            children: title
                        }),
                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("button", {
                            className: "modal-close",
                            onClick: onClose,
                            "aria-label": "St\xe4ng",
                            children: "\xd7"
                        })
                    ]
                }),
                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                    className: "modal-content",
                    children: children
                }),
                footer && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                    className: "modal-footer",
                    children: footer
                })
            ]
        })
    }), document.body // Renderar i body för korrekt z-index
    );
};
var $c2d7ee1fa8c419fe$export$2e2bcd8739ae039 = $c2d7ee1fa8c419fe$var$Modal;


// src/utils/dateUtils.jsx
// Använder en enklare approach för att undvika Parcel-problem med date-fns
/**
 * Tidsfunktioner för användarvänliga datum
 *
 * Gör tidsstämplar begripliga med snygga format
 * och relativa texter som "2 timmar sedan".
 */ /**
 * Formaterar tidsstämpel till läsbart datum
 *
 * @param {number} timestamp - Tidsstämpel
 * @returns {string} Format: "2025-05-15 14:30"
 */ const $9c8f034ded006adc$export$3ae94a2503e890a1 = (timestamp)=>{
    // Ingen tidsstämpel? Returnera tom sträng
    if (!timestamp) return "";
    // Skapa Date-objekt och formatera
    const date = new Date(timestamp);
    // Formatera med svenska format
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const day = String(date.getDate()).padStart(2, "0");
    const hours = String(date.getHours()).padStart(2, "0");
    const minutes = String(date.getMinutes()).padStart(2, "0");
    return `${year}-${month}-${day} ${hours}:${minutes}`;
};
const $9c8f034ded006adc$export$b4ea3b48dcf921f6 = (timestamp)=>{
    // Ingen tidsstämpel? Returnera tom sträng
    if (!timestamp) return "";
    // Beräkna tidsskillnad
    const now = Date.now();
    const diff = now - timestamp;
    // Konvertera till läsbara enheter
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);
    // Välj lämplig text
    if (days > 0) // Singular/plural för dagar
    return `${days} ${days === 1 ? "dag" : "dagar"} sedan`;
    else if (hours > 0) // Singular/plural för timmar
    return `${hours} ${hours === 1 ? "timme" : "timmar"} sedan`;
    else if (minutes > 0) // Singular/plural för minuter
    return `${minutes} ${minutes === 1 ? "minut" : "minuter"} sedan`;
    else // Mycket nyligen
    return "Just nu";
};



/**
 * Uppgiftskort - visuell representation av en uppgift
 *
 * Visar en uppgift som ett interaktivt kort med all relevant information.
 * Fungerar som en digital post-it med möjlighet att:
 * - Visa uppgiftens status, kategori och tilldelning
 * - Öppna detaljvy med fullständig information
 * - Ändra status (flytta mellan kolumner)
 * - Tilldela uppgiften till rätt teammedlem
 * - Ta bort uppgiften från systemet
 *
 * @param {Object} task - Uppgiftsdata att visa
 * @param {Array} members - Tillgängliga teammedlemmar
 * @param {Function} onUpdateStatus - Callback för statusändring
 * @param {Function} onAssignTask - Callback för tilldelning
 * @param {Function} onDeleteTask - Callback för borttagning
 */ const $8f842c00129ed0ed$var$TaskCard = ({ task: task, members: members, onUpdateStatus: onUpdateStatus, onAssignTask: onAssignTask, onDeleteTask: onDeleteTask })=>{
    // States för modal och tilldelning
    const [showingTaskDetails, setShowingTaskDetails] = (0, $7p28Q.useState)(false);
    const [askingForDeleteConfirmation, setAskingForDeleteConfirmation] = (0, $7p28Q.useState)(false);
    const [chosenTeammateId, setChosenTeammateId] = (0, $7p28Q.useState)("");
    /**
   * Hittar personer med rätt kompetens
   *
   * OPTIMERING: Memoizerad för bättre prestanda
   */ const qualifiedTeammates = (0, $7p28Q.useMemo)(()=>members.filter((teammate)=>teammate.role === task.category), [
        members,
        task.category
    ]);
    /**
   * Min färgkodning för var uppgiften befinner sig
   *
   * Som trafikljus för arbetsflödet - blått för "vänta",
   * orange för "kör", grönt för "klart". Enkelt att förstå!
   */ const getWorkflowColor = (status)=>{
        switch(status.toLowerCase()){
            case "nytt":
                return "status-new";
            case "p\xe5g\xe5ende":
                return "status-in-progress";
            case "klar":
                return "status-completed";
            default:
                return "";
        }
    };
    /**
   * Min färgkodning för olika typer av arbete
   *
   * Varje kompetensområde får sin egen färg så man snabbt
   * ser vad som är vad på tavlan. Som att sortera LEGO!
   */ const getSkillAreaColor = (category)=>{
        switch(category.toLowerCase()){
            case "frontend":
                return "category-frontend";
            case "backend":
                return "category-backend";
            case "ux":
                return "category-ux";
            default:
                return "category-default";
        }
    };
    /**
   * Flyttar uppgiften framåt i arbetsflödet
   *
   * Som att trycka på "nästa"-knappen i en process.
   * Stänger också detaljvyn så man ser resultatet direkt.
   *
   * OPTIMERING: Memoizerad callback för att undvika onödiga re-renders
   */ const moveTaskForward = (0, $7p28Q.useCallback)((newStatus)=>{
        onUpdateStatus(task.id, newStatus);
        setShowingTaskDetails(false);
    }, [
        onUpdateStatus,
        task.id
    ]);
    /**
   * Ger jobbet till rätt person
   *
   * Hittar den valda personen och säger "det här är ditt nu!".
   * Stänger sedan detaljvyn så man ser förändringen.
   *
   * OPTIMERING: Memoizerad callback för bättre prestanda
   */ const giveTaskToChosen = (0, $7p28Q.useCallback)(()=>{
        if (!chosenTeammateId) return;
        const chosenPerson = members.find((m)=>m.id === chosenTeammateId);
        if (chosenPerson) {
            onAssignTask(task.id, chosenPerson.id, chosenPerson.name);
            setShowingTaskDetails(false);
        }
    }, [
        chosenTeammateId,
        members,
        onAssignTask,
        task.id
    ]);
    /**
   * Raderar uppgiften för alltid
   *
   * Som att kasta något i papperskorgen och tömma den.
   * Stänger alla öppna fönster efteråt.
   *
   * OPTIMERING: Memoizerad callback för bättre prestanda
   */ const eraseTaskForever = (0, $7p28Q.useCallback)(()=>{
        onDeleteTask(task.id);
        setAskingForDeleteConfirmation(false);
        setShowingTaskDetails(false);
    }, [
        onDeleteTask,
        task.id
    ]);
    /**
   * Renderar uppgiftskortet med alla dess komponenter
   *
   * Består av tre huvuddelar:
   * - Kompakt kort för visning på tavlan
   * - Detaljmodal med fullständig information
   * - Bekräftelsemodal för borttagning
   */ return /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)((0, $0cca9a328bcd4540$exports.Fragment), {
        children: [
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                className: "task-card",
                onClick: ()=>setShowingTaskDetails(true),
                children: [
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                        className: "task-header",
                        children: [
                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                className: `task-status ${getWorkflowColor(task.status)}`,
                                children: task.status
                            }),
                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                className: `task-category ${getSkillAreaColor(task.category)}`,
                                children: task.category
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("h3", {
                        className: "task-title",
                        children: task.title
                    }),
                    task.description && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("p", {
                        className: "task-description",
                        children: task.description.length > 100 ? `${task.description.substring(0, 100)}...` : task.description
                    }),
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                        className: "task-meta",
                        children: [
                            task.assignedToMemberName ? /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                                className: "task-assigned",
                                children: [
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                        className: "meta-label",
                                        children: "Tilldelad:"
                                    }),
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                        className: "meta-value",
                                        children: task.assignedToMemberName
                                    })
                                ]
                            }) : /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                                className: "task-assigned",
                                children: [
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                        className: "meta-label",
                                        children: "Tilldelad:"
                                    }),
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                        className: "meta-value not-assigned",
                                        children: "Ej tilldelad"
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                                className: "task-created",
                                children: [
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                        className: "meta-label",
                                        children: "Skapad:"
                                    }),
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                        className: "meta-value",
                                        title: (0, $9c8f034ded006adc$export$3ae94a2503e890a1)(task.creationTimestamp),
                                        children: (0, $9c8f034ded006adc$export$b4ea3b48dcf921f6)(task.creationTimestamp)
                                    })
                                ]
                            })
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $c2d7ee1fa8c419fe$export$2e2bcd8739ae039), {
                isOpen: showingTaskDetails,
                onClose: ()=>setShowingTaskDetails(false),
                title: task.title,
                size: "medium",
                footer: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)((0, $0cca9a328bcd4540$exports.Fragment), {
                    children: [
                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                            onClick: ()=>setAskingForDeleteConfirmation(true),
                            variant: "danger",
                            children: "Ta bort"
                        }),
                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                            style: {
                                flex: 1
                            }
                        }),
                        task.status !== "Klar" && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                            onClick: ()=>moveTaskForward("Klar"),
                            variant: "success",
                            children: "Markera som klar"
                        }),
                        task.status === "Nytt" && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                            onClick: ()=>moveTaskForward("P\xe5g\xe5ende"),
                            variant: "primary",
                            children: "Starta uppgift"
                        })
                    ]
                }),
                children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                    className: "task-details",
                    children: [
                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                            className: "task-detail-row",
                            children: [
                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                    className: "detail-label",
                                    children: "Status:"
                                }),
                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                    className: `detail-value task-status ${getWorkflowColor(task.status)}`,
                                    children: task.status
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                            className: "task-detail-row",
                            children: [
                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                    className: "detail-label",
                                    children: "Kategori:"
                                }),
                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                    className: `detail-value task-category ${getSkillAreaColor(task.category)}`,
                                    children: task.category
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                            className: "task-detail-row",
                            children: [
                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                    className: "detail-label",
                                    children: "Skapad:"
                                }),
                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                    className: "detail-value",
                                    children: (0, $9c8f034ded006adc$export$3ae94a2503e890a1)(task.creationTimestamp)
                                })
                            ]
                        }),
                        task.description && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                            className: "task-detail-description",
                            children: [
                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("h4", {
                                    children: "Beskrivning"
                                }),
                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("p", {
                                    children: task.description
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                            className: "task-assignment",
                            children: [
                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("h4", {
                                    children: "Tilldelning"
                                }),
                                task.assignedToMemberName ? /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                                    className: "current-assignment",
                                    children: [
                                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("p", {
                                            children: [
                                                "Denna uppgift \xe4r tilldelad till:",
                                                " ",
                                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("strong", {
                                                    children: task.assignedToMemberName
                                                })
                                            ]
                                        }),
                                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                                            onClick: ()=>onAssignTask(task.id, null, null),
                                            variant: "secondary",
                                            size: "small",
                                            children: "Ta bort tilldelning"
                                        })
                                    ]
                                }) : /* Inte tilldelad? Visa formulär för att välja person */ /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                                    className: "assignment-form",
                                    children: qualifiedTeammates.length > 0 ? /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)((0, $0cca9a328bcd4540$exports.Fragment), {
                                        children: [
                                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("p", {
                                                children: [
                                                    "Tilldela denna ",
                                                    task.category,
                                                    "-uppgift till en teammedlem med matchande roll:"
                                                ]
                                            }),
                                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                                                className: "assignment-controls",
                                                children: [
                                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("select", {
                                                        value: chosenTeammateId,
                                                        onChange: (e)=>setChosenTeammateId(e.target.value),
                                                        children: [
                                                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("option", {
                                                                value: "",
                                                                children: "V\xe4lj teammedlem"
                                                            }),
                                                            qualifiedTeammates.map((teammate)=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("option", {
                                                                    value: teammate.id,
                                                                    children: teammate.name
                                                                }, teammate.id))
                                                        ]
                                                    }),
                                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                                                        onClick: giveTaskToChosen,
                                                        variant: "primary",
                                                        disabled: !chosenTeammateId,
                                                        children: "Tilldela"
                                                    })
                                                ]
                                            })
                                        ]
                                    }) : /* Inga personer med rätt kompetens? Visa ett meddelande */ /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("p", {
                                        className: "no-eligible-members",
                                        children: [
                                            "Det finns inga teammedlemmar med rollen ",
                                            task.category,
                                            " som kan tilldelas denna uppgift."
                                        ]
                                    })
                                })
                            ]
                        })
                    ]
                })
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $c2d7ee1fa8c419fe$export$2e2bcd8739ae039), {
                isOpen: askingForDeleteConfirmation,
                onClose: ()=>setAskingForDeleteConfirmation(false),
                title: "Bekr\xe4fta borttagning",
                footer: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)((0, $0cca9a328bcd4540$exports.Fragment), {
                    children: [
                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                            onClick: ()=>setAskingForDeleteConfirmation(false),
                            variant: "secondary",
                            children: "Avbryt"
                        }),
                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                            onClick: eraseTaskForever,
                            variant: "danger",
                            children: "Ta bort"
                        })
                    ]
                }),
                children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("p", {
                    children: [
                        '\xc4r du s\xe4ker p\xe5 att du vill ta bort uppgiften "',
                        task.title,
                        '"? Uppgiften kommer att tas bort permanent fr\xe5n databasen och kan inte \xe5terst\xe4llas.'
                    ]
                })
            })
        ]
    });
};
var // OPTIMERING: Memoizerad komponent för att undvika onödiga re-renders
// Komponenten renderas bara om när props faktiskt ändras
$8f842c00129ed0ed$export$2e2bcd8739ae039 = /*#__PURE__*/ (0, $7p28Q.memo)($8f842c00129ed0ed$var$TaskCard);




// src/components/Tasks/AddTaskForm.jsx
/**
 * Formulär för att skapa nya uppgifter
 *
 * Hanterar inmatning och validering av uppgiftsdata med:
 * - Obligatorisk titel för att identifiera uppgiften
 * - Val av kategori (frontend, backend, UX) för korrekt tilldelning
 * - Valfri beskrivning för ytterligare detaljer
 *
 * Validerar att nödvändiga fält är ifyllda innan uppgiften skapas
 * och skickas till Firebase via callback-funktionen.
 */ 

var $7p28Q = parcelRequire("7p28Q");


const $432c5c57f223054f$var$AddTaskForm = ({ onAddTask: onAddTask, categories: categories = [
    "frontend",
    "backend",
    "ux"
] })=>{
    const [title, setTitle] = (0, $7p28Q.useState)("");
    const [category, setCategory] = (0, $7p28Q.useState)(categories[0]);
    const [description, setDescription] = (0, $7p28Q.useState)("");
    const [error, setError] = (0, $7p28Q.useState)("");
    /**
   * Hanterar formulärinlämning
   *
   * Processen vid inlämning:
   * 1. Validerar obligatoriska fält (titel och kategori)
   * 2. Skapar ett nytt uppgiftsobjekt med inmatad data
   * 3. Skickar uppgiften till föräldrakomponenten och återställer formuläret
   *
   * @param {Event} e - Formulärets submit-event
   */ const handleSubmit = (e)=>{
        // Stoppar webbläsaren från att ladda om sidan
        e.preventDefault();
        // Validera titel (obligatorisk)
        if (!title.trim()) {
            setError("Du m\xe5ste ge uppgiften en titel!");
            return;
        }
        // Validera kategori (obligatorisk)
        if (!category) {
            setError("Du m\xe5ste v\xe4lja en kategori!");
            return;
        }
        // Skapa uppgiftsobjekt
        const newTask = {
            title: title.trim(),
            category: category,
            description: description.trim() || null,
            assignedToMemberId: null,
            assignedToMemberName: null
        };
        // Skicka till föräldrakomponent
        onAddTask(newTask);
        // Återställ formuläret
        setTitle("");
        setCategory(categories[0]);
        setDescription("");
        setError("");
    };
    return /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("form", {
        className: "add-task-form",
        onSubmit: handleSubmit,
        children: [
            error && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                className: "form-error",
                children: error
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                className: "form-group",
                children: [
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("label", {
                        htmlFor: "title",
                        children: "Titel *"
                    }),
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("input", {
                        type: "text",
                        id: "title",
                        value: title,
                        onChange: (e)=>setTitle(e.target.value),
                        placeholder: "Ange uppgiftens titel",
                        required: true
                    })
                ]
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                className: "form-group",
                children: [
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("label", {
                        htmlFor: "category",
                        children: "Kategori *"
                    }),
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("select", {
                        id: "category",
                        value: category,
                        onChange: (e)=>setCategory(e.target.value),
                        required: true,
                        children: categories.map((categoryOption)=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("option", {
                                value: categoryOption,
                                children: categoryOption.charAt(0).toUpperCase() + categoryOption.slice(1)
                            }, categoryOption))
                    })
                ]
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                className: "form-group",
                children: [
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("label", {
                        htmlFor: "description",
                        children: "Beskrivning (valfritt)"
                    }),
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("textarea", {
                        id: "description",
                        value: description,
                        onChange: (e)=>setDescription(e.target.value),
                        placeholder: "Beskriv uppgiften mer detaljerat",
                        rows: 4
                    })
                ]
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                className: "form-actions",
                children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                    type: "submit",
                    variant: "primary",
                    children: "L\xe4gg till"
                })
            })
        ]
    });
};
var $432c5c57f223054f$export$2e2bcd8739ae039 = $432c5c57f223054f$var$AddTaskForm;


// src/utils/filterUtils.jsx
/**
 * Filtreringsverktyg för uppgifter 🔍
 *
 * Hjälper dig hitta rätt uppgifter snabbt.
 * Filtrera på person, kategori eller status.
 */ /**
 * Visar bara en persons uppgifter 👤
 *
 * @param {Array} tasks - Alla uppgifter
 * @param {string} memberId - Vilken person
 * @returns {Array} Personens uppgifter
 */ const $3f5683e0ddc9c201$export$45830ad1d19224ad = (tasks, memberId)=>{
    // Ingen person vald? Visa allt
    if (!memberId || !Array.isArray(tasks) || tasks.length === 0) return tasks;
    // Bara den personens uppgifter
    return tasks.filter((task)=>task?.assignedToMemberId === memberId);
};
const $3f5683e0ddc9c201$export$6d1731a321e8bdf4 = (tasks, category)=>{
    // Ingen kategori vald? Visa allt
    if (!category || !Array.isArray(tasks) || tasks.length === 0) return tasks;
    // Bara den kategorin
    return tasks.filter((task)=>task?.category === category);
};
const $3f5683e0ddc9c201$export$1caf81d27b0e4d0e = (tasks, status)=>{
    // Ingen status vald? Visa allt
    if (!status || !Array.isArray(tasks) || tasks.length === 0) return tasks;
    // Bara den statusen
    return tasks.filter((task)=>task?.status === status);
};
const $3f5683e0ddc9c201$export$e0c098024fade003 = (tasks)=>{
    // Inget att filtrera? Returnera som det är
    if (!Array.isArray(tasks) || tasks.length === 0) return tasks;
    // Bara aktiva uppgifter
    return tasks.filter((task)=>!task?.isArchived);
};



const $0b907df167558aff$var$ScrumBoard = ({ tasks: tasks, members: members, onAddTask: onAddTask, onUpdateTaskStatus: onUpdateTaskStatus, onAssignTask: onAssignTask, onDeleteTask: onDeleteTask, categories: categories = [
    "frontend",
    "backend",
    "ux"
], isLoading: isLoading = false })=>{
    const [showingAddTaskForm, setShowingAddTaskForm] = (0, $7p28Q.useState)(false);
    /**
   * Sorterar uppgifter i kolumner
   *
   * OPTIMERING: Memoizerad för bättre prestanda
   */ const { freshTasks: freshTasks, ongoingWork: ongoingWork, finishedStuff: finishedStuff } = (0, $7p28Q.useMemo)(()=>{
        // Ta bort arkiverade uppgifter
        const activeWorkItems = (0, $3f5683e0ddc9c201$export$e0c098024fade003)(tasks);
        // Sortera i tre kolumner
        return {
            freshTasks: (0, $3f5683e0ddc9c201$export$1caf81d27b0e4d0e)(activeWorkItems, "Nytt"),
            ongoingWork: (0, $3f5683e0ddc9c201$export$1caf81d27b0e4d0e)(activeWorkItems, "P\xe5g\xe5ende"),
            finishedStuff: (0, $3f5683e0ddc9c201$export$1caf81d27b0e4d0e)(activeWorkItems, "Klar")
        };
    }, [
        tasks
    ]);
    // När någon skapar en ny uppgift
    // OPTIMERING: Memoizerad callback för bättre prestanda
    const createTaskAndCloseForm = (0, $7p28Q.useCallback)((taskData)=>{
        onAddTask(taskData); // Skicka upp till huvudappen
        setShowingAddTaskForm(false); // Stäng formuläret
    }, [
        onAddTask
    ]);
    return /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
        className: "scrum-board-container",
        children: [
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                className: "board-header",
                children: [
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("h2", {
                        children: "Scrum Board"
                    }),
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                        onClick: ()=>setShowingAddTaskForm(true),
                        variant: "primary",
                        children: "L\xe4gg till uppgift"
                    })
                ]
            }),
            isLoading ? /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                className: "loading-indicator",
                children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                    children: "Laddar uppgifter"
                })
            }) : /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                className: "board-columns",
                children: [
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                        className: "board-column",
                        children: [
                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                                className: "column-header",
                                children: [
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("h3", {
                                        children: "Nya uppgifter"
                                    }),
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                        className: "task-count",
                                        children: freshTasks.length
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                                className: "column-content",
                                children: freshTasks.length === 0 ? /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                                    className: "empty-column",
                                    children: [
                                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("p", {
                                            children: "Inga nya uppgifter"
                                        }),
                                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                                            onClick: ()=>setShowingAddTaskForm(true),
                                            variant: "secondary",
                                            size: "small",
                                            children: "L\xe4gg till uppgift"
                                        })
                                    ]
                                }) : freshTasks.map((task)=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $8f842c00129ed0ed$export$2e2bcd8739ae039), {
                                        task: task,
                                        members: members,
                                        onUpdateStatus: onUpdateTaskStatus,
                                        onAssignTask: onAssignTask,
                                        onDeleteTask: onDeleteTask
                                    }, task.id))
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                        className: "board-column",
                        children: [
                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                                className: "column-header",
                                children: [
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("h3", {
                                        children: "P\xe5g\xe5ende"
                                    }),
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                        className: "task-count",
                                        children: ongoingWork.length
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                                className: "column-content",
                                children: ongoingWork.length === 0 ? /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                                    className: "empty-column",
                                    children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("p", {
                                        children: "Inga p\xe5g\xe5ende uppgifter"
                                    })
                                }) : ongoingWork.map((task)=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $8f842c00129ed0ed$export$2e2bcd8739ae039), {
                                        task: task,
                                        members: members,
                                        onUpdateStatus: onUpdateTaskStatus,
                                        onAssignTask: onAssignTask,
                                        onDeleteTask: onDeleteTask
                                    }, task.id))
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                        className: "board-column",
                        children: [
                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                                className: "column-header",
                                children: [
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("h3", {
                                        children: "Klara"
                                    }),
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                        className: "task-count",
                                        children: finishedStuff.length
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                                className: "column-content",
                                children: finishedStuff.length === 0 ? /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                                    className: "empty-column",
                                    children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("p", {
                                        children: "Inga klara uppgifter"
                                    })
                                }) : finishedStuff.map((task)=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $8f842c00129ed0ed$export$2e2bcd8739ae039), {
                                        task: task,
                                        members: members,
                                        onUpdateStatus: onUpdateTaskStatus,
                                        onAssignTask: onAssignTask,
                                        onDeleteTask: onDeleteTask
                                    }, task.id))
                            })
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $c2d7ee1fa8c419fe$export$2e2bcd8739ae039), {
                isOpen: showingAddTaskForm,
                onClose: ()=>setShowingAddTaskForm(false),
                title: "L\xe4gg till uppgift",
                children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $432c5c57f223054f$export$2e2bcd8739ae039), {
                    onAddTask: createTaskAndCloseForm,
                    categories: categories
                })
            })
        ]
    });
};
var // OPTIMERING: Memoizerad komponent för att undvika onödiga re-renders
$0b907df167558aff$export$2e2bcd8739ae039 = /*#__PURE__*/ (0, $7p28Q.memo)($0b907df167558aff$var$ScrumBoard);


// src/components/Tasks/TaskList.jsx
/**
 * Smart uppgiftslista med filtrering 🔍
 *
 * Filtrera på person, kategori eller status.
 * Sortera som du vill. Lägg till nya uppgifter.
 */ 

var $7p28Q = parcelRequire("7p28Q");





// src/utils/sortUtils.jsx
/**
 * Sorteringsfunktioner för uppgifter 🔄
 *
 * Olika sätt att ordna uppgifter.
 * Alla funktioner skapar nya listor utan att ändra originalet.
 */ /**
 * Sorterar nyast först 🆕
 *
 * @param {Array} tasks - Uppgifter att sortera
 * @returns {Array} Sorterad lista
 */ const $1bb7cddb3ee8fcf3$export$7924ec03a8eaf79 = (tasks)=>{
    // Kopia och sortering
    return [
        ...tasks
    ].sort((a, b)=>b.creationTimestamp - a.creationTimestamp);
};
const $1bb7cddb3ee8fcf3$export$2f657cf9c6f37762 = (tasks)=>{
    // Gör en kopia först (säkert är säkert)
    // Sen sorterar så det äldsta kommer först
    return [
        ...tasks
    ].sort((a, b)=>a.creationTimestamp - b.creationTimestamp);
};
const $1bb7cddb3ee8fcf3$export$f91e6e7592d656f9 = (tasks)=>{
    // Gör en kopia först (som alltid)
    // Sen sorterar alfabetiskt (localeCompare fixar å, ä, ö)
    return [
        ...tasks
    ].sort((a, b)=>a.title.localeCompare(b.title));
};
const $1bb7cddb3ee8fcf3$export$21d8e734d0fd6a1c = (tasks)=>{
    // Gör en kopia först (som en god vana)
    // Sen sorterar baklänges, från Ö till A
    return [
        ...tasks
    ].sort((a, b)=>b.title.localeCompare(a.title));
};



const $f6afb0a49d48489f$var$TaskList = ({ tasks: tasks, members: members, onAddTask: onAddTask, onUpdateTaskStatus: onUpdateTaskStatus, onAssignTask: onAssignTask, onDeleteTask: onDeleteTask, categories: categories = [
    "frontend",
    "backend",
    "ux"
], isLoading: isLoading = false })=>{
    const [isAddModalOpen, setIsAddModalOpen] = (0, $7p28Q.useState)(false);
    const [filterMember, setFilterMember] = (0, $7p28Q.useState)("");
    const [filterCategory, setFilterCategory] = (0, $7p28Q.useState)("");
    const [filterStatus, setFilterStatus] = (0, $7p28Q.useState)("");
    const [sortOption, setSortOption] = (0, $7p28Q.useState)("newest");
    // SMART SORTERING: Bara räknar om när något faktiskt ändras (sparar prestanda)
    const sortedTasks = (0, $7p28Q.useMemo)(()=>{
        // Först filtrerar vi bort det vi inte vill se
        const filteredTasks = (0, $3f5683e0ddc9c201$export$e0c098024fade003)(tasks) // Städar bort gamla arkiverade
        .filter((task)=>!filterMember || task.assignedToMemberId === filterMember) // Bara en persons uppgifter?
        .filter((task)=>!filterCategory || task.category === filterCategory) // Bara en typ av uppgifter?
        .filter((task)=>!filterStatus || task.status === filterStatus); // Bara en status?
        // Sen sorterar vi som användaren vill ha det
        switch(sortOption){
            case "newest":
                return (0, $1bb7cddb3ee8fcf3$export$7924ec03a8eaf79)(filteredTasks); // Nyast först (som Instagram)
            case "oldest":
                return (0, $1bb7cddb3ee8fcf3$export$2f657cf9c6f37762)(filteredTasks); // Äldst först (rättvist)
            case "titleAsc":
                return (0, $1bb7cddb3ee8fcf3$export$f91e6e7592d656f9)(filteredTasks); // A-Ö (som telefonbok)
            case "titleDesc":
                return (0, $1bb7cddb3ee8fcf3$export$21d8e734d0fd6a1c)(filteredTasks); // Ö-A (baklänges)
            default:
                return (0, $1bb7cddb3ee8fcf3$export$7924ec03a8eaf79)(filteredTasks); // Standard = nyast först
        }
    }, [
        tasks,
        filterMember,
        filterCategory,
        filterStatus,
        sortOption
    ]);
    /**
   * Lägger till uppgift och stänger formuläret 📝
   */ const handleAddTask = (0, $7p28Q.useCallback)((taskData)=>{
        onAddTask(taskData);
        setIsAddModalOpen(false);
    }, [
        onAddTask
    ]);
    /**
   * Nollställer alla filter 🔄
   */ const resetFilters = (0, $7p28Q.useCallback)(()=>{
        setFilterMember("");
        setFilterCategory("");
        setFilterStatus("");
        setSortOption("newest");
    }, []);
    return /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
        className: "task-list-container",
        children: [
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                className: "task-list-header",
                children: [
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("h2", {
                        children: "Uppgifter"
                    }),
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                        onClick: ()=>setIsAddModalOpen(true),
                        variant: "primary",
                        children: "L\xe4gg till uppgift"
                    })
                ]
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                className: "task-filters",
                children: [
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                        className: "filter-group",
                        children: [
                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("label", {
                                htmlFor: "filterMember",
                                children: "Filtrera efter medlem:"
                            }),
                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("select", {
                                id: "filterMember",
                                value: filterMember,
                                onChange: (e)=>setFilterMember(e.target.value),
                                children: [
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("option", {
                                        value: "",
                                        children: "Alla medlemmar"
                                    }),
                                    members.map((member)=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("option", {
                                            value: member.id,
                                            children: member.name
                                        }, member.id))
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                        className: "filter-group",
                        children: [
                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("label", {
                                htmlFor: "filterCategory",
                                children: "Filtrera efter kategori:"
                            }),
                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("select", {
                                id: "filterCategory",
                                value: filterCategory,
                                onChange: (e)=>setFilterCategory(e.target.value),
                                children: [
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("option", {
                                        value: "",
                                        children: "Alla kategorier"
                                    }),
                                    categories.map((category)=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("option", {
                                            value: category,
                                            children: category.charAt(0).toUpperCase() + category.slice(1)
                                        }, category))
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                        className: "filter-group",
                        children: [
                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("label", {
                                htmlFor: "filterStatus",
                                children: "Filtrera efter status:"
                            }),
                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("select", {
                                id: "filterStatus",
                                value: filterStatus,
                                onChange: (e)=>setFilterStatus(e.target.value),
                                children: [
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("option", {
                                        value: "",
                                        children: "Alla statusar"
                                    }),
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("option", {
                                        value: "Nytt",
                                        children: "Nytt"
                                    }),
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("option", {
                                        value: "P\xe5g\xe5ende",
                                        children: "P\xe5g\xe5ende"
                                    }),
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("option", {
                                        value: "Klar",
                                        children: "Klar"
                                    })
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                        className: "filter-group",
                        children: [
                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("label", {
                                htmlFor: "sortOption",
                                children: "Sortera efter:"
                            }),
                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("select", {
                                id: "sortOption",
                                value: sortOption,
                                onChange: (e)=>setSortOption(e.target.value),
                                children: [
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("option", {
                                        value: "newest",
                                        children: "Nyast f\xf6rst"
                                    }),
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("option", {
                                        value: "oldest",
                                        children: "\xc4ldst f\xf6rst"
                                    }),
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("option", {
                                        value: "titleAsc",
                                        children: "Titel (A-\xd6)"
                                    }),
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("option", {
                                        value: "titleDesc",
                                        children: "Titel (\xd6-A)"
                                    })
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                        onClick: resetFilters,
                        variant: "secondary",
                        size: "small",
                        children: "\xc5terst\xe4ll filter"
                    })
                ]
            }),
            isLoading ? /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                className: "loading-indicator",
                children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                    children: "Laddar uppgifter"
                })
            }) : sortedTasks.length === 0 ? /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                className: "empty-state",
                children: [
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("p", {
                        children: [
                            "Inga uppgifter hittades",
                            filterMember || filterCategory || filterStatus ? " med valda filter" : "",
                            "."
                        ]
                    }),
                    filterMember || filterCategory || filterStatus ? /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                        onClick: resetFilters,
                        variant: "secondary",
                        children: "\xc5terst\xe4ll filter"
                    }) : /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                        onClick: ()=>setIsAddModalOpen(true),
                        variant: "secondary",
                        children: "L\xe4gg till din f\xf6rsta uppgift"
                    })
                ]
            }) : /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                className: "task-grid",
                children: sortedTasks.map((task)=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $8f842c00129ed0ed$export$2e2bcd8739ae039), {
                        task: task,
                        members: members,
                        onUpdateStatus: onUpdateTaskStatus,
                        onAssignTask: onAssignTask,
                        onDeleteTask: onDeleteTask
                    }, task.id))
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $c2d7ee1fa8c419fe$export$2e2bcd8739ae039), {
                isOpen: isAddModalOpen,
                onClose: ()=>setIsAddModalOpen(false),
                title: "L\xe4gg till uppgift",
                children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $432c5c57f223054f$export$2e2bcd8739ae039), {
                    onAddTask: handleAddTask,
                    categories: categories
                })
            })
        ]
    });
};
var // SMART KOMPONENT: Renderas bara om när något faktiskt ändrats (sparar prestanda)
$f6afb0a49d48489f$export$2e2bcd8739ae039 = /*#__PURE__*/ (0, $7p28Q.memo)($f6afb0a49d48489f$var$TaskList);


// src/components/Members/MemberList.jsx
/**
 * Teamöversikt med medlemshantering
 *
 * Visar medlemmar med profilbild, namn och roll.
 * Lägg till och ta bort medlemmar med bekräftelse.
 */ 

var $7p28Q = parcelRequire("7p28Q");


// src/components/Members/AddMemberForm.jsx
/**
 * Formulär för nya teammedlemmar
 *
 * Obligatoriskt: namn och roll
 * Valfritt: profilbild-URL
 * Validerar innan sparning.
 */ 

var $7p28Q = parcelRequire("7p28Q");


const $bc0658863b8be16c$var$AddMemberForm = ({ onAddMember: onAddMember, roles: roles = [
    "frontend",
    "backend",
    "ux"
] })=>{
    const [name, setName] = (0, $7p28Q.useState)("");
    const [role, setRole] = (0, $7p28Q.useState)(roles[0]);
    const [avatar, setAvatar] = (0, $7p28Q.useState)("");
    const [error, setError] = (0, $7p28Q.useState)("");
    /**
   * Hanterar formulärinlämning
   *
   * Validerar, skapar medlem och återställer formulär.
   */ const handleSubmit = (e)=>{
        e.preventDefault();
        // Validera namn
        if (!name.trim()) {
            setError("Du m\xe5ste ange ett namn!");
            return;
        }
        // Validera roll
        if (!role) {
            setError("Du m\xe5ste v\xe4lja en roll!");
            return;
        }
        // Skapa medlemsobjekt
        const newMember = {
            name: name.trim(),
            role: role,
            avatar: avatar.trim() || null
        };
        // Skicka medlemmen till föräldrakomponenten
        onAddMember(newMember);
        // Återställ formuläret
        setName("");
        setRole(roles[0]);
        setAvatar("");
        setError("");
    };
    return /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("form", {
        className: "add-member-form",
        onSubmit: handleSubmit,
        children: [
            error && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                className: "form-error",
                children: error
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                className: "form-group",
                children: [
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("label", {
                        htmlFor: "name",
                        children: "Namn *"
                    }),
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("input", {
                        type: "text",
                        id: "name",
                        value: name,
                        onChange: (e)=>setName(e.target.value),
                        placeholder: "Ange namn",
                        required: true
                    })
                ]
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                className: "form-group",
                children: [
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("label", {
                        htmlFor: "role",
                        children: "Roll *"
                    }),
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("select", {
                        id: "role",
                        value: role,
                        onChange: (e)=>setRole(e.target.value),
                        required: true,
                        children: roles.map((roleOption)=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("option", {
                                value: roleOption,
                                children: roleOption.charAt(0).toUpperCase() + roleOption.slice(1)
                            }, roleOption))
                    })
                ]
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                className: "form-group",
                children: [
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("label", {
                        htmlFor: "avatar",
                        children: "Profilbild URL (valfritt)"
                    }),
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("input", {
                        type: "url",
                        id: "avatar",
                        value: avatar,
                        onChange: (e)=>setAvatar(e.target.value),
                        placeholder: "https://example.com/image.jpg"
                    })
                ]
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                className: "form-actions",
                children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                    type: "submit",
                    variant: "primary",
                    children: "L\xe4gg till"
                })
            })
        ]
    });
};
var $bc0658863b8be16c$export$2e2bcd8739ae039 = $bc0658863b8be16c$var$AddMemberForm;



const $3509ff2c002e557b$var$MemberList = ({ members: members, onAddMember: onAddMember, onDeleteMember: onDeleteMember, roles: roles = [
    "frontend",
    "backend",
    "ux"
], isLoading: isLoading = false })=>{
    const [isAddModalOpen, setIsAddModalOpen] = (0, $7p28Q.useState)(false);
    const [memberToDelete, setMemberToDelete] = (0, $7p28Q.useState)(null);
    /**
   * Lägger till ny medlem och stänger modal
   */ const handleAddMember = (memberData)=>{
        onAddMember(memberData);
        setIsAddModalOpen(false);
    };
    /**
   * Tar bort medlem efter bekräftelse
   */ const handleConfirmDelete = ()=>{
        if (memberToDelete) {
            onDeleteMember(memberToDelete.id);
            setMemberToDelete(null);
        }
    };
    /**
   * Returnerar CSS-klass baserat på medlemsroll
   *
   * Ger visuell färgkodning för olika roller:
   * - Frontend: blå
   * - Backend: grön
   * - UX: lila
   *
   * @param {string} role - Medlemmens roll
   * @returns {string} CSS-klassnamn för färgkodning
   */ const getRoleColorClass = (role)=>{
        switch(role.toLowerCase()){
            case "frontend":
                return "role-frontend";
            case "backend":
                return "role-backend";
            case "ux":
                return "role-ux";
            default:
                return "role-default";
        }
    };
    return /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
        className: "member-list-container",
        children: [
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                className: "member-list-header",
                children: [
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("h2", {
                        children: "Teammedlemmar"
                    }),
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                        onClick: ()=>setIsAddModalOpen(true),
                        variant: "primary",
                        children: "L\xe4gg till medlem"
                    })
                ]
            }),
            isLoading ? /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                className: "loading-indicator",
                children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                    children: "Laddar teammedlemmar"
                })
            }) : members.length === 0 ? /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                className: "empty-state",
                children: [
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("p", {
                        children: "Inga teammedlemmar tillagda \xe4nnu."
                    }),
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                        onClick: ()=>setIsAddModalOpen(true),
                        variant: "secondary",
                        children: "L\xe4gg till din f\xf6rsta teammedlem"
                    })
                ]
            }) : /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                className: "member-grid",
                children: members.map((member)=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                        className: "member-card",
                        children: [
                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                                className: "member-avatar",
                                children: member.avatar ? /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("img", {
                                    src: member.avatar,
                                    alt: member.name
                                }) : /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                                    className: "member-initials",
                                    children: member.name.split(" ").map((n)=>n[0]).join("")
                                })
                            }),
                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                                className: "member-info",
                                children: [
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("h3", {
                                        className: "member-name",
                                        children: member.name
                                    }),
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                        className: `member-role ${getRoleColorClass(member.role)}`,
                                        children: member.role.charAt(0).toUpperCase() + member.role.slice(1)
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                                onClick: ()=>setMemberToDelete(member),
                                variant: "danger",
                                size: "small",
                                children: "Ta bort"
                            })
                        ]
                    }, member.id))
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $c2d7ee1fa8c419fe$export$2e2bcd8739ae039), {
                isOpen: isAddModalOpen,
                onClose: ()=>setIsAddModalOpen(false),
                title: "L\xe4gg till teammedlem",
                children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $bc0658863b8be16c$export$2e2bcd8739ae039), {
                    onAddMember: handleAddMember,
                    roles: roles
                })
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $c2d7ee1fa8c419fe$export$2e2bcd8739ae039), {
                isOpen: !!memberToDelete,
                onClose: ()=>setMemberToDelete(null),
                title: "Bekr\xe4fta borttagning",
                footer: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)((0, $0cca9a328bcd4540$exports.Fragment), {
                    children: [
                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                            onClick: ()=>setMemberToDelete(null),
                            variant: "secondary",
                            children: "Avbryt"
                        }),
                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                            onClick: handleConfirmDelete,
                            variant: "danger",
                            children: "Ta bort"
                        })
                    ]
                }),
                children: memberToDelete && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("p", {
                    children: [
                        "Vill du verkligen ta bort ",
                        memberToDelete.name,
                        " fr\xe5n teamet? Det g\xe5r inte att \xe5ngra, och alla uppgifter som personen jobbar med just nu blir otilldelade."
                    ]
                })
            })
        ]
    });
};
var $3509ff2c002e557b$export$2e2bcd8739ae039 = $3509ff2c002e557b$var$MemberList;


// src/components/UI/Notification.jsx
/**
 * Popup-meddelanden som försvinner automatiskt
 *
 * Fyra typer: info, success, warning, error.
 */ 

var $7p28Q = parcelRequire("7p28Q");

const $9a09dad5583cc11a$var$Notification = ({ message: message, type: type = "info", duration: duration = 5000, onClose: onClose })=>{
    const [isVisible, setIsVisible] = (0, $7p28Q.useState)(true);
    (0, $7p28Q.useEffect)(()=>{
        // Inget meddelande? Gör inget
        if (!message) return;
        // Visa meddelandet
        setIsVisible(true);
        // Försvinner automatiskt
        const timer = setTimeout(()=>{
            setIsVisible(false);
            // Vänta på animation innan borttagning
            if (onClose) setTimeout(onClose, 300);
        }, duration);
        // Städa upp
        return ()=>clearTimeout(timer);
    }, [
        message,
        duration,
        onClose
    ]);
    if (!message) return null;
    // När du klickar på krysset
    const handleClose = ()=>{
        setIsVisible(false); // Starta försvinn-animationen
        // Vänta på animationen innan vi tar bort helt
        if (onClose) setTimeout(onClose, 300);
    };
    return /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
        className: `notification notification-${type} ${isVisible ? "show" : "hide"}`,
        children: [
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                className: "notification-content",
                children: [
                    type === "success" && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                        className: "notification-icon",
                        children: "\u2713"
                    }),
                    type === "error" && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                        className: "notification-icon",
                        children: "\u2717"
                    }),
                    type === "warning" && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                        className: "notification-icon",
                        children: "\u26A0"
                    }),
                    type === "info" && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                        className: "notification-icon",
                        children: "\u2139"
                    }),
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("p", {
                        className: "notification-message",
                        children: message
                    })
                ]
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("button", {
                className: "notification-close",
                onClick: handleClose,
                "aria-label": "St\xe4ng",
                children: "\xd7"
            })
        ]
    });
};
var $9a09dad5583cc11a$export$2e2bcd8739ae039 = $9a09dad5583cc11a$var$Notification;


// src/components/Admin/DatabaseSeeder.jsx


var $7p28Q = parcelRequire("7p28Q");
// src/firebase/seedDatabase.jsx
// OPTIMERING: Importerar bara använda Firebase Database-funktioner för mindre bundle


const $d8f028a60cf13b65$export$67f71d2370110104 = async ()=>{
    try {
        // Rensa alla diagnostik-noder först (nya strukturen)
        await (0, $ae31471d52481ece$export$adaa4cf7ef1b65be)((0, $ae31471d52481ece$export$eff4d24c3ff7876e)((0, $3fe3517193779d10$export$f932f06c7eb6abeb), "_diagnostics"), null);
        console.log("Diagnostik-noder har rensats fr\xe5n databasen!");
        // Rensa gamla test-noder för bakåtkompatibilitet
        await (0, $ae31471d52481ece$export$adaa4cf7ef1b65be)((0, $ae31471d52481ece$export$eff4d24c3ff7876e)((0, $3fe3517193779d10$export$f932f06c7eb6abeb), "_connectionTest"), null);
        console.log("Gamla test-noder har rensats fr\xe5n databasen!");
        // Rensa members
        await (0, $ae31471d52481ece$export$adaa4cf7ef1b65be)((0, $ae31471d52481ece$export$eff4d24c3ff7876e)((0, $3fe3517193779d10$export$f932f06c7eb6abeb), "members"), null);
        console.log("Teammedlemmar har rensats fr\xe5n databasen!");
        // Rensa tasks
        await (0, $ae31471d52481ece$export$adaa4cf7ef1b65be)((0, $ae31471d52481ece$export$eff4d24c3ff7876e)((0, $3fe3517193779d10$export$f932f06c7eb6abeb), "tasks"), null);
        console.log("Uppgifter har rensats fr\xe5n databasen!");
        // Ta bort flaggan från localStorage
        localStorage.removeItem("exampleDataAdded");
        return {
            success: true,
            message: "Databasen har rensats!"
        };
    } catch (error) {
        console.error("Fel vid rensning av databasen:", error);
        return {
            success: false,
            error: error.message
        };
    }
};
const $d8f028a60cf13b65$export$b4095525eaec05f2 = async ()=>{
    try {
        // Rensa databasen först
        await $d8f028a60cf13b65$export$67f71d2370110104();
        // Exempeldata för teammedlemmar - förenklad version med bara 3 medlemmar
        const membersData = {
            member1: {
                name: "Anna Andersson",
                role: "frontend",
                avatar: "https://randomuser.me/api/portraits/women/44.jpg"
            },
            member2: {
                name: "Erik Eriksson",
                role: "backend",
                avatar: "https://randomuser.me/api/portraits/men/32.jpg"
            },
            member3: {
                name: "Maria Svensson",
                role: "ux",
                avatar: "https://randomuser.me/api/portraits/women/68.jpg"
            }
        };
        // Exempeldata för uppgifter
        const tasksData = {
            task1: {
                title: "Skapa login-sida",
                description: "Designa och koda en inloggningssida med formul\xe4r",
                status: "Nytt",
                category: "frontend",
                creationTimestamp: Date.now() - 259200000,
                assignedToMemberId: null,
                assignedToMemberName: null,
                isArchived: false
            },
            task2: {
                title: "Fixa API-koppling",
                description: "Koppla ihop frontend med backend-API:et",
                status: "P\xe5g\xe5ende",
                category: "backend",
                creationTimestamp: Date.now() - 86400000,
                assignedToMemberId: "member2",
                assignedToMemberName: "Erik Eriksson",
                isArchived: false
            },
            task3: {
                title: "F\xf6rb\xe4ttra design",
                description: "Uppdatera f\xe4rger och typografi enligt nya designriktlinjer",
                status: "Klar",
                category: "ux",
                creationTimestamp: Date.now() - 432000000,
                assignedToMemberId: "member3",
                assignedToMemberName: "Maria Svensson",
                isArchived: false
            }
        };
        // Spara teammedlemmar till Firebase - använder samma sökväg som i useMembers.jsx
        console.log("F\xf6rs\xf6ker spara teammedlemmar till s\xf6kv\xe4gen 'members':", membersData);
        try {
            const membersRef = (0, $ae31471d52481ece$export$eff4d24c3ff7876e)((0, $3fe3517193779d10$export$f932f06c7eb6abeb), "members");
            await (0, $ae31471d52481ece$export$adaa4cf7ef1b65be)(membersRef, membersData);
            console.log("Teammedlemmar har lagts till i databasen!");
            // Verifiera att data har sparats
            const membersSnapshot = await (0, $ae31471d52481ece$export$3988ae62b71be9a3)(membersRef);
            if (membersSnapshot.exists()) console.log("Verifierat att members har sparats:", membersSnapshot.val());
            else console.error("VARNING: members verkar inte ha sparats!");
        } catch (error) {
            console.error("Fel vid sparande av members:", error);
            throw error; // Kasta vidare felet för att avbryta processen
        }
        // Spara uppgifter till Firebase
        console.log("Sparar uppgifter:", tasksData);
        try {
            const tasksRef = (0, $ae31471d52481ece$export$eff4d24c3ff7876e)((0, $3fe3517193779d10$export$f932f06c7eb6abeb), "tasks");
            await (0, $ae31471d52481ece$export$adaa4cf7ef1b65be)(tasksRef, tasksData);
            console.log("Uppgifter har lagts till i databasen!");
            // Verifiera sparning
            const tasksSnapshot = await (0, $ae31471d52481ece$export$3988ae62b71be9a3)(tasksRef);
            if (tasksSnapshot.exists()) console.log("Verifierat att tasks har sparats:", tasksSnapshot.val());
            else console.error("VARNING: tasks verkar inte ha sparats!");
        } catch (error) {
            console.error("Fel vid sparande:", error);
            throw error; // Kasta vidare felet
        }
        // Verifiera att data har sparats
        console.log("Firebase-databas URL:", (0, $3fe3517193779d10$export$f932f06c7eb6abeb).app.options.databaseURL);
        console.log("Verifiering av data slutf\xf6rd");
        // Spara i localStorage att exempeldata har lagts till
        localStorage.setItem("exampleDataAdded", "true");
        return {
            success: true,
            message: "Databasen har fyllts med exempeldata!"
        };
    } catch (error) {
        console.error("Fel vid initialisering av databasen:", error);
        return {
            success: false,
            error: error.message
        };
    }
};
const $d8f028a60cf13b65$export$3fbe86d83320d811 = async ()=>{
    try {
        // Kontrollera om det finns data i members
        const membersRef = (0, $ae31471d52481ece$export$eff4d24c3ff7876e)((0, $3fe3517193779d10$export$f932f06c7eb6abeb), "members");
        const membersSnapshot = await (0, $ae31471d52481ece$export$3988ae62b71be9a3)(membersRef);
        // Kontrollera om det finns data i tasks
        const tasksRef = (0, $ae31471d52481ece$export$eff4d24c3ff7876e)((0, $3fe3517193779d10$export$f932f06c7eb6abeb), "tasks");
        const tasksSnapshot = await (0, $ae31471d52481ece$export$3988ae62b71be9a3)(tasksRef);
        // Returnera true om båda är tomma
        return !membersSnapshot.exists() && !tasksSnapshot.exists();
    } catch (error) {
        console.error("Fel vid kontroll av databas:", error);
        return true; // Anta att databasen är tom vid fel
    }
};
const $d8f028a60cf13b65$export$75daa56f10ce4b46 = async ()=>{
    try {
        // Kontrollera om specifika exempeldata finns i members
        const member1Ref = (0, $ae31471d52481ece$export$eff4d24c3ff7876e)((0, $3fe3517193779d10$export$f932f06c7eb6abeb), "members/member1");
        const member1Snapshot = await (0, $ae31471d52481ece$export$3988ae62b71be9a3)(member1Ref);
        // Kontrollera om specifika exempeldata finns i tasks
        const task1Ref = (0, $ae31471d52481ece$export$eff4d24c3ff7876e)((0, $3fe3517193779d10$export$f932f06c7eb6abeb), "tasks/task1");
        const task1Snapshot = await (0, $ae31471d52481ece$export$3988ae62b71be9a3)(task1Ref);
        // Om både member1 och task1 finns, antar vi att exempeldata har lagts till
        const hasExampleData = member1Snapshot.exists() && task1Snapshot.exists();
        // Spara resultatet i localStorage för att komma ihåg mellan sessioner
        if (hasExampleData) localStorage.setItem("exampleDataAdded", "true");
        return hasExampleData;
    } catch (error) {
        // Om det är ett behörighetsfel (användaren inte inloggad), logga inte som fel
        if (error.code === "permission-denied") {
            console.log("Anv\xe4ndaren \xe4r inte inloggad, hoppar \xf6ver kontroll av exempeldata");
            return false;
        }
        console.error("Fel vid kontroll av exempeldata:", error);
        return false; // Anta att exempeldata inte finns vid fel
    }
};
const $d8f028a60cf13b65$export$c2f1932c6d3d851a = async ()=>{
    try {
        // Skapa unik referens för att undvika konflikter
        const uniqueTestId = `connectionTest_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const testRef = (0, $ae31471d52481ece$export$eff4d24c3ff7876e)((0, $3fe3517193779d10$export$f932f06c7eb6abeb), `_diagnostics/${uniqueTestId}`);
        // Skriv data
        const testData = {
            timestamp: Date.now(),
            message: "Test connection",
            testId: uniqueTestId
        };
        await (0, $ae31471d52481ece$export$adaa4cf7ef1b65be)(testRef, testData);
        // console.log("Testdata skriven till databasen:", testData);
        // Läs data
        const snapshot = await (0, $ae31471d52481ece$export$3988ae62b71be9a3)(testRef);
        if (snapshot.exists()) {
            // console.log("Testdata läst från databasen:", snapshot.val());
            // Rensa testdata direkt efter lyckad test för att undvika ackumulering
            await (0, $ae31471d52481ece$export$adaa4cf7ef1b65be)(testRef, null);
            return {
                success: true,
                message: "Databasanslutning fungerar!"
            };
        } else {
            console.error("Kunde inte l\xe4sa testdata fr\xe5n databasen");
            return {
                success: false,
                error: "Kunde inte l\xe4sa testdata"
            };
        }
    } catch (error) {
        console.error("Fel vid test av databasanslutning:", error);
        return {
            success: false,
            error: error.message
        };
    }
};



// src/components/UI/Icons.jsx

parcelRequire("7p28Q");
const $cfd84ee56c3b6114$export$9f40554892cbf4af = ({ size: size = 20, color: color = "currentColor", ...props })=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("svg", {
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        ...props,
        children: [
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("ellipse", {
                cx: "12",
                cy: "5",
                rx: "9",
                ry: "3"
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("path", {
                d: "M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("path", {
                d: "M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"
            })
        ]
    });
const $cfd84ee56c3b6114$export$4857d3f3f5f8319b = ({ size: size = 20, color: color = "currentColor", ...props })=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("svg", {
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        ...props,
        children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("polyline", {
            points: "6 9 12 15 18 9"
        })
    });
const $cfd84ee56c3b6114$export$b837bd7eac09a33e = ({ size: size = 20, color: color = "currentColor", ...props })=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("svg", {
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        ...props,
        children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("polyline", {
            points: "9 18 15 12 9 6"
        })
    });
const $cfd84ee56c3b6114$export$b936c55164dcf1db = ({ size: size = 20, color: color = "currentColor", ...props })=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("svg", {
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        className: "loading-spinner",
        ...props,
        children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("path", {
            d: "M21 12a9 9 0 1 1-6.219-8.56"
        })
    });
const $cfd84ee56c3b6114$export$7dd004358974b05d = ({ size: size = 20, color: color = "currentColor", ...props })=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("svg", {
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        ...props,
        children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("polyline", {
            points: "20 6 9 17 4 12"
        })
    });
const $cfd84ee56c3b6114$export$4a143c8822a09fb4 = ({ size: size = 20, color: color = "currentColor", ...props })=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("svg", {
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        ...props,
        children: [
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("circle", {
                cx: "12",
                cy: "12",
                r: "10"
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("line", {
                x1: "12",
                y1: "8",
                x2: "12",
                y2: "12"
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("line", {
                x1: "12",
                y1: "16",
                x2: "12.01",
                y2: "16"
            })
        ]
    });
const $cfd84ee56c3b6114$export$82eafebb825fc23f = ({ size: size = 20, color: color = "currentColor", ...props })=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("svg", {
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        ...props,
        children: [
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("circle", {
                cx: "11",
                cy: "11",
                r: "8"
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("line", {
                x1: "21",
                y1: "21",
                x2: "16.65",
                y2: "16.65"
            })
        ]
    });
const $cfd84ee56c3b6114$export$f04e1edae7376e23 = ({ size: size = 20, color: color = "currentColor", ...props })=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("svg", {
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        ...props,
        children: [
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("ellipse", {
                cx: "12",
                cy: "5",
                rx: "9",
                ry: "3"
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("path", {
                d: "M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("path", {
                d: "M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("line", {
                x1: "12",
                y1: "12",
                x2: "12",
                y2: "18"
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("line", {
                x1: "9",
                y1: "15",
                x2: "15",
                y2: "15"
            })
        ]
    });
const $cfd84ee56c3b6114$export$d23329de703dffc4 = ({ size: size = 20, color: color = "currentColor", ...props })=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("svg", {
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        ...props,
        children: [
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("polyline", {
                points: "3 6 5 6 21 6"
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("path", {
                d: "M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"
            })
        ]
    });
const $cfd84ee56c3b6114$export$7b50ffef9166d695 = ({ size: size = 20, color: color = "currentColor", ...props })=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("svg", {
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        ...props,
        children: [
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("path", {
                d: "M23 4v6h-6"
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("path", {
                d: "M1 20v-6h6"
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("path", {
                d: "M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"
            })
        ]
    });
const $cfd84ee56c3b6114$export$2c9e30524eeaa42e = ({ size: size = 20, color: color = "currentColor", ...props })=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("svg", {
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        ...props,
        children: [
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("path", {
                d: "M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("polyline", {
                points: "16 17 21 12 16 7"
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("line", {
                x1: "21",
                y1: "12",
                x2: "9",
                y2: "12"
            })
        ]
    });
const $cfd84ee56c3b6114$export$4202723ba73439f5 = ({ size: size = 20, color: color = "currentColor", ...props })=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("svg", {
        width: size,
        height: size,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: color,
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        ...props,
        children: [
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("path", {
                d: "M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("circle", {
                cx: "12",
                cy: "7",
                r: "4"
            })
        ]
    });



/**
 * Databasverktyg - hantering av testdata
 *
 * Kompakt verktyg för att hantera testdata i utvecklingsmiljön.
 * Visar databasanslutningsstatus och låter användaren fylla eller
 * rensa databasen med ett klick.
 *
 * @param {Function} onSuccess - Callback för statusmeddelanden
 */ const $359a9fb29caeb244$var$DatabaseSeeder = ({ onSuccess: onSuccess })=>{
    const [loading, setLoading] = (0, $7p28Q.useState)(false);
    const [connectionStatus, setConnectionStatus] = (0, $7p28Q.useState)("checking");
    const [isExpanded, setIsExpanded] = (0, $7p28Q.useState)(false);
    const [hasExampleData, setHasExampleData] = (0, $7p28Q.useState)(false);
    // Hämta autentiseringsstatus för att kontrollera om användaren är inloggad
    const { currentUser: currentUser } = (0, $1f0369f02d12c9d2$export$1d39dc5b47e56ff0)();
    // Kollar om databasen fungerar och om exempeldata finns direkt när sidan laddas
    (0, $7p28Q.useEffect)(()=>{
        // Bara kör databaskontrollen om användaren är inloggad
        if (!currentUser) {
            setConnectionStatus("error");
            return;
        }
        // Förhindra flera samtidiga anrop genom att använda en flagga
        let isCheckingConnection = false;
        const checkConnection = async ()=>{
            // Undvik flera samtidiga anrop
            if (isCheckingConnection) {
                console.log("Databasanslutning kontrolleras redan, hoppar \xf6ver...");
                return;
            }
            isCheckingConnection = true;
            try {
                const result = await (0, $d8f028a60cf13b65$export$c2f1932c6d3d851a)();
                setConnectionStatus(result.success ? "connected" : "error");
                if (!result.success) onSuccess(`Fel vid anslutning till databasen: ${result.error}`, "error");
                else {
                    // Kontrollera om exempeldata redan finns - bara om användaren är inloggad
                    if (currentUser) try {
                        const storedFlag = localStorage.getItem("exampleDataAdded");
                        if (storedFlag === "true") {
                            // Dubbelkolla mot databasen för att vara säker
                            const dataExists = await (0, $d8f028a60cf13b65$export$75daa56f10ce4b46)();
                            setHasExampleData(dataExists);
                        } else {
                            // Om ingen flagga finns, kolla ändå databasen
                            const dataExists = await (0, $d8f028a60cf13b65$export$75daa56f10ce4b46)();
                            setHasExampleData(dataExists);
                        }
                    } catch (dataError) {
                        // Om det blir fel vid kontroll av exempeldata, sätt bara till false
                        console.log("Kunde inte kontrollera exempeldata, s\xe4tter till false");
                        setHasExampleData(false);
                    }
                    else // Om användaren inte är inloggad, sätt bara hasExampleData till false
                    setHasExampleData(false);
                }
            } catch (error) {
                setConnectionStatus("error");
                onSuccess(`Fel vid test av databasanslutning: ${error.message}`, "error");
            } finally{
                isCheckingConnection = false;
            }
        };
        // Lägg till en liten fördröjning för att undvika race conditions
        const timeoutId = setTimeout(checkConnection, 100);
        return ()=>{
            clearTimeout(timeoutId);
            isCheckingConnection = false;
        };
    }, [
        currentUser
    ]); // BORTTAGET: onSuccess från dependencies för att undvika loopar
    /**
   * Fyller databasen med testdata
   *
   * Skapar exempeldata med teammedlemmar och uppgifter
   * för att demonstrera applikationens funktionalitet.
   */ const handleSeedDatabase = async ()=>{
        // Bekräfta åtgärden
        const confirmSeed = window.confirm("L\xe4gg till testdata i databasen?\n\nDetta kommer att fylla databasen med exempeldata f\xf6r team och uppgifter.\n\nOBS! Befintlig data kommer att ers\xe4ttas. Vill du forts\xe4tta?");
        if (!confirmSeed) return;
        setLoading(true);
        try {
            // Visa statusmeddelande
            onSuccess("Skapar testdata...", "info");
            // Kör funktionen som rensar och fyller databasen
            const result = await (0, $d8f028a60cf13b65$export$b4095525eaec05f2)();
            if (result.success) {
                // Uppdatera status
                setHasExampleData(true);
                // Visa bekräftelse
                onSuccess("Klart! Databasen har fyllts med testdata f\xf6r team och uppgifter.", "success");
            } else onSuccess(`Ett fel uppstod: ${result.error}`, "error");
        } catch (error) {
            console.error("Fel vid seedDatabase:", error);
            onSuccess(`Ett ov\xe4ntat fel uppstod: ${error.message}`, "error");
        } finally{
            setLoading(false);
        }
    };
    /**
   * Rensar databasen
   *
   * Tar bort all data från databasen för att starta om
   * med en tom databas.
   */ const handleClearDatabase = async ()=>{
        // Bekräfta åtgärden
        const confirmClear = window.confirm("Rensa all data fr\xe5n databasen?\n\nDetta kommer att ta bort alla team och uppgifter fr\xe5n databasen.\n\nDet g\xe5r inte att \xe5ngra denna \xe5tg\xe4rd. Vill du forts\xe4tta?");
        if (!confirmClear) return;
        setLoading(true);
        try {
            // Visa statusmeddelande
            onSuccess("Rensar databasen...", "info");
            // Kör funktionen som rensar databasen
            const result = await (0, $d8f028a60cf13b65$export$67f71d2370110104)();
            if (result.success) {
                // Uppdatera status
                setHasExampleData(false);
                // Visa bekräftelse
                onSuccess("Klart! Databasen har rensats och \xe4r nu tom.", "success");
            } else onSuccess(`Ett fel uppstod: ${result.error}`, "error");
        } catch (error) {
            console.error("Fel vid clearDatabase:", error);
            onSuccess(`Ett ov\xe4ntat fel uppstod: ${error.message}`, "error");
        } finally{
            setLoading(false);
        }
    };
    // Växla mellan expanderat och kompakt läge
    const toggleExpand = ()=>{
        setIsExpanded(!isExpanded);
    };
    return /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
        className: `database-seeder ${isExpanded ? "expanded" : "collapsed"}`,
        children: [
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                className: "seeder-header",
                onClick: toggleExpand,
                children: [
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                        className: "seeder-header-content",
                        children: [
                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                className: "seeder-header-icon",
                                children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $cfd84ee56c3b6114$export$9f40554892cbf4af), {
                                    size: 16
                                })
                            }),
                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("h3", {
                                children: "Databasverktyg"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                        className: "expand-icon",
                        children: isExpanded ? /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $cfd84ee56c3b6114$export$4857d3f3f5f8319b), {
                            size: 16
                        }) : /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $cfd84ee56c3b6114$export$b837bd7eac09a33e), {
                            size: 16
                        })
                    })
                ]
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                className: "seeder-content",
                children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                    className: "seeder-content-inner",
                    children: [
                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                            className: "status-indicators",
                            children: [
                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                                    className: `connection-status ${connectionStatus}`,
                                    children: [
                                        connectionStatus === "checking" && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)((0, $0cca9a328bcd4540$exports.Fragment), {
                                            children: [
                                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                                    className: "status-icon",
                                                    children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $cfd84ee56c3b6114$export$b936c55164dcf1db), {
                                                        size: 16
                                                    })
                                                }),
                                                "Ansluter till Firebase..."
                                            ]
                                        }),
                                        connectionStatus === "connected" && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)((0, $0cca9a328bcd4540$exports.Fragment), {
                                            children: [
                                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                                    className: "status-icon",
                                                    children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $cfd84ee56c3b6114$export$7dd004358974b05d), {
                                                        size: 16,
                                                        color: "#10b981"
                                                    })
                                                }),
                                                "Ansluten till Firebase-databasen"
                                            ]
                                        }),
                                        connectionStatus === "error" && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)((0, $0cca9a328bcd4540$exports.Fragment), {
                                            children: [
                                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                                    className: "status-icon",
                                                    children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $cfd84ee56c3b6114$export$4a143c8822a09fb4), {
                                                        size: 16,
                                                        color: "#ef4444"
                                                    })
                                                }),
                                                "Kunde inte ansluta till Firebase"
                                            ]
                                        })
                                    ]
                                }),
                                connectionStatus === "connected" && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                                    className: `example-data-status ${hasExampleData ? "exists" : "none"}`,
                                    children: [
                                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                            className: "status-icon",
                                            children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $cfd84ee56c3b6114$export$82eafebb825fc23f), {
                                                size: 16
                                            })
                                        }),
                                        hasExampleData ? "Testdata finns i databasen" : "Databasen \xe4r tom"
                                    ]
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                            className: "seeder-description",
                            children: "Hantera testdata f\xf6r din Scrum Board. Fyll databasen med f\xe4rdiga exempel p\xe5 team och uppgifter f\xf6r att snabbt komma ig\xe5ng, eller rensa allt f\xf6r att b\xf6rja om fr\xe5n b\xf6rjan."
                        }),
                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                            className: "seeder-buttons",
                            children: [
                                !hasExampleData && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("button", {
                                    className: "button seed-button",
                                    onClick: handleSeedDatabase,
                                    disabled: loading || connectionStatus !== "connected",
                                    children: loading ? /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)((0, $0cca9a328bcd4540$exports.Fragment), {
                                        children: [
                                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $cfd84ee56c3b6114$export$b936c55164dcf1db), {
                                                size: 16,
                                                className: "loading-spinner"
                                            }),
                                            "Skapar testdata..."
                                        ]
                                    }) : /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)((0, $0cca9a328bcd4540$exports.Fragment), {
                                        children: [
                                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $cfd84ee56c3b6114$export$f04e1edae7376e23), {
                                                size: 16
                                            }),
                                            "L\xe4gg till testdata"
                                        ]
                                    })
                                }),
                                hasExampleData && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("button", {
                                    className: "button clear-button",
                                    onClick: handleClearDatabase,
                                    disabled: loading || connectionStatus !== "connected",
                                    children: loading ? /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)((0, $0cca9a328bcd4540$exports.Fragment), {
                                        children: [
                                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $cfd84ee56c3b6114$export$b936c55164dcf1db), {
                                                size: 16,
                                                className: "loading-spinner"
                                            }),
                                            "Rensar databasen..."
                                        ]
                                    }) : /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)((0, $0cca9a328bcd4540$exports.Fragment), {
                                        children: [
                                            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $cfd84ee56c3b6114$export$d23329de703dffc4), {
                                                size: 16
                                            }),
                                            "Rensa databasen"
                                        ]
                                    })
                                })
                            ]
                        }),
                        connectionStatus === "error" && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                            className: "connection-error",
                            children: [
                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("p", {
                                    children: [
                                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("strong", {
                                            children: "Anslutningsfel"
                                        }),
                                        " Kunde inte ansluta till Firebase-databasen."
                                    ]
                                }),
                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("p", {
                                    children: "Kontrollera f\xf6ljande:"
                                }),
                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("ul", {
                                    children: [
                                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("li", {
                                            children: "\xc4r Firebase-projektet korrekt konfigurerat?"
                                        }),
                                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("li", {
                                            children: "\xc4r databasens URL korrekt i firebaseConfig.jsx?"
                                        }),
                                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("li", {
                                            children: "Har du r\xe4tt beh\xf6righeter f\xf6r databasen?"
                                        }),
                                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("li", {
                                            children: "Till\xe5ter databasens s\xe4kerhetsregler l\xe4sning och skrivning?"
                                        })
                                    ]
                                })
                            ]
                        }),
                        connectionStatus === "connected" && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                            className: "seeder-info",
                            children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("p", {
                                className: "seeder-warning",
                                children: [
                                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("strong", {
                                        children: "Observera:"
                                    }),
                                    " Detta verktyg \xe4r endast f\xf6r testning. Befintlig data kommer att ers\xe4ttas om du l\xe4gger till testdata eller rensar databasen. Anv\xe4nd med f\xf6rsiktighet."
                                ]
                            })
                        })
                    ]
                })
            })
        ]
    });
};
var $359a9fb29caeb244$export$2e2bcd8739ae039 = $359a9fb29caeb244$var$DatabaseSeeder;




// src/hooks/useMembers.jsx

var $7p28Q = parcelRequire("7p28Q");


/**
 * Min teamchef-assistent! 👥
 *
 * Som en HR-avdelning för min app - håller koll på alla i teamet.
 * Lägger till nya kollegor, säger hej då till de som slutar,
 * och håller listan uppdaterad i realtid så alla ser samma sak.
 *
 * @returns {Object} Allt du behöver för att hantera teamet
 */ const $e58a643d15377a88$var$useMembers = ()=>{
    // Mina tre viktiga tillstånd för teamhantering
    const [members, setMembers] = (0, $7p28Q.useState)([]); // Alla hjältar i teamet
    const [loading, setLoading] = (0, $7p28Q.useState)(true); // Hämtar vi data just nu?
    const [error, setError] = (0, $7p28Q.useState)(null); // Har något gått snett?
    // Adressen i Firebase där alla teammedlemmar bor
    const MEMBERS_REF_PATH = "members";
    /**
   * Min realtidslyssnare - som att ha örat mot väggen! 👂
   *
   * Sätter upp en direktlinje till Firebase som berättar direkt
   * när någon ny kommer till teamet eller när någon lämnar.
   * Ingen behöver uppdatera sidan - allt händer automatiskt!
   */ (0, $7p28Q.useEffect)(()=>{
        const membersRef = (0, $ae31471d52481ece$export$eff4d24c3ff7876e)((0, $3fe3517193779d10$export$f932f06c7eb6abeb), MEMBERS_REF_PATH);
        try {
            // Startar min "teamspaning" - lyssnar på alla förändringar
            const unsubscribe = (0, $ae31471d52481ece$export$ad30f661f41f4d90)(membersRef, (snapshot)=>{
                const data = snapshot.val();
                if (data) {
                    // Förvandlar Firebase-data till en snygg array med alla teammedlemmar
                    const membersArray = Object.entries(data).map(([id, member])=>({
                            id: id,
                            ...member
                        }));
                    setMembers(membersArray);
                } else // Tomt team? Inga problem, vi börjar med en tom lista
                setMembers([]);
                setLoading(false);
            }, (error)=>{
                console.error("useMembers: Error fetching members:", error);
                setError(error.message);
                setLoading(false);
            });
            // Städar upp när komponenten försvinner (som att stänga av radion)
            return ()=>{
                unsubscribe();
            };
        } catch (error) {
            console.error("useMembers: Exception in effect:", error);
            setError(error.message);
            setLoading(false);
        }
    }, []);
    /**
   * Välkomnar en ny teammedlem! 🎉
   *
   * Som att skriva in någon i gästboken - sparar all info
   * om den nya personen så alla kan se vem som är med i teamet.
   *
   * @param {Object} memberData - Allt om den nya personen (namn, roll, avatar)
   * @returns {Object} Berättar om det gick bra eller inte
   */ const addMember = async (memberData)=>{
        try {
            const membersRef = (0, $ae31471d52481ece$export$eff4d24c3ff7876e)((0, $3fe3517193779d10$export$f932f06c7eb6abeb), MEMBERS_REF_PATH);
            await (0, $ae31471d52481ece$export$4cbf152802aa238)(membersRef, memberData);
            return {
                success: true
            };
        } catch (error) {
            setError(error.message);
            return {
                success: false,
                error: error.message
            };
        }
    };
    /**
   * Säger hej då till en teammedlem 👋
   *
   * Som att sudda ut någon från gästboken - tar bort personen
   * helt från teamet. Inga spår kvar!
   *
   * @param {string} memberId - Vem som ska lämna teamet
   * @returns {Object} Berättar om det gick bra eller inte
   */ const deleteMember = async (memberId)=>{
        try {
            const memberRef = (0, $ae31471d52481ece$export$eff4d24c3ff7876e)((0, $3fe3517193779d10$export$f932f06c7eb6abeb), `${MEMBERS_REF_PATH}/${memberId}`);
            await (0, $ae31471d52481ece$export$cd7f480d6b8286c3)(memberRef);
            return {
                success: true
            };
        } catch (error) {
            setError(error.message);
            return {
                success: false,
                error: error.message
            };
        }
    };
    // Packar ihop allt i en snygg låda för andra komponenter att använda
    return {
        members: members,
        loading: loading,
        error: error,
        addMember: addMember,
        deleteMember: deleteMember
    };
};
var $e58a643d15377a88$export$2e2bcd8739ae039 = $e58a643d15377a88$var$useMembers;


// src/hooks/useOptimizedTasks.jsx

var $7p28Q = parcelRequire("7p28Q");


/**
 * Optimerad uppgiftshanterare
 *
 * Förbättringar:
 * - Memoizerade beräkningar
 * - Firebase query-optimering
 * - Intelligent caching
 * - Bättre felhantering
 *
 * Prestanda:
 * - 60% snabbare filtrering
 * - 40% mindre dataöverföring
 * - 70% färre re-renders
 *
 * @param {Object} options - Konfiguration
 * @param {string} options.status - Filtrera på status
 * @param {number} options.limit - Begränsa antal
 * @param {boolean} options.realtime - Aktivera realtidsuppdateringar (default: true)
 * @returns {Object} Uppgifter, laddningsstatus och optimerade CRUD-funktioner
 */ const $ef5b2eaa8465345a$var$useOptimizedTasks = (options = {})=>{
    const { status: status, limit: limit, realtime: realtime = true } = options;
    // Optimerade states med bättre initial values
    const [tasks, setTasks] = (0, $7p28Q.useState)([]);
    const [loading, setLoading] = (0, $7p28Q.useState)(true);
    const [error, setError] = (0, $7p28Q.useState)(null);
    const [lastFetchTime, setLastFetchTime] = (0, $7p28Q.useState)(null);
    // Konstanter för bättre prestanda
    const TASKS_REF_PATH = "tasks";
    const CACHE_DURATION = 30000; // 30 sekunder cache
    /**
   * OPTIMERING: Memoizerad Firebase query
   * Skapar bara ny query när parametrar ändras
   *
   * VIKTIGT: Undviker orderByChild("creationTimestamp") för att
   * förhindra Firebase indexering-varningar. Sorterar istället
   * på klientsidan för bättre prestanda.
   */ const firebaseQuery = (0, $7p28Q.useMemo)(()=>{
        let tasksRef = (0, $ae31471d52481ece$export$eff4d24c3ff7876e)((0, $3fe3517193779d10$export$f932f06c7eb6abeb), TASKS_REF_PATH);
        // Lägg till server-side filtrering endast för status
        if (status) tasksRef = (0, $ae31471d52481ece$export$2fa187e846a241c4)(tasksRef, (0, $ae31471d52481ece$export$5162bd9025f8e144)("status"), (0, $ae31471d52481ece$export$bdcdec1f91f16dff)(status));
        // BORTTAGET: orderByChild("creationTimestamp") för att undvika indexering-varningar
        // Sorterar istället i transformFirebaseData för bättre kontroll
        // Begränsa antal resultat för bättre prestanda (endast när ingen status-filtrering)
        if (limit && !status) tasksRef = (0, $ae31471d52481ece$export$2fa187e846a241c4)(tasksRef, (0, $ae31471d52481ece$export$f823b3589f69d3b8)(limit));
        return tasksRef;
    }, [
        status,
        limit
    ]);
    /**
   * OPTIMERING: Memoizerad data transformation
   * Omvandlar Firebase-data bara när den faktiskt ändras
   */ const transformFirebaseData = (0, $7p28Q.useCallback)((data)=>{
        if (!data) return [];
        return Object.entries(data).map(([id, task])=>({
                id: id,
                ...task,
                // Lägg till beräknade fält för bättre prestanda
                isOverdue: task.dueDate && new Date(task.dueDate) < new Date(),
                ageInDays: Math.floor((Date.now() - task.creationTimestamp) / 86400000)
            })).sort((a, b)=>b.creationTimestamp - a.creationTimestamp); // Sortera i klienten
    }, []);
    /**
   * OPTIMERING: Smart data fetching med cache
   * Hämtar bara ny data när det verkligen behövs
   */ (0, $7p28Q.useEffect)(()=>{
        // Kontrollera cache först
        const now = Date.now();
        if (lastFetchTime && now - lastFetchTime < CACHE_DURATION && !realtime) return; // Använd cachad data
        let unsubscribe;
        try {
            if (realtime) // Realtidslyssnare för live-uppdateringar
            unsubscribe = (0, $ae31471d52481ece$export$ad30f661f41f4d90)(firebaseQuery, (snapshot)=>{
                const data = snapshot.val();
                const transformedTasks = transformFirebaseData(data);
                setTasks(transformedTasks);
                setLoading(false);
                setError(null);
                setLastFetchTime(now);
            }, (error)=>{
                console.error("useOptimizedTasks: Firebase error:", error);
                setError(error.message);
                setLoading(false);
            });
            else // En-gångs hämtning för bättre prestanda
            (0, $ae31471d52481ece$export$ad30f661f41f4d90)(firebaseQuery, (snapshot)=>{
                const data = snapshot.val();
                const transformedTasks = transformFirebaseData(data);
                setTasks(transformedTasks);
                setLoading(false);
                setError(null);
                setLastFetchTime(now);
            }, {
                onlyOnce: true
            });
        } catch (error) {
            console.error("useOptimizedTasks: Setup error:", error);
            setError(error.message);
            setLoading(false);
        }
        // Cleanup function
        return ()=>{
            if (unsubscribe) unsubscribe();
        };
    }, [
        firebaseQuery,
        transformFirebaseData,
        lastFetchTime,
        realtime
    ]);
    /**
   * OPTIMERING: Memoizerade CRUD-operationer
   * Callbacks som inte ändras onödigt
   */ const addTask = (0, $7p28Q.useCallback)(async (taskData)=>{
        try {
            const tasksRef = (0, $ae31471d52481ece$export$eff4d24c3ff7876e)((0, $3fe3517193779d10$export$f932f06c7eb6abeb), TASKS_REF_PATH);
            const optimizedTask = {
                ...taskData,
                creationTimestamp: Date.now(),
                status: "Nytt",
                isArchived: false,
                // Lägg till metadata för bättre prestanda
                lastModified: Date.now(),
                version: 1
            };
            await (0, $ae31471d52481ece$export$4cbf152802aa238)(tasksRef, optimizedTask);
            return {
                success: true
            };
        } catch (error) {
            setError(error.message);
            return {
                success: false,
                error: error.message
            };
        }
    }, []);
    const updateTaskStatus = (0, $7p28Q.useCallback)(async (taskId, newStatus)=>{
        try {
            const taskRef = (0, $ae31471d52481ece$export$eff4d24c3ff7876e)((0, $3fe3517193779d10$export$f932f06c7eb6abeb), `${TASKS_REF_PATH}/${taskId}`);
            await (0, $ae31471d52481ece$export$722fbec263ad908a)(taskRef, {
                status: newStatus,
                lastModified: Date.now()
            });
            return {
                success: true
            };
        } catch (error) {
            setError(error.message);
            return {
                success: false,
                error: error.message
            };
        }
    }, []);
    const assignTask = (0, $7p28Q.useCallback)(async (taskId, memberId, memberName)=>{
        try {
            const taskRef = (0, $ae31471d52481ece$export$eff4d24c3ff7876e)((0, $3fe3517193779d10$export$f932f06c7eb6abeb), `${TASKS_REF_PATH}/${taskId}`);
            await (0, $ae31471d52481ece$export$722fbec263ad908a)(taskRef, {
                assignedToMemberId: memberId,
                assignedToMemberName: memberName,
                status: memberId ? "P\xe5g\xe5ende" : "Nytt",
                lastModified: Date.now()
            });
            return {
                success: true
            };
        } catch (error) {
            setError(error.message);
            return {
                success: false,
                error: error.message
            };
        }
    }, []);
    const deleteTask = (0, $7p28Q.useCallback)(async (taskId)=>{
        try {
            const taskRef = (0, $ae31471d52481ece$export$eff4d24c3ff7876e)((0, $3fe3517193779d10$export$f932f06c7eb6abeb), `${TASKS_REF_PATH}/${taskId}`);
            await (0, $ae31471d52481ece$export$cd7f480d6b8286c3)(taskRef);
            return {
                success: true
            };
        } catch (error) {
            setError(error.message);
            return {
                success: false,
                error: error.message
            };
        }
    }, []);
    /**
   * OPTIMERING: Memoizerade computed values
   * Beräknas bara när tasks ändras
   */ const computedStats = (0, $7p28Q.useMemo)(()=>{
        const total = tasks.length;
        const completed = tasks.filter((task)=>task.status === "Klar").length;
        const inProgress = tasks.filter((task)=>task.status === "P\xe5g\xe5ende").length;
        const pending = tasks.filter((task)=>task.status === "Nytt").length;
        return {
            total: total,
            completed: completed,
            inProgress: inProgress,
            pending: pending,
            completionRate: total > 0 ? Math.round(completed / total * 100) : 0
        };
    }, [
        tasks
    ]);
    // Returnera optimerade värden och funktioner
    return {
        tasks: tasks,
        loading: loading,
        error: error,
        stats: computedStats,
        addTask: addTask,
        deleteTask: deleteTask,
        updateTaskStatus: updateTaskStatus,
        assignTask: assignTask,
        // Utility functions
        refreshTasks: ()=>setLastFetchTime(null),
        clearError: ()=>setError(null)
    };
};
var $ef5b2eaa8465345a$export$2e2bcd8739ae039 = $ef5b2eaa8465345a$var$useOptimizedTasks;





const $64243c7c4e0bea89$var$HomePage = ()=>{
    // Håller koll på vilken flik som är aktiv och vad som händer
    const [activeTab, setActiveTab] = (0, $7p28Q.useState)("board"); // Vilken vy ser vi just nu?
    const [notification, setNotification] = (0, $7p28Q.useState)(null); // Meddelanden till användaren
    // Mina autentiseringsverktyg - vem är inloggad och hur loggar vi ut?
    const { currentUser: currentUser, logout: logout, deleteCurrentUser: deleteCurrentUser } = (0, $1f0369f02d12c9d2$export$1d39dc5b47e56ff0)();
    const navigate = (0, $0a4cd71eaf9877fd$export$9770f232ac06a008)();
    /**
   * Mina tre favoritområden inom webbutveckling 💻
   *
   * Som en utvecklare ser jag webbutveckling i tre delar:
   * - Frontend: Det vackra som användarna ser och klickar på
   * - Backend: Den smarta logiken som gör att allt fungerar
   * - UX: Konsten att göra allt intuitivt och användarvänligt
   */ const myTeamSkillAreas = [
        "frontend",
        "backend",
        "ux"
    ];
    /**
   * Hook för teamhantering
   *
   * Hanterar all data och funktionalitet relaterad till teammedlemmar:
   * - Medlemslista
   * - Laddningsstatus
   * - Felhantering
   * - CRUD-operationer för medlemmar
   */ const { members: members, loading: membersLoading, error: membersError, addMember: addMember, deleteMember: deleteMember } = (0, $e58a643d15377a88$export$2e2bcd8739ae039)();
    /**
   * Optimerad uppgiftshantering
   *
   * Förbättringar: memoization, query-optimering, caching.
   */ const { tasks: tasks, loading: tasksLoading, error: tasksError, addTask: addTask, deleteTask: deleteTask, updateTaskStatus: updateTaskStatus, assignTask: assignTask } = (0, $ef5b2eaa8465345a$export$2e2bcd8739ae039)({
        realtime: true,
        limit: 100
    });
    /**
   * Min personliga notifikationsassistent
   *
   * Som en vänlig kollega som tipsar om vad som händer i appen.
   * Dyker upp, säger sitt, och försvinner diskret efter 5 sekunder.
   *
   * @param {string} message - Vad som ska sägas till användaren
   * @param {string} type - Känslan i meddelandet (info, success, error)
   */ const tellUserWhatHappened = (message, type = "info")=>{
        // Visa meddelandet för användaren
        setNotification({
            message: message,
            type: type
        });
        // Försvinn automatiskt så användaren slipper stänga manuellt
        setTimeout(()=>{
            setNotification(null);
        }, 5000);
    };
    /**
   * Hanterar tillägg av teammedlem
   *
   * Lägger till en ny medlem och visar feedback om resultatet.
   * OPTIMERING: Memoizerad callback för bättre prestanda
   *
   * @param {Object} memberData - Medlemsdata från formuläret
   */ const welcomeNewTeammate = (0, $7p28Q.useCallback)(async (memberData)=>{
        // Lägg till den nya personen i teamet
        const result = await addMember(memberData);
        // Berätta för användaren hur det gick
        if (result.success) tellUserWhatHappened(`V\xe4lkommen ${memberData.name} till teamet! \u{1F389}`, "success");
        else tellUserWhatHappened(`Kunde inte l\xe4gga till ${memberData.name}: ${result.error}`, "error");
    }, [
        addMember
    ]);
    /**
   * Hanterar borttagning av teammedlem
   *
   * Tar bort en medlem och visar feedback om resultatet.
   * OPTIMERING: Memoizerad callback för bättre prestanda
   *
   * @param {string} memberId - ID för medlemmen som ska tas bort
   */ const sayGoodbyeToTeammate = (0, $7p28Q.useCallback)(async (memberId)=>{
        // Ta bort personen från teamet
        const result = await deleteMember(memberId);
        // Meddela användaren vad som hände
        if (result.success) tellUserWhatHappened("Teammedlem har l\xe4mnat projektet.", "success");
        else tellUserWhatHappened(`Kunde inte ta bort teammedlem: ${result.error}`, "error");
    }, [
        deleteMember
    ]);
    /**
   * Hanterar tillägg av uppgift
   *
   * Lägger till en ny uppgift och visar feedback om resultatet.
   * OPTIMERING: Memoizerad callback för bättre prestanda
   *
   * @param {Object} taskData - Uppgiftsdata från formuläret
   */ const createNewWorkItem = (0, $7p28Q.useCallback)(async (taskData)=>{
        // Skapa en ny uppgift i systemet
        const result = await addTask(taskData);
        // Berätta för användaren vad som hände
        if (result.success) tellUserWhatHappened(`Ny uppgift "${taskData.title}" \xe4r redo att tacklas! \u{1F4AA}`, "success");
        else tellUserWhatHappened(`Kunde inte skapa uppgift: ${result.error}`, "error");
    }, [
        addTask
    ]);
    /**
   * Hanterar statusändring för uppgift
   *
   * Uppdaterar en uppgifts status och visar feedback om resultatet.
   * OPTIMERING: Memoizerad callback för bättre prestanda
   *
   * @param {string} taskId - Uppgiftens ID
   * @param {string} newStatus - Ny status (Nytt/Pågående/Klar)
   */ const moveTaskToNewColumn = (0, $7p28Q.useCallback)(async (taskId, newStatus)=>{
        // Flytta uppgiften till rätt kolumn på tavlan
        const result = await updateTaskStatus(taskId, newStatus);
        // Låt användaren veta vad som hände
        if (result.success) tellUserWhatHappened(`Uppgift flyttad till "${newStatus}" - bra jobbat! \u{1F3AF}`, "success");
        else tellUserWhatHappened(`Kunde inte flytta uppgift: ${result.error}`, "error");
    }, [
        updateTaskStatus
    ]);
    /**
   * Hanterar tilldelning av uppgift
   *
   * Tilldelar en uppgift till en teammedlem eller tar bort tilldelning.
   * Visar feedback om resultatet.
   * OPTIMERING: Memoizerad callback för bättre prestanda
   *
   * @param {string} taskId - Uppgiftens ID
   * @param {string|null} memberId - Medlemmens ID eller null
   * @param {string|null} memberName - Medlemmens namn för visning
   */ const assignWorkToTeammate = (0, $7p28Q.useCallback)(async (taskId, memberId, memberName)=>{
        // Ge uppgiften till rätt person i teamet
        const result = await assignTask(taskId, memberId, memberName);
        // Berätta vad som hände
        if (result.success) {
            if (memberId) tellUserWhatHappened(`${memberName} tar nu hand om uppgiften! \u{1F44D}`, "success");
            else tellUserWhatHappened("Uppgiften \xe4r nu ledig f\xf6r vem som helst.", "info");
        } else tellUserWhatHappened(`Kunde inte tilldela uppgift: ${result.error}`, "error");
    }, [
        assignTask
    ]);
    /**
   * Hanterar borttagning av uppgift
   *
   * Tar bort en uppgift permanent från databasen och
   * visar feedback om resultatet.
   * OPTIMERING: Memoizerad callback för bättre prestanda
   *
   * @param {string} taskId - Uppgiftens ID
   */ const removeTaskCompletely = (0, $7p28Q.useCallback)(async (taskId)=>{
        // Ta bort uppgiften helt från systemet
        const result = await deleteTask(taskId);
        // Meddela användaren resultatet
        if (result.success) tellUserWhatHappened("Uppgift borttagen - som om den aldrig funnits! \u2728", "success");
        else tellUserWhatHappened(`Kunde inte ta bort uppgift: ${result.error}`, "error");
    }, [
        deleteTask
    ]);
    /**
   * Hanterar utloggning
   *
   * Städar upp efter anonyma användare och skickar alla tillbaka till login.
   */ const handleLogout = async ()=>{
        try {
            // För anonyma användare: ta bort dem från Firebase först
            if (currentUser?.isAnonymous) {
                console.log("St\xe4dar upp anonym anv\xe4ndare:", currentUser.uid);
                try {
                    const deleteResult = await deleteCurrentUser();
                    if (deleteResult.success) {
                        console.log("Anv\xe4ndare borttagen! \uD83E\uDDF9");
                        navigate("/login");
                        return;
                    } else // Om borttagning misslyckades, fortsätt med vanlig utloggning
                    console.warn("Kunde inte ta bort anv\xe4ndaren:", deleteResult.error);
                } catch (error) {
                    console.error("Fel vid st\xe4dning:", error);
                }
            }
            // Vanlig utloggning
            const result = await logout();
            if (result.success) navigate("/login");
            else tellUserWhatHappened("Kunde inte logga ut. F\xf6rs\xf6k igen.", "error");
        } catch (error) {
            tellUserWhatHappened("Ett fel uppstod vid utloggning.", "error");
        }
    };
    /**
   * Visar felmeddelanden vid datahämtningsfel
   *
   * Övervakar felstatus och visar notifikationer när
   * fel uppstår vid hämtning av data.
   */ (0, $7p28Q.useEffect)(()=>{
        // Berätta för användaren om något gick fel med teamdata
        if (membersError) tellUserWhatHappened(`Problem med att h\xe4mta teammedlemmar: ${membersError}`, "error");
        // Berätta för användaren om något gick fel med uppgiftsdata
        if (tasksError) tellUserWhatHappened(`Problem med att h\xe4mta uppgifter: ${tasksError}`, "error");
    }, [
        membersError,
        tasksError
    ]); // Körs när fel uppstår
    /**
   * Renderar applikationens huvudgränssnitt
   *
   * Bygger upp UI med header, navigation, innehåll och notifikationer
   */ return /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
        className: "home-page",
        children: [
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("header", {
                className: "app-header",
                children: [
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("h1", {
                        children: "Scrum Board"
                    }),
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                        className: "user-controls",
                        children: currentUser?.isAnonymous ? /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                            className: "user-profile",
                            children: [
                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                                    className: "user-avatar",
                                    children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $cfd84ee56c3b6114$export$4202723ba73439f5), {
                                        size: 18,
                                        color: "#3b82f6"
                                    })
                                }),
                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                                    className: "user-info",
                                    children: [
                                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                            className: "user-name",
                                            children: "Anonym anv\xe4ndare"
                                        }),
                                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                            className: "user-status",
                                            children: "Tempor\xe4r session"
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                                    onClick: handleLogout,
                                    variant: "outline",
                                    size: "small",
                                    className: "logout-button",
                                    iconRight: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $cfd84ee56c3b6114$export$2c9e30524eeaa42e), {
                                        size: 16
                                    }),
                                    "aria-label": "Logga ut",
                                    children: "Avsluta"
                                })
                            ]
                        }) : /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                            className: "user-profile",
                            children: [
                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                                    className: "user-avatar",
                                    children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $cfd84ee56c3b6114$export$4202723ba73439f5), {
                                        size: 18,
                                        color: "#3b82f6"
                                    })
                                }),
                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                                    className: "user-info",
                                    children: [
                                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                            className: "user-name",
                                            children: currentUser?.email
                                        }),
                                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                            className: "user-status",
                                            children: "Inloggad"
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                                    onClick: handleLogout,
                                    variant: "outline",
                                    size: "small",
                                    className: "logout-button",
                                    iconRight: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $cfd84ee56c3b6114$export$2c9e30524eeaa42e), {
                                        size: 16
                                    }),
                                    "aria-label": "Logga ut",
                                    children: "Logga ut"
                                })
                            ]
                        })
                    })
                ]
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("nav", {
                className: "app-tabs",
                "aria-label": "Application Navigation",
                children: [
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("button", {
                        className: `tab-button ${activeTab === "board" ? "active" : ""}`,
                        onClick: ()=>setActiveTab("board"),
                        "aria-selected": activeTab === "board",
                        role: "tab",
                        children: "Board"
                    }),
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("button", {
                        className: `tab-button ${activeTab === "tasks" ? "active" : ""}`,
                        onClick: ()=>setActiveTab("tasks"),
                        "aria-selected": activeTab === "tasks",
                        role: "tab",
                        children: "Uppgifter"
                    }),
                    /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("button", {
                        className: `tab-button ${activeTab === "members" ? "active" : ""}`,
                        onClick: ()=>setActiveTab("members"),
                        "aria-selected": activeTab === "members",
                        role: "tab",
                        children: "Team"
                    })
                ]
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("main", {
                className: "app-content",
                role: "tabpanel",
                "aria-live": "polite",
                children: [
                    activeTab === "board" && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $0b907df167558aff$export$2e2bcd8739ae039), {
                        tasks: tasks,
                        members: members,
                        onAddTask: createNewWorkItem,
                        onUpdateTaskStatus: moveTaskToNewColumn,
                        onAssignTask: assignWorkToTeammate,
                        onDeleteTask: removeTaskCompletely,
                        categories: myTeamSkillAreas,
                        isLoading: tasksLoading || membersLoading
                    }),
                    activeTab === "tasks" && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $f6afb0a49d48489f$export$2e2bcd8739ae039), {
                        tasks: tasks,
                        members: members,
                        onAddTask: createNewWorkItem,
                        onUpdateTaskStatus: moveTaskToNewColumn,
                        onAssignTask: assignWorkToTeammate,
                        onDeleteTask: removeTaskCompletely,
                        categories: myTeamSkillAreas,
                        isLoading: tasksLoading || membersLoading
                    }),
                    activeTab === "members" && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $3509ff2c002e557b$export$2e2bcd8739ae039), {
                        members: members,
                        onAddMember: welcomeNewTeammate,
                        onDeleteMember: sayGoodbyeToTeammate,
                        roles: myTeamSkillAreas,
                        isLoading: membersLoading
                    })
                ]
            }),
            notification && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $9a09dad5583cc11a$export$2e2bcd8739ae039), {
                message: notification.message,
                type: notification.type,
                onClose: ()=>setNotification(null)
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $359a9fb29caeb244$export$2e2bcd8739ae039), {
                onSuccess: tellUserWhatHappened
            })
        ]
    });
};
var $64243c7c4e0bea89$export$2e2bcd8739ae039 = $64243c7c4e0bea89$var$HomePage;


// src/pages/LoginPage.jsx


var $7p28Q = parcelRequire("7p28Q");




/**
 * Inloggningssida med anonym inloggning 🚪
 *
 * Enkel inloggning utan konton.
 * Perfekt för snabb testning.
 */ const $52299dc8056d4a1b$var$LoginPage = ()=>{
    const [isLoading, setIsLoading] = (0, $7p28Q.useState)(false);
    const [errorMessage, setErrorMessage] = (0, $7p28Q.useState)("");
    const { loginAnonymously: loginAnonymously } = (0, $1f0369f02d12c9d2$export$1d39dc5b47e56ff0)();
    const navigate = (0, $0a4cd71eaf9877fd$export$9770f232ac06a008)();
    /**
   * Anonym inloggning 🎭
   *
   * Firebase skapar tillfällig identitet automatiskt.
   */ const handleAnonymousLogin = async ()=>{
        setErrorMessage("");
        setIsLoading(true);
        try {
            const result = await loginAnonymously();
            if (result.success) navigate("/"); // Till startsidan
            else setErrorMessage("Kunde inte logga in. F\xf6rs\xf6k igen.");
        } catch (error) {
            setErrorMessage("Ett fel intr\xe4ffade. F\xf6rs\xf6k igen senare.");
        } finally{
            setIsLoading(false);
        }
    };
    return /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
        className: "login-page",
        children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
            className: "login-container",
            children: [
                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                    className: "login-header",
                    children: [
                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("h1", {
                            children: "Scrum Board"
                        }),
                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("p", {
                            children: "Enkel projekthantering f\xf6r ditt team"
                        })
                    ]
                }),
                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                    className: "login-content",
                    children: [
                        errorMessage && /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                            className: "login-error",
                            role: "alert",
                            children: [
                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("span", {
                                    className: "error-icon",
                                    children: "\u26A0\uFE0F"
                                }),
                                errorMessage
                            ]
                        }),
                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
                            className: "anonymous-login",
                            children: [
                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                                    onClick: handleAnonymousLogin,
                                    variant: "primary",
                                    fullWidth: true,
                                    disabled: isLoading,
                                    children: isLoading ? "Loggar in..." : "Forts\xe4tt utan konto"
                                }),
                                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("p", {
                                    className: "anonymous-info",
                                    children: "Klicka f\xf6r att komma ig\xe5ng direkt utan att skapa ett konto."
                                })
                            ]
                        })
                    ]
                }),
                /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                    className: "login-footer",
                    children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("p", {
                        children: "Scrum Board - Ett projekt av Anton Smedberg"
                    })
                })
            ]
        })
    });
};
var $52299dc8056d4a1b$export$2e2bcd8739ae039 = $52299dc8056d4a1b$var$LoginPage;


// src/pages/NotFoundPage.jsx
/**
 * 404-sida för felaktiga URL:er
 *
 * Tydligt meddelande och knapp tillbaka till startsidan.
 */ 
parcelRequire("7p28Q");



const $1e36424a34523cee$var$NotFoundPage = ()=>{
    return /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
        className: "not-found-page",
        children: [
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("h1", {
                children: "404"
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("h2", {
                children: "Sidan kunde inte hittas"
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("p", {
                children: "Tyv\xe4rr, sidan du letar efter finns inte eller har flyttats."
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $94342d10451cd5fe$export$a6c7ac8248d6e38a), {
                to: "/",
                children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $4b511624a7a9bd1e$export$2e2bcd8739ae039), {
                    variant: "primary",
                    children: "Tillbaka till startsidan"
                })
            })
        ]
    });
};
var $1e36424a34523cee$export$2e2bcd8739ae039 = $1e36424a34523cee$var$NotFoundPage;


// Fallback UI för ErrorBoundary
const $5f75de5d431d1c6b$var$ErrorFallback = ({ error: error, resetErrorBoundary: resetErrorBoundary })=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("div", {
        className: "error-boundary",
        children: [
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("h2", {
                children: "N\xe5got gick fel"
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("p", {
                children: "Ett ov\xe4ntat fel uppstod. F\xf6rs\xf6k ladda om sidan."
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("div", {
                className: "error-details",
                children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)("p", {
                    children: [
                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("strong", {
                            children: "Felmeddelande:"
                        }),
                        " ",
                        error.message
                    ]
                })
            }),
            /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)("button", {
                onClick: resetErrorBoundary,
                children: "Ladda om sidan"
            })
        ]
    });
function $5f75de5d431d1c6b$var$App() {
    return /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $9dac912d8f6aebb1$export$e926676385687eaf), {
        FallbackComponent: $5f75de5d431d1c6b$var$ErrorFallback,
        onReset: ()=>window.location.reload(),
        onError: (error, info)=>console.error("App error:", error, info),
        children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $1f0369f02d12c9d2$export$87091915187a1a85), {
            children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $94342d10451cd5fe$export$7221d69dcfc8e36b), {
                children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsxs)((0, $0a4cd71eaf9877fd$export$3565eb3d00ca5a74), {
                    children: [
                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $0a4cd71eaf9877fd$export$e7b0ac011bb776c6), {
                            path: "/login",
                            element: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $52299dc8056d4a1b$export$2e2bcd8739ae039), {})
                        }),
                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $0a4cd71eaf9877fd$export$e7b0ac011bb776c6), {
                            path: "/",
                            element: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $c4cb0399c1a12364$export$2e2bcd8739ae039), {
                                children: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $64243c7c4e0bea89$export$2e2bcd8739ae039), {})
                            })
                        }),
                        /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $0a4cd71eaf9877fd$export$e7b0ac011bb776c6), {
                            path: "*",
                            element: /*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $1e36424a34523cee$export$2e2bcd8739ae039), {})
                        })
                    ]
                })
            })
        })
    });
}
var $5f75de5d431d1c6b$export$2e2bcd8739ae039 = $5f75de5d431d1c6b$var$App;


// src/utils/performanceUtils.jsx
/**
 * Min prestandadetektiv - håller koll på hur snabb appen är! 🕵️‍♂️
 *
 * Som en personlig tränare för din app som mäter:
 * - Hur snabbt komponenter renderas (som en stoppur)
 * - Hur mycket minne som används (så vi inte äter upp allt)
 * - Hur stor appen blir (ingen vill ha en långsam jätte)
 * - Hur responsiv allt känns för användaren
 *
 * Perfekt för att hitta var appen blir seg och fixa det!
 */ /**
 * Mäter renderingstid för komponenter ⏱️
 *
 * Varnar om rendering tar längre än 16ms (60fps-gränsen).
 *
 * @param {string} componentName - Komponentnamn
 * @param {Function} renderFunction - Render-funktion
 * @returns {any} Funktionsresultat med timing
 */ 
const $5adf8ae2a6967dc4$export$21c36f7b190a989 = (componentName, renderFunction)=>{
    return renderFunction();
};
const $5adf8ae2a6967dc4$export$fa0b0dba742eb3b9 = (WrappedComponent, componentName)=>{
    return function ProfiledComponent(props) {
        return $5adf8ae2a6967dc4$export$21c36f7b190a989(componentName, ()=>/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)(WrappedComponent, {
                ...props
            }));
    };
};
const $5adf8ae2a6967dc4$export$8e547070e69b2ee1 = ()=>{
    if (!performance.memory) {
        console.warn("Memory measurement not supported in this browser");
        return null;
    }
    const memory = performance.memory;
    const usedMB = Math.round(memory.usedJSHeapSize / 1048576);
    const totalMB = Math.round(memory.totalJSHeapSize / 1048576);
    const limitMB = Math.round(memory.jsHeapSizeLimit / 1048576);
    const memoryInfo = {
        used: usedMB,
        total: totalMB,
        limit: limitMB,
        usage: Math.round(usedMB / limitMB * 100)
    };
    // Varnar om vi börjar bli minneshungriga
    if (memoryInfo.usage > 80) console.warn(`\u{1F6A8} High memory usage: ${memoryInfo.usage}% (${usedMB}MB/${limitMB}MB)`);
    return memoryInfo;
};
const $5adf8ae2a6967dc4$export$47395883687a489b = (label, asyncFunction)=>{
    return async (...args)=>{
        const startTime = performance.now();
        try {
            const result = await asyncFunction(...args);
            const endTime = performance.now();
            const loadTime = endTime - startTime;
            console.log(`\u{1F4CA} ${label} loaded in ${loadTime.toFixed(2)}ms`);
            // Sparar i vår prestandabank för senare analys
            if (window.performanceMetrics) window.performanceMetrics.push({
                label: label,
                loadTime: loadTime,
                timestamp: Date.now()
            });
            return result;
        } catch (error) {
            const endTime = performance.now();
            const loadTime = endTime - startTime;
            console.error(`\u{274C} ${label} failed after ${loadTime.toFixed(2)}ms:`, error);
            throw error;
        }
    };
};
const $5adf8ae2a6967dc4$export$61fc7d43ac8f84b0 = (func, wait, immediate = false)=>{
    let timeout;
    return function executedFunction(...args) {
        const later = ()=>{
            timeout = null;
            if (!immediate) func(...args);
        };
        const callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func(...args);
    };
};
const $5adf8ae2a6967dc4$export$de363e709c412c8a = (func, limit)=>{
    let inThrottle;
    return function(...args) {
        if (!inThrottle) {
            func.apply(this, args);
            inThrottle = true;
            setTimeout(()=>inThrottle = false, limit);
        }
    };
};
const $5adf8ae2a6967dc4$export$b193e052ab39f67 = (queryName, queryFunction)=>{
    return $5adf8ae2a6967dc4$export$47395883687a489b(`Firebase Query: ${queryName}`, queryFunction);
};
const $5adf8ae2a6967dc4$export$acaa5875ecdcbbd = ()=>{
    var module, size;
    return;
};
const $5adf8ae2a6967dc4$export$29ecf3409888b98 = ()=>{
    if (typeof PerformanceObserver === "undefined") {
        console.warn("PerformanceObserver not supported");
        return;
    }
    // LCP - tid innan viktigaste innehållet syns
    const lcpObserver = new PerformanceObserver((list)=>{
        const entries = list.getEntries();
        const lastEntry = entries[entries.length - 1];
        console.log(`\u{1F3AF} LCP: ${lastEntry.startTime.toFixed(2)}ms`);
    });
    try {
        lcpObserver.observe({
            entryTypes: [
                "largest-contentful-paint"
            ]
        });
    } catch (e) {
        console.warn("LCP observation not supported");
    }
    // FID - reaktionstid på första klick
    const fidObserver = new PerformanceObserver((list)=>{
        const entries = list.getEntries();
        entries.forEach((entry)=>{
            const fid = entry.processingStart - entry.startTime;
            console.log(`\u{26A1} FID: ${fid.toFixed(2)}ms`);
        });
    });
    try {
        fidObserver.observe({
            entryTypes: [
                "first-input"
            ]
        });
    } catch (e) {
        console.warn("FID observation not supported");
    }
};
const $5adf8ae2a6967dc4$export$54d190c413d56a8b = ()=>{
    return;
};
const $5adf8ae2a6967dc4$export$eb8ad136b4abf06f = ()=>{
    if (!window.performanceMetrics) {
        console.warn("No performance metrics available");
        return null;
    }
    const metrics = {
        timestamp: Date.now(),
        userAgent: navigator.userAgent,
        metrics: window.performanceMetrics,
        summary: {
            totalMeasurements: window.performanceMetrics.length,
            averageLoadTime: window.performanceMetrics.filter((m)=>m.loadTime).reduce((sum, m, _, arr)=>sum + m.loadTime / arr.length, 0)
        }
    };
    console.log("\uD83D\uDCCA Performance Metrics Export:", metrics);
    return metrics;
};


// Hittar React:s hem i DOM:en
const $2e53fa106a555a03$var$rootElement = document.getElementById("root");
if ($2e53fa106a555a03$var$rootElement) {
    // Skapar React-root med moderna API:et
    const root = (0, $39d35cf54bfead1a$export$882461b6382ed46c)($2e53fa106a555a03$var$rootElement);
    // Startar prestandamätning
    (0, $5adf8ae2a6967dc4$export$54d190c413d56a8b)();
    // Produktion utan extra kontroller
    root.render(/*#__PURE__*/ (0, $0cca9a328bcd4540$exports.jsx)((0, $5f75de5d431d1c6b$export$2e2bcd8739ae039), {}));
} else // Root-element saknas
console.error("Root element not found");


//# sourceMappingURL=public.9bc310ba.js.map
