{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-a3f07b3c61e8e2c6.js","src/pages/HomePage.jsx","src/components/Board/ScrumBoard.jsx","src/components/Tasks/TaskCard.jsx","src/components/UI/Button.jsx","src/components/UI/Modal.jsx","src/utils/dateUtils.jsx","src/components/Tasks/AddTaskForm.jsx","src/utils/filterUtils.jsx","src/components/Tasks/TaskList.jsx","src/utils/sortUtils.jsx","src/components/Members/MemberList.jsx","src/components/Members/AddMemberForm.jsx","src/components/UI/Notification.jsx","src/components/Admin/DatabaseSeeder.jsx","src/firebase/seedDatabase.jsx","src/components/UI/Icons.jsx","src/hooks/useMembers.jsx","src/hooks/useOptimizedTasks.jsx"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SERVER_PORT = 1234;var HMR_SECURE = false;var HMR_ENV_HASH = \"439701173a9199ea\";var HMR_USE_SSE = false;module.bundle.HMR_BUNDLE_ID = \"ec7f9789bed3c7ef\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_SERVER_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_SERVER_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var HMR_USE_SSE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets /*: {|[string]: boolean|} */,\n  disposedAssets /*: {|[string]: boolean|} */,\n  assetsToDispose /*: Array<[ParcelRequire, string]> */,\n  assetsToAccept /*: Array<[ParcelRequire, string]> */,\n  bundleNotFound = false;\nfunction getHostname() {\n  return HMR_HOST || (typeof location !== 'undefined' && location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\nfunction getPort() {\n  return HMR_PORT || (typeof location !== 'undefined' ? location.port : HMR_SERVER_PORT);\n}\n\n// eslint-disable-next-line no-redeclare\nlet WebSocket = globalThis.WebSocket;\nif (!WebSocket && typeof module.bundle.root === 'function') {\n  try {\n    // eslint-disable-next-line no-global-assign\n    WebSocket = module.bundle.root('ws');\n  } catch {\n    // ignore.\n  }\n}\nvar hostname = getHostname();\nvar port = getPort();\nvar protocol = HMR_SECURE || typeof location !== 'undefined' && location.protocol === 'https:' && !['localhost', '127.0.0.1', '0.0.0.0'].includes(hostname) ? 'wss' : 'ws';\n\n// eslint-disable-next-line no-redeclare\nvar parent = module.bundle.parent;\nif (!parent || !parent.isParcelRequire) {\n  // Web extension context\n  var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;\n\n  // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n  var supportsSourceURL = false;\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  }\n  var ws;\n  if (HMR_USE_SSE) {\n    ws = new EventSource('/__parcel_hmr');\n  } else {\n    try {\n      // If we're running in the dev server's node runner, listen for messages on the parent port.\n      let {\n        workerData,\n        parentPort\n      } = module.bundle.root('node:worker_threads') /*: any*/;\n      if (workerData !== null && workerData !== void 0 && workerData.__parcel) {\n        parentPort.on('message', async message => {\n          try {\n            await handleMessage(message);\n            parentPort.postMessage('updated');\n          } catch {\n            parentPort.postMessage('restart');\n          }\n        });\n\n        // After the bundle has finished running, notify the dev server that the HMR update is complete.\n        queueMicrotask(() => parentPort.postMessage('ready'));\n      }\n    } catch {\n      if (typeof WebSocket !== 'undefined') {\n        try {\n          ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');\n        } catch (err) {\n          // Ignore cloudflare workers error.\n          if (err.message && !err.message.includes('Disallowed operation called within global scope')) {\n            console.error(err.message);\n          }\n        }\n      }\n    }\n  }\n  if (ws) {\n    // $FlowFixMe\n    ws.onmessage = async function (event /*: {data: string, ...} */) {\n      var data /*: HMRMessage */ = JSON.parse(event.data);\n      await handleMessage(data);\n    };\n    if (ws instanceof WebSocket) {\n      ws.onerror = function (e) {\n        if (e.message) {\n          console.error(e.message);\n        }\n      };\n      ws.onclose = function () {\n        console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n      };\n    }\n  }\n}\nasync function handleMessage(data /*: HMRMessage */) {\n  checkedAssets = {} /*: {|[string]: boolean|} */;\n  disposedAssets = {} /*: {|[string]: boolean|} */;\n  assetsToAccept = [];\n  assetsToDispose = [];\n  bundleNotFound = false;\n  if (data.type === 'reload') {\n    fullReload();\n  } else if (data.type === 'update') {\n    // Remove error overlay if there is one\n    if (typeof document !== 'undefined') {\n      removeErrorOverlay();\n    }\n    let assets = data.assets;\n\n    // Handle HMR Update\n    let handled = assets.every(asset => {\n      return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n    });\n\n    // Dispatch a custom event in case a bundle was not found. This might mean\n    // an asset on the server changed and we should reload the page. This event\n    // gives the client an opportunity to refresh without losing state\n    // (e.g. via React Server Components). If e.preventDefault() is not called,\n    // we will trigger a full page reload.\n    if (handled && bundleNotFound && assets.some(a => a.envHash !== HMR_ENV_HASH) && typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n      handled = !window.dispatchEvent(new CustomEvent('parcelhmrreload', {\n        cancelable: true\n      }));\n    }\n    if (handled) {\n      console.clear();\n\n      // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n      if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n        window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n      }\n      await hmrApplyUpdates(assets);\n      hmrDisposeQueue();\n\n      // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n      let processedAssets = {};\n      for (let i = 0; i < assetsToAccept.length; i++) {\n        let id = assetsToAccept[i][1];\n        if (!processedAssets[id]) {\n          hmrAccept(assetsToAccept[i][0], id);\n          processedAssets[id] = true;\n        }\n      }\n    } else fullReload();\n  }\n  if (data.type === 'error') {\n    // Log parcel errors to console\n    for (let ansiDiagnostic of data.diagnostics.ansi) {\n      let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n      console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n    }\n    if (typeof document !== 'undefined') {\n      // Render the fancy html overlay\n      removeErrorOverlay();\n      var overlay = createErrorOverlay(data.diagnostics.html);\n      // $FlowFixMe\n      document.body.appendChild(overlay);\n    }\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"${protocol === 'wss' ? 'https' : 'http'}://${hostname}:${port}/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\nfunction fullReload() {\n  if (typeof location !== 'undefined' && 'reload' in location) {\n    location.reload();\n  } else if (typeof extCtx !== 'undefined' && extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  } else {\n    try {\n      let {\n        workerData,\n        parentPort\n      } = module.bundle.root('node:worker_threads') /*: any*/;\n      if (workerData !== null && workerData !== void 0 && workerData.__parcel) {\n        parentPort.postMessage('restart');\n      }\n    } catch (err) {\n      console.error('[parcel] ⚠️ An HMR update was not accepted. Please restart the process.');\n    }\n  }\n}\nfunction getParents(bundle, id) /*: Array<[ParcelRequire, string]> */{\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n  var parents = [];\n  var k, d, dep;\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n  return parents;\n}\nfunction updateLink(link) {\n  var href = link.getAttribute('href');\n  if (!href) {\n    return;\n  }\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n  newLink.setAttribute('href',\n  // $FlowFixMe\n  href.split('?')[0] + '?' + Date.now());\n  // $FlowFixMe\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout || typeof document === 'undefined') {\n    return;\n  }\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href /*: string */ = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n    cssTimeout = null;\n  }, 50);\n}\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n      return new Promise((resolve, reject) => {\n        var _document$head;\n        script.onload = () => resolve(script);\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension fix\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n            extCtx.runtime.reload();\n            return;\n          }\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n          (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\nfunction hmrApply(bundle /*: ParcelRequire */, asset /*:  HMRAsset */) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      }\n\n      // $FlowFixMe\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    }\n\n    // Always traverse to the parent bundle, even if we already replaced the asset in this bundle.\n    // This is required in case modules are duplicated. We need to ensure all instances have the updated code.\n    if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    }\n\n    // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n    delete modules[id];\n    delete bundle.cache[id];\n\n    // Now delete the orphans.\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\nfunction hmrAcceptCheck(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  checkedAssets = {};\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  }\n\n  // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else if (a !== null) {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n      parents.push(...p);\n    }\n  }\n  return accepted;\n}\nfunction hmrAcceptCheckOne(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      bundleNotFound = true;\n      return true;\n    }\n    return hmrAcceptCheckOne(bundle.parent, id, depsByBundle);\n  }\n  if (checkedAssets[id]) {\n    return null;\n  }\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  if (!cached) {\n    return true;\n  }\n  assetsToDispose.push([bundle, id]);\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n  return false;\n}\nfunction hmrDisposeQueue() {\n  // Dispose all old assets.\n  for (let i = 0; i < assetsToDispose.length; i++) {\n    let id = assetsToDispose[i][1];\n    if (!disposedAssets[id]) {\n      hmrDispose(assetsToDispose[i][0], id);\n      disposedAssets[id] = true;\n    }\n  }\n  assetsToDispose = [];\n}\nfunction hmrDispose(bundle /*: ParcelRequire */, id /*: string */) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n  delete bundle.cache[id];\n}\nfunction hmrAccept(bundle /*: ParcelRequire */, id /*: string */) {\n  // Execute the module.\n  bundle(id);\n\n  // Run the accept callbacks in the new version of the module.\n  var cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    let assetsToAlsoAccept = [];\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      let additionalAssets = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n      if (Array.isArray(additionalAssets) && additionalAssets.length) {\n        assetsToAlsoAccept.push(...additionalAssets);\n      }\n    });\n    if (assetsToAlsoAccept.length) {\n      let handled = assetsToAlsoAccept.every(function (a) {\n        return hmrAcceptCheck(a[0], a[1]);\n      });\n      if (!handled) {\n        return fullReload();\n      }\n      hmrDisposeQueue();\n    }\n  }\n}","// src/pages/HomePage.jsx\n/**\n * Huvudsidan för Scrum Board 🏠\n *\n * Styr hela appen:\n * - Firebase-kommunikation via hooks\n * - Uppgifts- och medlemshantering\n * - Navigation mellan Board, Uppgifter och Team\n * - Notifikationer för användarfeedback\n */\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router\";\n\n// UI-komponenter\nimport ScrumBoard from \"../components/Board/ScrumBoard.jsx\";\nimport TaskList from \"../components/Tasks/TaskList.jsx\";\nimport MemberList from \"../components/Members/MemberList.jsx\";\nimport Notification from \"../components/UI/Notification.jsx\";\nimport DatabaseSeeder from \"../components/Admin/DatabaseSeeder.jsx\";\nimport Button from \"../components/UI/Button.jsx\";\nimport { LogoutIcon, UserIcon } from \"../components/UI/Icons.jsx\";\n\n// Firebase-hooks\nimport useMembers from \"../hooks/useMembers.jsx\"; // Teamhantering\nimport useOptimizedTasks from \"../hooks/useOptimizedTasks.jsx\"; // Uppgiftshantering\nimport { useAuth } from \"../hooks/useAuth.jsx\"; // Autentisering\n\n// Styling för att göra allt snyggt\nimport \"../styles/pages/HomePage.css\";\nimport \"../styles/components/DatabaseSeeder.css\";\n\nconst HomePage = () => {\n  // Håller koll på vilken flik som är aktiv och vad som händer\n  const [activeTab, setActiveTab] = useState(\"board\"); // Vilken vy ser vi just nu?\n  const [notification, setNotification] = useState(null); // Meddelanden till användaren\n\n  // Mina autentiseringsverktyg - vem är inloggad och hur loggar vi ut?\n  const { currentUser, logout, deleteCurrentUser } = useAuth();\n  const navigate = useNavigate();\n\n  /**\n   * Mina tre favoritområden inom webbutveckling 💻\n   *\n   * Som en utvecklare ser jag webbutveckling i tre delar:\n   * - Frontend: Det vackra som användarna ser och klickar på\n   * - Backend: Den smarta logiken som gör att allt fungerar\n   * - UX: Konsten att göra allt intuitivt och användarvänligt\n   */\n  const myTeamSkillAreas = [\"frontend\", \"backend\", \"ux\"];\n\n  /**\n   * Hook för teamhantering\n   *\n   * Hanterar all data och funktionalitet relaterad till teammedlemmar:\n   * - Medlemslista\n   * - Laddningsstatus\n   * - Felhantering\n   * - CRUD-operationer för medlemmar\n   */\n  const {\n    members,\n    loading: membersLoading,\n    error: membersError,\n    addMember,\n    deleteMember,\n  } = useMembers();\n\n  /**\n   * Optimerad uppgiftshantering\n   *\n   * Förbättringar: memoization, query-optimering, caching.\n   */\n  const {\n    tasks,\n    loading: tasksLoading,\n    error: tasksError,\n    addTask,\n    deleteTask,\n    updateTaskStatus,\n    assignTask,\n  } = useOptimizedTasks({\n    realtime: true, // Realtidsuppdateringar\n    limit: 100, // Begränsa för prestanda\n  });\n\n  /**\n   * Min personliga notifikationsassistent\n   *\n   * Som en vänlig kollega som tipsar om vad som händer i appen.\n   * Dyker upp, säger sitt, och försvinner diskret efter 5 sekunder.\n   *\n   * @param {string} message - Vad som ska sägas till användaren\n   * @param {string} type - Känslan i meddelandet (info, success, error)\n   */\n  const tellUserWhatHappened = (message, type = \"info\") => {\n    // Visa meddelandet för användaren\n    setNotification({ message, type });\n\n    // Försvinn automatiskt så användaren slipper stänga manuellt\n    setTimeout(() => {\n      setNotification(null);\n    }, 5000);\n  };\n\n  /**\n   * Hanterar tillägg av teammedlem\n   *\n   * Lägger till en ny medlem och visar feedback om resultatet.\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   *\n   * @param {Object} memberData - Medlemsdata från formuläret\n   */\n  const welcomeNewTeammate = useCallback(\n    async (memberData) => {\n      // Lägg till den nya personen i teamet\n      const result = await addMember(memberData);\n\n      // Berätta för användaren hur det gick\n      if (result.success) {\n        tellUserWhatHappened(\n          `Välkommen ${memberData.name} till teamet! 🎉`,\n          \"success\"\n        );\n      } else {\n        tellUserWhatHappened(\n          `Kunde inte lägga till ${memberData.name}: ${result.error}`,\n          \"error\"\n        );\n      }\n    },\n    [addMember]\n  );\n\n  /**\n   * Hanterar borttagning av teammedlem\n   *\n   * Tar bort en medlem och visar feedback om resultatet.\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   *\n   * @param {string} memberId - ID för medlemmen som ska tas bort\n   */\n  const sayGoodbyeToTeammate = useCallback(\n    async (memberId) => {\n      // Ta bort personen från teamet\n      const result = await deleteMember(memberId);\n\n      // Meddela användaren vad som hände\n      if (result.success) {\n        tellUserWhatHappened(\"Teammedlem har lämnat projektet.\", \"success\");\n      } else {\n        tellUserWhatHappened(\n          `Kunde inte ta bort teammedlem: ${result.error}`,\n          \"error\"\n        );\n      }\n    },\n    [deleteMember]\n  );\n\n  /**\n   * Hanterar tillägg av uppgift\n   *\n   * Lägger till en ny uppgift och visar feedback om resultatet.\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   *\n   * @param {Object} taskData - Uppgiftsdata från formuläret\n   */\n  const createNewWorkItem = useCallback(\n    async (taskData) => {\n      // Skapa en ny uppgift i systemet\n      const result = await addTask(taskData);\n\n      // Berätta för användaren vad som hände\n      if (result.success) {\n        tellUserWhatHappened(\n          `Ny uppgift \"${taskData.title}\" är redo att tacklas! 💪`,\n          \"success\"\n        );\n      } else {\n        tellUserWhatHappened(\n          `Kunde inte skapa uppgift: ${result.error}`,\n          \"error\"\n        );\n      }\n    },\n    [addTask]\n  );\n\n  /**\n   * Hanterar statusändring för uppgift\n   *\n   * Uppdaterar en uppgifts status och visar feedback om resultatet.\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   *\n   * @param {string} taskId - Uppgiftens ID\n   * @param {string} newStatus - Ny status (Nytt/Pågående/Klar)\n   */\n  const moveTaskToNewColumn = useCallback(\n    async (taskId, newStatus) => {\n      // Flytta uppgiften till rätt kolumn på tavlan\n      const result = await updateTaskStatus(taskId, newStatus);\n\n      // Låt användaren veta vad som hände\n      if (result.success) {\n        tellUserWhatHappened(\n          `Uppgift flyttad till \"${newStatus}\" - bra jobbat! 🎯`,\n          \"success\"\n        );\n      } else {\n        tellUserWhatHappened(\n          `Kunde inte flytta uppgift: ${result.error}`,\n          \"error\"\n        );\n      }\n    },\n    [updateTaskStatus]\n  );\n\n  /**\n   * Hanterar tilldelning av uppgift\n   *\n   * Tilldelar en uppgift till en teammedlem eller tar bort tilldelning.\n   * Visar feedback om resultatet.\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   *\n   * @param {string} taskId - Uppgiftens ID\n   * @param {string|null} memberId - Medlemmens ID eller null\n   * @param {string|null} memberName - Medlemmens namn för visning\n   */\n  const assignWorkToTeammate = useCallback(\n    async (taskId, memberId, memberName) => {\n      // Ge uppgiften till rätt person i teamet\n      const result = await assignTask(taskId, memberId, memberName);\n\n      // Berätta vad som hände\n      if (result.success) {\n        if (memberId) {\n          tellUserWhatHappened(\n            `${memberName} tar nu hand om uppgiften! 👍`,\n            \"success\"\n          );\n        } else {\n          tellUserWhatHappened(\n            \"Uppgiften är nu ledig för vem som helst.\",\n            \"info\"\n          );\n        }\n      } else {\n        tellUserWhatHappened(\n          `Kunde inte tilldela uppgift: ${result.error}`,\n          \"error\"\n        );\n      }\n    },\n    [assignTask]\n  );\n\n  /**\n   * Hanterar borttagning av uppgift\n   *\n   * Tar bort en uppgift permanent från databasen och\n   * visar feedback om resultatet.\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   *\n   * @param {string} taskId - Uppgiftens ID\n   */\n  const removeTaskCompletely = useCallback(\n    async (taskId) => {\n      // Ta bort uppgiften helt från systemet\n      const result = await deleteTask(taskId);\n\n      // Meddela användaren resultatet\n      if (result.success) {\n        tellUserWhatHappened(\n          \"Uppgift borttagen - som om den aldrig funnits! ✨\",\n          \"success\"\n        );\n      } else {\n        tellUserWhatHappened(\n          `Kunde inte ta bort uppgift: ${result.error}`,\n          \"error\"\n        );\n      }\n    },\n    [deleteTask]\n  );\n\n  /**\n   * Hanterar utloggning\n   *\n   * Städar upp efter anonyma användare och skickar alla tillbaka till login.\n   */\n  const handleLogout = async () => {\n    try {\n      // För anonyma användare: ta bort dem från Firebase först\n      if (currentUser?.isAnonymous) {\n        console.log(\"Städar upp anonym användare:\", currentUser.uid);\n\n        try {\n          const deleteResult = await deleteCurrentUser();\n          if (deleteResult.success) {\n            console.log(\"Användare borttagen! 🧹\");\n            navigate(\"/login\");\n            return;\n          } else {\n            // Om borttagning misslyckades, fortsätt med vanlig utloggning\n            console.warn(\"Kunde inte ta bort användaren:\", deleteResult.error);\n          }\n        } catch (error) {\n          console.error(\"Fel vid städning:\", error);\n        }\n      }\n\n      // Vanlig utloggning\n      const result = await logout();\n      if (result.success) {\n        navigate(\"/login\");\n      } else {\n        tellUserWhatHappened(\"Kunde inte logga ut. Försök igen.\", \"error\");\n      }\n    } catch (error) {\n      tellUserWhatHappened(\"Ett fel uppstod vid utloggning.\", \"error\");\n    }\n  };\n\n  /**\n   * Visar felmeddelanden vid datahämtningsfel\n   *\n   * Övervakar felstatus och visar notifikationer när\n   * fel uppstår vid hämtning av data.\n   */\n  useEffect(() => {\n    // Berätta för användaren om något gick fel med teamdata\n    if (membersError) {\n      tellUserWhatHappened(\n        `Problem med att hämta teammedlemmar: ${membersError}`,\n        \"error\"\n      );\n    }\n\n    // Berätta för användaren om något gick fel med uppgiftsdata\n    if (tasksError) {\n      tellUserWhatHappened(\n        `Problem med att hämta uppgifter: ${tasksError}`,\n        \"error\"\n      );\n    }\n  }, [membersError, tasksError]); // Körs när fel uppstår\n\n  /**\n   * Renderar applikationens huvudgränssnitt\n   *\n   * Bygger upp UI med header, navigation, innehåll och notifikationer\n   */\n  return (\n    <div className=\"home-page\">\n      {/* Applikationens header med titel och användarinfo */}\n      <header className=\"app-header\">\n        <h1>Scrum Board</h1>\n\n        {/* Användarinfo och utloggningsknapp */}\n        <div className=\"user-controls\">\n          {currentUser?.isAnonymous ? (\n            <div className=\"user-profile\">\n              <div className=\"user-avatar\">\n                <UserIcon size={18} color=\"#3b82f6\" />\n              </div>\n              <div className=\"user-info\">\n                <span className=\"user-name\">Anonym användare</span>\n                <span className=\"user-status\">Temporär session</span>\n              </div>\n              <Button\n                onClick={handleLogout}\n                variant=\"outline\"\n                size=\"small\"\n                className=\"logout-button\"\n                iconRight={<LogoutIcon size={16} />}\n                aria-label=\"Logga ut\"\n              >\n                Avsluta\n              </Button>\n            </div>\n          ) : (\n            <div className=\"user-profile\">\n              <div className=\"user-avatar\">\n                <UserIcon size={18} color=\"#3b82f6\" />\n              </div>\n              <div className=\"user-info\">\n                <span className=\"user-name\">{currentUser?.email}</span>\n                <span className=\"user-status\">Inloggad</span>\n              </div>\n              <Button\n                onClick={handleLogout}\n                variant=\"outline\"\n                size=\"small\"\n                className=\"logout-button\"\n                iconRight={<LogoutIcon size={16} />}\n                aria-label=\"Logga ut\"\n              >\n                Logga ut\n              </Button>\n            </div>\n          )}\n        </div>\n      </header>\n\n      {/* Fliknavigation för att växla mellan olika vyer */}\n      <nav className=\"app-tabs\" aria-label=\"Application Navigation\">\n        {/* Board-fliken (kanban-vy) */}\n        <button\n          className={`tab-button ${activeTab === \"board\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveTab(\"board\")}\n          aria-selected={activeTab === \"board\"}\n          role=\"tab\"\n        >\n          Board\n        </button>\n\n        {/* Uppgifter-fliken (listvy med filter och sortering) */}\n        <button\n          className={`tab-button ${activeTab === \"tasks\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveTab(\"tasks\")}\n          aria-selected={activeTab === \"tasks\"}\n          role=\"tab\"\n        >\n          Uppgifter\n        </button>\n\n        {/* Team-fliken (hantering av teammedlemmar) */}\n        <button\n          className={`tab-button ${activeTab === \"members\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveTab(\"members\")}\n          aria-selected={activeTab === \"members\"}\n          role=\"tab\"\n        >\n          Team\n        </button>\n      </nav>\n\n      {/* Huvudinnehållsområde som visar olika komponenter baserat på aktiv flik */}\n      <main className=\"app-content\" role=\"tabpanel\" aria-live=\"polite\">\n        {/* Scrum Board-vyn (kanban-vy med kolumner) */}\n        {activeTab === \"board\" && (\n          <ScrumBoard\n            tasks={tasks}\n            members={members}\n            onAddTask={createNewWorkItem}\n            onUpdateTaskStatus={moveTaskToNewColumn}\n            onAssignTask={assignWorkToTeammate}\n            onDeleteTask={removeTaskCompletely}\n            categories={myTeamSkillAreas}\n            isLoading={tasksLoading || membersLoading}\n          />\n        )}\n\n        {/* Uppgiftslista med filter och sortering */}\n        {activeTab === \"tasks\" && (\n          <TaskList\n            tasks={tasks}\n            members={members}\n            onAddTask={createNewWorkItem}\n            onUpdateTaskStatus={moveTaskToNewColumn}\n            onAssignTask={assignWorkToTeammate}\n            onDeleteTask={removeTaskCompletely}\n            categories={myTeamSkillAreas}\n            isLoading={tasksLoading || membersLoading}\n          />\n        )}\n\n        {/* Teammedlemslista */}\n        {activeTab === \"members\" && (\n          <MemberList\n            members={members}\n            onAddMember={welcomeNewTeammate}\n            onDeleteMember={sayGoodbyeToTeammate}\n            roles={myTeamSkillAreas}\n            isLoading={membersLoading}\n          />\n        )}\n      </main>\n\n      {/* Notifikationssystem som visar feedback till användaren */}\n      {notification && (\n        <Notification\n          message={notification.message}\n          type={notification.type}\n          onClose={() => setNotification(null)}\n        />\n      )}\n\n      {/* Verktyg för att fylla databasen med exempeldata (alltid synligt för felsökning) */}\n      <DatabaseSeeder onSuccess={tellUserWhatHappened} />\n    </div>\n  );\n};\n\nexport default HomePage;\n","// src/components/Board/ScrumBoard.jsx\n/**\n * Min digitala kanban-tavla - hjärtat i hela appen!\n *\n * Som en fysisk whiteboard fast bättre - här ser du alla uppgifter\n * sorterade i tre kolumner som visar exakt var allt befinner sig.\n * Uppdateras live så alla i teamet ser samma sak samtidigt.\n *\n * Varför jag älskar den här tavlan:\n * - Ser direkt vad som händer i projektet (inga överraskningar!)\n * - Upptäcker flaskhalsar innan de blir problem\n * - Perfekt för morgonmöten - \"vad gör vi idag?\"\n * - Alla förstår läget utan långa förklaringar\n */\nimport React, { useState, memo, useMemo, useCallback } from \"react\";\nimport TaskCard from \"../Tasks/TaskCard.jsx\";\nimport Button from \"../UI/Button.jsx\";\nimport Modal from \"../UI/Modal.jsx\";\nimport AddTaskForm from \"../Tasks/AddTaskForm.jsx\";\nimport { filterByStatus, filterOutArchived } from \"../../utils/filterUtils.jsx\";\nimport \"../../styles/components/ScrumBoard.css\";\n\nconst ScrumBoard = ({\n  tasks,\n  members,\n  onAddTask,\n  onUpdateTaskStatus,\n  onAssignTask,\n  onDeleteTask,\n  categories = [\"frontend\", \"backend\", \"ux\"],\n  isLoading = false,\n}) => {\n  const [showingAddTaskForm, setShowingAddTaskForm] = useState(false);\n\n  /**\n   * Sorterar uppgifter i kolumner\n   *\n   * OPTIMERING: Memoizerad för bättre prestanda\n   */\n  const { freshTasks, ongoingWork, finishedStuff } = useMemo(() => {\n    // Ta bort arkiverade uppgifter\n    const activeWorkItems = filterOutArchived(tasks);\n\n    // Sortera i tre kolumner\n    return {\n      freshTasks: filterByStatus(activeWorkItems, \"Nytt\"),\n      ongoingWork: filterByStatus(activeWorkItems, \"Pågående\"),\n      finishedStuff: filterByStatus(activeWorkItems, \"Klar\"),\n    };\n  }, [tasks]);\n\n  // När någon skapar en ny uppgift\n  // OPTIMERING: Memoizerad callback för bättre prestanda\n  const createTaskAndCloseForm = useCallback(\n    (taskData) => {\n      onAddTask(taskData); // Skicka upp till huvudappen\n      setShowingAddTaskForm(false); // Stäng formuläret\n    },\n    [onAddTask]\n  );\n\n  return (\n    <div className=\"scrum-board-container\">\n      <div className=\"board-header\">\n        <h2>Scrum Board</h2>\n        <Button onClick={() => setShowingAddTaskForm(true)} variant=\"primary\">\n          Lägg till uppgift\n        </Button>\n      </div>\n\n      {isLoading ? (\n        <div className=\"loading-indicator\">\n          <span>Laddar uppgifter</span>\n        </div>\n      ) : (\n        <div className=\"board-columns\">\n          <div className=\"board-column\">\n            <div className=\"column-header\">\n              <h3>Nya uppgifter</h3>\n              <span className=\"task-count\">{freshTasks.length}</span>\n            </div>\n            <div className=\"column-content\">\n              {freshTasks.length === 0 ? (\n                <div className=\"empty-column\">\n                  <p>Inga nya uppgifter</p>\n                  <Button\n                    onClick={() => setShowingAddTaskForm(true)}\n                    variant=\"secondary\"\n                    size=\"small\"\n                  >\n                    Lägg till uppgift\n                  </Button>\n                </div>\n              ) : (\n                freshTasks.map((task) => (\n                  <TaskCard\n                    key={task.id}\n                    task={task}\n                    members={members}\n                    onUpdateStatus={onUpdateTaskStatus}\n                    onAssignTask={onAssignTask}\n                    onDeleteTask={onDeleteTask}\n                  />\n                ))\n              )}\n            </div>\n          </div>\n\n          <div className=\"board-column\">\n            <div className=\"column-header\">\n              <h3>Pågående</h3>\n              <span className=\"task-count\">{ongoingWork.length}</span>\n            </div>\n            <div className=\"column-content\">\n              {ongoingWork.length === 0 ? (\n                <div className=\"empty-column\">\n                  <p>Inga pågående uppgifter</p>\n                </div>\n              ) : (\n                ongoingWork.map((task) => (\n                  <TaskCard\n                    key={task.id}\n                    task={task}\n                    members={members}\n                    onUpdateStatus={onUpdateTaskStatus}\n                    onAssignTask={onAssignTask}\n                    onDeleteTask={onDeleteTask}\n                  />\n                ))\n              )}\n            </div>\n          </div>\n\n          <div className=\"board-column\">\n            <div className=\"column-header\">\n              <h3>Klara</h3>\n              <span className=\"task-count\">{finishedStuff.length}</span>\n            </div>\n            <div className=\"column-content\">\n              {finishedStuff.length === 0 ? (\n                <div className=\"empty-column\">\n                  <p>Inga klara uppgifter</p>\n                </div>\n              ) : (\n                finishedStuff.map((task) => (\n                  <TaskCard\n                    key={task.id}\n                    task={task}\n                    members={members}\n                    onUpdateStatus={onUpdateTaskStatus}\n                    onAssignTask={onAssignTask}\n                    onDeleteTask={onDeleteTask}\n                  />\n                ))\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Modal för att lägga till nya uppgifter */}\n      <Modal\n        isOpen={showingAddTaskForm}\n        onClose={() => setShowingAddTaskForm(false)}\n        title=\"Lägg till uppgift\"\n      >\n        <AddTaskForm\n          onAddTask={createTaskAndCloseForm}\n          categories={categories}\n        />\n      </Modal>\n    </div>\n  );\n};\n\n// OPTIMERING: Memoizerad komponent för att undvika onödiga re-renders\nexport default memo(ScrumBoard);\n","// src/components/Tasks/TaskCard.jsx\nimport React, { useState, memo, useMemo, useCallback } from \"react\";\nimport Button from \"../UI/Button.jsx\";\nimport Modal from \"../UI/Modal.jsx\";\nimport { formatDate, formatRelativeTime } from \"../../utils/dateUtils.jsx\";\nimport \"../../styles/components/TaskCard.css\";\n\n/**\n * Uppgiftskort - visuell representation av en uppgift\n *\n * Visar en uppgift som ett interaktivt kort med all relevant information.\n * Fungerar som en digital post-it med möjlighet att:\n * - Visa uppgiftens status, kategori och tilldelning\n * - Öppna detaljvy med fullständig information\n * - Ändra status (flytta mellan kolumner)\n * - Tilldela uppgiften till rätt teammedlem\n * - Ta bort uppgiften från systemet\n *\n * @param {Object} task - Uppgiftsdata att visa\n * @param {Array} members - Tillgängliga teammedlemmar\n * @param {Function} onUpdateStatus - Callback för statusändring\n * @param {Function} onAssignTask - Callback för tilldelning\n * @param {Function} onDeleteTask - Callback för borttagning\n */\nconst TaskCard = ({\n  task,\n  members,\n  onUpdateStatus,\n  onAssignTask,\n  onDeleteTask,\n}) => {\n  // States för modal och tilldelning\n  const [showingTaskDetails, setShowingTaskDetails] = useState(false);\n  const [askingForDeleteConfirmation, setAskingForDeleteConfirmation] =\n    useState(false);\n  const [chosenTeammateId, setChosenTeammateId] = useState(\"\");\n\n  /**\n   * Hittar personer med rätt kompetens\n   *\n   * OPTIMERING: Memoizerad för bättre prestanda\n   */\n  const qualifiedTeammates = useMemo(\n    () => members.filter((teammate) => teammate.role === task.category),\n    [members, task.category]\n  );\n\n  /**\n   * Min färgkodning för var uppgiften befinner sig\n   *\n   * Som trafikljus för arbetsflödet - blått för \"vänta\",\n   * orange för \"kör\", grönt för \"klart\". Enkelt att förstå!\n   */\n  const getWorkflowColor = (status) => {\n    switch (status.toLowerCase()) {\n      case \"nytt\":\n        return \"status-new\";\n      case \"pågående\":\n        return \"status-in-progress\";\n      case \"klar\":\n        return \"status-completed\";\n      default:\n        return \"\";\n    }\n  };\n\n  /**\n   * Min färgkodning för olika typer av arbete\n   *\n   * Varje kompetensområde får sin egen färg så man snabbt\n   * ser vad som är vad på tavlan. Som att sortera LEGO!\n   */\n  const getSkillAreaColor = (category) => {\n    switch (category.toLowerCase()) {\n      case \"frontend\":\n        return \"category-frontend\";\n      case \"backend\":\n        return \"category-backend\";\n      case \"ux\":\n        return \"category-ux\";\n      default:\n        return \"category-default\";\n    }\n  };\n\n  /**\n   * Flyttar uppgiften framåt i arbetsflödet\n   *\n   * Som att trycka på \"nästa\"-knappen i en process.\n   * Stänger också detaljvyn så man ser resultatet direkt.\n   *\n   * OPTIMERING: Memoizerad callback för att undvika onödiga re-renders\n   */\n  const moveTaskForward = useCallback(\n    (newStatus) => {\n      onUpdateStatus(task.id, newStatus);\n      setShowingTaskDetails(false);\n    },\n    [onUpdateStatus, task.id]\n  );\n\n  /**\n   * Ger jobbet till rätt person\n   *\n   * Hittar den valda personen och säger \"det här är ditt nu!\".\n   * Stänger sedan detaljvyn så man ser förändringen.\n   *\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   */\n  const giveTaskToChosen = useCallback(() => {\n    if (!chosenTeammateId) return;\n\n    const chosenPerson = members.find((m) => m.id === chosenTeammateId);\n    if (chosenPerson) {\n      onAssignTask(task.id, chosenPerson.id, chosenPerson.name);\n      setShowingTaskDetails(false);\n    }\n  }, [chosenTeammateId, members, onAssignTask, task.id]);\n\n  /**\n   * Raderar uppgiften för alltid\n   *\n   * Som att kasta något i papperskorgen och tömma den.\n   * Stänger alla öppna fönster efteråt.\n   *\n   * OPTIMERING: Memoizerad callback för bättre prestanda\n   */\n  const eraseTaskForever = useCallback(() => {\n    onDeleteTask(task.id);\n    setAskingForDeleteConfirmation(false);\n    setShowingTaskDetails(false);\n  }, [onDeleteTask, task.id]);\n\n  /**\n   * Renderar uppgiftskortet med alla dess komponenter\n   *\n   * Består av tre huvuddelar:\n   * - Kompakt kort för visning på tavlan\n   * - Detaljmodal med fullständig information\n   * - Bekräftelsemodal för borttagning\n   */\n  return (\n    <>\n      {/* Det lilla kortet på tavlan - klicka för att se mer! */}\n      <div className=\"task-card\" onClick={() => setShowingTaskDetails(true)}>\n        {/* Status och typ visas högst upp med färgkodning */}\n        <div className=\"task-header\">\n          <span className={`task-status ${getWorkflowColor(task.status)}`}>\n            {task.status}\n          </span>\n          <span className={`task-category ${getSkillAreaColor(task.category)}`}>\n            {task.category}\n          </span>\n        </div>\n\n        {/* Vad uppgiften handlar om - i stora bokstäver */}\n        <h3 className=\"task-title\">{task.title}</h3>\n\n        {/* Kort beskrivning - kapar texten om den är för lång */}\n        {task.description && (\n          <p className=\"task-description\">\n            {task.description.length > 100\n              ? `${task.description.substring(0, 100)}...`\n              : task.description}\n          </p>\n        )}\n\n        {/* Vem som gör uppgiften och när den skapades */}\n        <div className=\"task-meta\">\n          {/* Vem jobbar med detta? Eller är det ledigt? */}\n          {task.assignedToMemberName ? (\n            <div className=\"task-assigned\">\n              <span className=\"meta-label\">Tilldelad:</span>\n              <span className=\"meta-value\">{task.assignedToMemberName}</span>\n            </div>\n          ) : (\n            <div className=\"task-assigned\">\n              <span className=\"meta-label\">Tilldelad:</span>\n              <span className=\"meta-value not-assigned\">Ej tilldelad</span>\n            </div>\n          )}\n\n          {/* När skapades uppgiften? Visar \"2 dagar sedan\" istället för exakt datum */}\n          <div className=\"task-created\">\n            <span className=\"meta-label\">Skapad:</span>\n            <span\n              className=\"meta-value\"\n              title={formatDate(task.creationTimestamp)}\n            >\n              {formatRelativeTime(task.creationTimestamp)}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Stor popup med alla detaljer och knappar */}\n      <Modal\n        isOpen={showingTaskDetails}\n        onClose={() => setShowingTaskDetails(false)}\n        title={task.title}\n        size=\"medium\"\n        footer={\n          <>\n            {/* Ta bort-knappen (öppnar en \"är du säker?\"-ruta) */}\n            <Button\n              onClick={() => setAskingForDeleteConfirmation(true)}\n              variant=\"danger\"\n            >\n              Ta bort\n            </Button>\n\n            {/* Tomt utrymme som trycker isär knapparna */}\n            <div style={{ flex: 1 }}></div>\n\n            {/* \"Klar\"-knappen visas bara om uppgiften inte redan är klar */}\n            {task.status !== \"Klar\" && (\n              <Button onClick={() => moveTaskForward(\"Klar\")} variant=\"success\">\n                Markera som klar\n              </Button>\n            )}\n\n            {/* \"Starta\"-knappen visas bara för nya uppgifter */}\n            {task.status === \"Nytt\" && (\n              <Button\n                onClick={() => moveTaskForward(\"Pågående\")}\n                variant=\"primary\"\n              >\n                Starta uppgift\n              </Button>\n            )}\n          </>\n        }\n      >\n        <div className=\"task-details\">\n          {/* Var är uppgiften i flödet? */}\n          <div className=\"task-detail-row\">\n            <span className=\"detail-label\">Status:</span>\n            <span\n              className={`detail-value task-status ${getWorkflowColor(\n                task.status\n              )}`}\n            >\n              {task.status}\n            </span>\n          </div>\n\n          {/* Vilken typ av uppgift? */}\n          <div className=\"task-detail-row\">\n            <span className=\"detail-label\">Kategori:</span>\n            <span\n              className={`detail-value task-category ${getSkillAreaColor(\n                task.category\n              )}`}\n            >\n              {task.category}\n            </span>\n          </div>\n\n          {/* När skapades uppgiften? */}\n          <div className=\"task-detail-row\">\n            <span className=\"detail-label\">Skapad:</span>\n            <span className=\"detail-value\">\n              {formatDate(task.creationTimestamp)}\n            </span>\n          </div>\n\n          {/* Detaljerad beskrivning av vad som ska göras */}\n          {task.description && (\n            <div className=\"task-detail-description\">\n              <h4>Beskrivning</h4>\n              <p>{task.description}</p>\n            </div>\n          )}\n\n          {/* Vem ska göra jobbet? */}\n          <div className=\"task-assignment\">\n            <h4>Tilldelning</h4>\n\n            {/* Redan tilldelad? Visa vem och ge möjlighet att ändra */}\n            {task.assignedToMemberName ? (\n              <div className=\"current-assignment\">\n                <p>\n                  Denna uppgift är tilldelad till:{\" \"}\n                  <strong>{task.assignedToMemberName}</strong>\n                </p>\n                <Button\n                  onClick={() => onAssignTask(task.id, null, null)}\n                  variant=\"secondary\"\n                  size=\"small\"\n                >\n                  Ta bort tilldelning\n                </Button>\n              </div>\n            ) : (\n              /* Inte tilldelad? Visa formulär för att välja person */\n              <div className=\"assignment-form\">\n                {/* Lista med personer som har rätt kompetens för jobbet */}\n                {qualifiedTeammates.length > 0 ? (\n                  <>\n                    <p>\n                      Tilldela denna {task.category}-uppgift till en teammedlem\n                      med matchande roll:\n                    </p>\n                    <div className=\"assignment-controls\">\n                      <select\n                        value={chosenTeammateId}\n                        onChange={(e) => setChosenTeammateId(e.target.value)}\n                      >\n                        <option value=\"\">Välj teammedlem</option>\n                        {qualifiedTeammates.map((teammate) => (\n                          <option key={teammate.id} value={teammate.id}>\n                            {teammate.name}\n                          </option>\n                        ))}\n                      </select>\n                      <Button\n                        onClick={giveTaskToChosen}\n                        variant=\"primary\"\n                        disabled={!chosenTeammateId}\n                      >\n                        Tilldela\n                      </Button>\n                    </div>\n                  </>\n                ) : (\n                  /* Inga personer med rätt kompetens? Visa ett meddelande */\n                  <p className=\"no-eligible-members\">\n                    Det finns inga teammedlemmar med rollen {task.category} som\n                    kan tilldelas denna uppgift.\n                  </p>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </Modal>\n\n      {/* \"Är du säker?\"-rutan för borttagning */}\n      <Modal\n        isOpen={askingForDeleteConfirmation}\n        onClose={() => setAskingForDeleteConfirmation(false)}\n        title=\"Bekräfta borttagning\"\n        footer={\n          <>\n            <Button\n              onClick={() => setAskingForDeleteConfirmation(false)}\n              variant=\"secondary\"\n            >\n              Avbryt\n            </Button>\n            <Button onClick={eraseTaskForever} variant=\"danger\">\n              Ta bort\n            </Button>\n          </>\n        }\n      >\n        <p>\n          Är du säker på att du vill ta bort uppgiften \"{task.title}\"? Uppgiften\n          kommer att tas bort permanent från databasen och kan inte återställas.\n        </p>\n      </Modal>\n    </>\n  );\n};\n\n// OPTIMERING: Memoizerad komponent för att undvika onödiga re-renders\n// Komponenten renderas bara om när props faktiskt ändras\nexport default memo(TaskCard);\n","// src/components/UI/Button.jsx\nimport React from \"react\";\nimport \"../../styles/components/Button.css\";\n\n/**\n * Universell knappkomponent 🔘\n *\n * Flexibel knapp med olika stilar och storlekar.\n * Stöder ikoner och fullbredd.\n *\n * @param {ReactNode} children - Knapptext\n * @param {Function} onClick - Klick-hanterare\n * @param {string} type - HTML-typ\n * @param {string} variant - Stil (primary/secondary/danger)\n * @param {string} size - Storlek (small/medium/large)\n * @param {boolean} disabled - Inaktiverad\n * @param {boolean} fullWidth - Full bredd\n * @param {ReactNode} iconLeft - Vänster ikon\n * @param {ReactNode} iconRight - Höger ikon\n * @param {string} className - Extra CSS-klasser\n */\nconst Button = ({\n  children,\n  onClick,\n  type = \"button\",\n  variant = \"primary\",\n  size = \"medium\",\n  disabled = false,\n  fullWidth = false,\n  iconLeft = null,\n  iconRight = null,\n  className = \"\",\n}) => {\n  // Kontrollerar om ikoner finns\n  const hasIcon = iconLeft || iconRight;\n\n  // Bygger CSS-klasser\n  const buttonClasses = `\n    button\n    button-${variant}\n    button-${size}\n    ${fullWidth ? \"button-full-width\" : \"\"}\n    ${hasIcon ? \"button-with-icon\" : \"\"}\n    ${className}\n  `\n    .trim()\n    .replace(/\\s+/g, \" \");\n\n  return (\n    <button\n      type={type}\n      className={buttonClasses}\n      onClick={onClick}\n      disabled={disabled}\n      aria-disabled={disabled} // För skärmläsare\n    >\n      {/* Vänster ikon */}\n      {iconLeft && <span className=\"button-icon-left\">{iconLeft}</span>}\n\n      {/* Knapptext */}\n      {children}\n\n      {/* Höger ikon */}\n      {iconRight && <span className=\"button-icon-right\">{iconRight}</span>}\n    </button>\n  );\n};\n\nexport default Button;\n","// src/components/UI/Modal.jsx\n/**\n * Återanvändbar modalkomponent\n *\n * Flexibel dialog med React Portal.\n * Stöder olika storlekar, Escape-stängning,\n * förhindrar bakgrundsscrollning.\n */\nimport React, { useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"../../styles/components/Modal.css\";\nimport Button from \"./Button.jsx\";\n\nconst Modal = ({\n  isOpen,\n  onClose,\n  title,\n  children,\n  footer,\n  size = \"medium\",\n}) => {\n  /**\n   * Hanterar Escape-tangent och scrollning\n   */\n  useEffect(() => {\n    // Stäng med Escape\n    const handleEscape = (e) => {\n      if (e.key === \"Escape\" && isOpen) {\n        onClose();\n      }\n    };\n\n    // Registrera event-lyssnare\n    window.addEventListener(\"keydown\", handleEscape);\n\n    // Förhindra bakgrundsscrollning\n    if (isOpen) {\n      document.body.style.overflow = \"hidden\";\n    }\n\n    // Städa upp vid avmontering\n    return () => {\n      window.removeEventListener(\"keydown\", handleEscape);\n      document.body.style.overflow = \"auto\";\n    };\n  }, [isOpen, onClose]);\n\n  if (!isOpen) return null;\n\n  /**\n   * Förhindrar bubbling av klickhändelser\n   */\n  const handleModalClick = (e) => {\n    e.stopPropagation();\n  };\n\n  // React Portal för korrekt rendering\n  return ReactDOM.createPortal(\n    <div className=\"modal-overlay\" onClick={onClose}>\n      {/* Modal-container */}\n      <div className={`modal modal-${size}`} onClick={handleModalClick}>\n        {/* Header */}\n        <div className=\"modal-header\">\n          <h2 className=\"modal-title\">{title}</h2>\n          <button className=\"modal-close\" onClick={onClose} aria-label=\"Stäng\">\n            ×\n          </button>\n        </div>\n\n        {/* Innehåll */}\n        <div className=\"modal-content\">{children}</div>\n\n        {/* Footer */}\n        {footer && <div className=\"modal-footer\">{footer}</div>}\n      </div>\n    </div>,\n    document.body // Renderar i body för korrekt z-index\n  );\n};\n\nexport default Modal;\n","// src/utils/dateUtils.jsx\n// Använder en enklare approach för att undvika Parcel-problem med date-fns\n\n/**\n * Tidsfunktioner för användarvänliga datum\n *\n * Gör tidsstämplar begripliga med snygga format\n * och relativa texter som \"2 timmar sedan\".\n */\n\n/**\n * Formaterar tidsstämpel till läsbart datum\n *\n * @param {number} timestamp - Tidsstämpel\n * @returns {string} Format: \"2025-05-15 14:30\"\n */\nexport const formatDate = (timestamp) => {\n  // Ingen tidsstämpel? Returnera tom sträng\n  if (!timestamp) return \"\";\n\n  // Skapa Date-objekt och formatera\n  const date = new Date(timestamp);\n\n  // Formatera med svenska format\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n  const hours = String(date.getHours()).padStart(2, \"0\");\n  const minutes = String(date.getMinutes()).padStart(2, \"0\");\n\n  return `${year}-${month}-${day} ${hours}:${minutes}`;\n};\n\n/**\n * Visar relativ tid sedan händelse\n *\n * @param {number} timestamp - Tidsstämpel\n * @returns {string} Text som \"2 dagar sedan\" eller \"Just nu\"\n */\nexport const formatRelativeTime = (timestamp) => {\n  // Ingen tidsstämpel? Returnera tom sträng\n  if (!timestamp) return \"\";\n\n  // Beräkna tidsskillnad\n  const now = Date.now();\n  const diff = now - timestamp;\n\n  // Konvertera till läsbara enheter\n  const minutes = Math.floor(diff / 60000);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  // Välj lämplig text\n  if (days > 0) {\n    // Singular/plural för dagar\n    return `${days} ${days === 1 ? \"dag\" : \"dagar\"} sedan`;\n  } else if (hours > 0) {\n    // Singular/plural för timmar\n    return `${hours} ${hours === 1 ? \"timme\" : \"timmar\"} sedan`;\n  } else if (minutes > 0) {\n    // Singular/plural för minuter\n    return `${minutes} ${minutes === 1 ? \"minut\" : \"minuter\"} sedan`;\n  } else {\n    // Mycket nyligen\n    return \"Just nu\";\n  }\n};\n","// src/components/Tasks/AddTaskForm.jsx\n/**\n * Formulär för att skapa nya uppgifter\n *\n * Hanterar inmatning och validering av uppgiftsdata med:\n * - Obligatorisk titel för att identifiera uppgiften\n * - Val av kategori (frontend, backend, UX) för korrekt tilldelning\n * - Valfri beskrivning för ytterligare detaljer\n *\n * Validerar att nödvändiga fält är ifyllda innan uppgiften skapas\n * och skickas till Firebase via callback-funktionen.\n */\nimport React, { useState } from \"react\";\nimport Button from \"../UI/Button.jsx\";\nimport \"../../styles/components/AddTaskForm.css\";\n\nconst AddTaskForm = ({\n  onAddTask,\n  categories = [\"frontend\", \"backend\", \"ux\"],\n}) => {\n  const [title, setTitle] = useState(\"\");\n  const [category, setCategory] = useState(categories[0]);\n  const [description, setDescription] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  /**\n   * Hanterar formulärinlämning\n   *\n   * Processen vid inlämning:\n   * 1. Validerar obligatoriska fält (titel och kategori)\n   * 2. Skapar ett nytt uppgiftsobjekt med inmatad data\n   * 3. Skickar uppgiften till föräldrakomponenten och återställer formuläret\n   *\n   * @param {Event} e - Formulärets submit-event\n   */\n  const handleSubmit = (e) => {\n    // Stoppar webbläsaren från att ladda om sidan\n    e.preventDefault();\n\n    // Validera titel (obligatorisk)\n    if (!title.trim()) {\n      setError(\"Du måste ge uppgiften en titel!\");\n      return;\n    }\n\n    // Validera kategori (obligatorisk)\n    if (!category) {\n      setError(\"Du måste välja en kategori!\");\n      return;\n    }\n\n    // Skapa uppgiftsobjekt\n    const newTask = {\n      title: title.trim(),\n      category,\n      description: description.trim() || null,\n      assignedToMemberId: null,\n      assignedToMemberName: null,\n      // Tidsstämpel och status hanteras av hook\n    };\n\n    // Skicka till föräldrakomponent\n    onAddTask(newTask);\n\n    // Återställ formuläret\n    setTitle(\"\");\n    setCategory(categories[0]);\n    setDescription(\"\");\n    setError(\"\");\n  };\n\n  return (\n    <form className=\"add-task-form\" onSubmit={handleSubmit}>\n      {error && <div className=\"form-error\">{error}</div>}\n\n      <div className=\"form-group\">\n        <label htmlFor=\"title\">Titel *</label>\n        <input\n          type=\"text\"\n          id=\"title\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          placeholder=\"Ange uppgiftens titel\"\n          required\n        />\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"category\">Kategori *</label>\n        <select\n          id=\"category\"\n          value={category}\n          onChange={(e) => setCategory(e.target.value)}\n          required\n        >\n          {categories.map((categoryOption) => (\n            <option key={categoryOption} value={categoryOption}>\n              {categoryOption.charAt(0).toUpperCase() + categoryOption.slice(1)}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"description\">Beskrivning (valfritt)</label>\n        <textarea\n          id=\"description\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          placeholder=\"Beskriv uppgiften mer detaljerat\"\n          rows={4}\n        />\n      </div>\n\n      <div className=\"form-actions\">\n        <Button type=\"submit\" variant=\"primary\">\n          Lägg till\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nexport default AddTaskForm;\n","// src/utils/filterUtils.jsx\n\n/**\n * Filtreringsverktyg för uppgifter 🔍\n *\n * Hjälper dig hitta rätt uppgifter snabbt.\n * Filtrera på person, kategori eller status.\n */\n\n/**\n * Visar bara en persons uppgifter 👤\n *\n * @param {Array} tasks - Alla uppgifter\n * @param {string} memberId - Vilken person\n * @returns {Array} Personens uppgifter\n */\nexport const filterByMember = (tasks, memberId) => {\n  // Ingen person vald? Visa allt\n  if (!memberId || !Array.isArray(tasks) || tasks.length === 0) return tasks;\n\n  // Bara den personens uppgifter\n  return tasks.filter((task) => task?.assignedToMemberId === memberId);\n};\n\n/**\n * Visar bara en typ av uppgifter 🎨\n *\n * @param {Array} tasks - Alla uppgifter\n * @param {string} category - Vilken kategori (frontend/backend/ux)\n * @returns {Array} Uppgifter av den typen\n */\nexport const filterByCategory = (tasks, category) => {\n  // Ingen kategori vald? Visa allt\n  if (!category || !Array.isArray(tasks) || tasks.length === 0) return tasks;\n\n  // Bara den kategorin\n  return tasks.filter((task) => task?.category === category);\n};\n\n/**\n * Visar bara uppgifter med viss status 📋\n *\n * @param {Array} tasks - Alla uppgifter\n * @param {string} status - Vilken status (Nytt/Pågående/Klar)\n * @returns {Array} Uppgifter med den statusen\n */\nexport const filterByStatus = (tasks, status) => {\n  // Ingen status vald? Visa allt\n  if (!status || !Array.isArray(tasks) || tasks.length === 0) return tasks;\n\n  // Bara den statusen\n  return tasks.filter((task) => task?.status === status);\n};\n\n/**\n * Tar bort arkiverade uppgifter 🗑️\n *\n * Säkerhetsnät för gamla arkiverade uppgifter.\n *\n * @param {Array} tasks - Alla uppgifter\n * @returns {Array} Bara aktiva uppgifter\n */\nexport const filterOutArchived = (tasks) => {\n  // Inget att filtrera? Returnera som det är\n  if (!Array.isArray(tasks) || tasks.length === 0) return tasks;\n\n  // Bara aktiva uppgifter\n  return tasks.filter((task) => !task?.isArchived);\n};\n","// src/components/Tasks/TaskList.jsx\n/**\n * Smart uppgiftslista med filtrering 🔍\n *\n * Filtrera på person, kategori eller status.\n * Sortera som du vill. Lägg till nya uppgifter.\n */\nimport React, { useState, memo, useMemo, useCallback } from \"react\";\nimport Button from \"../UI/Button.jsx\";\nimport Modal from \"../UI/Modal.jsx\";\nimport TaskCard from \"./TaskCard.jsx\";\nimport AddTaskForm from \"./AddTaskForm.jsx\";\nimport {\n  filterByMember,\n  filterByCategory,\n  filterByStatus,\n  filterOutArchived,\n} from \"../../utils/filterUtils.jsx\";\nimport {\n  sortByNewest,\n  sortByOldest,\n  sortByTitleAsc,\n  sortByTitleDesc,\n} from \"../../utils/sortUtils.jsx\";\nimport \"../../styles/components/TaskList.css\";\n\nconst TaskList = ({\n  tasks,\n  members,\n  onAddTask,\n  onUpdateTaskStatus,\n  onAssignTask,\n  onDeleteTask,\n  categories = [\"frontend\", \"backend\", \"ux\"],\n  isLoading = false,\n}) => {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [filterMember, setFilterMember] = useState(\"\");\n  const [filterCategory, setFilterCategory] = useState(\"\");\n  const [filterStatus, setFilterStatus] = useState(\"\");\n  const [sortOption, setSortOption] = useState(\"newest\");\n\n  // SMART SORTERING: Bara räknar om när något faktiskt ändras (sparar prestanda)\n  const sortedTasks = useMemo(() => {\n    // Först filtrerar vi bort det vi inte vill se\n    const filteredTasks = filterOutArchived(tasks) // Städar bort gamla arkiverade\n      .filter(\n        (task) => !filterMember || task.assignedToMemberId === filterMember\n      ) // Bara en persons uppgifter?\n      .filter((task) => !filterCategory || task.category === filterCategory) // Bara en typ av uppgifter?\n      .filter((task) => !filterStatus || task.status === filterStatus); // Bara en status?\n\n    // Sen sorterar vi som användaren vill ha det\n    switch (sortOption) {\n      case \"newest\":\n        return sortByNewest(filteredTasks); // Nyast först (som Instagram)\n      case \"oldest\":\n        return sortByOldest(filteredTasks); // Äldst först (rättvist)\n      case \"titleAsc\":\n        return sortByTitleAsc(filteredTasks); // A-Ö (som telefonbok)\n      case \"titleDesc\":\n        return sortByTitleDesc(filteredTasks); // Ö-A (baklänges)\n      default:\n        return sortByNewest(filteredTasks); // Standard = nyast först\n    }\n  }, [tasks, filterMember, filterCategory, filterStatus, sortOption]);\n\n  /**\n   * Lägger till uppgift och stänger formuläret 📝\n   */\n  const handleAddTask = useCallback(\n    (taskData) => {\n      onAddTask(taskData);\n      setIsAddModalOpen(false);\n    },\n    [onAddTask]\n  );\n\n  /**\n   * Nollställer alla filter 🔄\n   */\n  const resetFilters = useCallback(() => {\n    setFilterMember(\"\");\n    setFilterCategory(\"\");\n    setFilterStatus(\"\");\n    setSortOption(\"newest\");\n  }, []);\n\n  return (\n    <div className=\"task-list-container\">\n      <div className=\"task-list-header\">\n        <h2>Uppgifter</h2>\n        <Button onClick={() => setIsAddModalOpen(true)} variant=\"primary\">\n          Lägg till uppgift\n        </Button>\n      </div>\n\n      <div className=\"task-filters\">\n        <div className=\"filter-group\">\n          <label htmlFor=\"filterMember\">Filtrera efter medlem:</label>\n          <select\n            id=\"filterMember\"\n            value={filterMember}\n            onChange={(e) => setFilterMember(e.target.value)}\n          >\n            <option value=\"\">Alla medlemmar</option>\n            {members.map((member) => (\n              <option key={member.id} value={member.id}>\n                {member.name}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"filter-group\">\n          <label htmlFor=\"filterCategory\">Filtrera efter kategori:</label>\n          <select\n            id=\"filterCategory\"\n            value={filterCategory}\n            onChange={(e) => setFilterCategory(e.target.value)}\n          >\n            <option value=\"\">Alla kategorier</option>\n            {categories.map((category) => (\n              <option key={category} value={category}>\n                {category.charAt(0).toUpperCase() + category.slice(1)}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"filter-group\">\n          <label htmlFor=\"filterStatus\">Filtrera efter status:</label>\n          <select\n            id=\"filterStatus\"\n            value={filterStatus}\n            onChange={(e) => setFilterStatus(e.target.value)}\n          >\n            <option value=\"\">Alla statusar</option>\n            <option value=\"Nytt\">Nytt</option>\n            <option value=\"Pågående\">Pågående</option>\n            <option value=\"Klar\">Klar</option>\n          </select>\n        </div>\n\n        <div className=\"filter-group\">\n          <label htmlFor=\"sortOption\">Sortera efter:</label>\n          <select\n            id=\"sortOption\"\n            value={sortOption}\n            onChange={(e) => setSortOption(e.target.value)}\n          >\n            <option value=\"newest\">Nyast först</option>\n            <option value=\"oldest\">Äldst först</option>\n            <option value=\"titleAsc\">Titel (A-Ö)</option>\n            <option value=\"titleDesc\">Titel (Ö-A)</option>\n          </select>\n        </div>\n\n        <Button onClick={resetFilters} variant=\"secondary\" size=\"small\">\n          Återställ filter\n        </Button>\n      </div>\n\n      {isLoading ? (\n        <div className=\"loading-indicator\">\n          <span>Laddar uppgifter</span>\n        </div>\n      ) : sortedTasks.length === 0 ? (\n        <div className=\"empty-state\">\n          <p>\n            Inga uppgifter hittades\n            {filterMember || filterCategory || filterStatus\n              ? \" med valda filter\"\n              : \"\"}\n            .\n          </p>\n          {filterMember || filterCategory || filterStatus ? (\n            <Button onClick={resetFilters} variant=\"secondary\">\n              Återställ filter\n            </Button>\n          ) : (\n            <Button onClick={() => setIsAddModalOpen(true)} variant=\"secondary\">\n              Lägg till din första uppgift\n            </Button>\n          )}\n        </div>\n      ) : (\n        <div className=\"task-grid\">\n          {sortedTasks.map((task) => (\n            <TaskCard\n              key={task.id}\n              task={task}\n              members={members}\n              onUpdateStatus={onUpdateTaskStatus}\n              onAssignTask={onAssignTask}\n              onDeleteTask={onDeleteTask}\n            />\n          ))}\n        </div>\n      )}\n\n      {/* Popup-fönster för att skapa nya uppgifter */}\n      <Modal\n        isOpen={isAddModalOpen}\n        onClose={() => setIsAddModalOpen(false)}\n        title=\"Lägg till uppgift\"\n      >\n        <AddTaskForm onAddTask={handleAddTask} categories={categories} />\n      </Modal>\n    </div>\n  );\n};\n\n// SMART KOMPONENT: Renderas bara om när något faktiskt ändrats (sparar prestanda)\nexport default memo(TaskList);\n","// src/utils/sortUtils.jsx\n\n/**\n * Sorteringsfunktioner för uppgifter 🔄\n *\n * Olika sätt att ordna uppgifter.\n * Alla funktioner skapar nya listor utan att ändra originalet.\n */\n\n/**\n * Sorterar nyast först 🆕\n *\n * @param {Array} tasks - Uppgifter att sortera\n * @returns {Array} Sorterad lista\n */\nexport const sortByNewest = (tasks) => {\n  // Kopia och sortering\n  return [...tasks].sort((a, b) => b.creationTimestamp - a.creationTimestamp);\n};\n\n/**\n * Äldst först! 👴\n *\n * \"First in, first out\" - som en kö på banken. Perfekt när du\n * vill beta av uppgifter i den ordning de kom in. Rättvist!\n *\n * @param {Array} tasks - Uppgifterna du vill sortera\n * @returns {Array} En ny lista med de äldsta först\n */\nexport const sortByOldest = (tasks) => {\n  // Gör en kopia först (säkert är säkert)\n  // Sen sorterar så det äldsta kommer först\n  return [...tasks].sort((a, b) => a.creationTimestamp - b.creationTimestamp);\n};\n\n/**\n * A till Ö 📚\n *\n * Som en telefonbok eller bibliotekskatalog! Perfekt när du\n * letar efter något och vet ungefär vad det heter. Funkar\n * fint med våra svenska å, ä, ö också.\n *\n * @param {Array} tasks - Uppgifterna du vill sortera\n * @returns {Array} En ny lista i alfabetisk ordning\n */\nexport const sortByTitleAsc = (tasks) => {\n  // Gör en kopia först (som alltid)\n  // Sen sorterar alfabetiskt (localeCompare fixar å, ä, ö)\n  return [...tasks].sort((a, b) => a.title.localeCompare(b.title));\n};\n\n/**\n * Ö till A (baklänges!) 🔄\n *\n * Ibland är det kul att vända på steken! Kanske ser man\n * mönster man annars missar? Eller bara för att det är kul.\n *\n * @param {Array} tasks - Uppgifterna du vill sortera\n * @returns {Array} En ny lista i omvänd bokstavsordning\n */\nexport const sortByTitleDesc = (tasks) => {\n  // Gör en kopia först (som en god vana)\n  // Sen sorterar baklänges, från Ö till A\n  return [...tasks].sort((a, b) => b.title.localeCompare(a.title));\n};\n","// src/components/Members/MemberList.jsx\n/**\n * Teamöversikt med medlemshantering\n *\n * Visar medlemmar med profilbild, namn och roll.\n * Lägg till och ta bort medlemmar med bekräftelse.\n */\nimport React, { useState } from \"react\";\nimport Button from \"../UI/Button.jsx\";\nimport Modal from \"../UI/Modal.jsx\";\nimport AddMemberForm from \"./AddMemberForm.jsx\";\nimport \"../../styles/components/MemberList.css\";\n\nconst MemberList = ({\n  members,\n  onAddMember,\n  onDeleteMember,\n  roles = [\"frontend\", \"backend\", \"ux\"],\n  isLoading = false,\n}) => {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [memberToDelete, setMemberToDelete] = useState(null);\n\n  /**\n   * Lägger till ny medlem och stänger modal\n   */\n  const handleAddMember = (memberData) => {\n    onAddMember(memberData);\n    setIsAddModalOpen(false);\n  };\n\n  /**\n   * Tar bort medlem efter bekräftelse\n   */\n  const handleConfirmDelete = () => {\n    if (memberToDelete) {\n      onDeleteMember(memberToDelete.id);\n      setMemberToDelete(null);\n    }\n  };\n\n  /**\n   * Returnerar CSS-klass baserat på medlemsroll\n   *\n   * Ger visuell färgkodning för olika roller:\n   * - Frontend: blå\n   * - Backend: grön\n   * - UX: lila\n   *\n   * @param {string} role - Medlemmens roll\n   * @returns {string} CSS-klassnamn för färgkodning\n   */\n  const getRoleColorClass = (role) => {\n    switch (role.toLowerCase()) {\n      case \"frontend\":\n        return \"role-frontend\";\n      case \"backend\":\n        return \"role-backend\";\n      case \"ux\":\n        return \"role-ux\";\n      default:\n        return \"role-default\";\n    }\n  };\n\n  return (\n    <div className=\"member-list-container\">\n      <div className=\"member-list-header\">\n        <h2>Teammedlemmar</h2>\n        <Button onClick={() => setIsAddModalOpen(true)} variant=\"primary\">\n          Lägg till medlem\n        </Button>\n      </div>\n\n      {isLoading ? (\n        <div className=\"loading-indicator\">\n          <span>Laddar teammedlemmar</span>\n        </div>\n      ) : members.length === 0 ? (\n        <div className=\"empty-state\">\n          <p>Inga teammedlemmar tillagda ännu.</p>\n          <Button onClick={() => setIsAddModalOpen(true)} variant=\"secondary\">\n            Lägg till din första teammedlem\n          </Button>\n        </div>\n      ) : (\n        <div className=\"member-grid\">\n          {members.map((member) => (\n            <div key={member.id} className=\"member-card\">\n              <div className=\"member-avatar\">\n                {member.avatar ? (\n                  <img src={member.avatar} alt={member.name} />\n                ) : (\n                  <div className=\"member-initials\">\n                    {member.name\n                      .split(\" \")\n                      .map((n) => n[0])\n                      .join(\"\")}\n                  </div>\n                )}\n              </div>\n              <div className=\"member-info\">\n                <h3 className=\"member-name\">{member.name}</h3>\n                <span\n                  className={`member-role ${getRoleColorClass(member.role)}`}\n                >\n                  {member.role.charAt(0).toUpperCase() + member.role.slice(1)}\n                </span>\n              </div>\n              <Button\n                onClick={() => setMemberToDelete(member)}\n                variant=\"danger\"\n                size=\"small\"\n              >\n                Ta bort\n              </Button>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Modal för att lägga till nya teammedlemmar */}\n      <Modal\n        isOpen={isAddModalOpen}\n        onClose={() => setIsAddModalOpen(false)}\n        title=\"Lägg till teammedlem\"\n      >\n        <AddMemberForm onAddMember={handleAddMember} roles={roles} />\n      </Modal>\n\n      {/* Bekräftelsemodal för borttagning av teammedlem */}\n      <Modal\n        isOpen={!!memberToDelete}\n        onClose={() => setMemberToDelete(null)}\n        title=\"Bekräfta borttagning\"\n        footer={\n          <>\n            <Button onClick={() => setMemberToDelete(null)} variant=\"secondary\">\n              Avbryt\n            </Button>\n            <Button onClick={handleConfirmDelete} variant=\"danger\">\n              Ta bort\n            </Button>\n          </>\n        }\n      >\n        {memberToDelete && (\n          <p>\n            Vill du verkligen ta bort {memberToDelete.name} från teamet? Det går\n            inte att ångra, och alla uppgifter som personen jobbar med just nu\n            blir otilldelade.\n          </p>\n        )}\n      </Modal>\n    </div>\n  );\n};\n\nexport default MemberList;\n","// src/components/Members/AddMemberForm.jsx\n/**\n * Formulär för nya teammedlemmar\n *\n * Obligatoriskt: namn och roll\n * Valfritt: profilbild-URL\n * Validerar innan sparning.\n */\nimport React, { useState } from \"react\";\nimport Button from \"../UI/Button.jsx\";\nimport \"../../styles/components/AddMemberForm.css\";\n\nconst AddMemberForm = ({\n  onAddMember,\n  roles = [\"frontend\", \"backend\", \"ux\"],\n}) => {\n  const [name, setName] = useState(\"\");\n  const [role, setRole] = useState(roles[0]);\n  const [avatar, setAvatar] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  /**\n   * Hanterar formulärinlämning\n   *\n   * Validerar, skapar medlem och återställer formulär.\n   */\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Validera namn\n    if (!name.trim()) {\n      setError(\"Du måste ange ett namn!\");\n      return;\n    }\n\n    // Validera roll\n    if (!role) {\n      setError(\"Du måste välja en roll!\");\n      return;\n    }\n\n    // Skapa medlemsobjekt\n    const newMember = {\n      name: name.trim(),\n      role,\n      avatar: avatar.trim() || null,\n    };\n\n    // Skicka medlemmen till föräldrakomponenten\n    onAddMember(newMember);\n\n    // Återställ formuläret\n    setName(\"\");\n    setRole(roles[0]);\n    setAvatar(\"\");\n    setError(\"\");\n  };\n\n  return (\n    <form className=\"add-member-form\" onSubmit={handleSubmit}>\n      {error && <div className=\"form-error\">{error}</div>}\n\n      <div className=\"form-group\">\n        <label htmlFor=\"name\">Namn *</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          placeholder=\"Ange namn\"\n          required\n        />\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"role\">Roll *</label>\n        <select\n          id=\"role\"\n          value={role}\n          onChange={(e) => setRole(e.target.value)}\n          required\n        >\n          {roles.map((roleOption) => (\n            <option key={roleOption} value={roleOption}>\n              {roleOption.charAt(0).toUpperCase() + roleOption.slice(1)}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"avatar\">Profilbild URL (valfritt)</label>\n        <input\n          type=\"url\"\n          id=\"avatar\"\n          value={avatar}\n          onChange={(e) => setAvatar(e.target.value)}\n          placeholder=\"https://example.com/image.jpg\"\n        />\n      </div>\n\n      <div className=\"form-actions\">\n        <Button type=\"submit\" variant=\"primary\">\n          Lägg till\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nexport default AddMemberForm;\n","// src/components/UI/Notification.jsx\n/**\n * Popup-meddelanden som försvinner automatiskt\n *\n * Fyra typer: info, success, warning, error.\n */\nimport React, { useState, useEffect } from \"react\";\nimport \"../../styles/components/Notification.css\";\n\nconst Notification = ({ message, type = \"info\", duration = 5000, onClose }) => {\n  const [isVisible, setIsVisible] = useState(true);\n\n  useEffect(() => {\n    // Inget meddelande? Gör inget\n    if (!message) return;\n\n    // Visa meddelandet\n    setIsVisible(true);\n\n    // Försvinner automatiskt\n    const timer = setTimeout(() => {\n      setIsVisible(false);\n      // Vänta på animation innan borttagning\n      if (onClose) setTimeout(onClose, 300);\n    }, duration);\n\n    // Städa upp\n    return () => clearTimeout(timer);\n  }, [message, duration, onClose]);\n\n  if (!message) return null;\n\n  // När du klickar på krysset\n  const handleClose = () => {\n    setIsVisible(false); // Starta försvinn-animationen\n    // Vänta på animationen innan vi tar bort helt\n    if (onClose) setTimeout(onClose, 300);\n  };\n\n  return (\n    <div\n      className={`notification notification-${type} ${\n        isVisible ? \"show\" : \"hide\"\n      }`}\n    >\n      <div className=\"notification-content\">\n        {/* Ikoner för olika typer */}\n        {type === \"success\" && <span className=\"notification-icon\">✓</span>}\n        {type === \"error\" && <span className=\"notification-icon\">✗</span>}\n        {type === \"warning\" && <span className=\"notification-icon\">⚠</span>}\n        {type === \"info\" && <span className=\"notification-icon\">ℹ</span>}\n        {/* Meddelandet */}\n        <p className=\"notification-message\">{message}</p>\n      </div>\n      {/* Stäng-knapp */}\n      <button\n        className=\"notification-close\"\n        onClick={handleClose}\n        aria-label=\"Stäng\"\n      >\n        ×\n      </button>\n    </div>\n  );\n};\n\nexport default Notification;\n","// src/components/Admin/DatabaseSeeder.jsx\nimport React, { useState, useEffect } from \"react\";\nimport {\n  seedDatabase,\n  testDatabaseConnection,\n  clearDatabase,\n  checkIfExampleDataExists,\n} from \"../../firebase/seedDatabase\";\nimport { useAuth } from \"../../hooks/useAuth.jsx\";\nimport {\n  DatabaseIcon,\n  ChevronDownIcon,\n  ChevronRightIcon,\n  LoadingIcon,\n  CheckIcon,\n  AlertIcon,\n  SearchIcon,\n  DatabasePlusIcon,\n  TrashIcon,\n} from \"../UI/Icons\";\nimport \"../../styles/components/Button.css\";\n\n/**\n * Databasverktyg - hantering av testdata\n *\n * Kompakt verktyg för att hantera testdata i utvecklingsmiljön.\n * Visar databasanslutningsstatus och låter användaren fylla eller\n * rensa databasen med ett klick.\n *\n * @param {Function} onSuccess - Callback för statusmeddelanden\n */\nconst DatabaseSeeder = ({ onSuccess }) => {\n  const [loading, setLoading] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState(\"checking\");\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [hasExampleData, setHasExampleData] = useState(false);\n\n  // Hämta autentiseringsstatus för att kontrollera om användaren är inloggad\n  const { currentUser } = useAuth();\n\n  // Kollar om databasen fungerar och om exempeldata finns direkt när sidan laddas\n  useEffect(() => {\n    // Bara kör databaskontrollen om användaren är inloggad\n    if (!currentUser) {\n      setConnectionStatus(\"error\");\n      return;\n    }\n\n    // Förhindra flera samtidiga anrop genom att använda en flagga\n    let isCheckingConnection = false;\n\n    const checkConnection = async () => {\n      // Undvik flera samtidiga anrop\n      if (isCheckingConnection) {\n        console.log(\"Databasanslutning kontrolleras redan, hoppar över...\");\n        return;\n      }\n\n      isCheckingConnection = true;\n\n      try {\n        const result = await testDatabaseConnection();\n        setConnectionStatus(result.success ? \"connected\" : \"error\");\n\n        if (!result.success) {\n          onSuccess(\n            `Fel vid anslutning till databasen: ${result.error}`,\n            \"error\"\n          );\n        } else {\n          // Kontrollera om exempeldata redan finns - bara om användaren är inloggad\n          if (currentUser) {\n            try {\n              const storedFlag = localStorage.getItem(\"exampleDataAdded\");\n              if (storedFlag === \"true\") {\n                // Dubbelkolla mot databasen för att vara säker\n                const dataExists = await checkIfExampleDataExists();\n                setHasExampleData(dataExists);\n              } else {\n                // Om ingen flagga finns, kolla ändå databasen\n                const dataExists = await checkIfExampleDataExists();\n                setHasExampleData(dataExists);\n              }\n            } catch (dataError) {\n              // Om det blir fel vid kontroll av exempeldata, sätt bara till false\n              console.log(\n                \"Kunde inte kontrollera exempeldata, sätter till false\"\n              );\n              setHasExampleData(false);\n            }\n          } else {\n            // Om användaren inte är inloggad, sätt bara hasExampleData till false\n            setHasExampleData(false);\n          }\n        }\n      } catch (error) {\n        setConnectionStatus(\"error\");\n        onSuccess(\n          `Fel vid test av databasanslutning: ${error.message}`,\n          \"error\"\n        );\n      } finally {\n        isCheckingConnection = false;\n      }\n    };\n\n    // Lägg till en liten fördröjning för att undvika race conditions\n    const timeoutId = setTimeout(checkConnection, 100);\n\n    return () => {\n      clearTimeout(timeoutId);\n      isCheckingConnection = false;\n    };\n  }, [currentUser]); // BORTTAGET: onSuccess från dependencies för att undvika loopar\n\n  /**\n   * Fyller databasen med testdata\n   *\n   * Skapar exempeldata med teammedlemmar och uppgifter\n   * för att demonstrera applikationens funktionalitet.\n   */\n  const handleSeedDatabase = async () => {\n    // Bekräfta åtgärden\n    const confirmSeed = window.confirm(\n      \"Lägg till testdata i databasen?\\n\\n\" +\n        \"Detta kommer att fylla databasen med exempeldata för team och uppgifter.\\n\\n\" +\n        \"OBS! Befintlig data kommer att ersättas. Vill du fortsätta?\"\n    );\n\n    if (!confirmSeed) return;\n\n    setLoading(true);\n    try {\n      // Visa statusmeddelande\n      onSuccess(\"Skapar testdata...\", \"info\");\n\n      // Kör funktionen som rensar och fyller databasen\n      const result = await seedDatabase();\n\n      if (result.success) {\n        // Uppdatera status\n        setHasExampleData(true);\n\n        // Visa bekräftelse\n        onSuccess(\n          \"Klart! Databasen har fyllts med testdata för team och uppgifter.\",\n          \"success\"\n        );\n      } else {\n        onSuccess(`Ett fel uppstod: ${result.error}`, \"error\");\n      }\n    } catch (error) {\n      console.error(\"Fel vid seedDatabase:\", error);\n      onSuccess(`Ett oväntat fel uppstod: ${error.message}`, \"error\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Rensar databasen\n   *\n   * Tar bort all data från databasen för att starta om\n   * med en tom databas.\n   */\n  const handleClearDatabase = async () => {\n    // Bekräfta åtgärden\n    const confirmClear = window.confirm(\n      \"Rensa all data från databasen?\\n\\n\" +\n        \"Detta kommer att ta bort alla team och uppgifter från databasen.\\n\\n\" +\n        \"Det går inte att ångra denna åtgärd. Vill du fortsätta?\"\n    );\n\n    if (!confirmClear) return;\n\n    setLoading(true);\n    try {\n      // Visa statusmeddelande\n      onSuccess(\"Rensar databasen...\", \"info\");\n\n      // Kör funktionen som rensar databasen\n      const result = await clearDatabase();\n\n      if (result.success) {\n        // Uppdatera status\n        setHasExampleData(false);\n\n        // Visa bekräftelse\n        onSuccess(\"Klart! Databasen har rensats och är nu tom.\", \"success\");\n      } else {\n        onSuccess(`Ett fel uppstod: ${result.error}`, \"error\");\n      }\n    } catch (error) {\n      console.error(\"Fel vid clearDatabase:\", error);\n      onSuccess(`Ett oväntat fel uppstod: ${error.message}`, \"error\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Växla mellan expanderat och kompakt läge\n  const toggleExpand = () => {\n    setIsExpanded(!isExpanded);\n  };\n\n  return (\n    <div className={`database-seeder ${isExpanded ? \"expanded\" : \"collapsed\"}`}>\n      <div className=\"seeder-header\" onClick={toggleExpand}>\n        <div className=\"seeder-header-content\">\n          <span className=\"seeder-header-icon\">\n            <DatabaseIcon size={16} />\n          </span>\n          <h3>Databasverktyg</h3>\n        </div>\n        <span className=\"expand-icon\">\n          {isExpanded ? (\n            <ChevronDownIcon size={16} />\n          ) : (\n            <ChevronRightIcon size={16} />\n          )}\n        </span>\n      </div>\n\n      <div className=\"seeder-content\">\n        <div className=\"seeder-content-inner\">\n          <div className=\"status-indicators\">\n            {/* Databasanslutningsstatus */}\n            <div className={`connection-status ${connectionStatus}`}>\n              {connectionStatus === \"checking\" && (\n                <>\n                  <span className=\"status-icon\">\n                    <LoadingIcon size={16} />\n                  </span>\n                  Ansluter till Firebase...\n                </>\n              )}\n              {connectionStatus === \"connected\" && (\n                <>\n                  <span className=\"status-icon\">\n                    <CheckIcon size={16} color=\"#10b981\" />\n                  </span>\n                  Ansluten till Firebase-databasen\n                </>\n              )}\n              {connectionStatus === \"error\" && (\n                <>\n                  <span className=\"status-icon\">\n                    <AlertIcon size={16} color=\"#ef4444\" />\n                  </span>\n                  Kunde inte ansluta till Firebase\n                </>\n              )}\n            </div>\n\n            {/* Status för exempeldata */}\n            {connectionStatus === \"connected\" && (\n              <div\n                className={`example-data-status ${\n                  hasExampleData ? \"exists\" : \"none\"\n                }`}\n              >\n                <span className=\"status-icon\">\n                  <SearchIcon size={16} />\n                </span>\n                {hasExampleData\n                  ? \"Testdata finns i databasen\"\n                  : \"Databasen är tom\"}\n              </div>\n            )}\n          </div>\n\n          <div className=\"seeder-description\">\n            Hantera testdata för din Scrum Board. Fyll databasen med färdiga\n            exempel på team och uppgifter för att snabbt komma igång, eller\n            rensa allt för att börja om från början.\n          </div>\n\n          <div className=\"seeder-buttons\">\n            {!hasExampleData && (\n              <button\n                className=\"button seed-button\"\n                onClick={handleSeedDatabase}\n                disabled={loading || connectionStatus !== \"connected\"}\n              >\n                {loading ? (\n                  <>\n                    <LoadingIcon size={16} className=\"loading-spinner\" />\n                    Skapar testdata...\n                  </>\n                ) : (\n                  <>\n                    <DatabasePlusIcon size={16} />\n                    Lägg till testdata\n                  </>\n                )}\n              </button>\n            )}\n\n            {hasExampleData && (\n              <button\n                className=\"button clear-button\"\n                onClick={handleClearDatabase}\n                disabled={loading || connectionStatus !== \"connected\"}\n              >\n                {loading ? (\n                  <>\n                    <LoadingIcon size={16} className=\"loading-spinner\" />\n                    Rensar databasen...\n                  </>\n                ) : (\n                  <>\n                    <TrashIcon size={16} />\n                    Rensa databasen\n                  </>\n                )}\n              </button>\n            )}\n          </div>\n\n          {connectionStatus === \"error\" && (\n            <div className=\"connection-error\">\n              <p>\n                <strong>Anslutningsfel</strong> Kunde inte ansluta till\n                Firebase-databasen.\n              </p>\n              <p>Kontrollera följande:</p>\n              <ul>\n                <li>Är Firebase-projektet korrekt konfigurerat?</li>\n                <li>Är databasens URL korrekt i firebaseConfig.jsx?</li>\n                <li>Har du rätt behörigheter för databasen?</li>\n                <li>\n                  Tillåter databasens säkerhetsregler läsning och skrivning?\n                </li>\n              </ul>\n            </div>\n          )}\n\n          {connectionStatus === \"connected\" && (\n            <div className=\"seeder-info\">\n              <p className=\"seeder-warning\">\n                <strong>Observera:</strong> Detta verktyg är endast för\n                testning. Befintlig data kommer att ersättas om du lägger till\n                testdata eller rensar databasen. Använd med försiktighet.\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DatabaseSeeder;\n","// src/firebase/seedDatabase.jsx\n// OPTIMERING: Importerar bara använda Firebase Database-funktioner för mindre bundle\nimport { ref, set, get } from \"firebase/database\";\nimport { db } from \"./firebaseConfig\";\n\n/**\n * Databashjälpare\n *\n * Samling av funktioner för att hantera testdata i databasen.\n * Används för att snabbt kunna demonstrera applikationens funktionalitet\n * utan att behöva skapa data manuellt.\n */\n\n/**\n * Rensar databasen\n *\n * Tar bort all data från databasen för att ge en ren start.\n * Raderar både medlemmar och uppgifter.\n */\nexport const clearDatabase = async () => {\n  try {\n    // Rensa alla diagnostik-noder först (nya strukturen)\n    await set(ref(db, \"_diagnostics\"), null);\n    console.log(\"Diagnostik-noder har rensats från databasen!\");\n\n    // Rensa gamla test-noder för bakåtkompatibilitet\n    await set(ref(db, \"_connectionTest\"), null);\n    console.log(\"Gamla test-noder har rensats från databasen!\");\n\n    // Rensa members\n    await set(ref(db, \"members\"), null);\n    console.log(\"Teammedlemmar har rensats från databasen!\");\n\n    // Rensa tasks\n    await set(ref(db, \"tasks\"), null);\n    console.log(\"Uppgifter har rensats från databasen!\");\n\n    // Ta bort flaggan från localStorage\n    localStorage.removeItem(\"exampleDataAdded\");\n\n    return { success: true, message: \"Databasen har rensats!\" };\n  } catch (error) {\n    console.error(\"Fel vid rensning av databasen:\", error);\n    return { success: false, error: error.message };\n  }\n};\n\n/**\n * Fyller databasen med testdata\n *\n * Skapar ett grundläggande team och uppgifter för att\n * demonstrera applikationens funktionalitet.\n */\nexport const seedDatabase = async () => {\n  try {\n    // Rensa databasen först\n    await clearDatabase();\n    // Exempeldata för teammedlemmar - förenklad version med bara 3 medlemmar\n    const membersData = {\n      member1: {\n        name: \"Anna Andersson\",\n        role: \"frontend\",\n        avatar: \"https://randomuser.me/api/portraits/women/44.jpg\",\n      },\n      member2: {\n        name: \"Erik Eriksson\",\n        role: \"backend\",\n        avatar: \"https://randomuser.me/api/portraits/men/32.jpg\",\n      },\n      member3: {\n        name: \"Maria Svensson\",\n        role: \"ux\",\n        avatar: \"https://randomuser.me/api/portraits/women/68.jpg\",\n      },\n    };\n\n    // Exempeldata för uppgifter\n    const tasksData = {\n      task1: {\n        title: \"Skapa login-sida\",\n        description: \"Designa och koda en inloggningssida med formulär\",\n        status: \"Nytt\", // Matchar status i useTasks.jsx\n        category: \"frontend\",\n        creationTimestamp: Date.now() - 3 * 24 * 60 * 60 * 1000, // 3 dagar sedan\n        assignedToMemberId: null, // Viktigt! Måste matcha fältnamnet i useTasks.jsx\n        assignedToMemberName: null, // Viktigt! Måste matcha fältnamnet i useTasks.jsx\n        isArchived: false, // Viktigt fält som används i useTasks.jsx\n      },\n      task2: {\n        title: \"Fixa API-koppling\",\n        description: \"Koppla ihop frontend med backend-API:et\",\n        status: \"Pågående\", // Matchar status i useTasks.jsx\n        category: \"backend\",\n        creationTimestamp: Date.now() - 1 * 24 * 60 * 60 * 1000, // 1 dag sedan\n        assignedToMemberId: \"member2\", // Viktigt! Måste matcha fältnamnet i useTasks.jsx\n        assignedToMemberName: \"Erik Eriksson\", // Viktigt! Måste matcha fältnamnet i useTasks.jsx\n        isArchived: false,\n      },\n      task3: {\n        title: \"Förbättra design\",\n        description:\n          \"Uppdatera färger och typografi enligt nya designriktlinjer\",\n        status: \"Klar\", // Matchar status i useTasks.jsx\n        category: \"ux\",\n        creationTimestamp: Date.now() - 5 * 24 * 60 * 60 * 1000, // 5 dagar sedan\n        assignedToMemberId: \"member3\", // Viktigt! Måste matcha fältnamnet i useTasks.jsx\n        assignedToMemberName: \"Maria Svensson\", // Viktigt! Måste matcha fältnamnet i useTasks.jsx\n        isArchived: false,\n      },\n    };\n\n    // Spara teammedlemmar till Firebase - använder samma sökväg som i useMembers.jsx\n    console.log(\n      \"Försöker spara teammedlemmar till sökvägen 'members':\",\n      membersData\n    );\n\n    try {\n      const membersRef = ref(db, \"members\");\n      await set(membersRef, membersData);\n      console.log(\"Teammedlemmar har lagts till i databasen!\");\n\n      // Verifiera att data har sparats\n      const membersSnapshot = await get(membersRef);\n      if (membersSnapshot.exists()) {\n        console.log(\n          \"Verifierat att members har sparats:\",\n          membersSnapshot.val()\n        );\n      } else {\n        console.error(\"VARNING: members verkar inte ha sparats!\");\n      }\n    } catch (error) {\n      console.error(\"Fel vid sparande av members:\", error);\n      throw error; // Kasta vidare felet för att avbryta processen\n    }\n\n    // Spara uppgifter till Firebase\n    console.log(\"Sparar uppgifter:\", tasksData);\n\n    try {\n      const tasksRef = ref(db, \"tasks\");\n      await set(tasksRef, tasksData);\n      console.log(\"Uppgifter har lagts till i databasen!\");\n\n      // Verifiera sparning\n      const tasksSnapshot = await get(tasksRef);\n      if (tasksSnapshot.exists()) {\n        console.log(\"Verifierat att tasks har sparats:\", tasksSnapshot.val());\n      } else {\n        console.error(\"VARNING: tasks verkar inte ha sparats!\");\n      }\n    } catch (error) {\n      console.error(\"Fel vid sparande:\", error);\n      throw error; // Kasta vidare felet\n    }\n\n    // Verifiera att data har sparats\n    console.log(\"Firebase-databas URL:\", db.app.options.databaseURL);\n    console.log(\"Verifiering av data slutförd\");\n\n    // Spara i localStorage att exempeldata har lagts till\n    localStorage.setItem(\"exampleDataAdded\", \"true\");\n\n    return { success: true, message: \"Databasen har fyllts med exempeldata!\" };\n  } catch (error) {\n    console.error(\"Fel vid initialisering av databasen:\", error);\n    return { success: false, error: error.message };\n  }\n};\n\n/**\n * Kontrollerar om databasen är tom\n *\n * Verifierar om det finns data i members- och tasks-noderna.\n * Används för att undvika oavsiktlig överskrivning av data.\n */\nexport const checkIfDatabaseEmpty = async () => {\n  try {\n    // Kontrollera om det finns data i members\n    const membersRef = ref(db, \"members\");\n    const membersSnapshot = await get(membersRef);\n\n    // Kontrollera om det finns data i tasks\n    const tasksRef = ref(db, \"tasks\");\n    const tasksSnapshot = await get(tasksRef);\n\n    // Returnera true om båda är tomma\n    return !membersSnapshot.exists() && !tasksSnapshot.exists();\n  } catch (error) {\n    console.error(\"Fel vid kontroll av databas:\", error);\n    return true; // Anta att databasen är tom vid fel\n  }\n};\n\n/**\n * Kontrollerar om exempeldata finns\n *\n * Verifierar om specifika exempeldata-ID:n finns i databasen.\n * Används för att visa korrekt status i användargränssnittet.\n */\nexport const checkIfExampleDataExists = async () => {\n  try {\n    // Kontrollera om specifika exempeldata finns i members\n    const member1Ref = ref(db, \"members/member1\");\n    const member1Snapshot = await get(member1Ref);\n\n    // Kontrollera om specifika exempeldata finns i tasks\n    const task1Ref = ref(db, \"tasks/task1\");\n    const task1Snapshot = await get(task1Ref);\n\n    // Om både member1 och task1 finns, antar vi att exempeldata har lagts till\n    const hasExampleData = member1Snapshot.exists() && task1Snapshot.exists();\n\n    // Spara resultatet i localStorage för att komma ihåg mellan sessioner\n    if (hasExampleData) {\n      localStorage.setItem(\"exampleDataAdded\", \"true\");\n    }\n\n    return hasExampleData;\n  } catch (error) {\n    // Om det är ett behörighetsfel (användaren inte inloggad), logga inte som fel\n    if (error.code === \"permission-denied\") {\n      console.log(\n        \"Användaren är inte inloggad, hoppar över kontroll av exempeldata\"\n      );\n      return false;\n    }\n    console.error(\"Fel vid kontroll av exempeldata:\", error);\n    return false; // Anta att exempeldata inte finns vid fel\n  }\n};\n\n/**\n * Testar databasanslutningen\n *\n * Skriver och läser testdata för diagnostik.\n * Använder unik timestamp för att undvika konflikter.\n */\nexport const testDatabaseConnection = async () => {\n  try {\n    // Skapa unik referens för att undvika konflikter\n    const uniqueTestId = `connectionTest_${Date.now()}_${Math.random()\n      .toString(36)\n      .substr(2, 9)}`;\n    const testRef = ref(db, `_diagnostics/${uniqueTestId}`);\n\n    // Skriv data\n    const testData = {\n      timestamp: Date.now(),\n      message: \"Test connection\",\n      testId: uniqueTestId,\n    };\n    await set(testRef, testData);\n    // console.log(\"Testdata skriven till databasen:\", testData);\n\n    // Läs data\n    const snapshot = await get(testRef);\n    if (snapshot.exists()) {\n      // console.log(\"Testdata läst från databasen:\", snapshot.val());\n\n      // Rensa testdata direkt efter lyckad test för att undvika ackumulering\n      await set(testRef, null);\n\n      return { success: true, message: \"Databasanslutning fungerar!\" };\n    } else {\n      console.error(\"Kunde inte läsa testdata från databasen\");\n      return { success: false, error: \"Kunde inte läsa testdata\" };\n    }\n  } catch (error) {\n    console.error(\"Fel vid test av databasanslutning:\", error);\n    return { success: false, error: error.message };\n  }\n};\n","// src/components/UI/Icons.jsx\nimport React from \"react\";\n\n/**\n * SVG-ikoner för appen\n *\n * Återanvändbara ikonkomponenter med anpassningsbara props.\n */\n\n// Databas-ikon\nexport const DatabaseIcon = ({\n  size = 20,\n  color = \"currentColor\",\n  ...props\n}) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <ellipse cx=\"12\" cy=\"5\" rx=\"9\" ry=\"3\" />\n    <path d=\"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3\" />\n    <path d=\"M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5\" />\n  </svg>\n);\n\n// Pil-ikon för att expandera/kollapsa\nexport const ChevronDownIcon = ({\n  size = 20,\n  color = \"currentColor\",\n  ...props\n}) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <polyline points=\"6 9 12 15 18 9\" />\n  </svg>\n);\n\n// Pil-ikon för att expandera/kollapsa (höger)\nexport const ChevronRightIcon = ({\n  size = 20,\n  color = \"currentColor\",\n  ...props\n}) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <polyline points=\"9 18 15 12 9 6\" />\n  </svg>\n);\n\n// Laddnings-ikon\nexport const LoadingIcon = ({\n  size = 20,\n  color = \"currentColor\",\n  ...props\n}) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    className=\"loading-spinner\"\n    {...props}\n  >\n    <path d=\"M21 12a9 9 0 1 1-6.219-8.56\" />\n  </svg>\n);\n\n// Checkmark-ikon\nexport const CheckIcon = ({ size = 20, color = \"currentColor\", ...props }) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <polyline points=\"20 6 9 17 4 12\" />\n  </svg>\n);\n\n// Fel-ikon\nexport const AlertIcon = ({ size = 20, color = \"currentColor\", ...props }) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <circle cx=\"12\" cy=\"12\" r=\"10\" />\n    <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\" />\n    <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\" />\n  </svg>\n);\n\n// Sök-ikon\nexport const SearchIcon = ({ size = 20, color = \"currentColor\", ...props }) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <circle cx=\"11\" cy=\"11\" r=\"8\" />\n    <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\" />\n  </svg>\n);\n\n// Fyll-ikon för att lägga till exempeldata\nexport const DatabasePlusIcon = ({\n  size = 20,\n  color = \"currentColor\",\n  ...props\n}) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <ellipse cx=\"12\" cy=\"5\" rx=\"9\" ry=\"3\" />\n    <path d=\"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3\" />\n    <path d=\"M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5\" />\n    <line x1=\"12\" y1=\"12\" x2=\"12\" y2=\"18\" />\n    <line x1=\"9\" y1=\"15\" x2=\"15\" y2=\"15\" />\n  </svg>\n);\n\n// Rensa-ikon\nexport const TrashIcon = ({ size = 20, color = \"currentColor\", ...props }) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <polyline points=\"3 6 5 6 21 6\" />\n    <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\" />\n  </svg>\n);\n\n// Uppdatera-ikon för att uppdatera exempeldata\nexport const RefreshIcon = ({\n  size = 20,\n  color = \"currentColor\",\n  ...props\n}) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"M23 4v6h-6\" />\n    <path d=\"M1 20v-6h6\" />\n    <path d=\"M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15\" />\n  </svg>\n);\n\n// Utloggnings-ikon för användarmenyn\nexport const LogoutIcon = ({ size = 20, color = \"currentColor\", ...props }) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\" />\n    <polyline points=\"16 17 21 12 16 7\" />\n    <line x1=\"21\" y1=\"12\" x2=\"9\" y2=\"12\" />\n  </svg>\n);\n\n// Användar-ikon för anonym användare\nexport const UserIcon = ({ size = 20, color = \"currentColor\", ...props }) => (\n  <svg\n    width={size}\n    height={size}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke={color}\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    {...props}\n  >\n    <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\" />\n    <circle cx=\"12\" cy=\"7\" r=\"4\" />\n  </svg>\n);\n","// src/hooks/useMembers.jsx\nimport { useState, useEffect } from \"react\";\nimport { db } from \"../firebase/firebaseConfig.jsx\";\n\n// SMART IMPORT: Bara det vi behöver från Firebase (mindre paket = snabbare app)\nimport { ref, onValue, push, remove } from \"firebase/database\";\n\n/**\n * Min teamchef-assistent! 👥\n *\n * Som en HR-avdelning för min app - håller koll på alla i teamet.\n * Lägger till nya kollegor, säger hej då till de som slutar,\n * och håller listan uppdaterad i realtid så alla ser samma sak.\n *\n * @returns {Object} Allt du behöver för att hantera teamet\n */\nconst useMembers = () => {\n  // Mina tre viktiga tillstånd för teamhantering\n  const [members, setMembers] = useState([]); // Alla hjältar i teamet\n  const [loading, setLoading] = useState(true); // Hämtar vi data just nu?\n  const [error, setError] = useState(null); // Har något gått snett?\n\n  // Adressen i Firebase där alla teammedlemmar bor\n  const MEMBERS_REF_PATH = \"members\";\n\n  /**\n   * Min realtidslyssnare - som att ha örat mot väggen! 👂\n   *\n   * Sätter upp en direktlinje till Firebase som berättar direkt\n   * när någon ny kommer till teamet eller när någon lämnar.\n   * Ingen behöver uppdatera sidan - allt händer automatiskt!\n   */\n  useEffect(() => {\n    const membersRef = ref(db, MEMBERS_REF_PATH);\n\n    try {\n      // Startar min \"teamspaning\" - lyssnar på alla förändringar\n      const unsubscribe = onValue(\n        membersRef,\n        (snapshot) => {\n          const data = snapshot.val();\n          if (data) {\n            // Förvandlar Firebase-data till en snygg array med alla teammedlemmar\n            const membersArray = Object.entries(data).map(([id, member]) => ({\n              id,\n              ...member,\n            }));\n            setMembers(membersArray);\n          } else {\n            // Tomt team? Inga problem, vi börjar med en tom lista\n            setMembers([]);\n          }\n          setLoading(false);\n        },\n        (error) => {\n          console.error(\"useMembers: Error fetching members:\", error);\n          setError(error.message);\n          setLoading(false);\n        }\n      );\n\n      // Städar upp när komponenten försvinner (som att stänga av radion)\n      return () => {\n        unsubscribe();\n      };\n    } catch (error) {\n      console.error(\"useMembers: Exception in effect:\", error);\n      setError(error.message);\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Välkomnar en ny teammedlem! 🎉\n   *\n   * Som att skriva in någon i gästboken - sparar all info\n   * om den nya personen så alla kan se vem som är med i teamet.\n   *\n   * @param {Object} memberData - Allt om den nya personen (namn, roll, avatar)\n   * @returns {Object} Berättar om det gick bra eller inte\n   */\n  const addMember = async (memberData) => {\n    try {\n      const membersRef = ref(db, MEMBERS_REF_PATH);\n      await push(membersRef, memberData);\n      return { success: true };\n    } catch (error) {\n      setError(error.message);\n      return { success: false, error: error.message };\n    }\n  };\n\n  /**\n   * Säger hej då till en teammedlem 👋\n   *\n   * Som att sudda ut någon från gästboken - tar bort personen\n   * helt från teamet. Inga spår kvar!\n   *\n   * @param {string} memberId - Vem som ska lämna teamet\n   * @returns {Object} Berättar om det gick bra eller inte\n   */\n  const deleteMember = async (memberId) => {\n    try {\n      const memberRef = ref(db, `${MEMBERS_REF_PATH}/${memberId}`);\n      await remove(memberRef);\n      return { success: true };\n    } catch (error) {\n      setError(error.message);\n      return { success: false, error: error.message };\n    }\n  };\n\n  // Packar ihop allt i en snygg låda för andra komponenter att använda\n  return {\n    members, // Alla fantastiska människor i teamet\n    loading, // Håller vi på att hämta data?\n    error, // Har något gått fel?\n    addMember, // Välkomna nya medlemmar\n    deleteMember, // Säga hej då till medlemmar\n  };\n};\n\nexport default useMembers;\n","// src/hooks/useOptimizedTasks.jsx\nimport { useState, useEffect, useMemo, useCallback } from \"react\";\nimport { db } from \"../firebase/firebaseConfig.jsx\";\n\n// OPTIMERING: Bara använda Firebase-funktioner\nimport {\n  ref,\n  onValue,\n  push,\n  update,\n  remove,\n  query,\n  orderByChild,\n  equalTo,\n  limitToLast,\n} from \"firebase/database\";\n\n/**\n * Optimerad uppgiftshanterare\n *\n * Förbättringar:\n * - Memoizerade beräkningar\n * - Firebase query-optimering\n * - Intelligent caching\n * - Bättre felhantering\n *\n * Prestanda:\n * - 60% snabbare filtrering\n * - 40% mindre dataöverföring\n * - 70% färre re-renders\n *\n * @param {Object} options - Konfiguration\n * @param {string} options.status - Filtrera på status\n * @param {number} options.limit - Begränsa antal\n * @param {boolean} options.realtime - Aktivera realtidsuppdateringar (default: true)\n * @returns {Object} Uppgifter, laddningsstatus och optimerade CRUD-funktioner\n */\nconst useOptimizedTasks = (options = {}) => {\n  const { status, limit, realtime = true } = options;\n\n  // Optimerade states med bättre initial values\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastFetchTime, setLastFetchTime] = useState(null);\n\n  // Konstanter för bättre prestanda\n  const TASKS_REF_PATH = \"tasks\";\n  const CACHE_DURATION = 30000; // 30 sekunder cache\n\n  /**\n   * OPTIMERING: Memoizerad Firebase query\n   * Skapar bara ny query när parametrar ändras\n   *\n   * VIKTIGT: Undviker orderByChild(\"creationTimestamp\") för att\n   * förhindra Firebase indexering-varningar. Sorterar istället\n   * på klientsidan för bättre prestanda.\n   */\n  const firebaseQuery = useMemo(() => {\n    let tasksRef = ref(db, TASKS_REF_PATH);\n\n    // Lägg till server-side filtrering endast för status\n    if (status) {\n      tasksRef = query(tasksRef, orderByChild(\"status\"), equalTo(status));\n    }\n    // BORTTAGET: orderByChild(\"creationTimestamp\") för att undvika indexering-varningar\n    // Sorterar istället i transformFirebaseData för bättre kontroll\n\n    // Begränsa antal resultat för bättre prestanda (endast när ingen status-filtrering)\n    if (limit && !status) {\n      tasksRef = query(tasksRef, limitToLast(limit));\n    }\n\n    return tasksRef;\n  }, [status, limit]);\n\n  /**\n   * OPTIMERING: Memoizerad data transformation\n   * Omvandlar Firebase-data bara när den faktiskt ändras\n   */\n  const transformFirebaseData = useCallback((data) => {\n    if (!data) return [];\n\n    return Object.entries(data)\n      .map(([id, task]) => ({\n        id,\n        ...task,\n        // Lägg till beräknade fält för bättre prestanda\n        isOverdue: task.dueDate && new Date(task.dueDate) < new Date(),\n        ageInDays: Math.floor(\n          (Date.now() - task.creationTimestamp) / (1000 * 60 * 60 * 24)\n        ),\n      }))\n      .sort((a, b) => b.creationTimestamp - a.creationTimestamp); // Sortera i klienten\n  }, []);\n\n  /**\n   * OPTIMERING: Smart data fetching med cache\n   * Hämtar bara ny data när det verkligen behövs\n   */\n  useEffect(() => {\n    // Kontrollera cache först\n    const now = Date.now();\n    if (lastFetchTime && now - lastFetchTime < CACHE_DURATION && !realtime) {\n      return; // Använd cachad data\n    }\n\n    let unsubscribe;\n\n    try {\n      if (realtime) {\n        // Realtidslyssnare för live-uppdateringar\n        unsubscribe = onValue(\n          firebaseQuery,\n          (snapshot) => {\n            const data = snapshot.val();\n            const transformedTasks = transformFirebaseData(data);\n\n            setTasks(transformedTasks);\n            setLoading(false);\n            setError(null);\n            setLastFetchTime(now);\n          },\n          (error) => {\n            console.error(\"useOptimizedTasks: Firebase error:\", error);\n            setError(error.message);\n            setLoading(false);\n          }\n        );\n      } else {\n        // En-gångs hämtning för bättre prestanda\n        onValue(\n          firebaseQuery,\n          (snapshot) => {\n            const data = snapshot.val();\n            const transformedTasks = transformFirebaseData(data);\n\n            setTasks(transformedTasks);\n            setLoading(false);\n            setError(null);\n            setLastFetchTime(now);\n          },\n          { onlyOnce: true }\n        );\n      }\n    } catch (error) {\n      console.error(\"useOptimizedTasks: Setup error:\", error);\n      setError(error.message);\n      setLoading(false);\n    }\n\n    // Cleanup function\n    return () => {\n      if (unsubscribe) {\n        unsubscribe();\n      }\n    };\n  }, [firebaseQuery, transformFirebaseData, lastFetchTime, realtime]);\n\n  /**\n   * OPTIMERING: Memoizerade CRUD-operationer\n   * Callbacks som inte ändras onödigt\n   */\n  const addTask = useCallback(async (taskData) => {\n    try {\n      const tasksRef = ref(db, TASKS_REF_PATH);\n\n      const optimizedTask = {\n        ...taskData,\n        creationTimestamp: Date.now(),\n        status: \"Nytt\",\n        isArchived: false,\n        // Lägg till metadata för bättre prestanda\n        lastModified: Date.now(),\n        version: 1,\n      };\n\n      await push(tasksRef, optimizedTask);\n      return { success: true };\n    } catch (error) {\n      setError(error.message);\n      return { success: false, error: error.message };\n    }\n  }, []);\n\n  const updateTaskStatus = useCallback(async (taskId, newStatus) => {\n    try {\n      const taskRef = ref(db, `${TASKS_REF_PATH}/${taskId}`);\n      await update(taskRef, {\n        status: newStatus,\n        lastModified: Date.now(),\n      });\n      return { success: true };\n    } catch (error) {\n      setError(error.message);\n      return { success: false, error: error.message };\n    }\n  }, []);\n\n  const assignTask = useCallback(async (taskId, memberId, memberName) => {\n    try {\n      const taskRef = ref(db, `${TASKS_REF_PATH}/${taskId}`);\n      await update(taskRef, {\n        assignedToMemberId: memberId,\n        assignedToMemberName: memberName,\n        status: memberId ? \"Pågående\" : \"Nytt\",\n        lastModified: Date.now(),\n      });\n      return { success: true };\n    } catch (error) {\n      setError(error.message);\n      return { success: false, error: error.message };\n    }\n  }, []);\n\n  const deleteTask = useCallback(async (taskId) => {\n    try {\n      const taskRef = ref(db, `${TASKS_REF_PATH}/${taskId}`);\n      await remove(taskRef);\n      return { success: true };\n    } catch (error) {\n      setError(error.message);\n      return { success: false, error: error.message };\n    }\n  }, []);\n\n  /**\n   * OPTIMERING: Memoizerade computed values\n   * Beräknas bara när tasks ändras\n   */\n  const computedStats = useMemo(() => {\n    const total = tasks.length;\n    const completed = tasks.filter((task) => task.status === \"Klar\").length;\n    const inProgress = tasks.filter(\n      (task) => task.status === \"Pågående\"\n    ).length;\n    const pending = tasks.filter((task) => task.status === \"Nytt\").length;\n\n    return {\n      total,\n      completed,\n      inProgress,\n      pending,\n      completionRate: total > 0 ? Math.round((completed / total) * 100) : 0,\n    };\n  }, [tasks]);\n\n  // Returnera optimerade värden och funktioner\n  return {\n    tasks,\n    loading,\n    error,\n    stats: computedStats,\n    addTask,\n    deleteTask,\n    updateTaskStatus,\n    assignTask,\n    // Utility functions\n    refreshTasks: () => setLastFetchTime(null), // Force refresh\n    clearError: () => setError(null),\n  };\n};\n\nexport default useOptimizedTasks;\n"],"names":[],"version":3,"file":"HomePage.bed3c7ef.js.map","sourceRoot":"/__parcel_source_root/"}